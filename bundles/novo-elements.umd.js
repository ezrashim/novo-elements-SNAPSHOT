(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('brace/index'), require('brace/theme/chrome'), require('brace/mode/javascript'), require('brace/ext/language_tools.js'), require('date-fns'), require('@angular/platform-browser'), require('rxjs/Observable'), require('rxjs/add/observable/fromPromise'), require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('rxjs/observable/merge'), require('rxjs/observable/fromEvent'), require('rxjs/observable/of'), require('rxjs/operators/filter'), require('@angular/cdk/coercion'), require('rxjs/add/observable/fromEvent'), require('rxjs/add/operator/debounceTime'), require('rxjs/add/operator/distinctUntilChanged'), require('@angular/cdk/keycodes'), require('@bullhorn/dragula'), require('rxjs/ReplaySubject'), require('angular2-text-mask'), require('@angular/animations'), require('@angular/http'), require('rxjs/add/operator/map'), require('@angular/cdk/table'), require('rxjs/add/observable/of'), require('rxjs/Subject'), require('rxjs/add/operator/switchMap'), require('rxjs/add/operator/startWith'), require('rxjs/add/observable/merge'), require('rxjs/add/operator/catch'), require('rxjs/add/operator/toPromise')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/forms', 'brace/index', 'brace/theme/chrome', 'brace/mode/javascript', 'brace/ext/language_tools.js', 'date-fns', '@angular/platform-browser', 'rxjs/Observable', 'rxjs/add/observable/fromPromise', '@angular/cdk/overlay', '@angular/cdk/portal', 'rxjs/observable/merge', 'rxjs/observable/fromEvent', 'rxjs/observable/of', 'rxjs/operators/filter', '@angular/cdk/coercion', 'rxjs/add/observable/fromEvent', 'rxjs/add/operator/debounceTime', 'rxjs/add/operator/distinctUntilChanged', '@angular/cdk/keycodes', '@bullhorn/dragula', 'rxjs/ReplaySubject', 'angular2-text-mask', '@angular/animations', '@angular/http', 'rxjs/add/operator/map', '@angular/cdk/table', 'rxjs/add/observable/of', 'rxjs/Subject', 'rxjs/add/operator/switchMap', 'rxjs/add/operator/startWith', 'rxjs/add/observable/merge', 'rxjs/add/operator/catch', 'rxjs/add/operator/toPromise'], factory) :
	(factory((global['novo-elements'] = {}),global.ng.core,global.ng.common,global.ng.forms,global.Brace.Core,global.Brace.Chrome,global.Brace.JS,global.Brace.Tools,global.DateFNS,global.ng.platformBrowser,global.Rx,global.Rx.Observable,global.ng.cdk.overlay,global.ng.cdk.portal,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable,global.ng.cdk.coercion,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.ng.cdk.keycodes,global.dragula,global.Rx,global.ng.text,global.ng.animations,global.ng.http,global.Rx.Observable.prototype,global.ng.cdk.table,global.Rx.Observable,global.Rx));
}(this, (function (exports,core,common,forms,index,chrome,javascript,language_tools_js,dateFns,platformBrowser,Observable,fromPromise,overlay,portal,merge,fromEvent,of,filter,coercion,fromEvent$2,debounceTime,distinctUntilChanged,keycodes,dragulaImported,ReplaySubject,angular2TextMask,animations,http,map,table,of$2,Subject) { 'use strict';

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Helpers = /** @class */ (function () {
    function Helpers() {
    }
    /**
     * Swallows an event to stop further execution
     * @param {?} event
     * @return {?}
     */
    Helpers.swallowEvent = function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
    };
    /**
     * Interpolates a string with vars passed to it
     * @param {?} str
     * @param {?} props
     * @return {?}
     */
    Helpers.interpolate = function (str, props) {
        return str.replace(/\$([\w\.]+)/g, function (original, key) {
            var /** @type {?} */ keys = key.split('.');
            var /** @type {?} */ value = props[keys.shift()];
            while (keys.length && value !== undefined) {
                var /** @type {?} */ k = keys.shift();
                value = k ? value[k] : value + ".";
            }
            return value !== undefined ? value : '';
        });
    };
    /**
     * Verifies that an object has every property expected by a string to interpolate
     * @param {?} str
     * @param {?} props
     * @return {?}
     */
    Helpers.validateInterpolationProps = function (str, props) {
        var /** @type {?} */ keys = str.match(/\$([\w\.]+)/g);
        return keys.every(function (key) {
            return props.hasOwnProperty(key.substr(1));
        });
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Helpers.isObject = function (item) {
        return item && typeof item === 'object' && !Array.isArray(item) && item !== null;
    };
    /**
     * Checks to see if the object is a string
     * @param {?} obj
     * @return {?}
     */
    Helpers.isString = function (obj) {
        return typeof obj === 'string';
    };
    /**
     * Checks to see if the object is a undefined or null
     * @param {?} obj
     * @return {?}
     */
    Helpers.isBlank = function (obj) {
        return obj === undefined || obj === null;
    };
    /**
     * Checks to see if the object is a undefined or null
     * @param {?} obj
     * @return {?}
     */
    Helpers.isEmpty = function (obj) {
        return Helpers.isBlank(obj) || obj === '' || (Array.isArray(obj) && obj.length === 0);
    };
    /**
     * Checks to see if the object is a function
     * @param {?} obj
     * @return {?}
     */
    Helpers.isFunction = function (obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
    };
    /**
     * Checks to see if the object is a Date
     * @param {?} obj
     * @return {?}
     */
    Helpers.isDate = function (obj) {
        return obj instanceof Date;
    };
    /**
     * @param {?} fields
     * @param {?=} reverse
     * @return {?}
     */
    Helpers.sortByField = function (fields, reverse) {
        if (reverse === void 0) { reverse = false; }
        return function (previous, current) {
            if (Helpers.isFunction(fields)) {
                return fields(reverse ? 'desc' : 'asc', previous, current);
            }
            if (!Array.isArray(fields)) {
                fields = [fields];
            }
            for (var /** @type {?} */ i = 0; i < fields.length; i++) {
                var /** @type {?} */ field = fields[i];
                var /** @type {?} */ first_1 = previous[field] || '';
                var /** @type {?} */ second = current[field] || '';
                if (Helpers.isDate(first_1) && Helpers.isDate(second)) {
                    // Dates
                    first_1 = first_1.getTime();
                    second = second.getTime();
                }
                else if (Helpers.isString(first_1) && Helpers.isString(second)) {
                    // Basic strings
                    first_1 = first_1.toLowerCase();
                    second = second.toLowerCase();
                }
                else {
                    // Numbers
                    first_1 = isNaN(Number(first_1)) ? first_1 : Number(first_1);
                    second = isNaN(Number(second)) ? second : Number(second);
                }
                if (first_1 > second) {
                    return reverse ? -1 : 1;
                }
                else if (first_1 < second) {
                    return reverse ? 1 : -1;
                }
            }
            return 0;
        };
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    Helpers.filterByField = function (key, value) {
        return function (item) {
            var /** @type {?} */ results = [];
            var /** @type {?} */ field = can(item).have(key);
            if (value instanceof Function) {
                results.push(value(field, item));
            }
            else if (Array.isArray(value)) {
                results.push(value.includes(field));
            }
            else if (value instanceof Object) {
                if (field instanceof Date) {
                    field = field.getTime();
                }
                if (value.min) {
                    results.push(field > value.min);
                }
                if (value.max) {
                    results.push(field < value.max);
                }
                if (value.any && Array.isArray(value.any)) {
                    if (Array.isArray(field)) {
                        results.push(value.any.some(function (v) { return field.includes(v); }));
                    }
                    else {
                        results.push(value.any.includes(field));
                    }
                }
                if (value.all && Array.isArray(value.all)) {
                    results.push(value.all.every(function (v) { return field.includes(v); }));
                }
                if (value.not) {
                    results.push(!Helpers.filterByField(key, value.not)(item));
                }
                for (var /** @type {?} */ subkey in value) {
                    if (['min', 'max', 'any', 'all', 'not'].indexOf(subkey) < 0) {
                        var /** @type {?} */ subvalue = value[subkey];
                        results.push(Helpers.filterByField(key + "." + subkey, subvalue)(item));
                    }
                }
            }
            else {
                results.push(JSON.stringify(field).match(new RegExp(value, 'gi')));
            }
            return results.every(function (x) { return x; });
        };
    };
    /**
     * @param {?} position
     * @param {?} element
     * @param {?} side
     * @return {?}
     */
    Helpers.calcPositionOffset = function (position, element, side) {
        if (!position) {
            return;
        }
        var /** @type {?} */ supportPageOffset = window.pageXOffset !== undefined;
        var /** @type {?} */ isCSS1Compat = (document.compatMode || '') === 'CSS1Compat';
        var /** @type {?} */ x = supportPageOffset ? window.pageXOffset : isCSS1Compat ? document.documentElement.scrollLeft : document.body.scrollLeft;
        var /** @type {?} */ y = supportPageOffset ? window.pageYOffset : isCSS1Compat ? document.documentElement.scrollTop : document.body.scrollTop;
        var /** @type {?} */ sideOffset = 0;
        if (side === 'right') {
            sideOffset = position.width - element.clientWidth;
        }
        var /** @type {?} */ top = position.top + y + position.height + 10 + "px";
        var /** @type {?} */ left = position.left + x + sideOffset + "px";
        var /** @type {?} */ width = position.width + "px";
        var /** @type {?} */ clientWidth = element.clientWidth, /** @type {?} */ clientHeight = element.clientHeight, /** @type {?} */ marginFromBottom = parseInt(top) + clientHeight, /** @type {?} */ marginFromRight = parseInt(left) + clientWidth, /** @type {?} */ windowScrollHeight = window.innerHeight + window.scrollY, /** @type {?} */ windowScrollWidth = window.innerWidth + window.scrollX;
        // Force open up
        if (marginFromBottom >= windowScrollHeight) {
            top = parseInt(top.replace('px', '')) - clientHeight - position.height - 20 + "px";
        }
        // Force open right
        if (marginFromRight >= windowScrollWidth) {
            left = parseInt(left.replace('px', '')) - clientWidth + position.width + "px";
        }
        // Force open middle
        if (parseInt(top.replace('px', '')) <= window.scrollY) {
            top = parseInt(top.replace('px', '')) + clientHeight / 2 + position.height / 2 + 10 + "px";
        }
        // Force open left
        if (parseInt(left.replace('px', '')) <= window.scrollX) {
            left = parseInt(left.replace('px', '')) + clientWidth / 2 + position.width * 2 - 4 + "px";
        }
        return { top: top, left: left, width: width };
    };
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    Helpers.findAncestor = function (element, selector) {
        while ((element = element.parentElement) && !element.matches.call(element, selector))
            ; // tslint:disable-line
        return element;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Helpers.deepClone = function (item) {
        if (Array.isArray(item)) {
            var /** @type {?} */ newArr = [];
            for (var /** @type {?} */ i = item.length; i-- > 0;) {
                // tslint:disable-line
                newArr[i] = Helpers.deepClone(item[i]);
            }
            return newArr;
        }
        if (typeof item === 'function' && !/\(\) \{ \[native/.test(item.toString())) {
            var /** @type {?} */ obj = void 0;
            eval('obj = ' + item.toString()); // tslint:disable-line
            for (var /** @type {?} */ k in item) {
                if (k in item) {
                    obj[k] = Helpers.deepClone(item[k]);
                }
            }
            return obj;
        }
        if (item && typeof item === 'object') {
            var /** @type {?} */ obj = {};
            for (var /** @type {?} */ k in item) {
                if (k in item) {
                    obj[k] = Helpers.deepClone(item[k]);
                }
            }
            return obj;
        }
        return item;
    };
    /**
     * @param {...?} objs
     * @return {?}
     */
    Helpers.deepAssign = function () {
        var objs = [];
        for (var _d = 0; _d < arguments.length; _d++) {
            objs[_d] = arguments[_d];
        }
        if (objs.length < 2) {
            throw new Error('Need two or more objects to merge');
        }
        var /** @type {?} */ target = Object.assign({}, objs[0]);
        var _loop_1 = function (i) {
            var /** @type {?} */ source = Object.assign({}, objs[i]);
            Object.keys(source).forEach(function (prop) {
                var /** @type {?} */ value = source[prop];
                if (Helpers.isObject(value)) {
                    if (target.hasOwnProperty(prop) && Helpers.isObject(target[prop])) {
                        target[prop] = Helpers.deepAssign(target[prop], value);
                    }
                    else {
                        target[prop] = value;
                    }
                }
                else if (Array.isArray(value)) {
                    if (target.hasOwnProperty(prop) && Array.isArray(target[prop])) {
                        var /** @type {?} */ targetArray_1 = target[prop];
                        value.forEach(function (sourceItem, itemIndex) {
                            if (itemIndex < targetArray_1.length) {
                                var /** @type {?} */ targetItem = targetArray_1[itemIndex];
                                if (Object.is(targetItem, sourceItem)) {
                                    return;
                                }
                                if (Helpers.isObject(targetItem) && Helpers.isObject(sourceItem)) {
                                    targetArray_1[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                }
                                else if (Array.isArray(targetItem) && Array.isArray(sourceItem)) {
                                    targetArray_1[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                }
                                else {
                                    targetArray_1[itemIndex] = sourceItem;
                                }
                            }
                            else {
                                targetArray_1.push(sourceItem);
                            }
                        });
                    }
                    else {
                        target[prop] = value;
                    }
                }
                else {
                    target[prop] = value;
                }
            });
        };
        for (var /** @type {?} */ i = 1; i < objs.length; i++) {
            _loop_1(/** @type {?} */ i);
        }
        return target;
    };
    /**
     * Workaround for Edge browser since Element:nextElementSibling is undefined inside of template directives
     * @param {?} element any document element
     * @return {?} the next sibling node that is of type: Element
     */
    Helpers.getNextElementSibling = function (element) {
        if (element.nextElementSibling) {
            return element.nextElementSibling;
        }
        else {
            var /** @type {?} */ e = element.nextSibling;
            while (e && 1 !== e.nodeType) {
                e = e.nextSibling;
            }
            return e;
        }
    };
    return Helpers;
}());
var Can = /** @class */ (function () {
    /**
     * @param {?} obj
     */
    function Can(obj) {
        this.obj = obj;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    Can.prototype.have = function (key) {
        var /** @type {?} */ props = key.split('.');
        var /** @type {?} */ item = this.obj;
        for (var /** @type {?} */ i = 0; i < props.length; i++) {
            item = item[props[i]];
            if (this.check(item) === false) {
                return item;
            }
        }
        return item;
    };
    /**
     * @param {?} thing
     * @return {?}
     */
    Can.prototype.check = function (thing) {
        return thing !== void 0;
    };
    return Can;
}());
/**
 * @param {?} obj
 * @return {?}
 */
function can(obj) {
    return new Can(obj);
}
// NG2
// Vendor
// APP
var ACE_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoAceEditor; }),
    multi: true
};
var NovoAceEditor = /** @class */ (function () {
    /**
     * @param {?} elementRef
     */
    function NovoAceEditor(elementRef) {
        this.elementRef = elementRef;
        this.blur = new core.EventEmitter();
        this.focus = new core.EventEmitter();
        this._options = {
            showPrintMargin: false,
            displayIndentGuides: true,
        };
        this._theme = 'chrome';
        this._mode = 'javascript';
        this.text = '';
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    Object.defineProperty(NovoAceEditor.prototype, "theme", {
        /**
         * @param {?} theme
         * @return {?}
         */
        set: function (theme) {
            this.setTheme(theme);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoAceEditor.prototype, "options", {
        /**
         * @param {?} options
         * @return {?}
         */
        set: function (options) {
            this.setOptions(options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoAceEditor.prototype, "mode", {
        /**
         * @param {?} mode
         * @return {?}
         */
        set: function (mode) {
            this.setMode(mode);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoAceEditor.prototype.ngOnDestroy = function () {
        if (this.editor) {
            this.editor.destroy();
        }
    };
    /**
     * @return {?}
     */
    NovoAceEditor.prototype.ngOnInit = function () {
        this.initializeEditor();
        this.initializeOptions();
        this.initializeEvents();
    };
    /**
     * @return {?}
     */
    NovoAceEditor.prototype.initializeEditor = function () {
        var /** @type {?} */ el = this.elementRef.nativeElement;
        this.editor = ace.edit(el);
        this.editor.$blockScrolling = Infinity;
    };
    /**
     * @return {?}
     */
    NovoAceEditor.prototype.initializeOptions = function () {
        this.setOptions(this._options || {});
        this.setTheme(this._theme);
        this.setMode(this._mode);
    };
    /**
     * @return {?}
     */
    NovoAceEditor.prototype.initializeEvents = function () {
        var _this = this;
        this.editor.on('focus', function (event) { return _this.focus.emit(event); });
        this.editor.on('blur', function (event) { return _this.focus.emit(event); });
        this.editor.on('change', function () { return _this.updateText(); });
        this.editor.on('paste', function () { return _this.updateText(); });
    };
    /**
     * @return {?}
     */
    NovoAceEditor.prototype.updateText = function () {
        var /** @type {?} */ newVal = this.editor.getValue();
        if (newVal === this.oldText) {
            return;
        }
        this.text = newVal;
        this.onChange(newVal);
        this.oldText = newVal;
    };
    /**
     * @param {?} text
     * @return {?}
     */
    NovoAceEditor.prototype.setText = function (text) {
        if (Helpers.isBlank(text)) {
            text = '';
        }
        if (this.text !== text) {
            this.text = text;
            this.editor.setValue(text);
            this.onChange(text);
            this.editor.clearSelection();
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NovoAceEditor.prototype.setOptions = function (options) {
        this._options = options;
        this.editor.setOptions(options || {});
    };
    /**
     * @param {?} theme
     * @return {?}
     */
    NovoAceEditor.prototype.setTheme = function (theme) {
        this._theme = theme;
        this.editor.setTheme("ace/theme/" + theme);
    };
    /**
     * @param {?} mode
     * @return {?}
     */
    NovoAceEditor.prototype.setMode = function (mode) {
        this._mode = mode;
        this.editor.getSession().setMode("ace/mode/" + this._mode);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoAceEditor.prototype.writeValue = function (value) {
        this.setText(value);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoAceEditor.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoAceEditor.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    return NovoAceEditor;
}());
NovoAceEditor.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-ace-editor',
                template: '',
                providers: [ACE_VALUE_ACCESSOR]
            },] },
];
/**
 * @nocollapse
 */
NovoAceEditor.ctorParameters = function () { return [
    { type: core.ElementRef, },
]; };
NovoAceEditor.propDecorators = {
    'theme': [{ type: core.Input },],
    'options': [{ type: core.Input },],
    'mode': [{ type: core.Input },],
    'name': [{ type: core.Input },],
    'blur': [{ type: core.Output },],
    'focus': [{ type: core.Output },],
};
// NG2
// APP
var NovoAceEditorModule = /** @class */ (function () {
    function NovoAceEditorModule() {
    }
    return NovoAceEditorModule;
}());
NovoAceEditorModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule],
                declarations: [NovoAceEditor],
                exports: [NovoAceEditor]
            },] },
];
/**
 * @nocollapse
 */
NovoAceEditorModule.ctorParameters = function () { return []; };
// NG2
// Rule storage - pluralize and singularize need to be run sequentially,
// while other rules can be optimized using an object for instant lookups.
var pluralRules = [];
var singularRules = [];
var uncountables = {};
var irregularPlurals = {};
var irregularSingles = {};
/**
 * Title case a string.
 * @param {?} str
 * @return {?}
 */
function toTitleCase(str) {
    return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();
}
/**
 * Sanitize a pluralization rule to a usable regular expression.
 * @param {?} rule
 * @return {?}
 */
function sanitizeRule(rule) {
    if (typeof rule === 'string') {
        return new RegExp('^' + rule + '$', 'i');
    }
    return rule;
}
/**
 * Pass in a word token to produce a function that can replicate the case on
 * another word.
 * @param {?} word
 * @param {?} token
 * @return {?}
 */
function restoreCase(word, token) {
    // Upper cased words. E.g. "HELLO".
    if (word === word.toUpperCase()) {
        return token.toUpperCase();
    }
    // Title cased words. E.g. "Title".
    if (word[0] === word[0].toUpperCase()) {
        return toTitleCase(token);
    }
    // Lower cased words. E.g. "test".
    return token.toLowerCase();
}
/**
 * Interpolate a regexp string.
 * @param {?} str
 * @param {?} args
 * @return {?}
 */
function interpolate(str, args) {
    return str.replace(/\$(\d{1,2})/g, function (match, index$$1) {
        return args[index$$1] || '';
    });
}
/**
 * Sanitize a word by passing in the word and sanitization rules.
 * @param {?} token
 * @param {?} word
 * @param {?} collection
 * @return {?}
 */
function sanitizeWord(token, word, collection) {
    // Empty string or doesn't need fixing.
    if (!token.length || uncountables.hasOwnProperty(token)) {
        return word;
    }
    var /** @type {?} */ len = collection.length;
    var _loop_2 = function () {
        var /** @type {?} */ rule = collection[len];
        // If the rule passes, return the replacement.
        if (rule[0].test(word)) {
            return { value: word.replace(rule[0], function (match, index$$1, words) {
                    var /** @type {?} */ result = interpolate(rule[1], [match, index$$1, words]);
                    if (match === '') {
                        return restoreCase(words[index$$1 - 1], result);
                    }
                    return restoreCase(match, result);
                }) };
        }
    };
    // Iterate over the sanitization rules and use the first one to match.
    while (len--) {
        var state_1 = _loop_2();
        if (typeof state_1 === "object")
            return state_1.value;
    }
    return word;
}
/**
 * Replace a word with the updated word.
 * @param {?} replaceMap
 * @param {?} keepMap
 * @param {?} rules
 * @return {?}
 */
function replaceWord(replaceMap, keepMap, rules) {
    return function (word) {
        // Get the correct token and case restoration functions.
        var /** @type {?} */ token = word.toLowerCase();
        // Check against the keep object map.
        if (keepMap.hasOwnProperty(token)) {
            return restoreCase(word, token);
        }
        // Check against the replacement map for a direct word replacement.
        if (replaceMap.hasOwnProperty(token)) {
            return restoreCase(word, replaceMap[token]);
        }
        // Run all the rules against the word.
        return sanitizeWord(token, word, rules);
    };
}
var Pluralize = /** @class */ (function () {
    function Pluralize() {
    }
    /**
     * @param {?} word
     * @param {?=} count
     * @param {?=} inclusive
     * @return {?}
     */
    Pluralize.pluralize = function (word, count, inclusive) {
        if (count === void 0) { count = 1; }
        var /** @type {?} */ pluralized = count === 1 ? Pluralize.singular(word) : Pluralize.plural(word);
        return (inclusive ? count + " " : '') + pluralized;
    };
    /**
     * @param {?} word
     * @return {?}
     */
    Pluralize.singular = function (word) {
        return replaceWord(irregularSingles, irregularPlurals, pluralRules)(word);
    };
    /**
     * @param {?} word
     * @return {?}
     */
    Pluralize.plural = function (word) {
        return replaceWord(irregularPlurals, irregularSingles, singularRules)(word);
    };
    /**
     * @param {?} rule
     * @param {?} replacement
     * @return {?}
     */
    Pluralize.addPluralRule = function (rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
    };
    /**
     * @param {?} rule
     * @param {?} replacement
     * @return {?}
     */
    Pluralize.addSingularRule = function (rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
    };
    /**
     * @param {?} word
     * @return {?}
     */
    Pluralize.addUncountableRule = function (word) {
        if (typeof word === 'string') {
            uncountables[word.toLowerCase()] = true;
            return;
        }
        // Set singular and plural references for the word.
        Pluralize.addPluralRule(word, '$0');
        Pluralize.addSingularRule(word, '$0');
    };
    /**
     * @param {?} single
     * @param {?} plural
     * @return {?}
     */
    Pluralize.addIrregularRule = function (single, plural) {
        var /** @type {?} */ one = plural.toLowerCase();
        var /** @type {?} */ many = single.toLowerCase();
        irregularSingles[one] = many;
        irregularPlurals[many] = one;
    };
    
    return Pluralize;
}());
/**
 * Irregular rules.
 */
[
    // Pronouns.
    ['I', 'we'],
    ['me', 'us'],
    ['he', 'they'],
    ['she', 'they'],
    ['them', 'them'],
    ['myself', 'ourselves'],
    ['yourself', 'yourselves'],
    ['itself', 'themselves'],
    ['herself', 'themselves'],
    ['himself', 'themselves'],
    ['themself', 'themselves'],
    ['is', 'are'],
    ['this', 'these'],
    ['that', 'those'],
    // Words ending in with a consonant and `o`.
    ['echo', 'echoes'],
    ['dingo', 'dingoes'],
    ['volcano', 'volcanoes'],
    ['tornado', 'tornadoes'],
    ['torpedo', 'torpedoes'],
    // Ends with `us`.
    ['genus', 'genera'],
    ['viscus', 'viscera'],
    // Ends with `ma`.
    ['stigma', 'stigmata'],
    ['stoma', 'stomata'],
    ['dogma', 'dogmata'],
    ['lemma', 'lemmata'],
    ['schema', 'schemata'],
    ['anathema', 'anathemata'],
    // Other irregular rules.
    ['ox', 'oxen'],
    ['axe', 'axes'],
    ['die', 'dice'],
    ['yes', 'yeses'],
    ['foot', 'feet'],
    ['eave', 'eaves'],
    ['goose', 'geese'],
    ['tooth', 'teeth'],
    ['quiz', 'quizzes'],
    ['human', 'humans'],
    ['proof', 'proofs'],
    ['carve', 'carves'],
    ['valve', 'valves'],
    ['thief', 'thieves'],
    ['genie', 'genies'],
    ['groove', 'grooves'],
    ['pickaxe', 'pickaxes'],
    ['whiskey', 'whiskies']
].forEach(function (rule) {
    return Pluralize.addIrregularRule(rule[0], rule[1]);
});
/**
 * Pluralization rules.
 */
[
    [/s?$/i, 's'],
    [/([^aeiou]ese)$/i, '$1'],
    [/(ax|test)is$/i, '$1es'],
    [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],
    [/(e[mn]u)s?$/i, '$1s'],
    [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],
    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],
    [/(seraph|cherub)(?:im)?$/i, '$1im'],
    [/(her|at|gr)o$/i, '$1oes'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],
    [/sis$/i, 'ses'],
    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],
    [/([^aeiouy]|qu)y$/i, '$1ies'],
    [/([^ch][ieo][ln])ey$/i, '$1ies'],
    [/(x|ch|ss|sh|zz)$/i, '$1es'],
    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],
    [/(m|l)(?:ice|ouse)$/i, '$1ice'],
    [/(pe)(?:rson|ople)$/i, '$1ople'],
    [/(child)(?:ren)?$/i, '$1ren'],
    [/eaux$/i, '$0'],
    [/m[ae]n$/i, 'men'],
    ['thou', 'you']
].forEach(function (rule) {
    return Pluralize.addPluralRule(rule[0], rule[1]);
});
/**
 * Singularization rules.
 */
[
    [/s$/i, ''],
    [/(ss)$/i, '$1'],
    [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(?:sis|ses)$/i, '$1sis'],
    [/(^analy)(?:sis|ses)$/i, '$1sis'],
    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, '$1fe'],
    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],
    [/([^aeiouy]|qu)ies$/i, '$1y'],
    [/(^[pl]|zomb|^(?:neck)?t|[aeo][lt]|cut)ies$/i, '$1ie'],
    [/(\b(?:mon|smil))ies$/i, '$1ey'],
    [/(m|l)ice$/i, '$1ouse'],
    [/(seraph|cherub)im$/i, '$1'],
    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],
    [/(e[mn]u)s?$/i, '$1'],
    [/(movie|twelve)s$/i, '$1'],
    [/(cris|test|diagnos)(?:is|es)$/i, '$1is'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],
    [/(alumn|alg|vertebr)ae$/i, '$1a'],
    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],
    [/(matr|append)ices$/i, '$1ix'],
    [/(pe)(rson|ople)$/i, '$1rson'],
    [/(child)ren$/i, '$1'],
    [/(eau)x?$/i, '$1'],
    [/men$/i, 'man']
].forEach(function (rule) {
    return Pluralize.addSingularRule(rule[0], rule[1]);
});
/**
 * Uncountable rules.
 */
[
    // Singular words with no plurals.
    'advice',
    'adulthood',
    'agenda',
    'aid',
    'alcohol',
    'ammo',
    'athletics',
    'bison',
    'blood',
    'bream',
    'buffalo',
    'butter',
    'carp',
    'cash',
    'chassis',
    'chess',
    'clothing',
    'commerce',
    'cod',
    'cooperation',
    'corps',
    'digestion',
    'debris',
    'diabetes',
    'energy',
    'equipment',
    'elk',
    'excretion',
    'expertise',
    'flounder',
    'fun',
    'gallows',
    'garbage',
    'graffiti',
    'headquarters',
    'health',
    'herpes',
    'highjinks',
    'homework',
    'housework',
    'information',
    'jeans',
    'justice',
    'kudos',
    'labour',
    'literature',
    'machinery',
    'mackerel',
    'media',
    'mews',
    'moose',
    'music',
    'news',
    'pike',
    'plankton',
    'pliers',
    'pollution',
    'premises',
    'rain',
    'research',
    'rice',
    'salmon',
    'scissors',
    'series',
    'sewage',
    'shambles',
    'shrimp',
    'species',
    'staff',
    'swine',
    'trout',
    'traffic',
    'transporation',
    'tuna',
    'wealth',
    'welfare',
    'whiting',
    'wildebeest',
    'wildlife',
    'you',
    // Regexes.
    /pox$/i,
    /ois$/i,
    /deer$/i,
    /fish$/i,
    /sheep$/i,
    /measles$/i,
    /[^aeiou]ese$/i // "chinese", "japanese"
].forEach(Pluralize.addUncountableRule);
var PluralPipe = /** @class */ (function () {
    function PluralPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    PluralPipe.prototype.transform = function (value) {
        return Pluralize.pluralize(value);
    };
    return PluralPipe;
}());
PluralPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'plural' },] },
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
PluralPipe.ctorParameters = function () { return []; };
// NG2
// App
var DecodeURIPipe = /** @class */ (function () {
    function DecodeURIPipe() {
    }
    /**
     * @param {?} encodedString
     * @return {?}
     */
    DecodeURIPipe.prototype.transform = function (encodedString) {
        var /** @type {?} */ decodedString = '';
        if (!Helpers.isBlank(encodedString) && typeof encodedString === 'string') {
            decodedString = decodeURIComponent(encodedString);
        }
        return decodedString;
    };
    return DecodeURIPipe;
}());
DecodeURIPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'decodeURI' },] },
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
DecodeURIPipe.ctorParameters = function () { return []; };
var GroupByPipe = /** @class */ (function () {
    function GroupByPipe() {
    }
    /**
     * @param {?} input
     * @param {?} prop
     * @return {?}
     */
    GroupByPipe.prototype.transform = function (input, prop) {
        if (!Array.isArray(input)) {
            return input;
        }
        var /** @type {?} */ arr = {};
        for (var _d = 0, input_1 = input; _d < input_1.length; _d++) {
            var value = input_1[_d];
            var /** @type {?} */ field = can(value).have(prop);
            if (Helpers.isBlank(arr[field])) {
                arr[field] = [];
            }
            arr[field].push(value);
        }
        return Object.keys(arr).map(function (key) { return ({ key: key, 'value': arr[key] }); });
    };
    return GroupByPipe;
}());
GroupByPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'groupBy'
            },] },
];
/**
 * @nocollapse
 */
GroupByPipe.ctorParameters = function () { return []; };
// NG2
// APP
var NovoPipesModule = /** @class */ (function () {
    function NovoPipesModule() {
    }
    return NovoPipesModule;
}());
NovoPipesModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [PluralPipe, DecodeURIPipe, GroupByPipe],
                exports: [PluralPipe, DecodeURIPipe, GroupByPipe]
            },] },
];
/**
 * @nocollapse
 */
NovoPipesModule.ctorParameters = function () { return []; };
// NG2
var NovoButtonElement = /** @class */ (function () {
    function NovoButtonElement() {
        this.side = 'right';
    }
    Object.defineProperty(NovoButtonElement.prototype, "icon", {
        /**
         * @return {?}
         */
        get: function () {
            return this._icon;
        },
        /**
         * @param {?} icon
         * @return {?}
         */
        set: function (icon) {
            this._icon = "bhi-" + icon;
        },
        enumerable: true,
        configurable: true
    });
    return NovoButtonElement;
}());
NovoButtonElement.decorators = [
    { type: core.Component, args: [{
                selector: 'button[theme]',
                host: {
                    '[attr.theme]': 'theme',
                    '[attr.color]': 'color',
                    '[attr.icon]': 'icon',
                    '[attr.loading]': 'loading',
                    '[attr.side]': 'side',
                },
                template: "\n        <div class=\"flex-wrapper\">\n            <!--Left Icon-->\n            <i *ngIf=\"icon && side === 'left' && !loading\" [ngClass]=\"icon\"></i>\n            <!--Transcluded Content-->\n            <ng-content></ng-content>\n            <!--Right Icon-->\n            <i *ngIf=\"icon && side === 'right' && !loading\" [ngClass]=\"icon\"></i>\n            <!--Loading-->\n            <i *ngIf=\"loading\" class=\"loading\">\n                <svg version=\"1.1\"\n                    xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:a=\"http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/\"\n                    x=\"0px\" y=\"0px\" width=\"18.2px\" height=\"18.5px\" viewBox=\"0 0 18.2 18.5\" style=\"enable-background:new 0 0 18.2 18.5;\"\n                    xml:space=\"preserve\">\n                <style type=\"text/css\">\n                    .spinner { fill:#FFFFFF; }\n                </style>\n                    <path class=\"spinner\" d=\"M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9\n                        c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1\n                        c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z\"/>\n                </svg>\n            </i>\n        </div>\n    ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoButtonElement.ctorParameters = function () { return []; };
NovoButtonElement.propDecorators = {
    'color': [{ type: core.Input },],
    'side': [{ type: core.Input },],
    'theme': [{ type: core.Input },],
    'loading': [{ type: core.Input },],
    'icon': [{ type: core.Input },],
};
// NG2
// APP
var NovoButtonModule = /** @class */ (function () {
    function NovoButtonModule() {
    }
    return NovoButtonModule;
}());
NovoButtonModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule],
                declarations: [NovoButtonElement],
                exports: [NovoButtonElement]
            },] },
];
/**
 * @nocollapse
 */
NovoButtonModule.ctorParameters = function () { return []; };
// NG2
var NovoLoadingElement = /** @class */ (function () {
    function NovoLoadingElement() {
    }
    return NovoLoadingElement;
}());
NovoLoadingElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-loading',
                host: {
                    '[class]': 'theme || ""'
                },
                template: "\n        <span class=\"dot\"></span>\n        <span class=\"dot\"></span>\n        <span class=\"dot\"></span>\n        <span class=\"dot\"></span>\n        <span class=\"dot\"></span>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoLoadingElement.ctorParameters = function () { return []; };
NovoLoadingElement.propDecorators = {
    'theme': [{ type: core.Input },],
};
var NovoSpinnerElement = /** @class */ (function () {
    function NovoSpinnerElement() {
    }
    return NovoSpinnerElement;
}());
NovoSpinnerElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-spinner',
                template: "\n        <svg class=\"bullhornSpinner\" [ngClass]=\"theme\" height=\"100\" width=\"100\" viewBox=\"0 0 100 100\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.inverse]=\"inverse\">\n            <title>Bullhorn Spinner Animation</title>\n            <desc>Spinner animation indicating loading</desc>\n            <defs>\n                <style>\n                    .bullhornSpinner g.circleGroup {\n                        -webkit-filter: url(\"{{baseHref || ''}}#gooEffect\");\n                        filter: url(\"{{baseHref || ''}}#gooEffect\");\n                    }\n                    _:-webkit-full-screen:not(:root:root), .bullhornSpinner g.circleGroup {\n                        -webkit-filter: none;\n                        filter: none;\n                    }\n                    @supports (-webkit-text-size-adjust:none) and (not (-ms-accelerator:true)) and (not (-moz-appearance:none)) {\n                        .bullhornSpinner g.circleGroup {\n                            -webkit-filter: none;\n                            filter: none;\n                        }\n                    }\n                    @supports (-webkit-text-size-adjust:none) and (not (-ms-accelerator:true)) and (not (-moz-appearance:none)) {\n                        .bullhornSpinner g.circleGroup {\n                            -webkit-filter: none;\n                            filter: none;\n                        }\n                    }\n                </style>\n                <filter id=\"gooEffect\">\n                    <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"5\" result=\"blur\" />\n                    <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"\n                            1.3 0 0 0 0\n                            0 1.3 0 0 0\n                            0 0 1.3 0 0\n                            0 0 0 19 -7\" result=\"gooEffect\" />\n                    <feComposite in=\"SourceGraphic\" in2=\"gooEffect\" operator=\"atop\" />\n                </filter>\n            </defs>\n            <path d=\"M 43 43 L 54 45 L 80 40 L 43 43\" stroke=\"none\" fill=\"none\" id=\"firstLinePath\"/>\n            <path d=\"M 43 43 L 48 41 L 48 18 L 43 43\" stroke=\"none\" fill=\"none\" id=\"secondLinePath\"/>\n            <path d=\"M 43 43 L 42 45 L 15 40 L 43 43\" stroke=\"none\" fill=\"none\" id=\"thirdLinePath\"/>\n            <path d=\"M 43 43 L 44 52 L 29 78 L 43 43\" stroke=\"none\" fill=\"none\" id=\"fourthLinePath\"/>\n            <path d=\"M 43 43 L 52 52 L 68 78 L 43 43\" stroke=\"none\" fill=\"none\" id=\"fifthLinePath\"/>\n            <g class=\"circleGroup\" transform=\"translate(7, 7)\">\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#firstLinePath\"/>\n                    </animateMotion>\n                </circle>\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#secondLinePath\"/>\n                    </animateMotion>\n                </circle>\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#thirdLinePath\"/>\n                    </animateMotion>\n                </circle>\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#fourthLinePath\"/>\n                    </animateMotion>\n                </circle>\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#fifthLinePath\"/>\n                    </animateMotion>\n                </circle>\n            </g>\n        </svg>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoSpinnerElement.ctorParameters = function () { return []; };
NovoSpinnerElement.propDecorators = {
    'theme': [{ type: core.Input },],
    'inverse': [{ type: core.Input },],
    'baseHref': [{ type: core.Input },],
};
// NG2
// APP
var NovoLoadingModule = /** @class */ (function () {
    function NovoLoadingModule() {
    }
    return NovoLoadingModule;
}());
NovoLoadingModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule],
                declarations: [NovoLoadingElement, NovoSpinnerElement],
                exports: [NovoLoadingElement, NovoSpinnerElement]
            },] },
];
/**
 * @nocollapse
 */
NovoLoadingModule.ctorParameters = function () { return []; };
// NG2
var TooltipDirective = /** @class */ (function () {
    function TooltipDirective() {
        this.position = 'top';
    }
    /**
     * @param {?} position
     * @return {?}
     */
    TooltipDirective.prototype.isPosition = function (position) {
        return position.toLowerCase() === (this.position || '').toLowerCase();
    };
    /**
     * @param {?} type
     * @return {?}
     */
    TooltipDirective.prototype.isType = function (type) {
        return type.toLowerCase() === (this.type || '').toLowerCase();
    };
    /**
     * @param {?} size
     * @return {?}
     */
    TooltipDirective.prototype.isSize = function (size) {
        return size.toLowerCase() === (this.size || '').toLowerCase();
    };
    return TooltipDirective;
}());
TooltipDirective.decorators = [
    { type: core.Directive, args: [{
                selector: '[tooltip]',
                host: {
                    '[class.hint--top]': 'tooltip && isPosition("top")',
                    '[class.hint--left]': 'tooltip && isPosition("left")',
                    '[class.hint--right]': 'tooltip && isPosition("right")',
                    '[class.hint--bottom]': 'tooltip && isPosition("bottom")',
                    '[class.hint--top-left]': 'tooltip && isPosition("top-left")',
                    '[class.hint--top-right]': 'tooltip && isPosition("top-right")',
                    '[class.hint--bottom-left]': 'tooltip && isPosition("bottom-left")',
                    '[class.hint--bottom-right]': 'tooltip && isPosition("bottom-right")',
                    '[class.hint--error]': 'tooltip && isType("error")',
                    '[class.hint--info]': 'tooltip && isType("info")',
                    '[class.hint--warning]': 'tooltip && isType("warning")',
                    '[class.hint--success]': 'tooltip && isType("success")',
                    '[class.hint--always]': 'tooltip && always',
                    '[class.hint--rounded]': 'tooltip && rounded',
                    '[class.hint--no-animate]': 'tooltip && noAnimate',
                    '[class.hint--bounce]': 'tooltip && bounce',
                    '[class.hint--hidden]': 'active === false',
                    '[class.hint--preline]': 'preline',
                    '[class.hint--small]': 'tooltip && isSize("small")',
                    '[class.hint--medium]': 'tooltip && isSize("medium")',
                    '[class.hint--large]': 'tooltip && isSize("large")',
                    '[attr.data-hint]': 'tooltip'
                }
            },] },
];
/**
 * @nocollapse
 */
TooltipDirective.ctorParameters = function () { return []; };
TooltipDirective.propDecorators = {
    'tooltip': [{ type: core.Input },],
    'position': [{ type: core.Input, args: ['tooltipPosition',] },],
    'type': [{ type: core.Input, args: ['tooltipType',] },],
    'size': [{ type: core.Input, args: ['tooltipSize',] },],
    'bounce': [{ type: core.Input, args: ['tooltipBounce',] },],
    'noAnimate': [{ type: core.Input, args: ['tooltipNoAnimate',] },],
    'rounded': [{ type: core.Input, args: ['tooltipRounded',] },],
    'always': [{ type: core.Input, args: ['tooltipAlways',] },],
    'active': [{ type: core.Input, args: ['tooltipActive',] },],
    'preline': [{ type: core.Input, args: ['tooltipPreline',] },],
};
// NG2
// APP
var NovoTooltipModule = /** @class */ (function () {
    function NovoTooltipModule() {
    }
    return NovoTooltipModule;
}());
NovoTooltipModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [TooltipDirective],
                exports: [TooltipDirective]
            },] },
];
/**
 * @nocollapse
 */
NovoTooltipModule.ctorParameters = function () { return []; };
// NG2
var NovoLabelService = /** @class */ (function () {
    /**
     * @param {?=} userLocale
     */
    function NovoLabelService(userLocale) {
        if (userLocale === void 0) { userLocale = 'en-US'; }
        this.userLocale = userLocale;
        this.filters = 'Filter';
        this.clear = 'Clear';
        this.sort = 'Sort';
        this.emptyTableMessage = 'No Records to display...';
        this.noMatchingRecordsMessage = 'No Matching Records';
        this.erroredTableMessage = 'Oops! An error occurred.';
        this.pickerError = 'Oops! An error occurred.';
        this.pickerEmpty = 'No results to display...';
        this.quickNoteError = 'Oops! An error occurred.';
        this.quickNoteEmpty = 'No results to display...';
        this.required = 'Required';
        this.numberTooLarge = 'Number is too large';
        this.save = 'Save';
        this.cancel = 'Cancel';
        this.next = 'Next';
        this.itemsPerPage = 'Items per page:';
        this.select = 'Select...';
        this.selected = 'Selected';
        this.selectAllOnPage = 'Select all on page';
        this.deselectAll = 'Deselect all';
        this.refresh = 'Refresh';
        this.close = 'Close';
        this.move = 'Move';
        this.startDate = 'Start Date';
        this.endDate = 'End Date';
        this.more = 'more';
        this.clearAll = 'CLEAR ALL';
        this.today = 'Today';
        this.now = 'Now';
        this.isRequired = 'is required';
        this.notValidYear = 'is not a valid year';
        this.isTooLarge = 'is too large';
        this.invalidAddress = 'requires at least one field filled out';
        this.invalidEmail = 'requires a valid email (ex. abc@123.com)';
        this.invalidMaxLength = 'Sorry, you have exceeded the maximum character count of for this field';
        this.maxLengthMet = 'Sorry, you have reached the maximum character count of for this field';
        this.minLength = 'is required to be a minimum length of';
        this.past1Day = 'Past 1 Day';
        this.past7Days = 'Past 7 Days';
        this.past30Days = 'Past 30 Days';
        this.past90Days = 'Past 90 Days';
        this.past1Year = 'Past 1 Year';
        this.next1Day = 'Next 1 Day';
        this.next7Days = 'Next 7 Days';
        this.next30Days = 'Next 30 Days';
        this.next90Days = 'Next 90 Days';
        this.next1Year = 'Next 1 Year';
        this.customDateRange = 'Custom Date Range';
        this.backToPresetFilters = 'Back to Preset Filters';
        this.okGotIt = 'Ok, Got it';
        this.address = 'Address';
        this.apt = 'Apt';
        this.city = 'City / Locality';
        this.state = 'State / Region';
        this.zipCode = 'Postal Code';
        this.country = 'Country';
        this.or = 'or';
        this.clickToBrowse = 'click to browse';
        this.chooseAFile = 'Choose a file';
        this.no = 'No';
        this.yes = 'Yes';
        this.search = 'SEARCH';
        this.noItems = 'There are no items';
        this.dateFormat = 'MM/dd/yyyy';
        this.dateFormatPlaceholder = 'MM/DD/YYYY';
        this.timeFormatPlaceholderAM = 'hh:mm AM';
        this.timeFormatPlaceholder24Hour = 'HH:mm';
        this.timeFormatAM = 'AM';
        this.timeFormatPM = 'PM';
        this.confirmChangesModalMessage = 'Are you sure you want to change this field?';
        this.promptModalMessage = 'Do you want to perform the following changes?';
        this.asyncFailure = 'Async validation was not called within the 10s threshold, you might want to reload the page to try again';
        this.previous = 'Previous';
        this.actions = 'Actions';
        this.all = 'All';
        this.groupedMultiPickerEmpty = 'No items to display';
        this.groupedMultiPickerSelectCategory = 'Select a category from the right to get started';
        this.add = 'Add';
        this.encryptedFieldTooltip = 'This data has been stored at the highest level of security';
    }
    /**
     * @param {?} toMany
     * @return {?}
     */
    NovoLabelService.prototype.getToManyPlusMore = function (toMany) {
        return "+" + toMany.quantity + " more";
    };
    /**
     * @param {?} selected
     * @return {?}
     */
    NovoLabelService.prototype.selectedRecords = function (selected) {
        return selected + " records are selected.";
    };
    /**
     * @param {?} total
     * @param {?} select
     * @return {?}
     */
    NovoLabelService.prototype.totalRecords = function (total, select) {
        return select ? "Select all " + total + " records." : "De-select remaining " + total + " records.";
    };
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    NovoLabelService.prototype.formatDateWithFormat = function (value, format) {
        var /** @type {?} */ date = value instanceof Date ? value : new Date(value);
        if (date.getTime() !== date.getTime()) {
            return value;
        }
        return new Intl.DateTimeFormat(this.userLocale, format).format(date);
    };
    /**
     * @return {?}
     */
    NovoLabelService.prototype.getWeekdays = function () {
        var _this = this;
        /**
         * @param {?} dayOfWeek
         * @return {?}
         */
        function getDay$$1(dayOfWeek) {
            var /** @type {?} */ dt = new Date();
            return dt.setDate(dt.getDate() - dt.getDay() + dayOfWeek);
        }
        return [getDay$$1(0), getDay$$1(1), getDay$$1(2), getDay$$1(3), getDay$$1(4), getDay$$1(5), getDay$$1(6)].reduce(function (weekdays, dt) {
            weekdays.push(new Intl.DateTimeFormat(_this.userLocale, { weekday: 'long' }).format(dt));
            return weekdays;
        }, []);
    };
    /**
     * @return {?}
     */
    NovoLabelService.prototype.getMonths = function () {
        var _this = this;
        /**
         * @param {?} month
         * @return {?}
         */
        function getMonth$$1(month) {
            var /** @type {?} */ dt = new Date();
            return dt.setMonth(month, 1);
        }
        return [
            getMonth$$1(0),
            getMonth$$1(1),
            getMonth$$1(2),
            getMonth$$1(3),
            getMonth$$1(4),
            getMonth$$1(5),
            getMonth$$1(6),
            getMonth$$1(7),
            getMonth$$1(8),
            getMonth$$1(9),
            getMonth$$1(10),
            getMonth$$1(11),
        ].reduce(function (months, dt) {
            months.push(new Intl.DateTimeFormat(_this.userLocale, { month: 'long' }).format(dt));
            return months;
        }, []);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoLabelService.prototype.getProperty = function (value) {
        return this[value];
    };
    /**
     * @param {?} page
     * @param {?} pageSize
     * @param {?} length
     * @param {?} short
     * @return {?}
     */
    NovoLabelService.prototype.getRangeText = function (page, pageSize, length, short) {
        if (length === 0 || pageSize === 0) {
            return "Displaying 0 of " + length;
        }
        length = Math.max(length, 0);
        var /** @type {?} */ startIndex = page * pageSize;
        // If the start index exceeds the list length, do not try and fix the end index to the end.
        var /** @type {?} */ endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;
        return short ? startIndex + 1 + " - " + endIndex + "/" + length : "Displaying " + (startIndex + 1) + " - " + endIndex + " of " + length;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoLabelService.prototype.formatCurrency = function (value) {
        var /** @type {?} */ options = { style: 'currency', currency: 'USD' };
        return new Intl.NumberFormat(this.userLocale, options).format(value);
    };
    /**
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    NovoLabelService.prototype.formatNumber = function (value, options) {
        return new Intl.NumberFormat(this.userLocale, options).format(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoLabelService.prototype.formatDateShort = function (value) {
        var /** @type {?} */ options = {
            // DD/MM/YYYY, HH:MM A - 02/14/2017, 1:17 PM
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
        };
        var /** @type {?} */ _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoLabelService.prototype.formatTime = function (value) {
        var /** @type {?} */ options = {
            //HH:MM A - 1:17 PM
            hour: '2-digit',
            minute: '2-digit',
        };
        var /** @type {?} */ _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoLabelService.prototype.formatDate = function (value) {
        var /** @type {?} */ options = {
            // DD/MM/YYYY - 02/14/2017
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
        };
        var /** @type {?} */ _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    };
    return NovoLabelService;
}());
NovoLabelService.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
NovoLabelService.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [core.LOCALE_ID,] },] },
]; };
// NG2
// APP
var CardActionsElement = /** @class */ (function () {
    function CardActionsElement() {
    }
    return CardActionsElement;
}());
CardActionsElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-card-actions',
                template: '<ng-content></ng-content>',
            },] },
];
/**
 * @nocollapse
 */
CardActionsElement.ctorParameters = function () { return []; };
var CardElement = /** @class */ (function () {
    /**
     * @param {?} labels
     */
    function CardElement(labels) {
        this.padding = true;
        this.config = {};
        this.onClose = new core.EventEmitter();
        this.onRefresh = new core.EventEmitter();
        this.labels = labels;
    }
    /**
     * @return {?}
     */
    CardElement.prototype.ngOnInit = function () {
        this.config = this.config || {};
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    CardElement.prototype.ngOnChanges = function (changes) {
        this.config = this.config || {};
        this.cardAutomationId = (this.title || this.config.title || 'no-title').toLowerCase().replace(/\s/g, '-') + "-card";
        var /** @type {?} */ newIcon = this.icon || this.config.icon;
        var /** @type {?} */ newMessageIcon = this.messageIcon || this.config.messageIcon;
        this.iconClass = newIcon ? "bhi-" + newIcon : null;
        this.messageIconClass = newMessageIcon ? "bhi-" + newMessageIcon : null;
    };
    /**
     * @return {?}
     */
    CardElement.prototype.toggleClose = function () {
        if (!this.config.onClose) {
            this.onClose.next();
        }
        else {
            this.config.onClose();
        }
    };
    /**
     * @return {?}
     */
    CardElement.prototype.toggleRefresh = function () {
        if (!this.config.onRefresh) {
            this.onRefresh.next();
        }
        else {
            this.config.onRefresh();
        }
    };
    return CardElement;
}());
CardElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-card',
                template: "\n        <div class=\"novo-card\" [attr.data-automation-id]=\"cardAutomationId\" [ngClass]=\"{'no-padding': !padding}\" [class.loading]=\"loading || config.loading\">\n            <!--Loading-->\n            <div class=\"card-loading-container\" *ngIf=\"loading || config.loading\">\n                <novo-loading theme=\"line\" [attr.data-automation-id]=\"cardAutomationId + '-loading'\"></novo-loading>\n            </div>\n            <!--Card Header-->\n            <header>\n                <div class=\"title\">\n                    <!--Grabber Icon-->\n                    <span tooltip=\"{{ labels.move }}\" tooltipPosition=\"bottom-right\"><i *ngIf=\"move || config.move\" class=\"bhi-move\" [attr.data-automation-id]=\"cardAutomationId + '-move'\"></i></span>\n                    <!--Card Title-->\n                    <h3 [attr.data-automation-id]=\"cardAutomationId + '-title'\"><span [tooltip]=\"iconTooltip\" tooltipPosition=\"right\"><i *ngIf=\"icon\" [ngClass]=\"iconClass\"></i></span> {{title || config.title}}</h3>\n                </div>\n                <!--Card Actions-->\n                <div class=\"actions\" [attr.data-automation-id]=\"cardAutomationId + '-actions'\">\n                    <ng-content select=\"novo-card-actions\"></ng-content>\n                    <button theme=\"icon\" icon=\"refresh\"  (click)=\"toggleRefresh()\" *ngIf=\"refresh || config.refresh\" [attr.data-automation-id]=\"cardAutomationId + '-refresh'\" tooltip=\"{{ labels.refresh }}\" tooltipPosition=\"bottom-left\"></button>\n                    <button theme=\"icon\" icon=\"close-o\" (click)=\"toggleClose()\" *ngIf=\"close || config.close\" [attr.data-automation-id]=\"cardAutomationId + '-close'\" tooltip=\"{{ labels.close }}\" tooltipPosition=\"bottom-left\"></button>\n                </div>\n            </header>\n            <!--Card Main-->\n            <main>\n                <!--Content (transcluded)-->\n                <ng-content *ngIf=\"!(loading || config.loading) && !(message || config.message)\"></ng-content>\n                <!--Error/Empty Message-->\n                <p class=\"card-message\" *ngIf=\"!(loading || config.loading) && (message || config.message)\" [attr.data-automation-id]=\"cardAutomationId + '-message'\"><i *ngIf=\"messageIconClass\" [ngClass]=\"messageIconClass\"></i> <span [innerHtml]=\"message || config.message\"></span></p>\n            </main>\n            <!--Card Footer-->\n            <ng-content *ngIf=\"!(loading || config.loading) && !(message || config.message)\" select=\"footer\"></ng-content>\n        </div>\n    ",
            },] },
];
/**
 * @nocollapse
 */
CardElement.ctorParameters = function () { return [
    { type: NovoLabelService, },
]; };
CardElement.propDecorators = {
    'padding': [{ type: core.Input },],
    'config': [{ type: core.Input },],
    'title': [{ type: core.Input },],
    'message': [{ type: core.Input },],
    'messageIcon': [{ type: core.Input },],
    'icon': [{ type: core.Input },],
    'iconTooltip': [{ type: core.Input },],
    'refresh': [{ type: core.Input },],
    'close': [{ type: core.Input },],
    'move': [{ type: core.Input },],
    'loading': [{ type: core.Input },],
    'onClose': [{ type: core.Output },],
    'onRefresh': [{ type: core.Output },],
};
// NG2
// APP
var NovoCardModule = /** @class */ (function () {
    function NovoCardModule() {
    }
    return NovoCardModule;
}());
NovoCardModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, NovoButtonModule, NovoLoadingModule, NovoTooltipModule],
                declarations: [CardElement, CardActionsElement],
                exports: [CardElement, CardActionsElement]
            },] },
];
/**
 * @nocollapse
 */
NovoCardModule.ctorParameters = function () { return []; };
var NovoEventTypeLegendElement = /** @class */ (function () {
    function NovoEventTypeLegendElement() {
        this.eventTypeClicked = new core.EventEmitter();
    }
    return NovoEventTypeLegendElement;
}());
NovoEventTypeLegendElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-event-type-legend',
                template: "\n    <ng-template #defaultTemplate>\n      <div class=\"cal-event-legend\">\n        <div class=\"cal-event-type\"\n          *ngFor=\"let type of events | groupBy : 'type'\"\n          (click)=\"$event.stopPropagation(); eventTypeClicked.emit({event:type?.key})\">\n          <div class=\"cal-event-type-swatch\"></div><div>{{type?.key}}</div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{events: events, eventTypeClicked: eventTypeClicked}\">\n    </ng-template>\n  "
            },] },
];
/**
 * @nocollapse
 */
NovoEventTypeLegendElement.ctorParameters = function () { return []; };
NovoEventTypeLegendElement.propDecorators = {
    'events': [{ type: core.Input },],
    'customTemplate': [{ type: core.Input },],
    'eventTypeClicked': [{ type: core.Output },],
};
var NovoCalendarDateChangeElement = /** @class */ (function () {
    /**
     * @param {?} locale
     */
    function NovoCalendarDateChangeElement(locale) {
        /**
         * Called when the view date is changed
         */
        this.viewDateChange = new core.EventEmitter();
        this.locale = locale;
    }
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarDateChangeElement.prototype.subtractDate = function () {
        this.changeDate(-1);
    };
    /**
     * @return {?}
     */
    NovoCalendarDateChangeElement.prototype.addDate = function () {
        this.changeDate(1);
    };
    /**
     * @param {?} unit
     * @return {?}
     */
    NovoCalendarDateChangeElement.prototype.changeDate = function (unit) {
        var /** @type {?} */ addFn = {
            day: dateFns.addDays,
            week: dateFns.addWeeks,
            month: dateFns.addMonths
        }[this.view];
        this.viewDateChange.emit(addFn(this.viewDate, unit));
    };
    Object.defineProperty(NovoCalendarDateChangeElement.prototype, "startOfWeek", {
        /**
         * @return {?}
         */
        get: function () {
            return dateFns.startOfWeek(this.viewDate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoCalendarDateChangeElement.prototype, "endOfWeek", {
        /**
         * @return {?}
         */
        get: function () {
            return dateFns.endOfWeek(this.viewDate);
        },
        enumerable: true,
        configurable: true
    });
    return NovoCalendarDateChangeElement;
}());
NovoCalendarDateChangeElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-calendar-date-change',
                template: "\n    <div class=\"cal-date-change\">\n        <i class=\"bhi-arrow-left\" (click)=\"subtractDate()\" ></i>\n        <span [ngSwitch]=\"view\">\n            <span *ngSwitchCase=\"'month'\">{{ ( viewDate | month:locale ) + ' ' + ( viewDate | year:locale ) }}</span>\n            <span *ngSwitchCase=\"'week'\">{{ ( startOfWeek | monthday:locale:'long' ) + ' - ' + ( endOfWeek | endofweekdisplay:startOfWeek:locale:'long' ) }}</span>\n            <span *ngSwitchCase=\"'day'\">{{ ( viewDate | weekday:locale:'long' ) + ', ' + ( viewDate | month:locale ) + ' ' + ( viewDate | dayofmonth:locale ) }}</span>\n        </span>\n        <i class=\"bhi-arrow-right\" (click)=\"addDate()\"></i>\n    </div>\n  "
            },] },
];
/**
 * @nocollapse
 */
NovoCalendarDateChangeElement.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
]; };
NovoCalendarDateChangeElement.propDecorators = {
    'view': [{ type: core.Input },],
    'viewDate': [{ type: core.Input },],
    'locale': [{ type: core.Input },],
    'viewDateChange': [{ type: core.Output },],
};
var WEEKEND_DAY_NUMBERS = [0, 6];
var DAYS_IN_WEEK = 7;
var HOURS_IN_DAY = 24;
var MINUTES_IN_HOUR = 60;
var CalendarEventResponse = {};
CalendarEventResponse.Maybe = 0;
CalendarEventResponse.Accepted = 1;
CalendarEventResponse.Rejected = 2;
CalendarEventResponse[CalendarEventResponse.Maybe] = "Maybe";
CalendarEventResponse[CalendarEventResponse.Accepted] = "Accepted";
CalendarEventResponse[CalendarEventResponse.Rejected] = "Rejected";
/**
 * @param {?} __0
 * @return {?}
 */
function getExcludedDays(_d) {
    var startDate = _d.startDate, days = _d.days, excluded = _d.excluded;
    if (excluded.length < 1) {
        return 0;
    }
    var /** @type {?} */ day = startDate.getDay();
    var /** @type {?} */ reduce = 0;
    for (var /** @type {?} */ i = 0; i < days; i++) {
        if (day === DAYS_IN_WEEK) {
            day = 0;
        }
        if (excluded.some(function (e) { return e === day; })) {
            reduce++;
        }
        day++;
    }
    return reduce;
}
/**
 * @param {?} __0
 * @return {?}
 */
function getWeekViewEventOffset(_d) {
    var event = _d.event, startOfWeek$$1 = _d.startOfWeek, _e = _d.excluded, excluded = _e === void 0 ? [] : _e;
    if (event.start < startOfWeek$$1) {
        return 0;
    }
    var /** @type {?} */ distance = dateFns.differenceInDays(event.start, startOfWeek$$1);
    return distance - getExcludedDays({ startDate: startOfWeek$$1, days: distance, excluded: excluded });
}
/**
 * @param {?} __0
 * @return {?}
 */
function isEventIsPeriod(_d) {
    var event = _d.event, periodStart = _d.periodStart, periodEnd = _d.periodEnd;
    var /** @type {?} */ eventStart = event.start;
    var /** @type {?} */ eventEnd = event.end || event.start;
    if (eventStart > periodStart && eventStart < periodEnd) {
        return true;
    }
    if (eventEnd > periodStart && eventEnd < periodEnd) {
        return true;
    }
    if (eventStart < periodStart && eventEnd > periodEnd) {
        return true;
    }
    if (dateFns.isSameSecond(eventStart, periodStart) || dateFns.isSameSecond(eventStart, periodEnd)) {
        return true;
    }
    if (dateFns.isSameSecond(eventEnd, periodStart) || dateFns.isSameSecond(eventEnd, periodEnd)) {
        return true;
    }
    return false;
}
/**
 * @param {?} __0
 * @return {?}
 */
function getEventsInPeriod(_d) {
    var events = _d.events, periodStart = _d.periodStart, periodEnd = _d.periodEnd;
    return events.filter(function (event) { return isEventIsPeriod({ event: event, periodStart: periodStart, periodEnd: periodEnd }); });
}
/**
 * @param {?} events
 * @param {?} dayStart
 * @param {?} dayEnd
 * @return {?}
 */
function getEventsInTimeRange(events, dayStart, dayEnd) {
    return events.filter(function (event) {
        var /** @type {?} */ eventStart = event.start;
        var /** @type {?} */ eventEnd = event.end || eventStart;
        var /** @type {?} */ startOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfDay(eventStart), dayStart.hour), dayStart.minute);
        var /** @type {?} */ endOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfMinute(eventStart), dayEnd.hour), dayEnd.minute);
        return dateFns.isAfter(eventEnd, startOfView)
            && dateFns.isBefore(eventStart, endOfView);
    });
}
/**
 * @param {?} __0
 * @return {?}
 */
function getWeekDay(_d) {
    var date = _d.date;
    var /** @type {?} */ today = dateFns.startOfDay(new Date());
    return {
        date: date,
        isPast: date < today,
        isToday: dateFns.isSameDay(date, today),
        isFuture: date > today,
        isWeekend: WEEKEND_DAY_NUMBERS.indexOf(dateFns.getDay(date)) > -1
    };
}
/**
 * @param {?} __0
 * @return {?}
 */
function getWeekViewHeader(_d) {
    var viewDate = _d.viewDate, weekStartsOn = _d.weekStartsOn, _e = _d.excluded, excluded = _e === void 0 ? [] : _e;
    var /** @type {?} */ start = dateFns.startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    var /** @type {?} */ days = [];
    var _loop_3 = function (i) {
        var /** @type {?} */ date = dateFns.addDays(start, i);
        if (!excluded.some(function (e) { return date.getDay() === e; })) {
            days.push(getWeekDay({ date: date }));
        }
    };
    for (var /** @type {?} */ i = 0; i < DAYS_IN_WEEK; i++) {
        _loop_3(/** @type {?} */ i);
    }
    return days;
}
/**
 * @param {?} __0
 * @return {?}
 */
function getWeekView(_d) {
    var _e = _d.events, events = _e === void 0 ? [] : _e, viewDate = _d.viewDate, weekStartsOn = _d.weekStartsOn, _f = _d.excluded, excluded = _f === void 0 ? [] : _f, hourSegments = _d.hourSegments, segmentHeight = _d.segmentHeight, dayStart = _d.dayStart, dayEnd = _d.dayEnd;
    if (!events) {
        events = [];
    }
    var /** @type {?} */ startOfViewWeek = dateFns.startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    var /** @type {?} */ endOfViewWeek = dateFns.endOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    var /** @type {?} */ maxRange = DAYS_IN_WEEK - excluded.length;
    var /** @type {?} */ eventsMapped = getEventsInTimeRange(getEventsInPeriod({ events: events, periodStart: startOfViewWeek, periodEnd: endOfViewWeek }), dayStart, dayEnd).map(function (event) {
        var /** @type {?} */ offset = getWeekViewEventOffset({ event: event, startOfWeek: startOfViewWeek, excluded: excluded });
        var /** @type {?} */ span = 1; //getWeekViewEventSpan({ event, offset, startOfWeek: startOfViewWeek, excluded });
        return { event: event, offset: offset, span: span };
    }).filter(function (e) { return e.offset < maxRange; }).filter(function (e) { return e.span > 0; }).map(function (entry) { return ({
        event: entry.event,
        offset: entry.offset,
        span: entry.span,
        startsBeforeWeek: entry.event.start < startOfViewWeek,
        endsAfterWeek: (entry.event.end || entry.event.start) > endOfViewWeek,
        top: 0
    }); }).sort(function (itemA, itemB) {
        var /** @type {?} */ startSecondsDiff = dateFns.differenceInSeconds(itemA.event.start, itemB.event.start);
        if (startSecondsDiff === 0) {
            return dateFns.differenceInSeconds(itemB.event.end || itemB.event.start, itemA.event.end || itemA.event.start);
        }
        return startSecondsDiff;
    }).map(function (entry) {
        var /** @type {?} */ startOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfDay(entry.event.start), dayStart.hour), dayStart.minute);
        var /** @type {?} */ endOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfMinute(dateFns.endOfDay(entry.event.start)), dayEnd.hour), dayEnd.minute);
        var /** @type {?} */ eventStart = entry.event.start;
        var /** @type {?} */ eventEnd = entry.event.end || eventStart;
        var /** @type {?} */ hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
        if (eventStart > startOfView) {
            entry.top += dateFns.differenceInMinutes(eventStart, startOfView);
        }
        entry.top *= hourHeightModifier;
        var /** @type {?} */ startsBeforeDay = eventStart < startOfView;
        var /** @type {?} */ endsAfterDay = eventEnd > endOfView;
        var /** @type {?} */ startDate = startsBeforeDay ? startOfView : eventStart;
        var /** @type {?} */ endDate = endsAfterDay ? endOfView : eventEnd;
        var /** @type {?} */ height = dateFns.differenceInMinutes(endDate, startDate);
        if (!entry.event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        entry.height = height;
        return entry;
    });
    var /** @type {?} */ eventRows = [];
    var /** @type {?} */ allocatedEvents = [];
    eventsMapped.forEach(function (event, index$$1) {
        if (allocatedEvents.indexOf(event) === -1) {
            allocatedEvents.push(event);
            var /** @type {?} */ otherRowEvents = eventsMapped.slice(index$$1 + 1).filter(function (nextEvent) {
                return nextEvent.top === event.top && nextEvent.offset === event.offset;
            });
            if (otherRowEvents.length > 0) {
                var /** @type {?} */ totalEventsForRow = otherRowEvents.length + 1;
                event.span = (1 / totalEventsForRow);
                var /** @type {?} */ nextOffset_1 = event.span + event.offset;
                otherRowEvents.forEach(function (nextEvent) {
                    nextEvent.offset = nextOffset_1;
                    nextEvent.span = event.span;
                    nextOffset_1 = nextEvent.span + nextEvent.offset;
                });
                allocatedEvents.push.apply(allocatedEvents, otherRowEvents);
            }
            eventRows.push({
                row: [
                    event
                ].concat(otherRowEvents)
            });
        }
    });
    return eventRows;
}
/**
 * @param {?} __0
 * @return {?}
 */
function getMonthView(_d) {
    var _e = _d.events, events = _e === void 0 ? [] : _e, viewDate = _d.viewDate, weekStartsOn = _d.weekStartsOn, _f = _d.excluded, excluded = _f === void 0 ? [] : _f;
    if (!events) {
        events = [];
    }
    var /** @type {?} */ start = dateFns.startOfWeek(dateFns.startOfMonth(viewDate), { weekStartsOn: weekStartsOn });
    var /** @type {?} */ end = dateFns.endOfWeek(dateFns.endOfMonth(viewDate), { weekStartsOn: weekStartsOn });
    var /** @type {?} */ eventsInMonth = getEventsInPeriod({
        events: events,
        periodStart: start,
        periodEnd: end
    });
    var /** @type {?} */ days = [];
    var _loop_4 = function (i) {
        var /** @type {?} */ date = dateFns.addDays(start, i);
        if (!excluded.some(function (e) { return date.getDay() === e; })) {
            var /** @type {?} */ day = (getWeekDay({ date: date }));
            var /** @type {?} */ calEvents = getEventsInPeriod({
                events: eventsInMonth,
                periodStart: dateFns.startOfDay(date),
                periodEnd: dateFns.endOfDay(date)
            });
            day.inMonth = dateFns.isSameMonth(date, viewDate);
            day.events = calEvents;
            day.badgeTotal = calEvents.length;
            days.push(day);
        }
    };
    for (var /** @type {?} */ i = 0; i < dateFns.differenceInDays(end, start) + 1; i++) {
        _loop_4(/** @type {?} */ i);
    }
    var /** @type {?} */ totalDaysVisibleInWeek = DAYS_IN_WEEK - excluded.length;
    var /** @type {?} */ rows = Math.floor(days.length / totalDaysVisibleInWeek);
    var /** @type {?} */ rowOffsets = [];
    for (var /** @type {?} */ i = 0; i < rows; i++) {
        rowOffsets.push(i * totalDaysVisibleInWeek);
    }
    return {
        rowOffsets: rowOffsets,
        totalDaysVisibleInWeek: totalDaysVisibleInWeek,
        days: days
    };
}
/**
 * @param {?} __0
 * @return {?}
 */
function getDayView(_d) {
    var _e = _d.events, events = _e === void 0 ? [] : _e, viewDate = _d.viewDate, hourSegments = _d.hourSegments, dayStart = _d.dayStart, dayEnd = _d.dayEnd, eventWidth = _d.eventWidth, segmentHeight = _d.segmentHeight;
    if (!events) {
        events = [];
    }
    var /** @type {?} */ startOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfDay(viewDate), dayStart.hour), dayStart.minute);
    var /** @type {?} */ endOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfMinute(dateFns.endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
    var /** @type {?} */ previousDayEvents = [];
    var /** @type {?} */ dayViewEvents = getEventsInTimeRange(getEventsInPeriod({
        events: events.filter(function (event) { return !event.allDay; }),
        periodStart: startOfView,
        periodEnd: endOfView
    }), dayStart, dayEnd).sort(function (eventA, eventB) {
        return eventA.start.valueOf() - eventB.start.valueOf();
    }).map(function (event) {
        var /** @type {?} */ eventStart = event.start;
        var /** @type {?} */ eventEnd = event.end || eventStart;
        var /** @type {?} */ startsBeforeDay = eventStart < startOfView;
        var /** @type {?} */ endsAfterDay = eventEnd > endOfView;
        var /** @type {?} */ hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
        var /** @type {?} */ top = 0;
        if (eventStart > startOfView) {
            top += dateFns.differenceInMinutes(eventStart, startOfView);
        }
        top *= hourHeightModifier;
        var /** @type {?} */ startDate = startsBeforeDay ? startOfView : eventStart;
        var /** @type {?} */ endDate = endsAfterDay ? endOfView : eventEnd;
        var /** @type {?} */ height = dateFns.differenceInMinutes(endDate, startDate);
        if (!event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        var /** @type {?} */ bottom = top + height;
        var /** @type {?} */ overlappingPreviousEvents = previousDayEvents.filter(function (previousEvent) {
            var /** @type {?} */ previousEventTop = previousEvent.top;
            var /** @type {?} */ previousEventBottom = previousEvent.top + previousEvent.height;
            if (top < previousEventBottom && previousEventBottom < bottom) {
                return true;
            }
            else if (previousEventTop <= top && bottom <= previousEventBottom) {
                return true;
            }
            return false;
        });
        var /** @type {?} */ left = 0;
        while (overlappingPreviousEvents.some(function (previousEvent) { return previousEvent.left === left; })) {
            left += eventWidth;
        }
        var /** @type {?} */ dayEvent = {
            event: event,
            height: height,
            width: eventWidth,
            top: top,
            left: left,
            startsBeforeDay: startsBeforeDay,
            endsAfterDay: endsAfterDay
        };
        if (height > 0) {
            previousDayEvents.push(dayEvent);
        }
        return dayEvent;
    }).filter(function (dayEvent) { return dayEvent.height > 0; });
    var /** @type {?} */ width = Math.max.apply(Math, dayViewEvents.map(function (event) { return event.left + event.width; }));
    var /** @type {?} */ allDayEvents = getEventsInPeriod({
        events: events.filter(function (event) { return event.allDay; }),
        periodStart: dateFns.startOfDay(startOfView),
        periodEnd: dateFns.endOfDay(endOfView)
    });
    return {
        events: dayViewEvents,
        width: width,
        allDayEvents: allDayEvents
    };
}
/**
 * @param {?} __0
 * @return {?}
 */
function getDayViewHourGrid(_d) {
    var viewDate = _d.viewDate, hourSegments = _d.hourSegments, dayStart = _d.dayStart, dayEnd = _d.dayEnd;
    var /** @type {?} */ hours = [];
    var /** @type {?} */ startOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfDay(viewDate), dayStart.hour), dayStart.minute);
    var /** @type {?} */ endOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfMinute(dateFns.endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
    var /** @type {?} */ segmentDuration = MINUTES_IN_HOUR / hourSegments;
    var /** @type {?} */ startOfViewDay = dateFns.startOfDay(viewDate);
    for (var /** @type {?} */ i = 0; i < HOURS_IN_DAY; i++) {
        var /** @type {?} */ segments = [];
        for (var /** @type {?} */ j = 0; j < hourSegments; j++) {
            var /** @type {?} */ date = dateFns.addMinutes(dateFns.addHours(startOfViewDay, i), j * segmentDuration);
            if (date >= startOfView && date < endOfView) {
                segments.push({
                    date: date,
                    isStart: j === 0
                });
            }
        }
        if (segments.length > 0) {
            hours.push({ segments: segments });
        }
    }
    return hours;
}
/**
 * Shows all events on a given month. Example usage:
 *
 * ```
 * &lt;novo-calendar-month-view
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-month-view&gt;
 * ```
 */
var NovoCalendarMonthViewElement = /** @class */ (function () {
    /**
     * @hidden
     * @param {?} cdr
     * @param {?} locale
     */
    function NovoCalendarMonthViewElement(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * The locale used to format dates
         */
        this.locale = 'en-US';
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'top';
        /**
         * Called when the day cell is clicked
         */
        this.dayClicked = new core.EventEmitter();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new core.EventEmitter();
        /**
         * Called when an event is dragged and dropped
         */
        this.eventTimesChanged = new core.EventEmitter();
        this.viewDateChange = new core.EventEmitter();
        this.locale = locale;
    }
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.ngOnInit = function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.markForCheck();
            });
        }
    };
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.ngOnChanges = function (changes) {
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.viewDate || changes.events || changes.excludeDays) {
            this.refreshBody();
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.ngOnDestroy = function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    /**
     * @hidden
     * @param {?} day
     * @param {?} event
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.eventDropped = function (day, event) {
        var /** @type {?} */ year = dateFns.getYear(day.date);
        var /** @type {?} */ month = dateFns.getMonth(day.date);
        var /** @type {?} */ date = dateFns.getDate(day.date);
        var /** @type {?} */ newStart = dateFns.setYear(dateFns.setMonth(dateFns.setDate(event.start, date), month), year);
        var /** @type {?} */ newEnd;
        if (event.end) {
            var /** @type {?} */ secondsDiff = dateFns.differenceInSeconds(newStart, event.start);
            newEnd = dateFns.addSeconds(event.end, secondsDiff);
        }
        this.eventTimesChanged.emit({ event: event, newStart: newStart, newEnd: newEnd });
    };
    /**
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.refreshHeader = function () {
        this.columnHeaders = getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays
        });
    };
    /**
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.refreshBody = function () {
        var _this = this;
        this.view = getMonthView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays
        });
        if (this.dayModifier) {
            this.view.days.forEach(function (day) { return _this.dayModifier(day); });
        }
    };
    /**
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.refreshAll = function () {
        this.refreshHeader();
        this.refreshBody();
        this.viewDateChange.emit(this.viewDate);
    };
    return NovoCalendarMonthViewElement;
}());
NovoCalendarMonthViewElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-calendar-month',
                template: "\n    <div class=\"calendar-month-view\">\n       <novo-calendar-month-header\n         [(viewDate)]=\"viewDate\"\n         [days]=\"columnHeaders\"\n         [locale]=\"locale\"\n         [customTemplate]=\"headerTemplate\"\n         (viewDateChange)=\"refreshAll()\">\n       </novo-calendar-month-header>\n      <div class=\"calendar-days\">\n        <div *ngFor=\"let rowIndex of view.rowOffsets\">\n          <div class=\"calendar-cell-row\">\n            <novo-calendar-month-day\n              *ngFor=\"let day of view.days | slice : rowIndex : rowIndex + (view.totalDaysVisibleInWeek)\"\n              [day]=\"day\"\n              [locale]=\"locale\"\n              [customTemplate]=\"cellTemplate\"\n              (click)=\"dayClicked.emit({day: day})\"\n              (eventClicked)=\"eventClicked.emit({ day: day, event: $event.event})\">\n            </novo-calendar-month-day>\n          </div>\n        </div>\n      </div>\n    </div>\n  "
            },] },
];
/**
 * @nocollapse
 */
NovoCalendarMonthViewElement.ctorParameters = function () { return [
    { type: core.ChangeDetectorRef, },
    { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
]; };
NovoCalendarMonthViewElement.propDecorators = {
    'viewDate': [{ type: core.Input },],
    'events': [{ type: core.Input },],
    'excludeDays': [{ type: core.Input },],
    'dayModifier': [{ type: core.Input },],
    'refresh': [{ type: core.Input },],
    'locale': [{ type: core.Input },],
    'tooltipPosition': [{ type: core.Input },],
    'weekStartsOn': [{ type: core.Input },],
    'headerTemplate': [{ type: core.Input },],
    'cellTemplate': [{ type: core.Input },],
    'dayClicked': [{ type: core.Output },],
    'eventClicked': [{ type: core.Output },],
    'eventTimesChanged': [{ type: core.Output },],
    'viewDateChange': [{ type: core.Output },],
};
var NovoCalendarMonthHeaderElement = /** @class */ (function () {
    function NovoCalendarMonthHeaderElement() {
        /**
         * Called when the view date is changed
         */
        this.viewDateChange = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    NovoCalendarMonthHeaderElement.prototype.prevMonth = function () {
        this.viewDateChange.emit(dateFns.subMonths(this.viewDate, 1));
    };
    /**
     * @return {?}
     */
    NovoCalendarMonthHeaderElement.prototype.nextMonth = function () {
        this.viewDateChange.emit(dateFns.addMonths(this.viewDate, 1));
    };
    return NovoCalendarMonthHeaderElement;
}());
NovoCalendarMonthHeaderElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-calendar-month-header',
                template: "\n    <ng-template #defaultTemplate>\n      <div class=\"calendar-header\">\n        <div class=\"calendar-header-top\">\n          <button theme=\"icon\" icon=\"previous\" (click)=\"prevMonth($event)\"></button>\n          <div class=\"calendar-month\">{{ viewDate | month:locale }}</div>\n          <button theme=\"icon\" icon=\"next\" (click)=\"nextMonth($event)\"></button>\n        </div>\n        <div class=\"calendar-weekdays\">\n          <div\n            class=\"calendar-weekday\"\n            *ngFor=\"let day of days\"\n            [class.calendar-past]=\"day.isPast\"\n            [class.calendar-today]=\"day.isToday\"\n            [class.calendar-future]=\"day.isFuture\"\n            [class.calendar-weekend]=\"day.isWeekend\">\n            {{ day.date | weekday:locale }}\n          </div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{days: days, locale: locale, viewDate: viewDate}\">\n    </ng-template>\n  "
            },] },
];
/**
 * @nocollapse
 */
NovoCalendarMonthHeaderElement.ctorParameters = function () { return []; };
NovoCalendarMonthHeaderElement.propDecorators = {
    'viewDate': [{ type: core.Input },],
    'days': [{ type: core.Input },],
    'locale': [{ type: core.Input },],
    'customTemplate': [{ type: core.Input },],
    'viewDateChange': [{ type: core.Output },],
};
var NovoCalendarMonthDayElement = /** @class */ (function () {
    function NovoCalendarMonthDayElement() {
        this.eventClicked = new core.EventEmitter();
    }
    Object.defineProperty(NovoCalendarMonthDayElement.prototype, "accepted", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this.day) {
                return [];
            }
            return this.day.events.filter(function (evt) {
                return (evt.response === CalendarEventResponse.Accepted);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoCalendarMonthDayElement.prototype, "rejected", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this.day) {
                return [];
            }
            return this.day.events.filter(function (evt) {
                return (evt.response === CalendarEventResponse.Rejected);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoCalendarMonthDayElement.prototype, "maybes", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this.day) {
                return [];
            }
            return this.day.events.filter(function (evt) {
                return (evt.response === CalendarEventResponse.Maybe);
            });
        },
        enumerable: true,
        configurable: true
    });
    return NovoCalendarMonthDayElement;
}());
NovoCalendarMonthDayElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-calendar-month-day',
                template: "\n    <ng-template #defaultTemplate>\n      <div class=\"calendar-day-top\">\n        <span class=\"calendar-day-badge\" *ngIf=\"day.badgeTotal > 0\">{{ day.badgeTotal }}</span>\n        <span class=\"calendar-day-number\">{{ day.date | dayofmonth:locale }}</span>\n      </div>\n      <div class=\"calendar-events\">\n        <div\n          class=\"calendar-event\"\n          *ngFor=\"let type of day.events | groupBy : 'type'\"\n          [style.backgroundColor]=\"type?.value[0]?.color.primary\"\n          [ngClass]=\"type?.value[0]?.cssClass\"\n          (click)=\"$event.stopPropagation(); eventClicked.emit({event:type?.value[0]})\">\n          {{type?.value.length}}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        day: day,\n        locale: locale,\n        tooltipPosition: tooltipPosition,\n        eventClicked: eventClicked,\n        accepted: accepted,\n        rejected: rejected,\n        maybes: maybes\n      }\">\n    </ng-template>\n  ",
                host: {
                    '[class]': '"calendar-cell calendar-day-cell " + day?.cssClass',
                    '[class.calendar-day-accepted]': 'accepted.length',
                    '[class.calendar-day-rejected]': 'rejected.length',
                    '[class.calendar-past]': 'day.isPast',
                    '[class.calendar-today]': 'day.isToday',
                    '[class.calendar-future]': 'day.isFuture',
                    '[class.calendar-weekend]': 'day.isWeekend',
                    '[class.calendar-in-month]': 'day.inMonth',
                    '[class.calendar-out-month]': '!day.inMonth',
                    '[class.calendar-has-events]': 'day.events.length > 0',
                    '[style.backgroundColor]': 'day.backgroundColor'
                }
            },] },
];
/**
 * @nocollapse
 */
NovoCalendarMonthDayElement.ctorParameters = function () { return []; };
NovoCalendarMonthDayElement.propDecorators = {
    'day': [{ type: core.Input },],
    'locale': [{ type: core.Input },],
    'tooltipPosition': [{ type: core.Input },],
    'customTemplate': [{ type: core.Input },],
    'eventClicked': [{ type: core.Output },],
};
/**
 * @hidden
 */
var SEGMENT_HEIGHT = 30;
/**
 * Shows all events on a given week. Example usage:
 *
 * ```typescript
 * &lt;novo-calendar-week
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-week&gt;
 * ```
 */
var NovoCalendarWeekViewElement = /** @class */ (function () {
    /**
     * @hidden
     * @param {?} cdr
     * @param {?} locale
     */
    function NovoCalendarWeekViewElement(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'bottom';
        /**
         * The precision to display events.
         * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding
         */
        this.precision = 'days';
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new core.EventEmitter();
        /**
         * Called when a header week day is clicked
         */
        this.dayClicked = new core.EventEmitter();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new core.EventEmitter();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new core.EventEmitter();
        /**
         * @hidden
         */
        this.hours = [];
        /**
         * @hidden
         */
        this.eventRows = [];
        this.locale = locale;
    }
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.ngOnInit = function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.detectChanges();
            });
        }
    };
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.ngOnChanges = function (changes) {
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.events || changes.viewDate || changes.excludeDays) {
            this.refreshBody();
        }
        if (changes.viewDate ||
            changes.dayStartHour ||
            changes.dayStartMinute ||
            changes.dayEndHour ||
            changes.dayEndMinute) {
            this.refreshHourGrid();
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.ngOnDestroy = function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    /**
     * @param {?} eventRowContainer
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.getDayColumnWidth = function (eventRowContainer) {
        return Math.floor(eventRowContainer.offsetWidth / this.days.length);
    };
    /**
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.refreshHeader = function () {
        this.days = getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays
        });
    };
    /**
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.refreshBody = function () {
        this.eventRows = getWeekView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
            hourSegments: this.hourSegments,
            segmentHeight: SEGMENT_HEIGHT,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute
            },
        });
    };
    /**
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.refreshHourGrid = function () {
        this.hours = getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute
            }
        });
        // if (this.hourSegmentModifier) {
        //   this.hours.forEach(hour => {
        //     hour.segments.forEach(segment => this.hourSegmentModifier(segment));
        //   });
        // }
    };
    /**
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.refreshAll = function () {
        this.refreshHeader();
        this.refreshHourGrid();
        this.refreshBody();
    };
    return NovoCalendarWeekViewElement;
}());
NovoCalendarWeekViewElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-calendar-week',
                template: "\n    <div class=\"cal-week-view\" #weekViewContainer>\n      <novo-calendar-week-header\n        [days]=\"days\"\n        [locale]=\"locale\"\n        [customTemplate]=\"headerTemplate\"\n        (dayClicked)=\"dayClicked.emit($event)\">\n      </novo-calendar-week-header>\n      <div *ngFor=\"let eventRow of eventRows\" #eventRowContainer>\n        <div\n          class=\"cal-event-container\"\n          #event\n          *ngFor=\"let weekEvent of eventRow.row\"\n          [style.width]=\"((100 / days.length) * weekEvent.span) + '%'\"\n          [style.marginTop.px]=\"weekEvent.top\"\n          [style.height.px]=\"weekEvent.height\"\n          [style.marginLeft]=\"((100 / days.length) * weekEvent.offset) + '%'\">\n          <novo-calendar-week-event\n            [weekEvent]=\"weekEvent\"\n            [tooltipPosition]=\"tooltipPosition\"\n            [customTemplate]=\"eventTemplate\"\n            (eventClicked)=\"eventClicked.emit($event)\">\n          </novo-calendar-week-event>\n        </div>\n      </div>\n      <div class=\"cal-hour\" *ngFor=\"let hour of hours\" [style.minWidth.px]=\"view?.width + 70\">\n        <novo-calendar-day-hour-segment\n          *ngFor=\"let segment of hour.segments\"\n          [segment]=\"segment\"\n          [locale]=\"locale\"\n          [customTemplate]=\"hourSegmentTemplate\"\n          (click)=\"hourSegmentClicked.emit({date: segment.date})\">\n        </novo-calendar-day-hour-segment>\n      </div>\n    </div>\n  "
            },] },
];
/**
 * @nocollapse
 */
NovoCalendarWeekViewElement.ctorParameters = function () { return [
    { type: core.ChangeDetectorRef, },
    { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
]; };
NovoCalendarWeekViewElement.propDecorators = {
    'viewDate': [{ type: core.Input },],
    'events': [{ type: core.Input },],
    'excludeDays': [{ type: core.Input },],
    'refresh': [{ type: core.Input },],
    'locale': [{ type: core.Input },],
    'tooltipPosition': [{ type: core.Input },],
    'weekStartsOn': [{ type: core.Input },],
    'headerTemplate': [{ type: core.Input },],
    'eventTemplate': [{ type: core.Input },],
    'precision': [{ type: core.Input },],
    'hourSegments': [{ type: core.Input },],
    'dayStartHour': [{ type: core.Input },],
    'dayStartMinute': [{ type: core.Input },],
    'dayEndHour': [{ type: core.Input },],
    'dayEndMinute': [{ type: core.Input },],
    'hourSegmentTemplate': [{ type: core.Input },],
    'hourSegmentClicked': [{ type: core.Output },],
    'dayClicked': [{ type: core.Output },],
    'eventClicked': [{ type: core.Output },],
    'eventTimesChanged': [{ type: core.Output },],
};
var NovoCalendarWeekHeaderElement = /** @class */ (function () {
    function NovoCalendarWeekHeaderElement() {
        this.dayClicked = new core.EventEmitter();
        this.eventDropped = new core.EventEmitter();
    }
    return NovoCalendarWeekHeaderElement;
}());
NovoCalendarWeekHeaderElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-calendar-week-header',
                template: "\n    <ng-template #defaultTemplate>\n      <div class=\"cal-day-headers\">\n        <div\n          class=\"cal-header\"\n          *ngFor=\"let day of days\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [class.cal-drag-over]=\"day.dragOver\"\n          (click)=\"dayClicked.emit({date: day.date})\"\n          mwlDroppable\n          (dragEnter)=\"day.dragOver = true\"\n          (dragLeave)=\"day.dragOver = false\"\n          (drop)=\"day.dragOver = false; eventDropped.emit({event: $event.dropData.event, newStart: day.date})\">\n          <b>{{ day.date | weekday:locale:'long'}}</b><br>\n          <span>{{ day.date | monthday:locale }}</span>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{days: days, locale: locale, dayClicked: dayClicked, eventDropped: eventDropped}\">\n    </ng-template>\n  "
            },] },
];
/**
 * @nocollapse
 */
NovoCalendarWeekHeaderElement.ctorParameters = function () { return []; };
NovoCalendarWeekHeaderElement.propDecorators = {
    'days': [{ type: core.Input },],
    'locale': [{ type: core.Input },],
    'customTemplate': [{ type: core.Input },],
    'dayClicked': [{ type: core.Output },],
    'eventDropped': [{ type: core.Output },],
};
var NovoCalendarWeekEventElement = /** @class */ (function () {
    function NovoCalendarWeekEventElement() {
        this.eventClicked = new core.EventEmitter();
    }
    return NovoCalendarWeekEventElement;
}());
NovoCalendarWeekEventElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-calendar-week-event',
                template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-event\"\n        [class.cal-starts-within-week]=\"!weekEvent.startsBeforeWeek\"\n        [class.cal-ends-within-week]=\"!weekEvent.endsAfterWeek\"\n        [ngClass]=\"weekEvent.event?.cssClass\"\n        [tooltip]=\"weekEvent.event.description\"\n        [tooltipPosition]=\"tooltipPosition\"\n        (click)=\"eventClicked.emit({event: weekEvent.event})\">\n        <div class=\"cal-event-ribbon\" [style.backgroundColor]=\"weekEvent.event.color.primary\"></div>\n        <div class=\"cal-event-title\">{{weekEvent.event?.title}}</div>\n        <div class=\"cal-event-description\">{{weekEvent.event?.description}}</div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{weekEvent: weekEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked}\">\n    </ng-template>\n  "
            },] },
];
/**
 * @nocollapse
 */
NovoCalendarWeekEventElement.ctorParameters = function () { return []; };
NovoCalendarWeekEventElement.propDecorators = {
    'weekEvent': [{ type: core.Input },],
    'tooltipPosition': [{ type: core.Input },],
    'customTemplate': [{ type: core.Input },],
    'eventClicked': [{ type: core.Output },],
};
/**
 * @hidden
 */
var SEGMENT_HEIGHT$1 = 30;
/**
 * Shows all events on a given day. Example usage:
 *
 * ```typescript
 * &lt;novo-calendar-day
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-day&gt;
 * ```
 */
var NovoCalendarDayViewElement = /** @class */ (function () {
    /**
     * @hidden
     * @param {?} cdr
     * @param {?} locale
     */
    function NovoCalendarDayViewElement(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * The width in pixels of each event on the view
         */
        this.eventWidth = 150;
        /**
         * The grid size to snap resizing and dragging of events to
         */
        this.eventSnapSize = 30;
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'top';
        /**
         * Called when an event title is clicked
         */
        this.eventClicked = new core.EventEmitter();
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new core.EventEmitter();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new core.EventEmitter();
        /**
         * @hidden
         */
        this.hours = [];
        /**
         * @hidden
         */
        this.width = 0;
        this.locale = locale;
    }
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarDayViewElement.prototype.ngOnInit = function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.detectChanges();
            });
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarDayViewElement.prototype.ngOnDestroy = function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    NovoCalendarDayViewElement.prototype.ngOnChanges = function (changes) {
        if (changes.viewDate ||
            changes.dayStartHour ||
            changes.dayStartMinute ||
            changes.dayEndHour ||
            changes.dayEndMinute) {
            this.refreshHourGrid();
        }
        if (changes.viewDate ||
            changes.events ||
            changes.dayStartHour ||
            changes.dayStartMinute ||
            changes.dayEndHour ||
            changes.dayEndMinute ||
            changes.eventWidth) {
            this.refreshView();
        }
    };
    /**
     * @return {?}
     */
    NovoCalendarDayViewElement.prototype.refreshHourGrid = function () {
        var _this = this;
        this.hours = getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute
            }
        });
        if (this.hourSegmentModifier) {
            this.hours.forEach(function (hour) {
                hour.segments.forEach(function (segment) { return _this.hourSegmentModifier(segment); });
            });
        }
    };
    /**
     * @return {?}
     */
    NovoCalendarDayViewElement.prototype.refreshView = function () {
        this.view = getDayView({
            events: this.events,
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute
            },
            eventWidth: this.eventWidth,
            segmentHeight: SEGMENT_HEIGHT$1
        });
    };
    /**
     * @return {?}
     */
    NovoCalendarDayViewElement.prototype.refreshAll = function () {
        this.refreshHourGrid();
        this.refreshView();
    };
    return NovoCalendarDayViewElement;
}());
NovoCalendarDayViewElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-calendar-day',
                template: "\n    <div class=\"cal-day-view\" #dayViewContainer>\n      <novo-calendar-all-day-event\n        *ngFor=\"let event of view.allDayEvents\"\n        [event]=\"event\"\n        [customTemplate]=\"allDayEventTemplate\"\n        (eventClicked)=\"eventClicked.emit({event: event})\">\n      </novo-calendar-all-day-event>\n      <div class=\"cal-hour-rows\">\n        <div class=\"cal-events\">\n          <div\n            #event\n            *ngFor=\"let dayEvent of view?.events\"\n            class=\"cal-event-container\"\n            [style.marginTop.px]=\"dayEvent.top\"\n            [style.height.px]=\"dayEvent.height\"\n            [style.marginLeft.px]=\"dayEvent.left + 70\"\n            [style.width.px]=\"dayEvent.width - 1\">\n            <novo-calendar-day-event\n              [dayEvent]=\"dayEvent\"\n              [tooltipPosition]=\"tooltipPosition\"\n              [customTemplate]=\"eventTemplate\"\n              (eventClicked)=\"eventClicked.emit($event)\">\n            </novo-calendar-day-event>\n          </div>\n        </div>\n        <div class=\"cal-hour\" *ngFor=\"let hour of hours\" [style.minWidth.px]=\"view?.width + 70\">\n          <novo-calendar-day-hour-segment\n            *ngFor=\"let segment of hour.segments\"\n            [segment]=\"segment\"\n            [locale]=\"locale\"\n            [customTemplate]=\"hourSegmentTemplate\"\n            (click)=\"hourSegmentClicked.emit({date: segment.date})\">\n          </novo-calendar-day-hour-segment>\n        </div>\n      </div>\n    </div>\n  "
            },] },
];
/**
 * @nocollapse
 */
NovoCalendarDayViewElement.ctorParameters = function () { return [
    { type: core.ChangeDetectorRef, },
    { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
]; };
NovoCalendarDayViewElement.propDecorators = {
    'viewDate': [{ type: core.Input },],
    'events': [{ type: core.Input },],
    'hourSegments': [{ type: core.Input },],
    'dayStartHour': [{ type: core.Input },],
    'dayStartMinute': [{ type: core.Input },],
    'dayEndHour': [{ type: core.Input },],
    'dayEndMinute': [{ type: core.Input },],
    'eventWidth': [{ type: core.Input },],
    'refresh': [{ type: core.Input },],
    'locale': [{ type: core.Input },],
    'hourSegmentModifier': [{ type: core.Input },],
    'eventSnapSize': [{ type: core.Input },],
    'tooltipPosition': [{ type: core.Input },],
    'hourSegmentTemplate': [{ type: core.Input },],
    'allDayEventTemplate': [{ type: core.Input },],
    'eventTemplate': [{ type: core.Input },],
    'eventClicked': [{ type: core.Output },],
    'hourSegmentClicked': [{ type: core.Output },],
    'eventTimesChanged': [{ type: core.Output },],
};
var NovoCalendarDayEventElement = /** @class */ (function () {
    function NovoCalendarDayEventElement() {
        this.eventClicked = new core.EventEmitter();
    }
    return NovoCalendarDayEventElement;
}());
NovoCalendarDayEventElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-calendar-day-event',
                template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-event\"\n        [style.borderColor]=\"dayEvent.event.color.secondary\"\n        [class.cal-starts-within-day]=\"!dayEvent.startsBeforeDay\"\n        [class.cal-ends-within-day]=\"!dayEvent.endsAfterDay\"\n        [ngClass]=\"dayEvent.event.cssClass\"\n        [tooltip]=\"dayEvent.event.description\"\n        [tooltipPosition]=\"tooltipPosition\"\n        (click)=\"eventClicked.emit({event: dayEvent.event})\">\n          <div class=\"cal-event-ribbon\" [style.backgroundColor]=\"dayEvent.event.color.primary\"></div>\n          <div class=\"cal-event-group\">\n            <div class=\"cal-event-title\">{{dayEvent.event.title}}</div>\n            <div class=\"cal-event-description\">{{dayEvent.event?.description}}</div>\n          </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{dayEvent: dayEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked}\">\n    </ng-template>\n  "
            },] },
];
/**
 * @nocollapse
 */
NovoCalendarDayEventElement.ctorParameters = function () { return []; };
NovoCalendarDayEventElement.propDecorators = {
    'dayEvent': [{ type: core.Input },],
    'tooltipPosition': [{ type: core.Input },],
    'customTemplate': [{ type: core.Input },],
    'eventClicked': [{ type: core.Output },],
};
var NovoCalendarHourSegmentElement = /** @class */ (function () {
    function NovoCalendarHourSegmentElement() {
    }
    return NovoCalendarHourSegmentElement;
}());
NovoCalendarHourSegmentElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-calendar-day-hour-segment',
                template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-hour-segment\"\n        [class.cal-hour-start]=\"segment.isStart\"\n        [class.cal-after-hour-start]=\"!segment.isStart\"\n        [ngClass]=\"segment.cssClass\">\n        <div class=\"cal-time\">\n          {{ segment.date | hours:locale }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        segment: segment,\n        locale: locale\n      }\">\n    </ng-template>\n  "
            },] },
];
/**
 * @nocollapse
 */
NovoCalendarHourSegmentElement.ctorParameters = function () { return []; };
NovoCalendarHourSegmentElement.propDecorators = {
    'segment': [{ type: core.Input },],
    'locale': [{ type: core.Input },],
    'customTemplate': [{ type: core.Input },],
};
var NovoCalendarAllDayEventElement = /** @class */ (function () {
    function NovoCalendarAllDayEventElement() {
        this.eventClicked = new core.EventEmitter();
    }
    return NovoCalendarAllDayEventElement;
}());
NovoCalendarAllDayEventElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-calendar-all-day-event',
                template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-all-day-event\"\n        [style.backgroundColor]=\"event.color.secondary\"\n        [style.borderColor]=\"event.color.primary\">\n        {{event.title}}\n        <!--<novo-calendar-event-title\n          [event]=\"event\"\n          view=\"day\"\n          (click)=\"eventClicked.emit()\">\n        </novo-calendar-event-title>\n        <novo-calendar-event-actions [event]=\"event\"></novo-calendar-event-actions>-->\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        event: event,\n        eventClicked: eventClicked\n      }\">\n    </ng-template>\n  "
            },] },
];
/**
 * @nocollapse
 */
NovoCalendarAllDayEventElement.ctorParameters = function () { return []; };
NovoCalendarAllDayEventElement.propDecorators = {
    'event': [{ type: core.Input },],
    'customTemplate': [{ type: core.Input },],
    'eventClicked': [{ type: core.Output },],
};
var WeekdayPipe = /** @class */ (function () {
    /**
     * @param {?=} locale
     */
    function WeekdayPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    WeekdayPipe.prototype.transform = function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'short'; }
        return new Intl.DateTimeFormat(locale, { weekday: method }).format(date);
    };
    return WeekdayPipe;
}());
WeekdayPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'weekday' },] },
];
/**
 * @nocollapse
 */
WeekdayPipe.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
]; };
var MonthPipe = /** @class */ (function () {
    /**
     * @param {?=} locale
     */
    function MonthPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    MonthPipe.prototype.transform = function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'long'; }
        return new Intl.DateTimeFormat(locale, { month: method }).format(date);
    };
    return MonthPipe;
}());
MonthPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'month' },] },
];
/**
 * @nocollapse
 */
MonthPipe.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
]; };
var MonthDayPipe = /** @class */ (function () {
    /**
     * @param {?=} locale
     */
    function MonthDayPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    MonthDayPipe.prototype.transform = function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'short'; }
        return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(date);
    };
    return MonthDayPipe;
}());
MonthDayPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'monthday' },] },
];
/**
 * @nocollapse
 */
MonthDayPipe.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
]; };
var YearPipe = /** @class */ (function () {
    /**
     * @param {?=} locale
     */
    function YearPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    YearPipe.prototype.transform = function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'numeric'; }
        return new Intl.DateTimeFormat(locale, { year: method }).format(date);
    };
    return YearPipe;
}());
YearPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'year' },] },
];
/**
 * @nocollapse
 */
YearPipe.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
]; };
var HoursPipe = /** @class */ (function () {
    /**
     * @param {?=} locale
     */
    function HoursPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    HoursPipe.prototype.transform = function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'numeric'; }
        return new Intl.DateTimeFormat(locale, { hour: method }).format(date);
    };
    return HoursPipe;
}());
HoursPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'hours' },] },
];
/**
 * @nocollapse
 */
HoursPipe.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
]; };
var DayOfMonthPipe = /** @class */ (function () {
    /**
     * @param {?=} locale
     */
    function DayOfMonthPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    DayOfMonthPipe.prototype.transform = function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'numeric'; }
        return new Intl.DateTimeFormat(locale, { day: method }).format(date);
    };
    return DayOfMonthPipe;
}());
DayOfMonthPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'dayofmonth' },] },
];
/**
 * @nocollapse
 */
DayOfMonthPipe.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
]; };
var EndOfWeekDisplayPipe = /** @class */ (function () {
    /**
     * @param {?=} locale
     */
    function EndOfWeekDisplayPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} endOfWeek
     * @param {?} startOfWeek
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    EndOfWeekDisplayPipe.prototype.transform = function (endOfWeek$$1, startOfWeek$$1, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'short'; }
        if (endOfWeek$$1.getMonth() === startOfWeek$$1.getMonth()) {
            return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(endOfWeek$$1);
        }
        return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(endOfWeek$$1);
    };
    return EndOfWeekDisplayPipe;
}());
EndOfWeekDisplayPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'endofweekdisplay' },] },
];
/**
 * @nocollapse
 */
EndOfWeekDisplayPipe.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
]; };
// NG2
// APP
// Common Elements
// Month View
// Week View
// Day View
// Common
var NovoCalendarModule = /** @class */ (function () {
    function NovoCalendarModule() {
    }
    return NovoCalendarModule;
}());
NovoCalendarModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, NovoButtonModule, NovoTooltipModule, NovoPipesModule],
                declarations: [
                    NovoEventTypeLegendElement,
                    NovoCalendarMonthViewElement,
                    NovoCalendarMonthHeaderElement,
                    NovoCalendarMonthDayElement,
                    NovoCalendarWeekViewElement,
                    NovoCalendarWeekHeaderElement,
                    NovoCalendarWeekEventElement,
                    NovoCalendarDayViewElement,
                    NovoCalendarDayEventElement,
                    NovoCalendarHourSegmentElement,
                    NovoCalendarAllDayEventElement,
                    NovoCalendarDateChangeElement,
                    WeekdayPipe,
                    DayOfMonthPipe,
                    MonthPipe,
                    MonthDayPipe,
                    YearPipe,
                    HoursPipe,
                    EndOfWeekDisplayPipe
                ],
                exports: [
                    NovoEventTypeLegendElement,
                    NovoCalendarMonthViewElement,
                    NovoCalendarMonthHeaderElement,
                    NovoCalendarMonthDayElement,
                    NovoCalendarWeekViewElement,
                    NovoCalendarWeekHeaderElement,
                    NovoCalendarWeekEventElement,
                    NovoCalendarDayViewElement,
                    NovoCalendarDayEventElement,
                    NovoCalendarHourSegmentElement,
                    NovoCalendarAllDayEventElement,
                    NovoCalendarDateChangeElement,
                    WeekdayPipe,
                    DayOfMonthPipe,
                    MonthPipe,
                    MonthDayPipe,
                    YearPipe,
                    HoursPipe,
                    EndOfWeekDisplayPipe
                ]
            },] },
];
/**
 * @nocollapse
 */
NovoCalendarModule.ctorParameters = function () { return []; };
// NG2
var NovoToastElement = /** @class */ (function () {
    /**
     * @param {?} sanitizer
     */
    function NovoToastElement(sanitizer) {
        this.sanitizer = sanitizer;
        this.theme = 'danger';
        this.icon = 'caution';
        this.hasDialogue = false;
        this.isCloseable = false;
        this.show = false;
        this.animate = false;
        this.parent = null;
        this.launched = false;
    }
    Object.defineProperty(NovoToastElement.prototype, "message", {
        /**
         * @param {?} m
         * @return {?}
         */
        set: function (m) {
            this._message = this.sanitizer.bypassSecurityTrustHtml(m);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoToastElement.prototype.ngOnInit = function () {
        if (!this.launched) {
            // clear position and time
            this.position = null;
            this.time = null;
            // set icon and styling
            this.iconClass = "bhi-" + this.icon;
            this.alertTheme = this.theme + " toast-container embedded";
            if (this.hasDialogue) {
                this.alertTheme += ' dialogue';
            }
        }
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoToastElement.prototype.ngOnChanges = function (changes) {
        // set icon and styling
        this.iconClass = "bhi-" + this.icon;
        this.alertTheme = this.theme + " toast-container embedded";
        if (this.hasDialogue) {
            this.alertTheme += ' dialogue';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoToastElement.prototype.clickHandler = function (event) {
        if (!this.isCloseable) {
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            if (this.parent) {
                this.parent.hide(this);
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoToastElement.prototype.close = function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        this.parent.hide(this);
    };
    return NovoToastElement;
}());
NovoToastElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-toast',
                host: {
                    '[class]': 'alertTheme',
                    '[class.show]': 'show',
                    '[class.animate]': 'animate',
                    '[class.embedded]': 'embedded',
                    '(click)': '!isCloseable && clickHandler($event)'
                },
                template: "\n        <div class=\"toast-icon\">\n            <i [ngClass]=\"iconClass\"></i>\n        </div>\n        <div class=\"toast-content\">\n            <h5 *ngIf=\"title\">{{title}}</h5>\n            <p *ngIf=\"_message\" [class.message-only]=\"!title\" [innerHtml]=\"_message\"></p>\n            <div *ngIf=\"link\" class=\"link-generated\">\n                <input type=\"text\" [value]=\"link\" onfocus=\"this.select();\"/>\n            </div>\n            <div class=\"dialogue\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n        <div class=\"close-icon\" *ngIf=\"isCloseable\" (click)=\"close($event)\">\n            <i class=\"bhi-times\"></i>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoToastElement.ctorParameters = function () { return [
    { type: platformBrowser.DomSanitizer, },
]; };
NovoToastElement.propDecorators = {
    'theme': [{ type: core.Input },],
    'icon': [{ type: core.Input },],
    'title': [{ type: core.Input },],
    'hasDialogue': [{ type: core.Input },],
    'link': [{ type: core.Input },],
    'isCloseable': [{ type: core.Input },],
    'message': [{ type: core.Input },],
};
// NG2
// APP
var NovoToastModule = /** @class */ (function () {
    function NovoToastModule() {
    }
    return NovoToastModule;
}());
NovoToastModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule],
                declarations: [NovoToastElement],
                exports: [NovoToastElement],
                entryComponents: [NovoToastElement]
            },] },
];
/**
 * @nocollapse
 */
NovoToastModule.ctorParameters = function () { return []; };
var NovoHeaderSpacer = /** @class */ (function () {
    function NovoHeaderSpacer() {
    }
    return NovoHeaderSpacer;
}());
NovoHeaderSpacer.decorators = [
    { type: core.Component, args: [{
                selector: 'header-spacer',
                template: "\n        <ng-content></ng-content>\n    ",
            },] },
];
/**
 * @nocollapse
 */
NovoHeaderSpacer.ctorParameters = function () { return []; };
var NovoUtilsComponent = /** @class */ (function () {
    function NovoUtilsComponent() {
    }
    return NovoUtilsComponent;
}());
NovoUtilsComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'utils',
                template: "\n        <ng-content></ng-content>\n    ",
            },] },
];
/**
 * @nocollapse
 */
NovoUtilsComponent.ctorParameters = function () { return []; };
var NovoUtilActionComponent = /** @class */ (function () {
    function NovoUtilActionComponent() {
    }
    return NovoUtilActionComponent;
}());
NovoUtilActionComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'util-action, novo-action',
                template: "\n        <button theme=\"icon\" [icon]=\"icon\" [attr.inverse]=\"inverse\" [disabled]=\"disabled\"><ng-content></ng-content></button>\n    ",
            },] },
];
/**
 * @nocollapse
 */
NovoUtilActionComponent.ctorParameters = function () { return []; };
NovoUtilActionComponent.propDecorators = {
    'icon': [{ type: core.Input },],
    'inverse': [{ type: core.Input },],
    'disabled': [{ type: core.Input },],
};
var NovoHeaderComponent = /** @class */ (function () {
    function NovoHeaderComponent() {
        this.headerClass = 'novo-header';
        this.condensed = false;
        this.inverse = 'inverse';
    }
    /**
     * @return {?}
     */
    NovoHeaderComponent.prototype.ngOnInit = function () {
        this.iconClass = "bhi-" + this.icon;
        this.inverse =
            this.theme === 'white' ||
                this.theme === 'off-white' ||
                this.theme === 'light'
                ? undefined
                : 'inverse';
    };
    return NovoHeaderComponent;
}());
NovoHeaderComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'header[theme]',
                template: "\n        <section>\n            <div class=\"header-title\">\n                <ng-container *ngIf=\"title\">\n                    <i *ngIf=\"icon\" class=\"header-icon\" [ngClass]=\"iconClass\"></i>\n                    <div class=\"header-titles\">\n                        <h1>{{ title }}</h1>\n                        <small *ngIf=\"subTitle\">{{ subTitle }}</small>\n                    </div>\n                </ng-container>\n                <ng-container *ngIf=\"!title\">\n                    <ng-content select=\"novo-icon, [novo-icon]\"></ng-content>\n                    <div class=\"header-titles\">\n                        <ng-content select=\"h1, h2, h3, h4, h5, h6, small, [novo-title], [novo-subtitle]\"></ng-content>\n                    </div>\n                </ng-container>\n            </div>\n            <ng-content select=\"section\"></ng-content>\n            <span flex></span>\n            <ng-content select=\"utils\"></ng-content>\n            <!--<div class=\"novo-actions\"><ng-content select=\"novo-action,[novo-action]\"></ng-content></div>-->\n        </section>\n        <ng-content></ng-content>\n    ",
            },] },
];
/**
 * @nocollapse
 */
NovoHeaderComponent.ctorParameters = function () { return []; };
NovoHeaderComponent.propDecorators = {
    'title': [{ type: core.Input },],
    'subTitle': [{ type: core.Input },],
    'headerClass': [{ type: core.HostBinding, args: ['class',] },],
    'theme': [{ type: core.HostBinding, args: ['attr.theme',] }, { type: core.Input },],
    'icon': [{ type: core.Input },],
    'condensed': [{ type: core.HostBinding, args: ['class.condensed',] }, { type: core.Input },],
};
var NovoHeaderModule = /** @class */ (function () {
    function NovoHeaderModule() {
    }
    return NovoHeaderModule;
}());
NovoHeaderModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    common.CommonModule,
                    NovoButtonModule,
                ],
                declarations: [
                    NovoHeaderComponent,
                    NovoUtilActionComponent,
                    NovoUtilsComponent,
                    NovoHeaderSpacer
                ],
                exports: [
                    NovoHeaderComponent,
                    NovoUtilActionComponent,
                    NovoUtilsComponent,
                    NovoHeaderSpacer,
                ],
            },] },
];
/**
 * @nocollapse
 */
NovoHeaderModule.ctorParameters = function () { return []; };
// NG2
var NovoNavElement = /** @class */ (function () {
    function NovoNavElement() {
        this.theme = '';
        this.direction = '';
        this.condensed = false;
        this.items = [];
    }
    /**
     * @param {?} item
     * @return {?}
     */
    NovoNavElement.prototype.select = function (item) {
        /**
         * Deactivate all other tabs
         * @param {?} items
         * @return {?}
         */
        function _deactivateAllItems(items) {
            items.forEach(function (t) {
                if (t.active === true) {
                    // t.deselected.next();
                }
                t.active = false;
            });
        }
        _deactivateAllItems(this.items);
        item.active = true;
        if (this.outlet) {
            this.outlet.show(this.items.indexOf(item));
        }
        // TODO - remove hack to make DOM rerender - jgodi
        var /** @type {?} */ element = (document.querySelector('novo-tab-link.active span.indicator'));
        if (element) {
            element.style.opacity = 0.99;
            setTimeout(function () {
                element.style.opacity = 1;
            }, 10);
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    NovoNavElement.prototype.add = function (item) {
        if (this.items.length === 0) {
            item.active = true;
            // item.selected.next();
        }
        this.items.push(item);
    };
    return NovoNavElement;
}());
NovoNavElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-nav',
                template: '<ng-content></ng-content>'
            },] },
];
/**
 * @nocollapse
 */
NovoNavElement.ctorParameters = function () { return []; };
NovoNavElement.propDecorators = {
    'theme': [{ type: core.Input },],
    'direction': [{ type: core.Input },],
    'outlet': [{ type: core.Input },],
    'router': [{ type: core.Input },],
    'condensed': [{ type: core.HostBinding, args: ['class.condensed',] }, { type: core.Input },],
};
var NovoTabElement = /** @class */ (function () {
    /**
     * @param {?} nav
     */
    function NovoTabElement(nav) {
        this.active = false;
        this.disabled = false;
        this.activeChange = new core.EventEmitter();
        this.nav = nav;
        this.nav.add(this);
    }
    /**
     * @return {?}
     */
    NovoTabElement.prototype.select = function () {
        if (!this.disabled) {
            this.activeChange.emit(true);
            this.nav.select(this);
        }
    };
    return NovoTabElement;
}());
NovoTabElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-tab',
                host: {
                    '(click)': 'select()',
                    '[class.active]': 'active',
                    '[class.disabled]': 'disabled'
                },
                template: "\n        <div class=\"novo-tab-link\">\n            <ng-content></ng-content>\n        </div>\n        <span class=\"indicator\"></span>\n   "
            },] },
];
/**
 * @nocollapse
 */
NovoTabElement.ctorParameters = function () { return [
    { type: NovoNavElement, },
]; };
NovoTabElement.propDecorators = {
    'active': [{ type: core.Input },],
    'disabled': [{ type: core.Input },],
    'activeChange': [{ type: core.Output },],
};
var NovoTabButtonElement = /** @class */ (function () {
    /**
     * @param {?} nav
     */
    function NovoTabButtonElement(nav) {
        this.active = false;
        this.disabled = false;
        this.nav = nav;
        this.nav.add(this);
    }
    /**
     * @return {?}
     */
    NovoTabButtonElement.prototype.select = function () {
        if (!this.disabled) {
            this.nav.select(this);
        }
    };
    return NovoTabButtonElement;
}());
NovoTabButtonElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-tab-button',
                host: {
                    '(click)': 'select()',
                    '[class.active]': 'active',
                    '[class.disabled]': 'disabled'
                },
                template: '<ng-content></ng-content>'
            },] },
];
/**
 * @nocollapse
 */
NovoTabButtonElement.ctorParameters = function () { return [
    { type: NovoNavElement, },
]; };
NovoTabButtonElement.propDecorators = {
    'active': [{ type: core.Input },],
    'disabled': [{ type: core.Input },],
};
var NovoTabLinkElement = /** @class */ (function () {
    /**
     * @param {?} nav
     */
    function NovoTabLinkElement(nav) {
        this.active = false;
        this.disabled = false;
        this.nav = nav;
        this.nav.add(this);
    }
    /**
     * @return {?}
     */
    NovoTabLinkElement.prototype.select = function () {
        if (!this.disabled) {
            this.nav.select(this);
        }
    };
    return NovoTabLinkElement;
}());
NovoTabLinkElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-tab-link',
                host: {
                    '(click)': 'select()',
                    '[class.active]': 'active',
                    '[class.disabled]': 'disabled'
                },
                template: "\n        <div class=\"novo-tab-link\">\n            <ng-content></ng-content>\n        </div>\n        <span class=\"indicator\"></span>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoTabLinkElement.ctorParameters = function () { return [
    { type: NovoNavElement, },
]; };
NovoTabLinkElement.propDecorators = {
    'active': [{ type: core.Input },],
    'disabled': [{ type: core.Input },],
};
var NovoNavOutletElement = /** @class */ (function () {
    function NovoNavOutletElement() {
        this.items = [];
    }
    /**
     * @param {?} index
     * @return {?}
     */
    NovoNavOutletElement.prototype.show = function (index$$1) {
        var /** @type {?} */ item = this.items[index$$1];
        /**
         * Deactivates other tab items
         * @param {?} items - deactivated items
         * @return {?}
         */
        function _deactivateAllItems(items) {
            items.forEach(function (t) {
                if (t.active === true) {
                    // t.deselected.next();
                }
                t.active = false;
            });
        }
        _deactivateAllItems(this.items);
        item.active = true;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    NovoNavOutletElement.prototype.add = function (item) {
        if (this.items.length === 0) {
            item.active = true;
        }
        this.items.push(item);
    };
    return NovoNavOutletElement;
}());
NovoNavOutletElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-nav-outlet',
                template: '<ng-content></ng-content>'
            },] },
];
/**
 * @nocollapse
 */
NovoNavOutletElement.ctorParameters = function () { return []; };
var NovoNavContentElement = /** @class */ (function () {
    /**
     * @param {?} outlet
     */
    function NovoNavContentElement(outlet) {
        this.active = false;
        outlet.add(this);
    }
    return NovoNavContentElement;
}());
NovoNavContentElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-nav-content',
                host: {
                    '[class.active]': 'active'
                },
                template: '<ng-content></ng-content>'
            },] },
];
/**
 * @nocollapse
 */
NovoNavContentElement.ctorParameters = function () { return [
    { type: NovoNavOutletElement, },
]; };
NovoNavContentElement.propDecorators = {
    'active': [{ type: core.Input },],
};
var NovoNavHeaderElement = /** @class */ (function () {
    /**
     * @param {?} outlet
     */
    function NovoNavHeaderElement(outlet) {
        this.active = false;
        this.active = this.active || false;
        this.outlet = outlet;
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    NovoNavHeaderElement.prototype.show = function (event) {
        try {
            var /** @type {?} */ INDEX = this.outlet.items.indexOf(this.forElement);
            if (INDEX > -1) {
                this.outlet.show(INDEX);
            }
        }
        catch (err) {
            // do nothing
        }
    };
    return NovoNavHeaderElement;
}());
NovoNavHeaderElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-nav-header',
                host: {
                    '[class.active]': 'active',
                    '(click)': 'show($event)'
                },
                template: '<ng-content></ng-content>'
            },] },
];
/**
 * @nocollapse
 */
NovoNavHeaderElement.ctorParameters = function () { return [
    { type: NovoNavOutletElement, },
]; };
NovoNavHeaderElement.propDecorators = {
    'active': [{ type: core.Input },],
    'forElement': [{ type: core.Input, args: ['for',] },],
};
// NG2
// APP
var NovoTabModule = /** @class */ (function () {
    function NovoTabModule() {
    }
    return NovoTabModule;
}());
NovoTabModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule],
                declarations: [
                    NovoNavElement,
                    NovoTabElement,
                    NovoTabButtonElement,
                    NovoTabLinkElement,
                    NovoNavOutletElement,
                    NovoNavContentElement,
                    NovoNavHeaderElement
                ],
                exports: [
                    NovoNavElement,
                    NovoTabElement,
                    NovoTabButtonElement,
                    NovoTabLinkElement,
                    NovoNavOutletElement,
                    NovoNavContentElement,
                    NovoNavHeaderElement
                ]
            },] },
];
/**
 * @nocollapse
 */
NovoTabModule.ctorParameters = function () { return []; };
// NG2
// APP
// Value accessor for the component (supports ngModel)
var TILES_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoTilesElement; }),
    multi: true
};
var NovoTilesElement = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} ref
     */
    function NovoTilesElement(element, ref) {
        this.element = element;
        this.ref = ref;
        this.onChange = new core.EventEmitter();
        this.onDisabledOptionClick = new core.EventEmitter();
        this._options = [];
        this.activeTile = null;
        this.state = 'inactive';
        this.focused = false;
        this.onModelChange = function () {
        };
        this.onModelTouched = function () {
        };
    }
    /**
     * @param {?} focus
     * @return {?}
     */
    NovoTilesElement.prototype.setFocus = function (focus) {
        this.focused = focus;
    };
    /**
     * @return {?}
     */
    NovoTilesElement.prototype.ngAfterContentInit = function () {
        this.name = this.name || '';
        this.setupOptions();
    };
    /**
     * @param {?} change
     * @return {?}
     */
    NovoTilesElement.prototype.ngOnChanges = function (change) {
        if (change['options'] && change['options'].currentValue && !change['options'].firstChange) {
            this.name = this.name || '';
            this._options = [];
            this.setupOptions();
        }
    };
    /**
     * @return {?}
     */
    NovoTilesElement.prototype.setupOptions = function () {
        var _this = this;
        if (this.options && this.options.length && (this.options[0].value === undefined || this.options[0].value === null)) {
            this._options = this.options.map(function (x) {
                var /** @type {?} */ item = { value: x, label: x, checked: _this.model === x };
                if (item.checked) {
                    _this.setTile(item);
                }
                return item;
            });
        }
        else {
            this._options = this.options.map(function (x) {
                x.checked = _this.model === x.value;
                if (x.checked) {
                    _this.setTile(x);
                }
                return x;
            });
        }
        this.ref.markForCheck();
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoTilesElement.prototype.select = function (event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (item.checked) {
            return;
        }
        if (!item.disabled) {
            for (var _d = 0, _e = this._options; _d < _e.length; _d++) {
                var option = _e[_d];
                option.checked = false;
            }
            item.checked = !item.checked;
            this.onChange.emit(item.value);
            this.onModelChange(item.value);
            this.setTile(item);
            this.model = item.value;
        }
        else {
            this.onDisabledOptionClick.emit(item);
        }
        this.ref.markForCheck();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    NovoTilesElement.prototype.setTile = function (item) {
        if (item) {
            this.activeTile = item.value;
            this.moveTile();
        }
    };
    /**
     * @return {?}
     */
    NovoTilesElement.prototype.moveTile = function () {
        var _this = this;
        setTimeout(function () {
            var /** @type {?} */ ind = _this.element.nativeElement.querySelector('.active-indicator');
            var /** @type {?} */ el = _this.element.nativeElement.querySelector('.tile.active');
            if (ind && el) {
                var /** @type {?} */ w_1 = el.clientWidth;
                var /** @type {?} */ left_1 = el.offsetLeft;
                // These style adjustments need to occur in this order.
                setTimeout(function () {
                    ind.style.width = w_1 + 4 + "px";
                    setTimeout(function () {
                        ind.style.transform = "translateX(" + left_1 + "px)";
                        setTimeout(function () {
                            _this.state = 'active';
                            _this.ref.markForCheck();
                        });
                    });
                });
            }
        });
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoTilesElement.prototype.writeValue = function (model) {
        this.model = model;
        if (!Helpers.isBlank(model)) {
            this.setupOptions();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoTilesElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoTilesElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    return NovoTilesElement;
}());
NovoTilesElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-tiles',
                providers: [TILES_VALUE_ACCESSOR],
                template: "\n        <div class=\"tile-container\" [class.active]=\"focused\">\n            <div class=\"tile\" *ngFor=\"let option of _options; let i = index\" [ngClass]=\"{active: option.checked, disabled: option.disabled}\" (click)=\"select($event, option, i)\" [attr.data-automation-id]=\"option.label || option\">\n                <input class=\"tiles-input\" [name]=\"name\" type=\"radio\" [value]=\"option.checked || option\" [attr.id]=\"name + i\" (change)=\"select($event, option, i)\" (focus)=\"setFocus(true)\" (blur)=\"setFocus(false)\">\n                <label [attr.for]=\"name + i\" [attr.data-automation-id]=\"option.label || option\">\n                    {{ option.label || option }}\n                </label>\n            </div>\n            <span class=\"active-indicator\" [@tileState]=\"state\" [hidden]=\"activeTile === undefined || activeTile === null\"></span>\n        </div>\n    ",
                animations: [
                    core.trigger('tileState', [
                        core.state('inactive', core.style({
                            opacity: '0'
                        })),
                        core.state('active', core.style({
                            opacity: '1'
                        })),
                        core.transition('inactive => active', core.animate('200ms ease-in')),
                        core.transition('active => inactive', core.animate('200ms ease-out'))
                    ])
                ],
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoTilesElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.ChangeDetectorRef, },
]; };
NovoTilesElement.propDecorators = {
    'name': [{ type: core.Input },],
    'options': [{ type: core.Input },],
    'required': [{ type: core.Input },],
    'onChange': [{ type: core.Output },],
    'onDisabledOptionClick': [{ type: core.Output },],
};
// NG2
// APP
var NovoTilesModule = /** @class */ (function () {
    function NovoTilesModule() {
    }
    return NovoTilesModule;
}());
NovoTilesModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.ReactiveFormsModule],
                declarations: [NovoTilesElement],
                exports: [NovoTilesElement]
            },] },
];
/**
 * @nocollapse
 */
NovoTilesModule.ctorParameters = function () { return []; };
/**
 * A Promise that uses the deferred anti-pattern
 * @return {?}
 */
function Deferred() {
    var /** @type {?} */ temp = {};
    var /** @type {?} */ promise = new Promise(function (resolve, reject) {
        temp.resolve = resolve;
        temp.reject = reject;
    });
    promise.resolve = temp.resolve;
    promise.reject = temp.reject;
    return promise;
}
// NG2
var ComponentUtils = /** @class */ (function () {
    /**
     * @param {?} componentFactoryResolver
     */
    function ComponentUtils(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
    }
    /**
     * @param {?} ComponentClass
     * @param {?} location
     * @param {?=} providers
     * @return {?}
     */
    ComponentUtils.prototype.appendNextToLocation = function (ComponentClass, location, providers) {
        var /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(ComponentClass);
        var /** @type {?} */ parentInjector = location.parentInjector;
        var /** @type {?} */ childInjector = parentInjector;
        if (providers && providers.length > 0) {
            childInjector = core.ReflectiveInjector.fromResolvedProviders(providers, parentInjector);
        }
        return location.createComponent(componentFactory, location.length, childInjector);
    };
    /**
     * @param {?} ComponentClass
     * @param {?} location
     * @param {?=} providers
     * @return {?}
     */
    ComponentUtils.prototype.appendTopOfLocation = function (ComponentClass, location, providers) {
        var /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(ComponentClass);
        var /** @type {?} */ parentInjector = location.parentInjector;
        var /** @type {?} */ childInjector = parentInjector;
        if (providers && providers.length > 0) {
            childInjector = core.ReflectiveInjector.fromResolvedProviders(providers, parentInjector);
        }
        return location.createComponent(componentFactory, 0, childInjector);
    };
    return ComponentUtils;
}());
ComponentUtils.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
ComponentUtils.ctorParameters = function () { return [
    { type: core.ComponentFactoryResolver, },
]; };
// NG2
// APP
var NovoModalParams = /** @class */ (function () {
    function NovoModalParams() {
    }
    return NovoModalParams;
}());
/**
 * Reference to an opened dialog.
 */
var NovoModalRef = /** @class */ (function () {
    function NovoModalRef() {
        this.component = null;
        this.contentRef = null;
        this.containerRef = null;
        this.isClosed = false;
        this._onClosed = Deferred();
    }
    Object.defineProperty(NovoModalRef.prototype, "onClosed", {
        /**
         * @return {?}
         */
        get: function () {
            return this._onClosed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoModalRef.prototype.open = function () {
        document.body.classList.add('modal-open');
    };
    /**
     * @param {?=} result
     * @return {?}
     */
    NovoModalRef.prototype.close = function (result) {
        document.body.classList.remove('modal-open');
        if (this.contentRef) {
            this.contentRef.destroy();
        }
        if (this.containerRef) {
            this.containerRef.destroy();
        }
        this._onClosed.resolve(result);
    };
    return NovoModalRef;
}());
NovoModalRef.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
NovoModalRef.ctorParameters = function () { return []; };
var NovoModalContainerElement = /** @class */ (function () {
    /**
     * @param {?} modalRef
     * @param {?} componentUtils
     */
    function NovoModalContainerElement(modalRef, componentUtils) {
        this.modalRef = modalRef;
        this.componentUtils = componentUtils;
    }
    /**
     * @return {?}
     */
    NovoModalContainerElement.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.modalRef.contentRef = _this.componentUtils.appendNextToLocation(_this.modalRef.component, _this.container);
        });
    };
    return NovoModalContainerElement;
}());
NovoModalContainerElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-modal-container',
                template: '<span #container></span>'
            },] },
];
/**
 * @nocollapse
 */
NovoModalContainerElement.ctorParameters = function () { return [
    { type: NovoModalRef, },
    { type: ComponentUtils, },
]; };
NovoModalContainerElement.propDecorators = {
    'container': [{ type: core.ViewChild, args: ['container', { read: core.ViewContainerRef },] },],
};
var NovoModalElement = /** @class */ (function () {
    /**
     * @param {?} modalRef
     */
    function NovoModalElement(modalRef) {
        this.modalRef = modalRef;
    }
    /**
     * @return {?}
     */
    NovoModalElement.prototype.close = function () {
        this.modalRef.close();
    };
    return NovoModalElement;
}());
NovoModalElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-modal',
                template: "\n        <ng-content select=\"header\"></ng-content>\n        <ng-content select=\"section\"></ng-content>\n        <footer>\n            <ng-content select=\"button\"></ng-content>\n        </footer>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoModalElement.ctorParameters = function () { return [
    { type: NovoModalRef, },
]; };
var NovoModalNotificationElement = /** @class */ (function () {
    /**
     * @param {?} modalRef
     */
    function NovoModalNotificationElement(modalRef) {
        this.modalRef = modalRef;
        this.cancel = new core.EventEmitter();
        this.modalRef = modalRef;
    }
    /**
     * @return {?}
     */
    NovoModalNotificationElement.prototype.close = function () {
        this.cancel.emit();
        this.modalRef.close();
    };
    /**
     * @return {?}
     */
    NovoModalNotificationElement.prototype.ngOnInit = function () {
        switch (this.type) {
            case 'success':
                this.iconType = 'bhi-check';
                break;
            case 'warning':
                this.iconType = 'bhi-caution-o';
                break;
            case 'error':
                this.iconType = 'bhi-caution-o';
                break;
            case 'custom':
                this.iconType = "bhi-" + this.icon;
                break;
            default:
                break;
        }
    };
    return NovoModalNotificationElement;
}());
NovoModalNotificationElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-notification',
                template: "\n        <button class=\"modal-close\" theme=\"icon\" icon=\"times\" (click)=\"close()\"></button>\n        <header>\n            <ng-content select=\"label\"></ng-content>\n        </header>\n        <section class=\"notification-body\">\n            <i class=\"indicator\" [ngClass]=\"iconType\" *ngIf=\"iconType\"></i>\n            <ng-content select=\"h1\"></ng-content>\n            <ng-content select=\"h2\"></ng-content>\n            <ng-content select=\"p\"></ng-content>\n        </section>\n        <footer>\n            <ng-content select=\"button\"></ng-content>\n        </footer>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoModalNotificationElement.ctorParameters = function () { return [
    { type: NovoModalRef, },
]; };
NovoModalNotificationElement.propDecorators = {
    'type': [{ type: core.Input },],
    'icon': [{ type: core.Input },],
    'cancel': [{ type: core.Output },],
};
// NG2
// APP
var NovoModalModule = /** @class */ (function () {
    function NovoModalModule() {
    }
    return NovoModalModule;
}());
NovoModalModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, NovoButtonModule],
                declarations: [NovoModalContainerElement, NovoModalElement, NovoModalNotificationElement],
                exports: [NovoModalElement, NovoModalNotificationElement],
                entryComponents: [NovoModalContainerElement]
            },] },
];
/**
 * @nocollapse
 */
NovoModalModule.ctorParameters = function () { return []; };
// NG2
var NovoListElement = /** @class */ (function () {
    /**
     * @param {?} element
     */
    function NovoListElement(element) {
        this.element = element;
    }
    return NovoListElement;
}());
NovoListElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-list',
                host: {
                    '[class.vertical-list]': 'direction === "vertical"',
                    '[class.horizontal-list]': 'direction === "horizontal"',
                    '[attr.theme]': 'theme'
                },
                template: "\n        <ng-content></ng-content>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoListElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
]; };
NovoListElement.propDecorators = {
    'theme': [{ type: core.Input },],
    'direction': [{ type: core.Input },],
};
var NovoListItemElement = /** @class */ (function () {
    /**
     * @param {?} element
     */
    function NovoListItemElement(element) {
        this.element = element;
        this.avatar = false;
    }
    /**
     * @return {?}
     */
    NovoListItemElement.prototype.ngOnInit = function () {
        this.avatar = !!this.element.nativeElement.querySelector('item-avatar');
    };
    return NovoListItemElement;
}());
NovoListItemElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-list-item',
                template: "\n        <div class=\"list-item\" [ngClass]=\"{'avatar': avatar}\">\n            <ng-content select=\"item-header\"></ng-content>\n            <ng-content select=\"item-content\"></ng-content>   \n        </div>\n        <ng-content></ng-content>\n        <ng-content select=\"item-end\"></ng-content>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoListItemElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
]; };
var NovoItemAvatarElement = /** @class */ (function () {
    function NovoItemAvatarElement() {
    }
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoItemAvatarElement.prototype.ngOnChanges = function (changes) {
        this.iconClass = (this.icon) ? "bhi-" + this.icon : null;
        this.classMap = [this.iconClass, this.icon];
    };
    /**
     * @return {?}
     */
    NovoItemAvatarElement.prototype.ngOnInit = function () {
        this.ngOnChanges();
    };
    return NovoItemAvatarElement;
}());
NovoItemAvatarElement.decorators = [
    { type: core.Component, args: [{
                selector: 'item-avatar',
                template: "\n        <i *ngIf=\"iconClass\" [ngClass]=\"classMap\" theme=\"contained\"></i>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoItemAvatarElement.ctorParameters = function () { return []; };
NovoItemAvatarElement.propDecorators = {
    'icon': [{ type: core.Input },],
};
var NovoItemTitleElement = /** @class */ (function () {
    function NovoItemTitleElement() {
    }
    return NovoItemTitleElement;
}());
NovoItemTitleElement.decorators = [
    { type: core.Component, args: [{
                selector: 'item-title',
                template: "\n        <h6><ng-content></ng-content></h6>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoItemTitleElement.ctorParameters = function () { return []; };
var NovoItemHeaderElement = /** @class */ (function () {
    function NovoItemHeaderElement() {
    }
    return NovoItemHeaderElement;
}());
NovoItemHeaderElement.decorators = [
    { type: core.Component, args: [{
                selector: 'item-header',
                template: "\n        <ng-content select=\"item-avatar\"></ng-content>\n        <ng-content select=\"item-title\"></ng-content>\n        <ng-content select=\"item-header-end\"></ng-content>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoItemHeaderElement.ctorParameters = function () { return []; };
var NovoItemDateElement = /** @class */ (function () {
    function NovoItemDateElement() {
    }
    return NovoItemDateElement;
}());
NovoItemDateElement.decorators = [
    { type: core.Component, args: [{
                selector: 'item-header-end',
                template: "\n        <ng-content></ng-content>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoItemDateElement.ctorParameters = function () { return []; };
var NovoItemContentElement = /** @class */ (function () {
    function NovoItemContentElement() {
    }
    return NovoItemContentElement;
}());
NovoItemContentElement.decorators = [
    { type: core.Component, args: [{
                selector: 'item-content',
                host: {
                    '[class.vertical-list]': 'direction === "vertical"',
                    '[class.horizontal-list]': 'direction === "horizontal"'
                },
                template: "\n        <ng-content></ng-content>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoItemContentElement.ctorParameters = function () { return []; };
NovoItemContentElement.propDecorators = {
    'direction': [{ type: core.Input },],
};
var NovoItemEndElement = /** @class */ (function () {
    function NovoItemEndElement() {
    }
    return NovoItemEndElement;
}());
NovoItemEndElement.decorators = [
    { type: core.Component, args: [{
                selector: 'item-end',
                template: "\n        <ng-content></ng-content>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoItemEndElement.ctorParameters = function () { return []; };
// NG2
// APP
var NovoListModule = /** @class */ (function () {
    function NovoListModule() {
    }
    return NovoListModule;
}());
NovoListModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule],
                declarations: [NovoListElement, NovoListItemElement, NovoItemAvatarElement, NovoItemTitleElement, NovoItemContentElement, NovoItemEndElement, NovoItemHeaderElement, NovoItemDateElement],
                exports: [NovoListElement, NovoListItemElement, NovoItemAvatarElement, NovoItemTitleElement, NovoItemHeaderElement, NovoItemContentElement, NovoItemEndElement, NovoItemDateElement]
            },] },
];
/**
 * @nocollapse
 */
NovoListModule.ctorParameters = function () { return []; };
// NG2
// APP
/**
 * Outside click helper, makes to set the element as inactive when clicking outside of it
 */
var OutsideClick = /** @class */ (function () {
    /**
     * @param {?} element
     */
    function OutsideClick(element) {
        this.active = false;
        this.onActiveChange = new core.EventEmitter();
        // Component element
        this.element = element;
        // Outside click handler
        // Property because `this.func.bind(this)` returns a new function each time
        this.onOutsideClick = this.handleOutsideClick.bind(this);
    }
    /**
     * When the element is destroyed, make sure to remove the handler
     * @return {?}
     */
    OutsideClick.prototype.ngOnDestroy = function () {
        window.removeEventListener('click', this.onOutsideClick);
    };
    /**
     * Toggles the element as active and adds/removes the outside click handler
     * @param {?=} event
     * @param {?=} forceValue
     * @return {?}
     */
    OutsideClick.prototype.toggleActive = function (event, forceValue) {
        // Reverse the active property (if forceValue, use that)
        this.active = !Helpers.isBlank(forceValue) ? forceValue : !this.active;
        // Bind window click events to hide on outside click
        if (this.active) {
            window.addEventListener('click', this.onOutsideClick);
        }
        else {
            window.removeEventListener('click', this.onOutsideClick);
        }
        // Fire the active change event
        this.onActiveChange.emit(this.active);
    };
    /**
     * When clicking outside, checks the element and closes if outside
     * @param {?} event
     * @return {?}
     */
    OutsideClick.prototype.handleOutsideClick = function (event) {
        // If the elements doesn't contain the target element, it is an outside click
        var /** @type {?} */ outsideClick = !this.element.nativeElement.contains(event.target);
        if (this.otherElement && outsideClick) {
            outsideClick = !this.otherElement.nativeElement.contains(event.target);
        }
        if (outsideClick) {
            this.toggleActive(event, false);
        }
    };
    return OutsideClick;
}());
// Helper to keep track of key codes
var KeyCodes = {
    BACKSPACE: 8,
    TAB: 9,
    NUM_CENTER: 12,
    ENTER: 13,
    RETURN: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    PAUSE: 19,
    CAPS_LOCK: 20,
    ESC: 27,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    HASH_SYMBOL: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    PRINT_SCREEN: 44,
    INSERT: 45,
    DELETE: 46,
    ZERO: 48,
    ONE: 49,
    TWO: 50,
    THREE: 51,
    FOUR: 52,
    FIVE: 53,
    SIX: 54,
    SEVEN: 55,
    EIGHT: 56,
    NINE: 57,
    AT_SYMBOL: 64,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    CONTEXT_MENU: 93,
    NUM_ZERO: 96,
    NUM_ONE: 97,
    NUM_TWO: 98,
    NUM_THREE: 99,
    NUM_FOUR: 100,
    NUM_FIVE: 101,
    NUM_SIX: 102,
    NUM_SEVEN: 103,
    NUM_EIGHT: 104,
    NUM_NINE: 105,
    NUM_MULTIPLY: 106,
    NUM_PLUS: 107,
    NUM_MINUS: 109,
    NUM_PERIOD: 110,
    NUM_DIVISION: 111,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    DASH: 189,
    PERIOD: 190,
    FORWARD_SLASH: 191
};
// NG2
// APP
// Vendor
/**
 * \@name: PickerResults
 *
 * \@description This is the actual list of matches that gets injected into the DOM. It's also the piece that can be
 * overwritten if custom list options are needed.
 */
var BasePickerResults = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} ref
     */
    function BasePickerResults(element, ref) {
        this._term = '';
        this.selected = [];
        this.matches = [];
        this.hasError = false;
        this.isLoading = false;
        this.isStatic = true;
        this.page = 0;
        this.lastPage = false;
        this.autoSelectFirstOption = true;
        this.selectingMatches = false;
        this.element = element;
        this.ref = ref;
    }
    /**
     * @param {?} target
     * @return {?}
     */
    BasePickerResults.prototype.onScrollDown = function (target) {
        if (target) {
            var /** @type {?} */ offset = target.offsetHeight + target.scrollTop, /** @type {?} */ bottom = target.scrollHeight;
            if (offset >= bottom) {
                event.stopPropagation();
                if (!this.lastPage && !this.config.disableInfiniteScroll) {
                    this.processSearch();
                }
            }
        }
    };
    Object.defineProperty(BasePickerResults.prototype, "term", {
        /**
         * @return {?}
         */
        get: function () {
            return this._term;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            if (value !== this._term || this.page === 0) {
                this._term = value;
                this.page = 0;
                this.matches = [];
                this.processSearch(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} shouldReset
     * @return {?}
     */
    BasePickerResults.prototype.processSearch = function (shouldReset) {
        var _this = this;
        this.hasError = false;
        this.isLoading = true;
        this.ref.markForCheck();
        this.search(this.term).subscribe(function (results) {
            if (shouldReset) {
                _this.matches = [];
            }
            if (_this.isStatic) {
                _this.matches = _this.filterData(results);
            }
            else {
                _this.matches = _this.matches.concat(results);
                _this.lastPage = results && !results.length;
            }
            if (_this.matches.length > 0 && _this.autoSelectFirstOption && !_this.selectingMatches) {
                _this.nextActiveMatch();
            }
            _this.isLoading = false;
            _this.ref.markForCheck();
            setTimeout(function () { return _this.overlay.updatePosition(); }); // @bkimball: This was added for Dylan Schulte, 9.18.2017 4:14PM EST, you're welcome!
        }, function (err) {
            _this.hasError = _this.term && _this.term.length !== 0;
            _this.isLoading = false;
            _this.lastPage = true;
            if (_this.term && _this.term.length !== 0) {
                console.error(err); // tslint:disable-lineno
            }
            _this.ref.markForCheck();
        });
    };
    /**
     * @param {?} term
     * @param {?=} mode
     * @return {?}
     */
    BasePickerResults.prototype.search = function (term, mode) {
        var _this = this;
        var /** @type {?} */ options = this.config.options;
        return Observable.Observable.fromPromise(new Promise(function (resolve, reject) {
            // Check if there is match data
            if (options) {
                // Resolve the data
                if (Array.isArray(options)) {
                    _this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(_this.structureArray(options));
                }
                else if (term && term.length >= (_this.config.minSearchLength || 1)) {
                    if ((options.hasOwnProperty('reject') && options.hasOwnProperty('resolve')) || Object.getPrototypeOf(options).hasOwnProperty('then')) {
                        _this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        options.then(_this.structureArray.bind(_this)).then(resolve, reject);
                    }
                    else if (typeof options === 'function') {
                        _this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        options(term, ++_this.page)
                            .then(_this.structureArray.bind(_this))
                            .then(resolve, reject);
                    }
                    else {
                        // All other kinds of data are rejected
                        reject('The data provided is not an array or a promise');
                        throw new Error('The data provided is not an array or a promise');
                    }
                }
                else {
                    if (_this.config.defaultOptions) {
                        _this.isStatic = false;
                        if (typeof _this.config.defaultOptions === 'function') {
                            var /** @type {?} */ defaultOptions = _this.config.defaultOptions(term, ++_this.page);
                            if (Object.getPrototypeOf(defaultOptions).hasOwnProperty('then')) {
                                defaultOptions.then(_this.structureArray.bind(_this)).then(resolve, reject);
                            }
                            else {
                                resolve(_this.structureArray(defaultOptions));
                            }
                        }
                        else {
                            resolve(_this.structureArray(_this.config.defaultOptions));
                        }
                    }
                    else {
                        // No search term gets rejected
                        reject('No search term');
                    }
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    };
    /**
     * \@name structureArray
     * \@description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     * @param {?} collection - the data once getData resolves it
     *
     * @return {?}
     */
    BasePickerResults.prototype.structureArray = function (collection) {
        var _this = this;
        var /** @type {?} */ dataArray = collection.data ? collection.data : collection;
        if (dataArray && (typeof dataArray[0] === 'string' || typeof dataArray[0] === 'number')) {
            return collection.map(function (item) {
                return {
                    value: item,
                    label: item,
                };
            });
        }
        return dataArray.map(function (data) {
            var /** @type {?} */ value = _this.config.field ? data[_this.config.field] : data.value || data;
            if (_this.config.valueFormat) {
                value = Helpers.interpolate(_this.config.valueFormat, data);
            }
            var /** @type {?} */ label = _this.config.format ? Helpers.interpolate(_this.config.format, data) : data.label || String(value);
            return { value: value, label: label, data: data };
        });
    };
    /**
     * \@name filterData=
     * \@description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     * @param {?} matches - Collection of objects=
     *
     * @return {?}
     */
    BasePickerResults.prototype.filterData = function (matches) {
        var _this = this;
        if (this.term && matches) {
            return matches.filter(function (match) {
                return ~String(match.label)
                    .toLowerCase()
                    .indexOf(_this.term.toLowerCase());
            });
        }
        // Show no recent results template
        return matches;
    };
    /**
     * \@name selectActiveMatch
     *
     * \@description This function is called when the user presses the enter key to call the selectMatch method.
     * @return {?}
     */
    BasePickerResults.prototype.selectActiveMatch = function () {
        this.selectMatch();
    };
    /**
     * \@name prevActiveMatch
     *
     * \@description This function sets activeMatch to the match before the current node.
     * @return {?}
     */
    BasePickerResults.prototype.prevActiveMatch = function () {
        var /** @type {?} */ index$$1 = this.matches.indexOf(this.activeMatch);
        this.activeMatch = this.matches[index$$1 - 1 < 0 ? this.matches.length - 1 : index$$1 - 1];
        this.scrollToActive();
        this.ref.markForCheck();
    };
    /**
     * \@name nextActiveMatch
     *
     * \@description This function sets activeMatch to the match after the current node.
     * @return {?}
     */
    BasePickerResults.prototype.nextActiveMatch = function () {
        var /** @type {?} */ index$$1 = this.matches.indexOf(this.activeMatch);
        this.activeMatch = this.matches[index$$1 + 1 > this.matches.length - 1 ? 0 : index$$1 + 1];
        this.scrollToActive();
        this.ref.markForCheck();
    };
    /**
     * @return {?}
     */
    BasePickerResults.prototype.getListElement = function () {
        return this.element.nativeElement;
    };
    /**
     * @return {?}
     */
    BasePickerResults.prototype.getChildrenOfListElement = function () {
        var /** @type {?} */ children = [];
        if (this.getListElement()) {
            children = this.getListElement().children;
        }
        return children;
    };
    /**
     * @return {?}
     */
    BasePickerResults.prototype.scrollToActive = function () {
        var /** @type {?} */ list = this.getListElement();
        var /** @type {?} */ items = this.getChildrenOfListElement();
        var /** @type {?} */ index$$1 = this.matches.indexOf(this.activeMatch);
        var /** @type {?} */ item = items[index$$1];
        if (item) {
            list.scrollTop = item.offsetTop;
        }
    };
    /**
     * \@name selectActive
     * \@description
     * @param {?} match
     *
     * @return {?}
     */
    BasePickerResults.prototype.selectActive = function (match) {
        this.activeMatch = match;
    };
    /**
     * \@name isActive
     * \@description
     * @param {?} match
     *
     * @return {?}
     */
    BasePickerResults.prototype.isActive = function (match) {
        return this.activeMatch === match;
    };
    /**
     * \@name selectMatch
     * \@description
     * @param {?=} event
     * @param {?=} item
     *
     * @return {?}
     */
    BasePickerResults.prototype.selectMatch = function (event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        var /** @type {?} */ selected = this.activeMatch;
        if (selected && this.parent) {
            this.parent.value = selected;
            this.selectingMatches = true;
            if (this.parent.closeOnSelect) {
                this.parent.hideResults();
                this.selectingMatches = false;
            }
        }
        this.ref.markForCheck();
        return false;
    };
    /**
     * \@name escapeRegexp
     * \@description This function captures the whole query string and replace it with the string that will be used to
     * match.
     * @param {?} queryToEscape
     *
     * @return {?}
     */
    BasePickerResults.prototype.escapeRegexp = function (queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    };
    /**
     * \@name highlight
     * \@description This function should return a <strong>-tag wrapped HTML string.
     * @param {?} match
     * @param {?} query
     *
     * @return {?}
     */
    BasePickerResults.prototype.highlight = function (match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query ? match.replace(new RegExp(this.escapeRegexp(query), 'gi'), '<strong>$&</strong>') : match;
    };
    /**
     * @param {?} match
     * @return {?}
     */
    BasePickerResults.prototype.preselected = function (match) {
        return (this.selected.findIndex(function (item) {
            var /** @type {?} */ isPreselected = false;
            if (item && item.value && match && match.value) {
                if (item.value.id && match.value.id) {
                    isPreselected = item.value.id === match.value.id;
                }
                else {
                    isPreselected = item.value === match.value;
                }
            }
            return isPreselected;
        }) !== -1);
    };
    return BasePickerResults;
}());
BasePickerResults.propDecorators = {
    'matches': [{ type: core.Input },],
    'onScrollDown': [{ type: core.HostListener, args: ['scroll', ['$event.target'],] },],
};
// NG2
// APP
var PickerResults = /** @class */ (function (_super) {
    __extends(PickerResults, _super);
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} ref
     */
    function PickerResults(element, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.labels = labels;
        return _this;
    }
    /**
     * @return {?}
     */
    PickerResults.prototype.getListElement = function () {
        return this.element.nativeElement.querySelector('novo-list');
    };
    return PickerResults;
}(BasePickerResults));
PickerResults.decorators = [
    { type: core.Component, args: [{
                selector: 'picker-results',
                host: {
                    'class': 'active'
                },
                template: "\n        <novo-list *ngIf=\"matches.length > 0\" direction=\"vertical\">\n            <novo-list-item\n                *ngFor=\"let match of matches\"\n                (click)=\"selectMatch($event)\"\n                [class.active]=\"match === activeMatch\"\n                (mouseenter)=\"selectActive(match)\"\n                [class.disabled]=\"preselected(match)\">\n                <item-content>\n                    <span [innerHtml]=\"highlight(match.label, term)\"></span>\n                </item-content>\n            </novo-list-item>\n        </novo-list>\n        <div class=\"picker-loader\" *ngIf=\"isLoading && matches.length === 0\">\n            <novo-loading theme=\"line\"></novo-loading>\n        </div>\n        <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n        <p class=\"picker-null-results\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.pickerEmpty }}</p>\n    "
            },] },
];
/**
 * @nocollapse
 */
PickerResults.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
    { type: core.ChangeDetectorRef, },
]; };
// NG2
// Vendor
// APP
var QuickNoteResults = /** @class */ (function (_super) {
    __extends(QuickNoteResults, _super);
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} ref
     */
    function QuickNoteResults(element, labels, ref) {
        var _this = _super.call(this, element, labels, ref) || this;
        _this.labels = labels;
        // Mode that the quick note is in for tagging
        _this.taggingMode = '';
        return _this;
    }
    Object.defineProperty(QuickNoteResults.prototype, "term", {
        /**
         * @return {?}
         */
        get: function () {
            return this._term;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            var _this = this;
            this._term = value.searchTerm;
            this.taggingMode = value.taggingMode;
            this.hasError = false;
            this.isLoading = true;
            this.search(value, this.taggingMode)
                .subscribe(function (results) {
                _this.matches = _this.isStatic ? _this.filterData(results) : results;
                _this.isLoading = false;
            }, function () {
                _this.hasError = true;
                _this.isLoading = false;
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} term
     * @param {?} taggingMode
     * @return {?}
     */
    QuickNoteResults.prototype.search = function (term, taggingMode) {
        var _this = this;
        var /** @type {?} */ searchCall = this.config.options[taggingMode];
        return Observable.Observable.fromPromise(new Promise(function (resolve, reject) {
            // Check if there is match data
            if (searchCall) {
                // Resolve the data
                if (Array.isArray(searchCall)) {
                    _this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(_this.structureArray(searchCall));
                }
                else if ((searchCall.hasOwnProperty('reject') && searchCall.hasOwnProperty('resolve')) || Object.getPrototypeOf(searchCall).hasOwnProperty('then')) {
                    _this.isStatic = false;
                    // Promises (ES6 or Deferred) are resolved whenever they resolve
                    searchCall
                        .then(_this.structureArray.bind(_this))
                        .then(resolve, reject);
                }
                else if (typeof searchCall === 'function') {
                    _this.isStatic = false;
                    // Promises (ES6 or Deferred) are resolved whenever they resolve
                    searchCall(term)
                        .then(_this.structureArray.bind(_this))
                        .then(resolve, reject);
                }
                else {
                    // All other kinds of data are rejected
                    reject('The data provided is not an array or a promise');
                    throw new Error('The data provided is not an array or a promise');
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    };
    /**
     * \@name structureArray
     * \@description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     * @param {?} collection - the data once getData resolves it
     *
     * @return {?}
     */
    QuickNoteResults.prototype.structureArray = function (collection) {
        var _this = this;
        if (collection && (typeof collection[0] === 'string' || typeof collection[0] === 'number')) {
            return collection.map(function (item) {
                return {
                    value: item,
                    label: item
                };
            });
        }
        return collection.map(function (data) {
            var /** @type {?} */ value = _this.config.field ? data[_this.config.field[_this.taggingMode]] : (data.value || data);
            var /** @type {?} */ label = _this.config.format ? Helpers.interpolate(_this.config.format[_this.taggingMode], data) : data.label || String(value);
            return { value: value, label: label, data: data };
        });
    };
    /**
     * \@name selectMatch
     * \@description
     * @param {?} event
     *
     * @return {?}
     */
    QuickNoteResults.prototype.selectMatch = function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        var /** @type {?} */ selected = this.activeMatch;
        if (selected) {
            this.parent.onSelected(this.taggingMode, selected);
            this.parent.hideResults();
        }
        return false;
    };
    return QuickNoteResults;
}(PickerResults));
QuickNoteResults.decorators = [
    { type: core.Component, args: [{
                selector: 'quick-note-results',
                host: {
                    'class': 'active'
                },
                template: "\n        <novo-loading theme=\"line\" *ngIf=\"isLoading && !matches.length\"></novo-loading>\n        <novo-list *ngIf=\"matches.length > 0\">\n            <novo-list-item\n                *ngFor=\"let match of matches\"\n                (click)=\"selectMatch($event)\"\n                [class.active]=\"match===activeMatch\"\n                (mouseenter)=\"selectActive(match)\">\n                <item-content>\n                    <p [innerHtml]=\"highlight(match.label, term)\"></p>\n                </item-content>\n            </novo-list-item>\n        </novo-list>\n        <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.quickNoteError }}</p>\n        <p class=\"picker-null\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.quickNoteEmpty }}</p>\n    "
            },] },
];
/**
 * @nocollapse
 */
QuickNoteResults.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
    { type: core.ChangeDetectorRef, },
]; };
// NG2
// APP
// Value accessor for the component (supports ngModel)
var QUICK_NOTE_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return QuickNoteElement; }),
    multi: true
};
var QuickNoteElement = /** @class */ (function (_super) {
    __extends(QuickNoteElement, _super);
    /**
     * @param {?} zone
     * @param {?} element
     * @param {?} componentUtils
     */
    function QuickNoteElement(zone, element, componentUtils) {
        var _this = _super.call(this, element) || this;
        _this.zone = zone;
        _this.componentUtils = componentUtils;
        _this.startupFocus = false;
        // Emitter for selects
        _this.focus = new core.EventEmitter();
        _this.blur = new core.EventEmitter();
        _this.change = new core.EventEmitter();
        _this.placeholderVisible = false;
        _this._placeholderElement = null;
        _this.onModelChange = function () {
        };
        _this.onModelTouched = function () {
        };
        // Bind to the active change event from the OutsideClick
        _this.onActiveChange.subscribe(function (active) {
            if (!active) {
                setTimeout(function () {
                    _this.hideResults();
                });
            }
        });
        return _this;
    }
    /**
     * @return {?}
     */
    QuickNoteElement.prototype.ngOnInit = function () {
        // Make sure we have a proper config
        if (!this.config) {
            throw new Error('No config set for QuickNote!');
        }
        // Make sure that we have triggers
        if (!this.config.triggers) {
            throw new Error('QuickNote config must supply triggers!');
        }
        // Make sure that we have options
        if (!this.config.options) {
            throw new Error('QuickNote config must supply options!');
        }
        // Allow for callers to use a custom results template class in the config
        this.resultsComponent = this.config.resultsTemplate || QuickNoteResults;
    };
    /**
     * @return {?}
     */
    QuickNoteElement.prototype.ngOnDestroy = function () {
        var _this = this;
        // Tear down the CKEditor instance
        if (this.ckeInstance) {
            this.ckeInstance.focusManager.blur(true); // Remove focus from editor
            setTimeout(function () {
                _this.ckeInstance.removeAllListeners();
                CKEDITOR.instances[_this.ckeInstance.name].destroy();
                _this.ckeInstance.destroy();
                _this.ckeInstance = null;
            });
        }
    };
    /**
     * Connect to key/mouse events from CKEditor after the editor has been initialized
     * @return {?}
     */
    QuickNoteElement.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!CKEDITOR) {
            console.error('Make sure to include CKEditor sources in your dependencies!');
            return;
        }
        // Replace the textarea with an instance of CKEditor
        this.ckeInstance = CKEDITOR.replace(this.host.nativeElement, this.getCKEditorConfig());
        // Set initial value of the note in the editor
        this.writeValue(this.model);
        // Connect to the key event in CKEditor for showing results dropdown
        this.ckeInstance.on('key', function (event) {
            if (!_this.onKey(event.data.domEvent.$)) {
                event.cancel();
            }
        });
        // Connect to the change event in CKEditor for debouncing user modifications
        this.ckeInstance.on('change', function () {
            // Debounce update
            if (_this.debounceTimeout) {
                clearTimeout(_this.debounceTimeout);
            }
            _this.debounceTimeout = setTimeout(function () {
                // Run within the context of this angular element since we don't need to cancel event
                _this.zone.run(function () {
                    _this.onValueChange();
                });
                _this.debounceTimeout = null;
            }, 250);
        });
        // Propagate blur events from CKEditor to the Element's listeners
        this.ckeInstance.on('blur', function (event) {
            _this.showPlaceholder();
            _this.blur.emit(event);
        });
        // Propagate blur events from CKEditor to the Element's listeners
        this.ckeInstance.on('focus', function (event) {
            _this.hidePlaceholder();
            _this.focus.emit(event);
        });
        // Show placeholder if the note is empty, after the editor is instantiated
        this.ckeInstance.on('instanceReady', function (event) {
            _this.showPlaceholder();
        });
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    QuickNoteElement.prototype.onTouched = function (event) {
        this.onModelTouched();
    };
    /**
     * Handles setting the model and the view from the outside caller or the user's typing
     *
     * @param {?} model A model that has a note (html content) and references (array of objects)
     * @return {?}
     */
    QuickNoteElement.prototype.writeValue = function (model) {
        // Set value of the model
        if (model && (model.references || model.note)) {
            this.model = {
                note: model.note || '',
                references: model.references || {}
            };
        }
        else {
            this.model = {
                note: model,
                references: {}
            };
        }
        // Set the note html value in the editor
        if (this.ckeInstance) {
            this.ckeInstance.setData(this.model.note);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    QuickNoteElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    QuickNoteElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * If a renderer is not provided, the QuickNote will default to using this one, an anchor tag with no href
     * @param {?} symbol
     * @param {?} item
     * @return {?}
     */
    QuickNoteElement.defaultRenderer = function (symbol, item) {
        return "<a>" + symbol + item.label + "</a>";
    };
    /**
     * Returns the renderer for a given tagging mode if it exists in the config, otherwise the default.
     * @param {?} taggingMode
     * @return {?}
     */
    QuickNoteElement.prototype.getRenderer = function (taggingMode) {
        return this.config.renderer ? this.config.renderer[taggingMode] : QuickNoteElement.defaultRenderer;
    };
    /**
     * Called every time a keystroke is made in the editor. Listens for particular keys (e.g. UP arrow, ESC, etc.)
     * to handle certain behaviors of the picker.
     *
     * Runs within the context of the CKEditor, so actions that affect the view have to be run back inside of the
     * Angular zone of this class.
     *
     * @param {?} event The key press event
     * @return {?} true to allow the event to occur, false to cancel the event
     */
    QuickNoteElement.prototype.onKey = function (event) {
        var _this = this;
        if (event.key) {
            if (this.quickNoteResults) {
                // Hide results on escape key
                if (event.keyCode === KeyCodes.ESC) {
                    this.zone.run(function () {
                        _this.hideResults();
                    });
                    return false;
                }
                // Navigation inside the results
                if (event.keyCode === KeyCodes.UP) {
                    this.zone.run(function () {
                        _this.quickNoteResults.instance.prevActiveMatch();
                    });
                    return false;
                }
                if (event.keyCode === KeyCodes.DOWN) {
                    this.zone.run(function () {
                        _this.quickNoteResults.instance.nextActiveMatch();
                    });
                    return false;
                }
                if (event.keyCode === KeyCodes.ENTER) {
                    this.zone.run(function () {
                        _this.quickNoteResults.instance.selectActiveMatch();
                    });
                    return false;
                }
            }
            else {
                // Loop through all triggers and turn on tagging mode if the user just pressed a trigger character
                var /** @type {?} */ triggers_1 = this.config.triggers || {};
                Object.keys(triggers_1).forEach(function (key) {
                    var /** @type {?} */ trigger$$1 = triggers_1[key] || {};
                    if (event.key === trigger$$1) {
                        _this.isTagging = true;
                        _this.taggingMode = key;
                    }
                });
            }
        }
        return true;
    };
    /**
     * Debounced method that is run in the proper Angular context when the user has modified the CKEditor.
     * After the value has been updated in CKEditor, this will propagate that change to the model and listeners.
     * @return {?}
     */
    QuickNoteElement.prototype.onValueChange = function () {
        // Get the html text in CKEditor
        var /** @type {?} */ value = this.ckeInstance.getData();
        // Remove empty 'ZERO WIDTH SPACE' characters that can get added erroneously by the editor
        var /** @type {?} */ regex = new RegExp(String.fromCharCode(8203), 'g');
        value = value.replace(regex, '');
        // Make sure that any references in the model are still valid
        this.validateReferences();
        // Possibly show results if the user has entered a search term
        this.showResults();
        // Propagate change to ngModel for form validation, and send null if the note is empty
        var /** @type {?} */ newModel = null;
        if (value) {
            newModel = {
                note: value,
                references: this.model.references
            };
        }
        // Inform listeners to the ngModel change event that something has changed
        this.onModelChange(newModel);
        // Inform listeners of the `@Output() change` event that the model has been updated
        this.change.emit(newModel);
        // Inform listeners to the ngModel touched event that something has changed
        this.onTouched();
    };
    /**
     * Creates an instance of the results (called popup) and adds all the bindings to that instance.
     * @return {?}
     */
    QuickNoteElement.prototype.showResults = function () {
        if (this.isTagging) {
            var /** @type {?} */ searchTerm = this.getSearchTerm();
            if (searchTerm.length) {
                // Update Matches
                if (this.quickNoteResults) {
                    // Update existing list
                    this.quickNoteResults.instance.term = {
                        searchTerm: searchTerm,
                        taggingMode: this.taggingMode
                    };
                }
                else {
                    // Create the results DOM element
                    this.quickNoteResults = this.componentUtils.appendNextToLocation(this.resultsComponent, this.results);
                    this.quickNoteResults.instance.parent = this;
                    this.quickNoteResults.instance.config = this.config;
                    this.quickNoteResults.instance.term = {
                        searchTerm: searchTerm,
                        taggingMode: this.taggingMode
                    };
                    this.positionResultsDropdown();
                }
            }
            else if (this.quickNoteResults) {
                this.quickNoteResults.destroy();
                this.quickNoteResults = null;
            }
            // Tell the OutsideClick base class to start listening for an outside clicks
            this.toggleActive(null, true);
        }
    };
    /**
     * Deletes the picker results from the DOM.
     * @return {?}
     */
    QuickNoteElement.prototype.hideResults = function () {
        this.isTagging = false;
        if (this.quickNoteResults) {
            this.quickNoteResults.destroy();
            this.quickNoteResults = null;
        }
    };
    /**
     * Handles the selection from the QuickNoteResults Component. Called by the QuickNoteResults component on it's
     * parent (this element).
     *
     * @param {?} taggingMode - type of tags we are looking for
     * @param {?} selected - selected object from the picker that has a label and value
     * @return {?}
     */
    QuickNoteElement.prototype.onSelected = function (taggingMode, selected) {
        // Turn off tagging
        this.isTagging = false;
        // Replace searchTerm with link
        var /** @type {?} */ symbol = this.config.triggers[taggingMode];
        var /** @type {?} */ renderer = this.getRenderer(taggingMode);
        var /** @type {?} */ renderedText = renderer(symbol, selected);
        this.replaceWordAtCursor(renderedText);
        // Add the new reference, if it doesn't already exist
        this.model.references = this.model.references || {};
        this.model.references[taggingMode] = this.model.references[taggingMode] || [];
        var /** @type {?} */ matchingItems = this.model.references[taggingMode].filter(function (item) { return JSON.stringify(item) === JSON.stringify(selected); });
        if (matchingItems.length === 0) {
            this.model.references[taggingMode].push(selected);
        }
        // Update the quick note with the changes due to the user's selection of an item in the dropdown
        this.onValueChange();
    };
    /**
     * Convenience method that gets the current word that the cursor is on, minus the tag.
     * Also, trims any whitespace before/after the term to aid in searching.
     * @return {?}
     */
    QuickNoteElement.prototype.getSearchTerm = function () {
        var /** @type {?} */ word = this.getWordAtCursor().trim();
        if (this.isTagging) {
            var /** @type {?} */ symbol = this.config.triggers[this.taggingMode];
            if (!word.includes(symbol)) {
                this.hideResults();
                return '';
            }
            word = word.slice(word.indexOf(symbol) + symbol.length);
        }
        return word;
    };
    /**
     * Gets the current word that the cursor is on CKEditor. Current word starts at the beginning of the line or a
     * tag character if we are in tagging mode. Current word ends at the end of the line or an empty space.
     *
     * @return {?} plain text string (removes all html formatting)
     */
    QuickNoteElement.prototype.getWordAtCursor = function () {
        var /** @type {?} */ range = this.ckeInstance.getSelection().getRanges()[0];
        var /** @type {?} */ start = range.startContainer;
        if (start.type === CKEDITOR.NODE_TEXT && range.startOffset) {
            var /** @type {?} */ text = start.getText();
            var /** @type {?} */ symbol = this.config.triggers[this.taggingMode];
            var /** @type {?} */ wordStart = text.lastIndexOf(symbol, range.startOffset - 1);
            var /** @type {?} */ wordEnd = text.indexOf(' ', range.startOffset + 1);
            if (wordStart === -1) {
                wordStart = 0;
            }
            if (wordEnd === -1) {
                wordEnd = text.length;
            }
            return text.substring(wordStart, wordEnd);
        }
        // Selection starts at the 0 index of the text node or there's no previous text node in contents
        return '';
    };
    /**
     * Replaces the word that the user is on with the given html.
     *
     * CKEditor gives us access to the current line of html in the editor, so we replace the content of
     * the line, replacing only the current word.
     * @param {?} newWord
     * @return {?}
     */
    QuickNoteElement.prototype.replaceWordAtCursor = function (newWord) {
        var /** @type {?} */ originalWord = this.getWordAtCursor().trim();
        var /** @type {?} */ range = this.ckeInstance.getSelection().getRanges()[0];
        var /** @type {?} */ start = range.startContainer;
        var /** @type {?} */ parentNode = start.getParent();
        if (start.type === CKEDITOR.NODE_TEXT && parentNode) {
            var /** @type {?} */ line = parentNode.getHtml();
            var /** @type {?} */ index$$1 = line.lastIndexOf(originalWord);
            if (index$$1 >= 0) {
                // Add a space after the replaced word so that multiple references can be added back to back
                var /** @type {?} */ newLine = line.substring(0, index$$1) + newWord + ' ' + line.substring(index$$1 + originalWord.length);
                parentNode.setHtml(newLine);
                // Place selection at the end of the line
                range.moveToPosition(parentNode, CKEDITOR.POSITION_BEFORE_END);
                this.ckeInstance.getSelection().selectRanges([range]);
            }
        }
    };
    /**
     * Returns current references, minus any from the model that have been removed from the editor.
     * @return {?}
     */
    QuickNoteElement.prototype.validateReferences = function () {
        var _this = this;
        var /** @type {?} */ html = this.ckeInstance.document.getBody().getHtml();
        // CKEditor stopped supporting the config.forceSimpleAmpersand setting, so we have to convert '&amp;' to '&'
        // when we pull html from the editor - see: https://dev.ckeditor.com/ticket/13723
        var /** @type {?} */ ampRegex = new RegExp('&amp;', 'g');
        html = html.replace(ampRegex, '&');
        Object.keys(this.model.references).forEach(function (taggingMode) {
            var /** @type {?} */ array = _this.model.references[taggingMode] || [];
            var /** @type {?} */ symbol = _this.config.triggers[taggingMode];
            var /** @type {?} */ renderer = _this.getRenderer(taggingMode);
            _this.model.references[taggingMode] = array.filter(function (item) {
                var /** @type {?} */ renderedText = renderer(symbol, item);
                return html.includes(renderedText);
            });
            // If no references, then delete the key
            if (_this.model.references[taggingMode].length === 0) {
                delete _this.model.references[taggingMode];
            }
        });
    };
    /**
     * Configures the CKEditor for QuickNote functionality.
     *
     * Sets the height of the CKEditor dynamically to the height of the wrapper upon initialization.
     * Removes the toolbar on the bottom and configures a slimmed down version of the toolbar.
     * Removes plugins and turns off setting to allow browser based spell checking.
     * @return {?}
     */
    QuickNoteElement.prototype.getCKEditorConfig = function () {
        // Use the height of the wrapper element to set the initial height of the editor, then
        // set it to 100% to allow the editor to resize using the grippy.
        var /** @type {?} */ editorHeight = this.wrapper.nativeElement.clientHeight - QuickNoteElement.TOOLBAR_HEIGHT;
        this.wrapper.nativeElement.style.setProperty('height', '100%');
        return {
            enterMode: CKEDITOR.ENTER_BR,
            shiftEnterMode: CKEDITOR.ENTER_P,
            disableNativeSpellChecker: false,
            height: editorHeight,
            startupFocus: this.startupFocus,
            removePlugins: 'liststyle,tabletools,contextmenu',
            toolbar: [{
                    name: 'basicstyles',
                    items: ['Styles', 'FontSize', 'Bold', 'Italic', 'Underline', 'TextColor', '-', 'NumberedList', 'BulletedList', 'Outdent', 'Indent', 'Link']
                }]
        };
    };
    /**
     * Returns the current screen position of the cursor in CKEditor, accounting for any scrolling in the editor.
     *
     * @return {?}
     */
    QuickNoteElement.prototype.getCursorPosition = function () {
        var /** @type {?} */ range = this.ckeInstance.getSelection().getRanges()[0];
        var /** @type {?} */ parentElement = range.startContainer.$.parentElement;
        var /** @type {?} */ editorElement = this.ckeInstance.editable().$;
        // Since the editor is a text node in the DOM that does not know about it's position, a temporary element has to
        // be inserted in order to locate the cursor position.
        var /** @type {?} */ cursorElement = document.createElement('img');
        cursorElement.setAttribute('src', 'null');
        cursorElement.setAttribute('width', '0');
        cursorElement.setAttribute('height', '0');
        parentElement.appendChild(cursorElement);
        var /** @type {?} */ cursorPosition = {
            top: cursorElement.offsetTop - editorElement.scrollTop,
            left: cursorElement.offsetLeft - editorElement.scrollLeft
        };
        cursorElement.remove();
        return cursorPosition;
    };
    /**
     * Positions the results dropdown based on the location of the cursor in the text field
     * @return {?}
     */
    QuickNoteElement.prototype.positionResultsDropdown = function () {
        var /** @type {?} */ MIN_MARGIN_TOP = QuickNoteElement.TOOLBAR_HEIGHT * 2;
        var /** @type {?} */ MAX_MARGIN_TOP = this.getContentHeight() + QuickNoteElement.TOOLBAR_HEIGHT;
        var /** @type {?} */ cursorPosition = this.getCursorPosition();
        var /** @type {?} */ marginTop = cursorPosition.top + QuickNoteElement.TOOLBAR_HEIGHT;
        // Check that the margin is within the visible bounds
        marginTop = Math.max(marginTop, MIN_MARGIN_TOP);
        marginTop = Math.min(marginTop, MAX_MARGIN_TOP);
        // Set the margin-top of the dropdown
        this.quickNoteResults.instance.element.nativeElement.style.setProperty('margin-top', marginTop + 'px');
    };
    /**
     * Returns the height in pixels of the content area - the text that the user has entered.
     * @return {?}
     */
    QuickNoteElement.prototype.getContentHeight = function () {
        var /** @type {?} */ contentHeight = 0;
        if (this.ckeInstance.ui && this.ckeInstance.ui.contentsElement && this.ckeInstance.ui.contentsElement.$ && this.ckeInstance.ui.contentsElement.$.style) {
            var /** @type {?} */ cssText = this.ckeInstance.ui.contentsElement.$.style.cssText;
            if (cssText.indexOf('height: ') !== -1) {
                var /** @type {?} */ height = cssText.split('height: ')[1];
                height = height.split('px')[0];
                contentHeight = parseInt(height);
            }
        }
        return contentHeight;
    };
    /**
     * Show the placeholder text if the editor is empty
     * @return {?}
     */
    QuickNoteElement.prototype.showPlaceholder = function () {
        if (!this.ckeInstance.getData() && !this.startupFocus) {
            this.ckeInstance.editable().getParent().$.appendChild(this.placeholderElement);
            this.placeholderVisible = true;
        }
    };
    /**
     * Hide the placeholder text by removing the placeholder element from the DOM
     * @return {?}
     */
    QuickNoteElement.prototype.hidePlaceholder = function () {
        if (this.placeholderVisible) {
            this.ckeInstance.editable().getParent().$.removeChild(this.placeholderElement);
            this.placeholderVisible = false;
        }
    };
    Object.defineProperty(QuickNoteElement.prototype, "placeholderElement", {
        /**
         * Get or create the single placeholder object that is constructed only when needed.
         * @return {?}
         */
        get: function () {
            if (!this._placeholderElement) {
                this._placeholderElement = document.createElement('div');
                this._placeholderElement.className = 'placeholder';
                this._placeholderElement.style.cssText = 'margin: 20px; color: #AAAAAA; font-family: sans-serif; font-size: 13px; line-height: 20px; position: absolute; top: 0';
                this._placeholderElement.textContent = this.placeholder;
            }
            return this._placeholderElement;
        },
        enumerable: true,
        configurable: true
    });
    return QuickNoteElement;
}(OutsideClick));
QuickNoteElement.TOOLBAR_HEIGHT = 40;
QuickNoteElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-quick-note',
                providers: [QUICK_NOTE_VALUE_ACCESSOR],
                template: "\n        <div class=\"quick-note-wrapper\" #wrapper>\n            <textarea #host></textarea>\n            <span #results></span>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
QuickNoteElement.ctorParameters = function () { return [
    { type: core.NgZone, },
    { type: core.ElementRef, },
    { type: ComponentUtils, },
]; };
QuickNoteElement.propDecorators = {
    'wrapper': [{ type: core.ViewChild, args: ['wrapper',] },],
    'host': [{ type: core.ViewChild, args: ['host',] },],
    'results': [{ type: core.ViewChild, args: ['results', { read: core.ViewContainerRef },] },],
    'config': [{ type: core.Input },],
    'startupFocus': [{ type: core.Input },],
    'placeholder': [{ type: core.Input },],
    'focus': [{ type: core.Output },],
    'blur': [{ type: core.Output },],
    'change': [{ type: core.Output },],
};
// NG2
// APP
var NovoQuickNoteModule = /** @class */ (function () {
    function NovoQuickNoteModule() {
    }
    return NovoQuickNoteModule;
}());
NovoQuickNoteModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule, NovoLoadingModule, NovoListModule],
                declarations: [QuickNoteElement, QuickNoteResults],
                exports: [QuickNoteElement, QuickNoteResults],
                entryComponents: [QuickNoteResults]
            },] },
];
/**
 * @nocollapse
 */
NovoQuickNoteModule.ctorParameters = function () { return []; };
// NG2
// APP
// Value accessor for the component (supports ngModel)
var RADIO_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoRadioElement; }),
    multi: true
};
var NovoRadioGroup = /** @class */ (function () {
    function NovoRadioGroup() {
    }
    return NovoRadioGroup;
}());
NovoRadioGroup.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-radio-group',
                template: '<ng-content></ng-content>'
            },] },
];
/**
 * @nocollapse
 */
NovoRadioGroup.ctorParameters = function () { return []; };
var NovoRadioElement = /** @class */ (function () {
    /**
     * @param {?} ref
     */
    function NovoRadioElement(ref) {
        this.ref = ref;
        this.button = false;
        this.theme = 'secondary';
        this.change = new core.EventEmitter();
        this.onModelChange = function () {
        };
        this.onModelTouched = function () {
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NovoRadioElement.prototype.select = function (event) {
        Helpers.swallowEvent(event);
        // Only change the checked state if this is a new radio, they are not toggle buttons
        if (!this.checked) {
            this.checked = !this.checked;
            this.change.emit(this.value);
            this.onModelChange(this.value);
            this.ref.markForCheck();
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoRadioElement.prototype.writeValue = function (model) {
        this.model = model;
        this.ref.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoRadioElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoRadioElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    return NovoRadioElement;
}());
NovoRadioElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-radio',
                providers: [RADIO_VALUE_ACCESSOR],
                template: "\n        <input [name]=\"name\" type=\"radio\" [checked]=\"checked\" [attr.id]=\"name\" (change)=\"select($event)\">\n        <label [attr.for]=\"name\" (click)=\"select($event)\">\n            <button *ngIf=\"button\" [ngClass]=\"{'unchecked': !checked, 'checked': checked, 'has-icon': !!icon}\" [theme]=\"theme\" [icon]=\"icon\">{{ label }}</button>\n            <div *ngIf=\"!button\">\n                <i [ngClass]=\"{'bhi-radio-empty': !checked, 'bhi-radio-filled': checked}\"></i>\n                {{ label }}\n                <ng-content></ng-content>\n            </div>\n        </label>\n    ",
                host: {
                    '[class.vertical]': 'vertical'
                }
            },] },
];
/**
 * @nocollapse
 */
NovoRadioElement.ctorParameters = function () { return [
    { type: core.ChangeDetectorRef, },
]; };
NovoRadioElement.propDecorators = {
    'name': [{ type: core.Input },],
    'value': [{ type: core.Input },],
    'checked': [{ type: core.Input },],
    'vertical': [{ type: core.Input },],
    'label': [{ type: core.Input },],
    'button': [{ type: core.Input },],
    'theme': [{ type: core.Input },],
    'icon': [{ type: core.Input },],
    'change': [{ type: core.Output },],
};
// NG2
// APP
var NovoRadioModule = /** @class */ (function () {
    function NovoRadioModule() {
    }
    return NovoRadioModule;
}());
NovoRadioModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, NovoButtonModule],
                declarations: [NovoRadioElement, NovoRadioGroup],
                exports: [NovoRadioElement, NovoRadioGroup]
            },] },
];
/**
 * @nocollapse
 */
NovoRadioModule.ctorParameters = function () { return []; };
// NG2
// APP
var NovoDropdownContainer = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} renderer
     * @param {?} ref
     */
    function NovoDropdownContainer(element, renderer, ref) {
        this.element = element;
        this.renderer = renderer;
        this.ref = ref;
        this.scrollHandler = this.handleScroll.bind(this);
    }
    /**
     * @return {?}
     */
    NovoDropdownContainer.prototype.ngDoCheck = function () {
        if (this.isVisible && this.position) {
            var /** @type {?} */ element = this.element.nativeElement;
            var /** @type {?} */ position = Helpers.calcPositionOffset(this.position, element, this.side);
            if (position) {
                this.renderer.setStyle(element, 'top', position.top);
                this.renderer.setStyle(element, 'left', position.left);
            }
        }
    };
    /**
     * @return {?}
     */
    NovoDropdownContainer.prototype.handleScroll = function () {
        // On scroll, don't force the position to update (jump from top/middle/bottom/right)
        this.updatePosition(this.relativeElement, this.side);
    };
    /**
     * @param {?} appendToBody
     * @return {?}
     */
    NovoDropdownContainer.prototype.show = function (appendToBody) {
        this.appendToBody = appendToBody;
        this.renderer.setStyle(this.element.nativeElement, 'display', 'block');
        this.renderer.setStyle(this.element.nativeElement, 'visibility', 'visible');
        this.isVisible = true;
        if (appendToBody) {
            window.addEventListener('scroll', this.scrollHandler);
        }
        this.ref.markForCheck();
    };
    /**
     * @return {?}
     */
    NovoDropdownContainer.prototype.hide = function () {
        this.isVisible = false;
        this.renderer.setStyle(this.element.nativeElement, 'visibility', 'hidden');
        if (this.appendToBody) {
            window.removeEventListener('scroll', this.scrollHandler);
        }
        this.ref.markForCheck();
    };
    /**
     * @param {?} element
     * @param {?} side
     * @return {?}
     */
    NovoDropdownContainer.prototype.updatePosition = function (element, side) {
        this.relativeElement = element;
        this.side = side;
        this.position = element.getBoundingClientRect();
        this.ngDoCheck();
        this.ref.markForCheck();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDropdownContainer.prototype.onKeyDown = function (event) {
        // Close with ESC/Enter
        if (this.isVisible && (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.ENTER)) {
            this.parent.toggleActive(null, false);
        }
    };
    return NovoDropdownContainer;
}());
NovoDropdownContainer.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-dropdown-container',
                template: '<ng-content></ng-content>',
            },] },
];
/**
 * @nocollapse
 */
NovoDropdownContainer.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: core.ChangeDetectorRef, },
]; };
NovoDropdownContainer.propDecorators = {
    'onKeyDown': [{ type: core.HostListener, args: ['keydown', ['$event'],] },],
};
var NovoDropdownElement = /** @class */ (function (_super) {
    __extends(NovoDropdownElement, _super);
    /**
     * @param {?} element
     * @param {?} ref
     */
    function NovoDropdownElement(element, ref) {
        var _this = _super.call(this, element) || this;
        _this.ref = ref;
        // Append the dropdown container to the body
        _this.appendToBody = false;
        // What action to perform when we recieve scroll from parent selector
        // TODO - handle "move"
        _this.parentScrollAction = 'close';
        // Side the dropdown will open
        _this.side = 'left';
        _this.activeIndex = -1;
        _this.filterTerm = '';
        // Click handler
        _this.clickHandler = _this.toggleActive.bind(_this);
        _this.closeHandler = _this.toggleActive.bind(_this);
        _this.toggled = _this.onActiveChange;
        // Listen for active change to hide/show menu
        _this.onActiveChange.subscribe(function (active) {
            if (active) {
                _this.show();
            }
            else {
                _this.hide();
            }
        });
        return _this;
    }
    Object.defineProperty(NovoDropdownElement.prototype, "items", {
        /**
         * @param {?} items
         * @return {?}
         */
        set: function (items) {
            this._items = items;
            // Get the innertext of all the items to allow for searching
            this._textItems = items.map(function (item) {
                return item.element.nativeElement.innerText;
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoDropdownElement.prototype.ngOnInit = function () {
        // Add a click handler to the button to toggle the menu
        var /** @type {?} */ button = this.element.nativeElement.querySelector('button');
        button.addEventListener('click', this.clickHandler);
        if (this.parentScrollSelector) {
            this.parentScrollElement = Helpers.findAncestor(this.element.nativeElement, this.parentScrollSelector);
        }
    };
    /**
     * @return {?}
     */
    NovoDropdownElement.prototype.ngOnDestroy = function () {
        // Remove listener
        var /** @type {?} */ button = this.element.nativeElement.querySelector('button');
        if (button) {
            button.removeEventListener('click', this.clickHandler);
        }
    };
    /**
     * @return {?}
     */
    NovoDropdownElement.prototype.show = function () {
        this.container.parent = this;
        this.container.show(this.appendToBody);
        this.otherElement = this.container.element;
        if (this.appendToBody) {
            this.container.updatePosition(this.element.nativeElement.children[0], this.side);
            // If append to body then rip it out of here and put on body
            window.document.body.appendChild(this.container.element.nativeElement);
            window.addEventListener('resize', this.closeHandler);
        }
        // Listen for scroll on a parent to force close
        if (this.parentScrollElement) {
            if (this.parentScrollAction === 'close') {
                this.parentScrollElement.addEventListener('scroll', this.closeHandler);
            }
        }
        this.ref.markForCheck();
    };
    /**
     * @return {?}
     */
    NovoDropdownElement.prototype.hide = function () {
        this.container.hide();
        // If append to body then rip it out of here and put on body
        if (this.appendToBody) {
            var /** @type {?} */ elm = this.container.element.nativeElement;
            elm.parentNode.removeChild(elm);
            window.removeEventListener('resize', this.closeHandler);
        }
        if (this.parentScrollElement) {
            if (this.parentScrollAction === 'close') {
                this.parentScrollElement.removeEventListener('scroll', this.closeHandler);
            }
        }
        // Clear active index
        if (this.activeIndex !== -1) {
            this._items.toArray()[this.activeIndex].active = false;
        }
        this.activeIndex = -1;
        this.ref.markForCheck();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDropdownElement.prototype.onKeyDown = function (event) {
        var _this = this;
        Helpers.swallowEvent(event);
        if (this.active && event.keyCode === KeyCodes.ESC) {
            // active & esc hit -- close
            this.toggleActive();
        }
        else if (event.keyCode === KeyCodes.ENTER) {
            // enter -- perform the "click"
            this._items.toArray()[this.activeIndex].onClick(event);
        }
        else if (event.keyCode === KeyCodes.DOWN) {
            // down - navigate through the list ignoring disabled ones
            if (this.activeIndex !== -1) {
                this._items.toArray()[this.activeIndex].active = false;
            }
            this.activeIndex++;
            if (this.activeIndex === this._items.length) {
                this.activeIndex = 0;
            }
            while (this._items.toArray()[this.activeIndex].disabled) {
                this.activeIndex++;
                if (this.activeIndex === this._items.length) {
                    this.activeIndex = 0;
                }
            }
            this._items.toArray()[this.activeIndex].active = true;
            this.scrollToActive();
        }
        else if (event.keyCode === KeyCodes.UP) {
            // up -- navigate through the list ignoring disabled ones
            if (this.activeIndex !== -1) {
                this._items.toArray()[this.activeIndex].active = false;
            }
            this.activeIndex--;
            if (this.activeIndex < 0) {
                this.activeIndex = this._items.length - 1;
            }
            while (this._items.toArray()[this.activeIndex].disabled) {
                this.activeIndex--;
                if (this.activeIndex < 0) {
                    this.activeIndex = this._items.length - 1;
                }
            }
            this._items.toArray()[this.activeIndex].active = true;
            this.scrollToActive();
        }
        else if ((event.keyCode >= 65 && event.keyCode <= 90) ||
            (event.keyCode >= 96 && event.keyCode <= 105) ||
            (event.keyCode >= 48 && event.keyCode <= 57) ||
            event.keyCode === KeyCodes.SPACE) {
            // A-Z, 0-9, space -- filter the list and scroll to active filter
            // filter has hard reset after 2s
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout(function () {
                _this.filterTerm = '';
            }, 2000);
            var /** @type {?} */ char = String.fromCharCode(event.keyCode);
            this.filterTerm = this.filterTerm.concat(char);
            var /** @type {?} */ index$$1 = this._textItems.findIndex(function (value) {
                return new RegExp("^" + _this.filterTerm.toLowerCase()).test(value.trim().toLowerCase());
            });
            if (index$$1 !== -1) {
                if (this.activeIndex !== -1) {
                    this._items.toArray()[this.activeIndex].active = false;
                }
                this.activeIndex = index$$1;
                this._items.toArray()[this.activeIndex].active = true;
                this.scrollToActive();
            }
        }
        else if ([KeyCodes.BACKSPACE, KeyCodes.DELETE].includes(event.keyCode)) {
            // backspace, delete -- remove partial filters
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout(function () {
                _this.filterTerm = '';
            }, 2000);
            this.filterTerm = this.filterTerm.slice(0, -1);
        }
    };
    /**
     * @return {?}
     */
    NovoDropdownElement.prototype.scrollToActive = function () {
        var /** @type {?} */ container = this.element.nativeElement.querySelector('novo-dropdown-container');
        var /** @type {?} */ item = this._items.toArray()[this.activeIndex];
        if (container && item) {
            container.scrollTop = item.element.nativeElement.offsetTop;
        }
        else {
            // Append to body
            container = document.querySelector('body > novo-dropdown-container');
            if (container && item) {
                container.scrollTop = item.element.nativeElement.offsetTop;
            }
        }
    };
    return NovoDropdownElement;
}(OutsideClick));
NovoDropdownElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-dropdown',
                template: "\n        <ng-content select=\"button\" #trigger></ng-content>\n        <novo-dropdown-container class=\"dropdown-container {{ containerClass }}\">\n            <ng-content></ng-content>\n        </novo-dropdown-container>\n    ",
            },] },
];
/**
 * @nocollapse
 */
NovoDropdownElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.ChangeDetectorRef, },
]; };
NovoDropdownElement.propDecorators = {
    'appendToBody': [{ type: core.Input },],
    'parentScrollSelector': [{ type: core.Input },],
    'parentScrollAction': [{ type: core.Input },],
    'containerClass': [{ type: core.Input },],
    'side': [{ type: core.Input },],
    'toggled': [{ type: core.Output },],
    'container': [{ type: core.ViewChild, args: [NovoDropdownContainer,] },],
    'button': [{ type: core.ViewChild, args: ['trigger',] },],
    'onKeyDown': [{ type: core.HostListener, args: ['keydown', ['$event'],] },],
};
var NovoItemElement = /** @class */ (function () {
    /**
     * @param {?} dropdown
     * @param {?} element
     */
    function NovoItemElement(dropdown, element) {
        this.dropdown = dropdown;
        this.element = element;
        this.keepOpen = false;
        this.action = new core.EventEmitter();
        this.active = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NovoItemElement.prototype.onClick = function (event) {
        // Poor man's disable
        if (!this.disabled) {
            // Close if keepOpen is false
            if (!this.keepOpen) {
                this.dropdown.toggleActive();
            }
            // Emit the action
            this.action.emit({ originalEvent: event });
        }
    };
    return NovoItemElement;
}());
NovoItemElement.decorators = [
    { type: core.Component, args: [{
                selector: 'item',
                template: '<ng-content></ng-content>',
                host: {
                    '[class.disabled]': 'disabled',
                    '[class.active]': 'active',
                },
            },] },
];
/**
 * @nocollapse
 */
NovoItemElement.ctorParameters = function () { return [
    { type: NovoDropdownElement, },
    { type: core.ElementRef, },
]; };
NovoItemElement.propDecorators = {
    'disabled': [{ type: core.Input },],
    'keepOpen': [{ type: core.Input },],
    'action': [{ type: core.Output },],
    'onClick': [{ type: core.HostListener, args: ['click', ['$event'],] },],
};
var NovoListElement$1 = /** @class */ (function () {
    /**
     * @param {?} dropdown
     */
    function NovoListElement$1(dropdown) {
        this.dropdown = dropdown;
    }
    /**
     * @return {?}
     */
    NovoListElement$1.prototype.ngAfterContentInit = function () {
        this.dropdown.items = this.items;
    };
    return NovoListElement$1;
}());
NovoListElement$1.decorators = [
    { type: core.Component, args: [{
                selector: 'list',
                template: '<ng-content></ng-content>',
            },] },
];
/**
 * @nocollapse
 */
NovoListElement$1.ctorParameters = function () { return [
    { type: NovoDropdownElement, },
]; };
NovoListElement$1.propDecorators = {
    'items': [{ type: core.ContentChildren, args: [NovoItemElement,] },],
};
var NovoItemHeaderElement$1 = /** @class */ (function () {
    function NovoItemHeaderElement$1() {
    }
    return NovoItemHeaderElement$1;
}());
NovoItemHeaderElement$1.decorators = [
    { type: core.Component, args: [{
                selector: 'dropdown-item-header',
                template: '<ng-content></ng-content>',
            },] },
];
/**
 * @nocollapse
 */
NovoItemHeaderElement$1.ctorParameters = function () { return []; };
// NG2
// APP
var NovoDropdownModule = /** @class */ (function () {
    function NovoDropdownModule() {
    }
    return NovoDropdownModule;
}());
NovoDropdownModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [NovoDropdownElement, NovoItemElement, NovoListElement$1, NovoDropdownContainer, NovoItemHeaderElement$1],
                exports: [NovoDropdownElement, NovoItemElement, NovoListElement$1, NovoDropdownContainer, NovoItemHeaderElement$1]
            },] },
];
/**
 * @nocollapse
 */
NovoDropdownModule.ctorParameters = function () { return []; };
var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
function unwrapExports(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}
function createCommonjsModule(fn, module) {
    return module = { exports: {} }, fn(module, module.exports), module.exports;
}
function isFunction(x) {
    return typeof x === 'function';
}
var isFunction_2 = isFunction;
var isFunction_1 = {
    isFunction: isFunction_2
};
var isArray_1 = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
var isArray = {
    isArray: isArray_1
};
function isObject(x) {
    return x != null && typeof x === 'object';
}
var isObject_2 = isObject;
var isObject_1 = {
    isObject: isObject_2
};
// typeof any so that it we don't have to cast when comparing a result to the error object
var errorObject_1 = { e: {} };
var errorObject = {
    errorObject: errorObject_1
};
var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject.errorObject.e = e;
        return errorObject.errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
var tryCatch_2 = tryCatch;
var tryCatch_1 = {
    tryCatch: tryCatch_2
};
var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = (function (_super) {
    __extends$2(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        _super.call(this);
        this.errors = errors;
        var err = Error.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
        this.name = err.name = 'UnsubscriptionError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return UnsubscriptionError;
}(Error));
var UnsubscriptionError_2 = UnsubscriptionError;
var UnsubscriptionError_1 = {
    UnsubscriptionError: UnsubscriptionError_2
};
/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = (function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index$$1 = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index$$1 < len && _parents[index$$1] || null;
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
            if (trial === errorObject.errorObject) {
                hasErrors = true;
                errors = errors || (errorObject.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject.errorObject.e.errors) : [errorObject.errorObject.e]);
            }
        }
        if (isArray.isArray(_subscriptions)) {
            index$$1 = -1;
            len = _subscriptions.length;
            while (++index$$1 < len) {
                var sub = _subscriptions[index$$1];
                if (isObject_1.isObject(sub)) {
                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject.errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject.errorObject.e;
                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        }
        else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
var Subscription_2 = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
}
var Subscription_1 = {
    Subscription: Subscription_2
};
var empty = {
    closed: true,
    next: function (value) { },
    error: function (err) { throw err; },
    complete: function () { }
};
var Observer = {
    empty: empty
};
// CommonJS / Node have global context exposed as "global" variable.
// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake
// the global "global" var for now.
var __window = typeof window !== 'undefined' && window;
var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
    self instanceof WorkerGlobalScope && self;
var __global = typeof commonjsGlobal !== 'undefined' && commonjsGlobal;
var _root = __window || __global || __self;
var root_1 = _root;
// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.
// This is needed when used with angular/tsickle which inserts a goog.module statement.
// Wrap in IIFE
(function () {
    if (!_root) {
        throw new Error('RxJS could not find any global context (window, self, global)');
    }
})();
var root = {
    root: root_1
};
var rxSubscriber = createCommonjsModule(function (module, exports) {
    var Symbol = root.root.Symbol;
    exports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
        Symbol.for('rxSubscriber') : '@@rxSubscriber';
    /**
     * @deprecated use rxSubscriber instead
     */
    exports.$$rxSubscriber = exports.rxSubscriber;
});
var rxSubscriber_1 = rxSubscriber.rxSubscriber;
var rxSubscriber_2 = rxSubscriber.$$rxSubscriber;
var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = (function (_super) {
    __extends$1(Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        _super.call(this);
        this.syncErrorValue = null;
        this.syncErrorThrown = false;
        this.syncErrorThrowable = false;
        this.isStopped = false;
        switch (arguments.length) {
            case 0:
                this.destination = Observer.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    this.destination = Observer.empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    // HACK(benlesh): To resolve an issue where Node users may have multiple
                    // copies of rxjs in their node_modules directory.
                    if (isTrustedSubscriber(destinationOrNext)) {
                        var trustedSubscriber = destinationOrNext[rxSubscriber.rxSubscriber]();
                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;
                        this.destination = trustedSubscriber;
                        trustedSubscriber.add(this);
                    }
                    else {
                        this.syncErrorThrowable = true;
                        this.destination = new SafeSubscriber(this, destinationOrNext);
                    }
                    break;
                }
            default:
                this.syncErrorThrowable = true;
                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                break;
        }
    }
    Subscriber.prototype[rxSubscriber.rxSubscriber] = function () { return this; };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription));
var Subscriber_2 = Subscriber;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = (function (_super) {
    __extends$1(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        _super.call(this);
        this._parentSubscriber = _parentSubscriber;
        var next;
        var context = this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== Observer.empty) {
                context = Object.create(observerOrNext);
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
        }
        this._context = context;
        this._next = next;
        this._error = error;
        this._complete = complete;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._error) {
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                throw err;
            }
            else {
                _parentSubscriber.syncErrorValue = err;
                _parentSubscriber.syncErrorThrown = true;
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            throw err;
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            parent.syncErrorValue = err;
            parent.syncErrorThrown = true;
            return true;
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));
function isTrustedSubscriber(obj) {
    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber.rxSubscriber]);
}
var Subscriber_1 = {
    Subscriber: Subscriber_2
};
var __extends$3 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
var EmptyError = (function (_super) {
    __extends$3(EmptyError, _super);
    function EmptyError() {
        var err = _super.call(this, 'no elements in sequence');
        this.name = err.name = 'EmptyError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return EmptyError;
}(Error));
var EmptyError_2 = EmptyError;
var EmptyError_1 = {
    EmptyError: EmptyError_2
};
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * Emits only the first value (or the first value that meets some condition)
 * emitted by the source Observable.
 *
 * <span class="informal">Emits only the first value. Or emits only the first
 * value that passes some test.</span>
 *
 * <img src="./img/first.png" width="100%">
 *
 * If called with no arguments, `first` emits the first value of the source
 * Observable, then completes. If called with a `predicate` function, `first`
 * emits the first value of the source that matches the specified condition. It
 * may also take a `resultSelector` function to produce the output value from
 * the input value, and a `defaultValue` to emit in case the source completes
 * before it is able to emit a valid value. Throws an error if `defaultValue`
 * was not provided and a matching element is not found.
 *
 * @example <caption>Emit only the first click that happens on the DOM</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Emits the first click that happens on a DIV</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link take}
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
 * An optional function called with each item to test for condition matching.
 * @param {function(value: T, index: number): R} [resultSelector] A function to
 * produce the value on the output Observable based on the values
 * and the indices of the source Observable. The arguments passed to this
 * function are:
 * - `value`: the value that was emitted on the source.
 * - `index`: the "index" of the value from the source.
 * @param {R} [defaultValue] The default value emitted in case no valid value
 * was found on the source.
 * @return {Observable<T|R>} An Observable of the first item that matches the
 * condition.
 * @method first
 * @owner Observable
 */
function first(predicate, resultSelector, defaultValue) {
    return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };
}
var first_2 = first;
var FirstOperator = (function () {
    function FirstOperator(predicate, resultSelector, defaultValue, source) {
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
    }
    FirstOperator.prototype.call = function (observer, source) {
        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    };
    return FirstOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FirstSubscriber = (function (_super) {
    __extends(FirstSubscriber, _super);
    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
        this.index = 0;
        this.hasCompleted = false;
        this._emitted = false;
    }
    FirstSubscriber.prototype._next = function (value) {
        var index$$1 = this.index++;
        if (this.predicate) {
            this._tryPredicate(value, index$$1);
        }
        else {
            this._emit(value, index$$1);
        }
    };
    FirstSubscriber.prototype._tryPredicate = function (value, index$$1) {
        var result;
        try {
            result = this.predicate(value, index$$1, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this._emit(value, index$$1);
        }
    };
    FirstSubscriber.prototype._emit = function (value, index$$1) {
        if (this.resultSelector) {
            this._tryResultSelector(value, index$$1);
            return;
        }
        this._emitFinal(value);
    };
    FirstSubscriber.prototype._tryResultSelector = function (value, index$$1) {
        var result;
        try {
            result = this.resultSelector(value, index$$1);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this._emitFinal(result);
    };
    FirstSubscriber.prototype._emitFinal = function (value) {
        var destination = this.destination;
        if (!this._emitted) {
            this._emitted = true;
            destination.next(value);
            destination.complete();
            this.hasCompleted = true;
        }
    };
    FirstSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
            destination.next(this.defaultValue);
            destination.complete();
        }
        else if (!this.hasCompleted) {
            destination.error(new EmptyError_1.EmptyError);
        }
    };
    return FirstSubscriber;
}(Subscriber_1.Subscriber));
var __extends$5 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var OuterSubscriber = (function (_super) {
    __extends$5(OuterSubscriber, _super);
    function OuterSubscriber() {
        _super.apply(this, arguments);
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber_1.Subscriber));
var OuterSubscriber_2 = OuterSubscriber;
var OuterSubscriber_1 = {
    OuterSubscriber: OuterSubscriber_2
};
var isArrayLike_1 = (function (x) { return x && typeof x.length === 'number'; });
var isArrayLike = {
    isArrayLike: isArrayLike_1
};
function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
var isPromise_2 = isPromise;
var isPromise_1 = {
    isPromise: isPromise_2
};
function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber.rxSubscriber]) {
            return nextOrObserver[rxSubscriber.rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_1.Subscriber(Observer.empty);
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
var toSubscriber_2 = toSubscriber;
var toSubscriber_1 = {
    toSubscriber: toSubscriber_2
};
var observable = createCommonjsModule(function (module, exports) {
    function getSymbolObservable(context) {
        var $$observable;
        var Symbol = context.Symbol;
        if (typeof Symbol === 'function') {
            if (Symbol.observable) {
                $$observable = Symbol.observable;
            }
            else {
                $$observable = Symbol('observable');
                Symbol.observable = $$observable;
            }
        }
        else {
            $$observable = '@@observable';
        }
        return $$observable;
    }
    exports.getSymbolObservable = getSymbolObservable;
    exports.observable = getSymbolObservable(root.root);
    /**
     * @deprecated use observable instead
     */
    exports.$$observable = exports.observable;
});
var observable_1 = observable.getSymbolObservable;
var observable_2 = observable.observable;
var observable_3 = observable.$$observable;
/* tslint:disable:no-empty */
function noop() { }
var noop_2 = noop;
var noop_1 = {
    noop: noop_2
};
/* tslint:enable:max-line-length */
function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i - 0] = arguments[_i];
    }
    return pipeFromArray(fns);
}
var pipe_2 = pipe;
/* @internal */
function pipeFromArray(fns) {
    if (!fns) {
        return noop_1.noop;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
var pipeFromArray_1 = pipeFromArray;
var pipe_1 = {
    pipe: pipe_2,
    pipeFromArray: pipeFromArray_1
};
/**
 * A representation of any set of values over any amount of time. This is the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable$2 = (function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    function Observable$$1(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    Observable$$1.prototype.lift = function (operator) {
        var observable$$1 = new Observable$$1();
        observable$$1.source = this;
        observable$$1.operator = operator;
        return observable$$1;
    };
    /**
     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.
     *
     * <span class="informal">Use it when you have all these Observables, but still nothing is happening.</span>
     *
     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It
     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is
     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling
     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often
     * thought.
     *
     * Apart from starting the execution of an Observable, this method allows you to listen for values
     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two
     * following ways.
     *
     * The first way is creating an object that implements {@link Observer} interface. It should have methods
     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create
     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do
     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also
     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't
     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will
     * be left uncaught.
     *
     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.
     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent
     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,
     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,
     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes
     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.
     *
     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.
     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean
     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback
     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.
     *
     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.
     * It is an Observable itself that decides when these functions will be called. For example {@link of}
     * by default emits all its values synchronously. Always check documentation for how given Observable
     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.
     *
     * @example <caption>Subscribe with an Observer</caption>
     * const sumObserver = {
     *   sum: 0,
     *   next(value) {
     *     console.log('Adding: ' + value);
     *     this.sum = this.sum + value;
     *   },
     *   error() { // We actually could just remove this method,
     *   },        // since we do not really care about errors right now.
     *   complete() {
     *     console.log('Sum equals: ' + this.sum);
     *   }
     * };
     *
     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.
     * .subscribe(sumObserver);
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Subscribe with functions</caption>
     * let sum = 0;
     *
     * Rx.Observable.of(1, 2, 3)
     * .subscribe(
     *   function(value) {
     *     console.log('Adding: ' + value);
     *     sum = sum + value;
     *   },
     *   undefined,
     *   function() {
     *     console.log('Sum equals: ' + sum);
     *   }
     * );
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Cancel a subscription</caption>
     * const subscription = Rx.Observable.interval(1000).subscribe(
     *   num => console.log(num),
     *   undefined,
     *   () => console.log('completed!') // Will not be called, even
     * );                                // when cancelling subscription
     *
     *
     * setTimeout(() => {
     *   subscription.unsubscribe();
     *   console.log('unsubscribed!');
     * }, 2500);
     *
     * // Logs:
     * // 0 after 1s
     * // 1 after 2s
     * // "unsubscribed!" after 2.5s
     *
     *
     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed
     *  Observable.
     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled.
     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.
     * @return {ISubscription} a subscription reference to the registered handlers
     * @method subscribe
     */
    Observable$$1.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
        }
        if (sink.syncErrorThrowable) {
            sink.syncErrorThrowable = false;
            if (sink.syncErrorThrown) {
                throw sink.syncErrorValue;
            }
        }
        return sink;
    };
    Observable$$1.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.syncErrorThrown = true;
            sink.syncErrorValue = err;
            sink.error(err);
        }
    };
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    Observable$$1.prototype.forEach = function (next, PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root.root.Rx && root.root.Rx.config && root.root.Rx.config.Promise) {
                PromiseCtor = root.root.Rx.config.Promise;
            }
            else if (root.root.Promise) {
                PromiseCtor = root.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            // Must be declared in a separate statement to avoid a RefernceError when
            // accessing subscription below in the closure due to Temporal Dead Zone.
            var subscription;
            subscription = _this.subscribe(function (value) {
                if (subscription) {
                    // if there is a subscription, then we can surmise
                    // the next handling is asynchronous. Any errors thrown
                    // need to be rejected explicitly and unsubscribe must be
                    // called manually
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscription.unsubscribe();
                    }
                }
                else {
                    // if there is NO subscription, then we're getting a nexted
                    // value synchronously during subscription. We can just call it.
                    // If it errors, Observable's `subscribe` will ensure the
                    // unsubscription logic is called, then synchronously rethrow the error.
                    // After that, Promise will trap the error and send it
                    // down the rejection path.
                    next(value);
                }
            }, reject, resolve);
        });
    };
    Observable$$1.prototype._subscribe = function (subscriber) {
        return this.source.subscribe(subscriber);
    };
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    Observable$$1.prototype[observable.observable] = function () {
        return this;
    };
    /* tslint:enable:max-line-length */
    /**
     * Used to stitch together functional operators into a chain.
     * @method pipe
     * @return {Observable} the Observable result of all of the operators having
     * been called in the order they were passed in.
     *
     * @example
     *
     * import { map, filter, scan } from 'rxjs/operators';
     *
     * Rx.Observable.interval(1000)
     *   .pipe(
     *     filter(x => x % 2 === 0),
     *     map(x => x + x),
     *     scan((acc, x) => acc + x)
     *   )
     *   .subscribe(x => console.log(x))
     */
    Observable$$1.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i - 0] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipe_1.pipeFromArray(operations)(this);
    };
    /* tslint:enable:max-line-length */
    Observable$$1.prototype.toPromise = function (PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root.root.Rx && root.root.Rx.config && root.root.Rx.config.Promise) {
                PromiseCtor = root.root.Rx.config.Promise;
            }
            else if (root.root.Promise) {
                PromiseCtor = root.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     */
    Observable$$1.create = function (subscribe) {
        return new Observable$$1(subscribe);
    };
    return Observable$$1;
}());
var Observable_2 = Observable$2;
var Observable_1 = {
    Observable: Observable_2
};
var iterator = createCommonjsModule(function (module, exports) {
    function symbolIteratorPonyfill(root$$2) {
        var Symbol = root$$2.Symbol;
        if (typeof Symbol === 'function') {
            if (!Symbol.iterator) {
                Symbol.iterator = Symbol('iterator polyfill');
            }
            return Symbol.iterator;
        }
        else {
            // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
            var Set_1 = root$$2.Set;
            if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
                return '@@iterator';
            }
            var Map_1 = root$$2.Map;
            // required for compatability with es6-shim
            if (Map_1) {
                var keys = Object.getOwnPropertyNames(Map_1.prototype);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
                    if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
                        return key;
                    }
                }
            }
            return '@@iterator';
        }
    }
    exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
    exports.iterator = symbolIteratorPonyfill(root.root);
    /**
     * @deprecated use iterator instead
     */
    exports.$$iterator = exports.iterator;
});
var iterator_1 = iterator.symbolIteratorPonyfill;
var iterator_2 = iterator.iterator;
var iterator_3 = iterator.$$iterator;
var __extends$6 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerSubscriber = (function (_super) {
    __extends$6(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        _super.call(this);
        this.parent = parent;
        this.outerValue = outerValue;
        this.outerIndex = outerIndex;
        this.index = 0;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber_1.Subscriber));
var InnerSubscriber_2 = InnerSubscriber;
var InnerSubscriber_1 = {
    InnerSubscriber: InnerSubscriber_2
};
function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    if (destination.closed) {
        return null;
    }
    if (result instanceof Observable_1.Observable) {
        if (result._isScalar) {
            destination.next(result.value);
            destination.complete();
            return null;
        }
        else {
            destination.syncErrorThrowable = true;
            return result.subscribe(destination);
        }
    }
    else if (isArrayLike.isArrayLike(result)) {
        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
            destination.next(result[i]);
        }
        if (!destination.closed) {
            destination.complete();
        }
    }
    else if (isPromise_1.isPromise(result)) {
        result.then(function (value) {
            if (!destination.closed) {
                destination.next(value);
                destination.complete();
            }
        }, function (err) { return destination.error(err); })
            .then(null, function (err) {
            // Escaping the Promise trap: globally throw unhandled errors
            root.root.setTimeout(function () { throw err; });
        });
        return destination;
    }
    else if (result && typeof result[iterator.iterator] === 'function') {
        var iterator$$1 = result[iterator.iterator]();
        do {
            var item = iterator$$1.next();
            if (item.done) {
                destination.complete();
                break;
            }
            destination.next(item.value);
            if (destination.closed) {
                break;
            }
        } while (true);
    }
    else if (result && typeof result[observable.observable] === 'function') {
        var obs = result[observable.observable]();
        if (typeof obs.subscribe !== 'function') {
            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
        }
        else {
            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
        }
    }
    else {
        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = ("You provided " + value + " where a stream was expected.")
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        destination.error(new TypeError(msg));
    }
    return null;
}
var subscribeToResult_2 = subscribeToResult;
var subscribeToResult_1 = {
    subscribeToResult: subscribeToResult_2
};
var __extends$4 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, emitting values only from the most recently projected Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link switch}.</span>
 *
 * <img src="./img/switchMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each time it observes one of these
 * inner Observables, the output Observable begins emitting the items emitted by
 * that inner Observable. When a new inner Observable is emitted, `switchMap`
 * stops emitting items from the earlier-emitted inner Observable and begins
 * emitting items from the new one. It continues to behave like this for
 * subsequent inner Observables.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switch}
 * @see {@link switchMapTo}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking only the values from the most recently
 * projected inner Observable.
 * @method switchMap
 * @owner Observable
 */
function switchMap$1(project, resultSelector) {
    return function switchMapOperatorFunction(source) {
        return source.lift(new SwitchMapOperator(project, resultSelector));
    };
}
var switchMap_2 = switchMap$1;
var SwitchMapOperator = (function () {
    function SwitchMapOperator(project, resultSelector) {
        this.project = project;
        this.resultSelector = resultSelector;
    }
    SwitchMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));
    };
    return SwitchMapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchMapSubscriber = (function (_super) {
    __extends$4(SwitchMapSubscriber, _super);
    function SwitchMapSubscriber(destination, project, resultSelector) {
        _super.call(this, destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.index = 0;
    }
    SwitchMapSubscriber.prototype._next = function (value) {
        var result;
        var index$$1 = this.index++;
        try {
            result = this.project(value, index$$1);
        }
        catch (error) {
            this.destination.error(error);
            return;
        }
        this._innerSub(result, value, index$$1);
    };
    SwitchMapSubscriber.prototype._innerSub = function (result, value, index$$1) {
        var innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
        }
        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index$$1));
    };
    SwitchMapSubscriber.prototype._complete = function () {
        var innerSubscription = this.innerSubscription;
        if (!innerSubscription || innerSubscription.closed) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype._unsubscribe = function () {
        this.innerSubscription = null;
    };
    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.innerSubscription = null;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (this.resultSelector) {
            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            this.destination.next(innerValue);
        }
    };
    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
        var result;
        try {
            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return SwitchMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var switchMap_1 = {
    switchMap: switchMap_2
};
/**
 * Injection token that determines the scroll handling while the autocomplete panel is open.
 */
var DEFAULT_OVERLAY_SCROLL_STRATEGY = new core.InjectionToken('novo-overlay-scroll-strategy');
/**
 * \@docs-private
 * @param {?} overlay
 * @return {?}
 */
function DEFAULT_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay$$1) {
    return function () { return overlay$$1.scrollStrategies.reposition(); };
}
/**
 * \@docs-private
 */
var DEFAULT_OVERLAY_SCROLL_STRATEGY_PROVIDER = {
    provide: DEFAULT_OVERLAY_SCROLL_STRATEGY,
    deps: [overlay.Overlay],
    useFactory: DEFAULT_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,
};
var NovoOverlayTemplate = /** @class */ (function () {
    /**
     * @param {?} _overlay
     * @param {?} _viewContainerRef
     * @param {?} _zone
     * @param {?} _changeDetectorRef
     * @param {?} _scrollStrategy
     * @param {?} _document
     */
    function NovoOverlayTemplate(_overlay, _viewContainerRef, _zone, _changeDetectorRef, _scrollStrategy, _document) {
        this._overlay = _overlay;
        this._viewContainerRef = _viewContainerRef;
        this._zone = _zone;
        this._changeDetectorRef = _changeDetectorRef;
        this._scrollStrategy = _scrollStrategy;
        this._document = _document;
        this.id = "novo-overlay-" + Date.now();
        this.position = 'default';
        this.size = 'inherit';
        this.closeOnSelect = true;
        this.select = new core.EventEmitter();
        this.closing = new core.EventEmitter();
        this._panelOpen = false;
    }
    /**
     * @return {?}
     */
    NovoOverlayTemplate.prototype.ngOnDestroy = function () {
        this._destroyPanel();
    };
    Object.defineProperty(NovoOverlayTemplate.prototype, "panelOpen", {
        /**
         * @return {?}
         */
        get: function () {
            return this._panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoOverlayTemplate.prototype, "parent", {
        /**
         * @return {?}
         */
        get: function () {
            return this._parent;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._parent = value;
            this._checkSizes();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens the autocomplete suggestion panel.
     * @return {?}
     */
    NovoOverlayTemplate.prototype.openPanel = function () {
        var _this = this;
        if (!this._overlayRef) {
            this._createOverlay(this.template);
        }
        else {
            this._checkSizes();
        }
        if (this._overlayRef && !this._overlayRef.hasAttached()) {
            this._overlayRef.attach(this._portal);
            this._closingActionsSubscription = this._subscribeToClosingActions();
        }
        this._panelOpen = true;
        this._changeDetectorRef.markForCheck();
        setTimeout(function () { return _this._overlayRef.updatePosition(); });
    };
    /**
     * Closes the autocomplete suggestion panel.
     * @return {?}
     */
    NovoOverlayTemplate.prototype.closePanel = function () {
        var _this = this;
        this._zone.run(function () {
            if (_this._overlayRef && _this._overlayRef.hasAttached()) {
                _this._overlayRef.detach();
                _this._closingActionsSubscription.unsubscribe();
            }
            _this.closing.emit(true);
            if (_this._panelOpen) {
                _this._panelOpen = false;
                _this._changeDetectorRef.markForCheck();
            }
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoOverlayTemplate.prototype.onClosingAction = function (event) {
        this.closePanel();
    };
    Object.defineProperty(NovoOverlayTemplate.prototype, "panelClosingActions", {
        /**
         * A stream of actions that should close the autocomplete panel, including
         * when an option is selected, on blur, and when TAB is pressed.
         * @return {?}
         */
        get: function () {
            return merge.merge(
            // this.overlayTemplate._keyManager.tabOut,
            this._outsideClickStream);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoOverlayTemplate.prototype, "_outsideClickStream", {
        /**
         * Stream of clicks outside of the autocomplete panel.
         * @return {?}
         */
        get: function () {
            var _this = this;
            if (!this._document) {
                return of.of();
            }
            return merge.merge(fromEvent.fromEvent(this._document, 'click'), fromEvent.fromEvent(this._document, 'touchend')).pipe(filter.filter(function (event) {
                var /** @type {?} */ clickTarget = (event.target);
                var /** @type {?} */ clicked = _this._panelOpen &&
                    clickTarget !== _this._getConnectedElement().nativeElement &&
                    !_this._getConnectedElement().nativeElement.contains(clickTarget) &&
                    (!!_this._overlayRef && !_this._overlayRef.overlayElement.contains(clickTarget));
                if (_this._panelOpen && !!_this._overlayRef && _this._overlayRef.overlayElement.contains(clickTarget) && _this.closeOnSelect) {
                    _this.select.emit(event);
                }
                return clicked;
            }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This method listens to a stream of panel closing actions and resets the
     * stream every time the option list changes.
     * @return {?}
     */
    NovoOverlayTemplate.prototype._subscribeToClosingActions = function () {
        var _this = this;
        var /** @type {?} */ firstStable = this._zone.onStable.asObservable().pipe(first_2());
        // const valueChanges = Observable.from(this.value);
        // When the zone is stable initially, and when the option list changes...
        return (merge.merge(firstStable)
            .pipe(
        // create a new stream of panelClosingActions, replacing any previous streams
        // that were created, and flatten it so our stream only emits closing events...
        switchMap_2(function () {
            return _this.panelClosingActions;
        }), 
        // when the first closing event occurs...
        first_2())
            .subscribe(function (event) { return _this.onClosingAction(event); }));
    };
    /**
     * Destroys the autocomplete suggestion panel.
     * @return {?}
     */
    NovoOverlayTemplate.prototype._destroyPanel = function () {
        if (this._overlayRef) {
            this.closePanel();
            this._overlayRef.dispose();
            this._overlayRef = undefined;
        }
    };
    /**
     * @param {?} template
     * @return {?}
     */
    NovoOverlayTemplate.prototype._createOverlay = function (template) {
        this._portal = new portal.TemplatePortal(template, this._viewContainerRef);
        this._overlayRef = this._overlay.create(this._getOverlayConfig());
    };
    /**
     * @return {?}
     */
    NovoOverlayTemplate.prototype._getOverlayConfig = function () {
        var /** @type {?} */ overlayState = new overlay.OverlayConfig();
        overlayState.positionStrategy = this._getOverlayPosition();
        if (this.size === 'inherit') {
            overlayState.width = this._getHostWidth();
        }
        overlayState.direction = 'ltr';
        overlayState.scrollStrategy = this._scrollStrategy();
        return overlayState;
    };
    /**
     * @return {?}
     */
    NovoOverlayTemplate.prototype._getOverlayPosition = function () {
        switch (this.position) {
            case 'center':
                this._positionStrategy = this._overlay
                    .position()
                    .connectedTo(this._getConnectedElement(), { originX: 'start', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
                    .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
                    .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'bottom' });
                break;
            case 'right':
                this._positionStrategy = this._overlay
                    .position()
                    .connectedTo(this._getConnectedElement(), { originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' })
                    .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })
                    .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' })
                    .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' });
                break;
            default:
                this._positionStrategy = this._overlay
                    .position()
                    .connectedTo(this._getConnectedElement(), { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })
                    .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' });
                break;
        }
        return this._positionStrategy;
    };
    /**
     * @return {?}
     */
    NovoOverlayTemplate.prototype._checkSizes = function () {
        if (this._overlayRef) {
            if (this.size === 'inherit') {
                this._overlayRef.getConfig().width = this._getHostWidth();
            }
            this._overlayRef.updateSize(this._overlayRef.getConfig());
            this._overlayRef.updatePosition();
            this._changeDetectorRef.markForCheck();
        }
    };
    /**
     * @return {?}
     */
    NovoOverlayTemplate.prototype._getConnectedElement = function () {
        return this.parent;
    };
    /**
     * Returns the width of the input element, so the panel width can match it.
     * @return {?}
     */
    NovoOverlayTemplate.prototype._getHostWidth = function () {
        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;
    };
    return NovoOverlayTemplate;
}());
NovoOverlayTemplate.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-overlay-template',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                template: "\n    <ng-template>\n        <div class=\"novo-overlay-panel\" role=\"listbox\" [id]=\"id\" #panel>\n            <ng-content></ng-content>\n        </div>\n    </ng-template>\n  ",
            },] },
];
/**
 * @nocollapse
 */
NovoOverlayTemplate.ctorParameters = function () { return [
    { type: overlay.Overlay, },
    { type: core.ViewContainerRef, },
    { type: core.NgZone, },
    { type: core.ChangeDetectorRef, },
    { type: undefined, decorators: [{ type: core.Inject, args: [DEFAULT_OVERLAY_SCROLL_STRATEGY,] },] },
    { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [platformBrowser.DOCUMENT,] },] },
]; };
NovoOverlayTemplate.propDecorators = {
    'template': [{ type: core.ViewChild, args: [core.TemplateRef,] },],
    'panel': [{ type: core.ViewChild, args: ['panel',] },],
    'position': [{ type: core.Input },],
    'size': [{ type: core.Input },],
    'closeOnSelect': [{ type: core.Input },],
    'select': [{ type: core.Output },],
    'closing': [{ type: core.Output },],
    'parent': [{ type: core.Input },],
};
// NG2
// APP
var NovoOverlayModule = /** @class */ (function () {
    function NovoOverlayModule() {
    }
    return NovoOverlayModule;
}());
NovoOverlayModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule, overlay.OverlayModule],
                declarations: [NovoOverlayTemplate],
                exports: [NovoOverlayTemplate],
                providers: [DEFAULT_OVERLAY_SCROLL_STRATEGY_PROVIDER]
            },] },
];
/**
 * @nocollapse
 */
NovoOverlayModule.ctorParameters = function () { return []; };
// NG2
// APP
// Value accessor for the component (supports ngModel)
var SELECT_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoSelectElement; }),
    multi: true,
};
var NovoSelectElement = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} ref
     */
    function NovoSelectElement(element, labels, ref) {
        this.element = element;
        this.labels = labels;
        this.ref = ref;
        this.placeholder = 'Select...';
        this.onSelect = new core.EventEmitter();
        this.selectedIndex = -1;
        this.empty = true;
        this.header = {
            open: false,
            valid: true,
            value: '',
        };
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.filterTerm = '';
    }
    /**
     * @return {?}
     */
    NovoSelectElement.prototype.ngOnInit = function () {
        this.ngOnChanges();
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoSelectElement.prototype.ngOnChanges = function (changes) {
        var _this = this;
        this.readonly = this.readonly === true;
        if (this.options && this.options.length && typeof this.options[0] === 'string') {
            this.filteredOptions = this.options.map(function (item) {
                return { value: item, label: item };
            });
        }
        else {
            this.filteredOptions = (this.options || []).filter(function (item) {
                return !item.readOnly;
            });
            this.filteredOptions.forEach(function (element) {
                element.active = false;
            });
        }
        if (!this.model && !this.createdItem) {
            this.clear();
        }
        else if (this.createdItem) {
            var /** @type {?} */ item = this.options.find(function (i) { return i.label === _this.createdItem; });
            var /** @type {?} */ index$$1 = this.options.indexOf(item);
            this.select(item, index$$1);
        }
        else {
            this.writeValue(this.model);
        }
        if (this.panelOpen) {
            this.openPanel();
        }
    };
    /**
     * BEGIN: Convienient Panel Methods.
     * @return {?}
     */
    NovoSelectElement.prototype.openPanel = function () {
        this.overlay.openPanel();
    };
    /**
     * @return {?}
     */
    NovoSelectElement.prototype.closePanel = function () {
        this.overlay.closePanel();
    };
    Object.defineProperty(NovoSelectElement.prototype, "panelOpen", {
        /**
         * @return {?}
         */
        get: function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     * @param {?} event
     * @return {?}
     */
    NovoSelectElement.prototype.setValueAndClose = function (event) {
        if (event.value && event.index >= 0) {
            this.select(event.value, event.index);
        }
        this.closePanel();
    };
    /**
     * @param {?} option
     * @param {?} i
     * @param {?=} fireEvents
     * @return {?}
     */
    NovoSelectElement.prototype.select = function (option, i, fireEvents) {
        if (fireEvents === void 0) { fireEvents = true; }
        if (this.selected) {
            this.selected.active = false;
        }
        this.selectedIndex = i;
        this.selected = option;
        this.selected.active = true;
        this.empty = false;
        if (fireEvents) {
            this.onModelChange(this.selected.value);
            this.onSelect.emit({ selected: this.selected.value });
        }
    };
    /**
     * @return {?}
     */
    NovoSelectElement.prototype.clear = function () {
        this.selected = {
            label: this.placeholder,
            value: null,
            active: false,
        };
        this.header = {
            open: false,
            valid: true,
            value: '',
        };
        this.selectedIndex = -1;
        this.empty = true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoSelectElement.prototype.onKeyDown = function (event) {
        var _this = this;
        if (this.panelOpen) {
            if (!this.header.open) {
                // Prevent Scrolling
                event.preventDefault();
            }
            // Close popup on escape key
            if (event.keyCode === KeyCodes.ESC) {
                this.closePanel();
                return;
            }
            if (event.keyCode === KeyCodes.ENTER) {
                if (this.header.open && this.header.value) {
                    this.saveHeader();
                    return;
                }
                this.setValueAndClose({ value: this.filteredOptions[this.selectedIndex], index: this.selectedIndex });
                return;
            }
            if (event.keyCode === KeyCodes.UP && this.selectedIndex > 0) {
                this.selectedIndex--;
                this.select(this.filteredOptions[this.selectedIndex], this.selectedIndex);
                this.scrollToSelected();
            }
            else if (event.keyCode === KeyCodes.DOWN && this.selectedIndex < this.filteredOptions.length - 1) {
                this.selectedIndex++;
                this.select(this.filteredOptions[this.selectedIndex], this.selectedIndex);
                this.scrollToSelected();
                if (this.header.open) {
                    this.toggleHeader(null, false);
                }
            }
            else if (event.keyCode === KeyCodes.UP && this.selectedIndex === 0) {
                this.selectedIndex--;
                this.toggleHeader(null, true);
            }
            else if ((event.keyCode >= 65 && event.keyCode <= 90) || event.keyCode === KeyCodes.SPACE) {
                clearTimeout(this.filterTermTimeout);
                this.filterTermTimeout = setTimeout(function () {
                    _this.filterTerm = '';
                }, 2000);
                var /** @type {?} */ char = String.fromCharCode(event.keyCode);
                this.filterTerm = this.filterTerm.concat(char);
                // let element = this.element.nativeElement;
                // let list = element.querySelector('.novo-select-list');
                // let item = element.querySelector(`[data-automation-value^="${this.filterTerm}" i]`);
                var /** @type {?} */ item = this.filteredOptions.find(function (i) { return i.label.toUpperCase().indexOf(_this.filterTerm) === 0; });
                if (item) {
                    this.select(item, this.filteredOptions.indexOf(item));
                    this.scrollToSelected();
                }
            }
            else if ([KeyCodes.BACKSPACE, KeyCodes.DELETE].includes(event.keyCode)) {
                clearTimeout(this.filterTermTimeout);
                this.filterTermTimeout = setTimeout(function () {
                    _this.filterTerm = '';
                }, 2000);
                this.filterTerm = this.filterTerm.slice(0, -1);
            }
        }
        else {
            if ([KeyCodes.DOWN, KeyCodes.UP].includes(event.keyCode)) {
                this.panelOpen ? this.closePanel() : this.openPanel();
            }
        }
    };
    /**
     * @return {?}
     */
    NovoSelectElement.prototype.scrollToSelected = function () {
        this.scrollToIndex(this.selectedIndex);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NovoSelectElement.prototype.scrollToIndex = function (index$$1) {
        var /** @type {?} */ element = this.overlay._overlayRef.overlayElement;
        var /** @type {?} */ list = element.querySelector('.novo-select-list');
        var /** @type {?} */ items = list.querySelectorAll('li');
        var /** @type {?} */ item = items[this.headerConfig ? index$$1 + 1 : index$$1];
        if (item) {
            list.scrollTop = item.offsetTop;
        }
    };
    /**
     * @param {?} event
     * @param {?} forceValue
     * @return {?}
     */
    NovoSelectElement.prototype.toggleHeader = function (event, forceValue) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        // Reverse the active property (if forceValue, use that)
        this.header = {
            open: forceValue !== undefined ? forceValue : !this.header.open,
            value: '',
            valid: true,
        };
    };
    /**
     * @param {?} match
     * @param {?} query
     * @return {?}
     */
    NovoSelectElement.prototype.highlight = function (match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query ? match.replace(new RegExp(this.escapeRegexp(query), 'gi'), '<strong>$&</strong>') : match;
    };
    /**
     * @param {?} queryToEscape
     * @return {?}
     */
    NovoSelectElement.prototype.escapeRegexp = function (queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    };
    /**
     * @return {?}
     */
    NovoSelectElement.prototype.saveHeader = function () {
        if (this.header.value) {
            this.headerConfig.onSave(this.header.value);
            this.createdItem = this.header.value;
            this.closePanel();
        }
        else {
            this.header.valid = false;
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoSelectElement.prototype.writeValue = function (model) {
        this.model = model;
        if (this.options) {
            var /** @type {?} */ item = this.filteredOptions.find(function (i) { return i.value === model; });
            if (!item && !Helpers.isEmpty(model)) {
                item = {
                    label: model,
                    value: model,
                };
                if (!item.readOnly) {
                    this.options.unshift(item);
                }
            }
            if (item) {
                this.select(item, this.filteredOptions.indexOf(item), false);
                this.empty = false;
            }
            else {
                this.clear();
            }
        }
        this.ref.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoSelectElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoSelectElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    return NovoSelectElement;
}());
NovoSelectElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-select',
                providers: [SELECT_VALUE_ACCESSOR],
                template: "\n        <div (click)=\"openPanel()\" tabIndex=\"0\" type=\"button\" [class.empty]=\"empty\">{{selected.label}}<i class=\"bhi-collapse\"></i></div>\n        <novo-overlay-template [parent]=\"element\" position=\"center\">\n            <ul class=\"novo-select-list\" tabIndex=\"-1\" [class.header]=\"headerConfig\" [class.active]=\"panelOpen\">\n                <ng-content></ng-content>\n                <li *ngIf=\"headerConfig\" class=\"select-header\" [class.open]=\"header.open\">\n                    <button  *ngIf=\"!header.open\" (click)=\"toggleHeader($event); false\" tabIndex=\"-1\" type=\"button\" class=\"header\"><i class=\"bhi-add-thin\"></i>&nbsp;{{headerConfig.label}}</button>\n                    <div *ngIf=\"header.open\" [ngClass]=\"{active: header.open}\">\n                        <input autofocus type=\"text\" [placeholder]=\"headerConfig.placeholder\" [attr.id]=\"name\" autocomplete=\"false\" [(ngModel)]=\"header.value\" [ngClass]=\"{invalid: !header.valid}\"/>\n                        <footer>\n                            <button (click)=\"toggleHeader($event, false)\">{{labels.cancel}}</button>\n                            <button (click)=\"saveHeader()\" class=\"primary\">{{labels.save}}</button>\n                        </footer>\n                    </div>\n                </li>\n                <li *ngFor=\"let option of filteredOptions; let i = index\" [ngClass]=\"{active: option.active}\" (click)=\"setValueAndClose({value: option, index: i})\" [attr.data-automation-value]=\"option.label\">\n                    <span [innerHtml]=\"highlight(option.label, filterTerm)\"></span>\n                    <i *ngIf=\"option.active\" class=\"bhi-check\"></i>\n                </li>\n            </ul>\n        </novo-overlay-template>\n    ",
                host: {
                    '(keydown)': 'onKeyDown($event)',
                },
            },] },
];
/**
 * @nocollapse
 */
NovoSelectElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
    { type: core.ChangeDetectorRef, },
]; };
NovoSelectElement.propDecorators = {
    'name': [{ type: core.Input },],
    'options': [{ type: core.Input },],
    'placeholder': [{ type: core.Input },],
    'readonly': [{ type: core.Input },],
    'headerConfig': [{ type: core.Input },],
    'onSelect': [{ type: core.Output },],
    'overlay': [{ type: core.ViewChild, args: [NovoOverlayTemplate,] },],
    'onKeyDown': [{ type: core.HostListener, args: ['keydown', ['$event'],] },],
};
// NG2
// APP
var NovoSelectModule = /** @class */ (function () {
    function NovoSelectModule() {
    }
    return NovoSelectModule;
}());
NovoSelectModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule, overlay.OverlayModule, NovoOverlayModule],
                declarations: [NovoSelectElement],
                exports: [NovoSelectElement]
            },] },
];
/**
 * @nocollapse
 */
NovoSelectModule.ctorParameters = function () { return []; };
// NG2
// APP
// Value accessor for the component (supports ngModel)
var SWITCH_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoSwitchElement; }),
    multi: true
};
var NovoSwitchElement = /** @class */ (function () {
    /**
     * @param {?} ref
     */
    function NovoSwitchElement(ref) {
        this.ref = ref;
        this.onChange = new core.EventEmitter();
        this._disabled = false;
        this.onModelChange = function () {
        };
        this.onModelTouched = function () {
        };
    }
    Object.defineProperty(NovoSwitchElement.prototype, "disabled", {
        /**
         * @return {?}
         */
        get: function () {
            return this._disabled;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._disabled = (!value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    NovoSwitchElement.prototype.onKeydown = function (event) {
        if (event.keyCode === KeyCodes.SPACE) {
            event.preventDefault();
            this.toggle(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoSwitchElement.prototype.toggle = function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.disabled) {
            return;
        }
        this.model = !this.model;
        this.onChange.next(this.model);
        this.onModelChange(this.model);
        this.ref.markForCheck();
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoSwitchElement.prototype.writeValue = function (model) {
        this.model = model;
        this.ref.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoSwitchElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoSwitchElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    return NovoSwitchElement;
}());
NovoSwitchElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-switch',
                providers: [SWITCH_VALUE_ACCESSOR],
                template: "\n        <div (click)=\"toggle($event)\">\n            <div class=\"novo-switch-container\">\n                <div class=\"novo-switch-bar\"></div>\n                <div class=\"novo-switch-thumb-container\">\n                    <div class=\"novo-switch-thumb\"></div>\n                </div>\n            </div>\n            <div class=\"novo-switch-label\"><ng-content></ng-content></div>\n        </div>\n    ",
                host: {
                    'role': 'checkbox',
                    '[attr.aria-checked]': 'model',
                    '[attr.aria-disabled]': 'disabled',
                    '(keydown)': 'onKeydown($event)',
                    '[class]': 'theme'
                }
            },] },
];
/**
 * @nocollapse
 */
NovoSwitchElement.ctorParameters = function () { return [
    { type: core.ChangeDetectorRef, },
]; };
NovoSwitchElement.propDecorators = {
    'theme': [{ type: core.Input },],
    'onChange': [{ type: core.Output },],
    'disabled': [{ type: core.Input, args: ['disabled',] },],
};
// NG2
// APP
var NovoSwitchModule = /** @class */ (function () {
    function NovoSwitchModule() {
    }
    return NovoSwitchModule;
}());
NovoSwitchModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule],
                declarations: [NovoSwitchElement],
                exports: [NovoSwitchElement]
            },] },
];
/**
 * @nocollapse
 */
NovoSwitchModule.ctorParameters = function () { return []; };
// NG2
// Vendor
// APP
// Value accessor for the component (supports ngModel)
var PICKER_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoPickerElement; }),
    multi: true,
};
/**
 * \@name Picker
 *
 * \@description This class is the directive definition of the Picker. If you add and attribute of `picker` to an input,
 * it will create an instance of the picker which wraps the input in all of the picker HTML elements and functionality.
 * Picker should be added as a two-way bound ngModel instance `[(picker)]=""` in order to have the picker options
 * dynamically populate.
 */
var NovoPickerElement = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} componentUtils
     * @param {?} ref
     */
    function NovoPickerElement(element, componentUtils, ref) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.ref = ref;
        this.closeOnSelect = true;
        this.selected = [];
        // Deprecated
        this.appendToBody = false;
        // Deprecated
        this.parentScrollAction = 'close';
        // Side the dropdown will open
        this.side = 'left';
        // Autoselects the first option in the results
        this.autoSelectFirstOption = true;
        this._disablePickerInput = false;
        // Emitter for selects
        this.changed = new core.EventEmitter();
        this.select = new core.EventEmitter();
        this.focus = new core.EventEmitter();
        this.blur = new core.EventEmitter();
        this.typing = new core.EventEmitter();
        this.isStatic = true;
        this.term = '';
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    Object.defineProperty(NovoPickerElement.prototype, "disablePickerInput", {
        /**
         * @return {?}
         */
        get: function () {
            return this._disablePickerInput;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._disablePickerInput = coercion.coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoPickerElement.prototype.ngOnInit = function () {
        var _this = this;
        if (this.overrideElement) {
            this.element = this.overrideElement;
        }
        if (this.appendToBody) {
            console.warn("'appendToBody' has been deprecated. Please remove this attribute.");
        }
        // Custom results template
        this.resultsComponent = this.config.resultsTemplate || PickerResults;
        // Get all distinct key up events from the input and only fire if long enough and distinct
        //let input = this.element.nativeElement.querySelector('input');
        var /** @type {?} */ pasteObserver = Observable.Observable.fromEvent(this.input.nativeElement, 'paste')
            .debounceTime(250)
            .distinctUntilChanged();
        pasteObserver.subscribe(function (event) { return _this.onDebouncedKeyup(event); }, function (err) { return _this.hideResults(err); });
        var /** @type {?} */ keyboardObserver = Observable.Observable.fromEvent(this.input.nativeElement, 'keyup')
            .debounceTime(250)
            .distinctUntilChanged();
        keyboardObserver.subscribe(function (event) { return _this.onDebouncedKeyup(event); }, function (err) { return _this.hideResults(err); });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoPickerElement.prototype.onDebouncedKeyup = function (event) {
        if ([KeyCodes.ESC, KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.TAB].includes(event['keyCode'])) {
            return;
        }
        this.show(((event.target)).value);
    };
    /**
     * BEGIN: Convienient Panel Methods.
     * @return {?}
     */
    NovoPickerElement.prototype.openPanel = function () {
        this.container.openPanel();
    };
    /**
     * @return {?}
     */
    NovoPickerElement.prototype.closePanel = function () {
        this.container.closePanel();
    };
    Object.defineProperty(NovoPickerElement.prototype, "panelOpen", {
        /**
         * @return {?}
         */
        get: function () {
            return this.container && this.container.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * END: Convienient Panel Methods.
     * @param {?=} term
     * @return {?}
     */
    NovoPickerElement.prototype.show = function (term) {
        this.openPanel();
        // Show the results inside
        this.showResults(term);
    };
    /**
     * @return {?}
     */
    NovoPickerElement.prototype.hide = function () {
        this.closePanel();
        this.ref.markForCheck();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoPickerElement.prototype.onKeyDown = function (event) {
        if (this.disablePickerInput) {
            Helpers.swallowEvent(event);
        }
        if (this.panelOpen && !this.disablePickerInput) {
            if (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.TAB) {
                this.hideResults();
                return;
            }
            if (event.keyCode === KeyCodes.UP) {
                this.popup.instance.prevActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if (event.keyCode === KeyCodes.DOWN) {
                this.popup.instance.nextActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if (event.keyCode === KeyCodes.ENTER) {
                this.popup.instance.selectActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if (event.keyCode === KeyCodes.BACKSPACE && !Helpers.isBlank(this._value)) {
                this.clearValue(false);
                this.closePanel();
            }
        }
    };
    /**
     * @param {?} wipeTerm
     * @return {?}
     */
    NovoPickerElement.prototype.clearValue = function (wipeTerm) {
        this._value = null;
        this.select.emit(this._value);
        this.changed.emit({ value: this._value, rawValue: { label: '', value: this._value } });
        this.onModelChange(this._value);
        if (wipeTerm) {
            this.term = null;
            this.hideResults();
        }
        this.ref.markForCheck();
    };
    /**
     * \@name onFocus
     * \@description When the input's focus event is called this method calls the debounced function that displays the
     * results.
     * @param {?} event
     * @return {?}
     */
    NovoPickerElement.prototype.onFocus = function (event) {
        this.show();
        this.focus.emit(event);
    };
    /**
     * \@name showResults
     *
     * \@description This method creates an instance of the results (called popup) and adds all the bindings to that
     * instance.
     * @param {?=} term
     * @return {?}
     */
    NovoPickerElement.prototype.showResults = function (term) {
        // Update Matches
        if (this.popup) {
            // Update existing list or create the DOM element
            this.popup.instance.config = this.config;
            this.popup.instance.term = this.term;
            this.popup.instance.selected = this.selected;
            this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
            this.ref.markForCheck();
        }
        else {
            this.popup = this.componentUtils.appendNextToLocation(this.resultsComponent, this.results);
            this.popup.instance.parent = this;
            this.popup.instance.config = this.config;
            this.popup.instance.term = this.term;
            this.popup.instance.selected = this.selected;
            this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
            this.popup.instance.overlay = this.container._overlayRef;
            this.ref.markForCheck();
        }
    };
    /**
     * \@name hideResults
     *
     * \@description - This method deletes the picker results from the DOM.
     * @param {?=} err
     * @return {?}
     */
    NovoPickerElement.prototype.hideResults = function (err) {
        if (this.popup) {
            this.popup.destroy();
            this.popup = null;
        }
        this.hide();
    };
    Object.defineProperty(NovoPickerElement.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this._value;
        },
        /**
         * @param {?} selected
         * @return {?}
         */
        set: function (selected) {
            if (!selected) {
                this.term = '';
                this._value = null;
                this.onModelChange(this._value);
            }
            else if (selected.value !== this._value) {
                this.term = this.clearValueOnSelect ? '' : selected.label;
                this._value = selected.value;
                this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: selected.value } });
                this.select.emit(selected);
                this.onModelChange(selected.value);
            }
            else {
                this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: this._value } });
                this.select.emit(selected);
            }
            this.ref.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    NovoPickerElement.prototype.checkTerm = function (event) {
        this.typing.emit(event);
        if (!event || !event.length) {
            this._value = null;
            this.onModelChange(this._value);
        }
        this.ref.markForCheck();
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    NovoPickerElement.prototype.onTouched = function (event) {
        this.onModelTouched();
        this.blur.emit(event);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoPickerElement.prototype.writeValue = function (value) {
        var _this = this;
        if (this.clearValueOnSelect) {
            this.term = '';
        }
        else {
            if (typeof value === 'string') {
                this.term = value;
            }
            else if (value && value.label) {
                this.term = value.label;
            }
            else if (value && value.firstName) {
                this.term = value.firstName + " " + value.lastName;
            }
            else if (value && value.name) {
                this.term = value.name;
            }
            else if (typeof this.config.getLabels === 'function') {
                this.config.getLabels(value).then(function (result) {
                    if (result) {
                        _this.term = result.length ? result[0].label || '' : result.label || '';
                    }
                    else {
                        _this.term = value;
                    }
                });
            }
            else {
                this.term = value || '';
            }
        }
        this._value = value;
        this.ref.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoPickerElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoPickerElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    return NovoPickerElement;
}());
NovoPickerElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-picker',
                providers: [PICKER_VALUE_ACCESSOR],
                template: "\n        <i class=\"bhi-more\" *ngIf=\"config?.entityIcon && !_value\"></i>\n        <i class=\"bhi-{{ config?.entityIcon }} entity-icon {{ config?.entityIcon }}\" *ngIf=\"config?.entityIcon && _value\"></i>\n        <input\n            type=\"text\"\n            class=\"picker-input\"\n            [(ngModel)]=\"term\"\n            [class.entity-picker]=\"config.entityIcon\"\n            [class.entity-selected]=\"config?.entityIcon && _value\"\n            (ngModelChange)=\"checkTerm($event)\"\n            [placeholder]=\"placeholder\"\n            (keydown)=\"onKeyDown($event)\"\n            (focus)=\"onFocus($event)\"\n            (click)=\"onFocus($event)\"\n            (blur)=\"onTouched($event)\"\n            autocomplete=\"off\" #input />\n        <i class=\"bhi-search\" *ngIf=\"!_value || clearValueOnSelect\"></i>\n        <i class=\"bhi-times\" [class.entity-selected]=\"config?.entityIcon && _value\" *ngIf=\"_value && !clearValueOnSelect\" (click)=\"clearValue(true)\"></i>\n        <novo-overlay-template class=\"picker-results-container\" [parent]=\"element\">\n            <span #results></span>\n            <ng-content></ng-content>\n        </novo-overlay-template>\n    ",
            },] },
];
/**
 * @nocollapse
 */
NovoPickerElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: ComponentUtils, },
    { type: core.ChangeDetectorRef, },
]; };
NovoPickerElement.propDecorators = {
    'results': [{ type: core.ViewChild, args: ['results', { read: core.ViewContainerRef },] },],
    'config': [{ type: core.Input },],
    'placeholder': [{ type: core.Input },],
    'clearValueOnSelect': [{ type: core.Input },],
    'closeOnSelect': [{ type: core.Input },],
    'selected': [{ type: core.Input },],
    'appendToBody': [{ type: core.Input },],
    'parentScrollSelector': [{ type: core.Input },],
    'parentScrollAction': [{ type: core.Input },],
    'containerClass': [{ type: core.Input },],
    'side': [{ type: core.Input },],
    'autoSelectFirstOption': [{ type: core.Input },],
    'overrideElement': [{ type: core.Input },],
    'disablePickerInput': [{ type: core.Input },],
    'changed': [{ type: core.Output },],
    'select': [{ type: core.Output },],
    'focus': [{ type: core.Output },],
    'blur': [{ type: core.Output },],
    'typing': [{ type: core.Output },],
    'container': [{ type: core.ViewChild, args: [NovoOverlayTemplate,] },],
    'input': [{ type: core.ViewChild, args: ['input',] },],
};
// NG2
// APP
var NovoPickerContainer = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} renderer
     */
    function NovoPickerContainer(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.scrollHandler = this.handleScroll.bind(this);
    }
    /**
     * @return {?}
     */
    NovoPickerContainer.prototype.ngDoCheck = function () {
        if (this.isVisible && this.position) {
            var /** @type {?} */ element = this.element.nativeElement;
            var /** @type {?} */ position = Helpers.calcPositionOffset(this.position, element, this.side);
            if (position) {
                this.renderer.setStyle(element, 'top', position.top);
                this.renderer.setStyle(element, 'left', position.left);
                this.renderer.setStyle(element, 'width', position.width);
            }
        }
    };
    /**
     * @return {?}
     */
    NovoPickerContainer.prototype.handleScroll = function () {
        // On scroll, don't force the position to update (jump from top/middle/bottom/right)
        this.updatePosition(this.relativeElement, this.side);
    };
    /**
     * @param {?} appendToBody
     * @return {?}
     */
    NovoPickerContainer.prototype.show = function (appendToBody) {
        this.appendToBody = appendToBody;
        this.renderer.setStyle(this.element.nativeElement, 'display', 'block');
        this.renderer.setStyle(this.element.nativeElement, 'visibility', 'visible');
        this.isVisible = true;
        if (appendToBody) {
            window.addEventListener('scroll', this.scrollHandler);
        }
    };
    /**
     * @return {?}
     */
    NovoPickerContainer.prototype.hide = function () {
        this.isVisible = false;
        this.renderer.setStyle(this.element.nativeElement, 'visibility', 'hidden');
        if (this.appendToBody) {
            window.removeEventListener('scroll', this.scrollHandler);
        }
    };
    /**
     * @param {?} element
     * @param {?} side
     * @return {?}
     */
    NovoPickerContainer.prototype.updatePosition = function (element, side) {
        this.relativeElement = element;
        this.side = side;
        this.position = element.getBoundingClientRect();
        this.ngDoCheck();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoPickerContainer.prototype.onKeyDown = function (event) {
        // Close with ESC/Enter
        if (this.isVisible && (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.ENTER)) {
            //this.parent.toggleActive(null, false);
        }
    };
    return NovoPickerContainer;
}());
NovoPickerContainer.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-picker-container',
                template: '<ng-content></ng-content>'
            },] },
];
/**
 * @nocollapse
 */
NovoPickerContainer.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
]; };
NovoPickerContainer.propDecorators = {
    'onKeyDown': [{ type: core.HostListener, args: ['keydown', ['$event'],] },],
};
// NG2
// Vendor
// APP
var EntityPickerResult = /** @class */ (function () {
    /**
     * @param {?} labels
     */
    function EntityPickerResult(labels) {
        this.labels = labels;
    }
    /**
     * \@name escapeRegexp
     * \@description This function captures the whole query string and replace it with the string that will be used to
     * match.
     * @param {?} queryToEscape
     *
     * @return {?}
     */
    EntityPickerResult.prototype.escapeRegexp = function (queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    };
    /**
     * \@name highlight
     * \@description This function should return a <strong>-tag wrapped HTML string.
     * @param {?} match
     * @param {?} query
     *
     * @return {?}
     */
    EntityPickerResult.prototype.highlight = function (match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query && match ? match.replace(new RegExp(this.escapeRegexp(query), 'gi'), '<strong>$&</strong>') : match;
    };
    /**
     * @param {?=} result
     * @return {?}
     */
    EntityPickerResult.prototype.getIconForResult = function (result) {
        if (result) {
            switch (result.searchEntity) {
                case 'ClientContact':
                    return 'person contact';
                case 'ClientCorporation':
                    return 'company';
                case 'Opportunity':
                    return 'opportunity';
                case 'Candidate':
                    return 'candidate';
                case 'Lead':
                    return 'lead';
                case 'JobOrder':
                    return 'job';
                case 'Placement':
                    return 'star placement';
                case 'CorporateUser':
                    return 'user';
                default:
                    return '';
            }
        }
        return '';
    };
    /**
     * @param {?=} date
     * @return {?}
     */
    EntityPickerResult.prototype.renderTimestamp = function (date) {
        var /** @type {?} */ timestamp = '';
        if (date) {
            timestamp = this.labels.formatDateWithFormat(date, { year: 'numeric', month: 'numeric', day: 'numeric' });
        }
        return timestamp;
    };
    /**
     * @param {?=} result
     * @return {?}
     */
    EntityPickerResult.prototype.getNameForResult = function (result) {
        if (result) {
            switch (result.searchEntity) {
                case 'Lead':
                case 'CorporateUser':
                case 'ClientContact':
                case 'Candidate':
                case 'Person':
                    if ('firstName' in result) {
                        return (result.firstName + " " + result.lastName).trim();
                    }
                    return ("" + (result.name || '')).trim();
                case 'ClientCorporation':
                    return ("" + (result.name || '')).trim();
                case 'Opportunity':
                case 'JobOrder':
                    return ("" + (result.title || '')).trim();
                case 'Placement':
                    var /** @type {?} */ label = '';
                    if (result.candidate) {
                        label = (result.candidate.firstName + " " + result.candidate.lastName).trim();
                    }
                    if (result.jobOrder) {
                        label = (label + " - " + result.jobOrder.title).trim();
                    }
                    return label;
                default:
                    return ("" + (result.name || '')).trim();
            }
        }
        return '';
    };
    return EntityPickerResult;
}());
EntityPickerResult.decorators = [
    { type: core.Component, args: [{
                selector: 'entity-picker-result',
                template: "\n        <novo-list-item *ngIf=\"match.data\">\n            <item-header>\n                <item-avatar [icon]=\"getIconForResult(match.data)\"></item-avatar>\n                <item-title>\n                    <span [innerHtml]=\"highlight(getNameForResult(match.data), term)\"></span>\n                </item-title>\n            </item-header>\n            <item-content direction=\"horizontal\">\n                <!-- COMPANY 1 -->\n                <p class=\"company\" *ngIf=\"match.data.companyName || match.data?.clientCorporation?.name\">\n                    <i class=\"bhi-company\"></i>\n                    <span [innerHtml]=\"highlight(match.data.companyName || match.data?.clientCorporation?.name, term)\"></span>\n                </p>\n                <!-- CLIENT CONTACT -->\n                <p class=\"contact\" *ngIf=\"match.data?.clientContact?.firstName\">\n                    <i class=\"bhi-person contact person\"></i>\n                    <span [innerHtml]=\"highlight(match.data.clientContact.firstName + ' ' + match.data.clientContact.lastName, term)\"></span>\n                </p>\n                <!-- CANDIDATE -->\n                <p class=\"candidate\" *ngIf=\"match.data.candidate && match.data.searchEntity === 'Placement'\">\n                    <i class=\"bhi-candidate\"></i>\n                    <span [innerHtml]=\"highlight((match.data.candidate.firstName + ' ' + match.data.candidate.lastName), term)\"></span>\n                </p>\n                <!-- START & END DATE -->\n                <p class=\"start-date\" *ngIf=\"match.data.dateBegin && match.data.searchEntity === 'Placement'\">\n                    <i class=\"bhi-calendar\"></i>\n                    <span [innerHtml]=\"renderTimestamp(match.data.dateBegin) + ' - ' + renderTimestamp(match.data.dateEnd)\"></span>\n                </p>\n                <!-- EMAIL -->\n                <p class=\"email\" *ngIf=\"match.data.email\">\n                    <i class=\"bhi-email\"></i>\n                    <span [innerHtml]=\"highlight(match.data.email, term)\"></span>\n                </p>\n                <!-- PHONE -->\n                <p class=\"phone\" *ngIf=\"match.data.phone\">\n                    <i class=\"bhi-phone\"></i>\n                    <span [innerHtml]=\"highlight(match.data.phone, term)\"></span>\n                </p>\n                <!-- ADDRESS -->\n                <p class=\"location\" *ngIf=\"match.data.address && (match.data.address.city || match.data.address.state)\">\n                    <i class=\"bhi-location\"></i>\n                    <span *ngIf=\"match.data.address.city\" [innerHtml]=\"highlight(match.data.address.city, term)\"></span>\n                    <span *ngIf=\"match.data.address.city && match.data.address.state\">, </span>\n                    <span *ngIf=\"match.data.address.state\" [innerHtml]=\"highlight(match.data.address.state, term)\"></span>\n                </p>\n                <!-- STATUS -->\n                <p class=\"status\" *ngIf=\"match.data.status\">\n                    <i class=\"bhi-info\"></i>\n                    <span [innerHtml]=\"highlight(match.data.status, term)\"></span>\n                </p>\n                <!-- OWNER -->\n                <p class=\"owner\" *ngIf=\"match.data.owner && match.data.owner.name && match.data.searchEntity === 'Candidate'\">\n                    <i class=\"bhi-person\"></i>\n                    <span [innerHtml]=\"highlight(match.data.owner.name, term)\"></span>\n                </p>\n            </item-content>\n        </novo-list-item>\n    "
            },] },
];
/**
 * @nocollapse
 */
EntityPickerResult.ctorParameters = function () { return [
    { type: NovoLabelService, },
]; };
EntityPickerResult.propDecorators = {
    'match': [{ type: core.Input },],
    'term': [{ type: core.Input },],
};
var EntityPickerResults = /** @class */ (function (_super) {
    __extends(EntityPickerResults, _super);
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} ref
     */
    function EntityPickerResults(element, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.labels = labels;
        _this.select = new core.EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    EntityPickerResults.prototype.getListElement = function () {
        return this.element.nativeElement.querySelector('novo-list');
    };
    /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    EntityPickerResults.prototype.selectMatch = function (event, item) {
        this.select.next(item);
        return _super.prototype.selectMatch.call(this, event, item);
    };
    return EntityPickerResults;
}(BasePickerResults));
EntityPickerResults.decorators = [
    { type: core.Component, args: [{
                selector: 'entity-picker-results',
                template: "\n        <novo-list *ngIf=\"matches.length > 0\" direction=\"vertical\">\n            <entity-picker-result *ngFor=\"let match of matches\"\n                    [match]=\"match\"\n                    [term]=\"term\"\n                    (click)=\"selectMatch($event, match)\"\n                    [ngClass]=\"{active: isActive(match)}\"\n                    (mouseenter)=\"selectActive(match)\"\n                    [class.disabled]=\"preselected(match)\">\n            </entity-picker-result>\n            <novo-loading theme=\"line\" *ngIf=\"isLoading && matches.length > 0\"></novo-loading>\n        </novo-list>\n        <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n        <p class=\"picker-null-results\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.pickerEmpty }}</p>\n    "
            },] },
];
/**
 * @nocollapse
 */
EntityPickerResults.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
    { type: core.ChangeDetectorRef, },
]; };
EntityPickerResults.propDecorators = {
    'select': [{ type: core.Output },],
};
// NG2
// APP
// Vendor
/**
 * \@name: ChecklistPickerResults
 *
 * \@description This is the actual list of matches that gets injected into the DOM.
 */
var ChecklistPickerResults = /** @class */ (function (_super) {
    __extends(ChecklistPickerResults, _super);
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} ref
     */
    function ChecklistPickerResults(element, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.labels = labels;
        return _this;
    }
    /**
     * @return {?}
     */
    ChecklistPickerResults.prototype.search = function () {
        var _this = this;
        var /** @type {?} */ options = this.config.options;
        //only set this the first time
        return Observable.Observable.fromPromise(new Promise(function (resolve, reject) {
            // Check if there is match data
            if (options) {
                // Resolve the data
                if (Array.isArray(options)) {
                    _this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(options);
                }
                else {
                    // All other kinds of data are rejected
                    reject('The data provided is not an array or a promise');
                    throw new Error('The data provided is not an array or a promise');
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    };
    /**
     * \@name filterData=
     * \@description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     * @param {?} matches - Collection of objects=
     *
     * @return {?}
     */
    ChecklistPickerResults.prototype.filterData = function (matches) {
        var _this = this;
        if (this.term && matches) {
            this.filteredMatches = matches.map(function (section) {
                var /** @type {?} */ items = section.originalData.filter(function (match) {
                    return ~String(match.label).toLowerCase().indexOf(_this.term.toLowerCase());
                });
                section.data = items;
                return section;
            }, this);
            return this.filteredMatches;
        }
        else if (this.term === '') {
            matches.forEach(function (section) {
                section.data = section.originalData;
            });
            return matches;
        }
        // Show no recent results template
        return matches;
    };
    /**
     * \@name selectMatch
     * \@description
     * @param {?} event
     * @param {?} item
     *
     * @return {?}
     */
    ChecklistPickerResults.prototype.selectMatch = function (event, item) {
        Helpers.swallowEvent(event);
        if (item.indeterminate) {
            item.indeterminate = false;
            item.checked = true;
        }
        else {
            item.checked = !item.checked;
        }
        var /** @type {?} */ selected = this.activeMatch;
        if (selected) {
            this.parent.value = selected;
        }
        this.ref.markForCheck();
        return false;
    };
    return ChecklistPickerResults;
}(BasePickerResults));
ChecklistPickerResults.decorators = [
    { type: core.Component, args: [{
                selector: 'checklist-picker-results',
                host: {
                    'class': 'active picker-results'
                },
                template: "\n        <novo-loading theme=\"line\" *ngIf=\"isLoading && !matches.length\"></novo-loading>\n        <ul *ngIf=\"matches.length > 0\">\n            <span *ngFor=\"let section of matches; let i = index\">\n                <li class=\"header caption\" *ngIf=\"section.data.length > 0\">{{ section.label || section.type }}</li>\n                <li\n                    *ngFor=\"let match of section.data; let i = index\" [ngClass]=\"{checked: match.checked}\"\n                    (click)=\"selectMatch($event, match)\"\n                    [class.active]=\"match === activeMatch\"\n                    (mouseenter)=\"selectActive(match)\">\n                    <label>\n                        <i [ngClass]=\"{'bhi-checkbox-empty': !match.checked, 'bhi-checkbox-filled': match.checked, 'bhi-checkbox-indeterminate': match.indeterminate }\"></i>\n                        {{match.label}}\n                    </label>\n                </li>\n            </span>\n        </ul>\n        <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n        <p class=\"picker-null-results\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.pickerEmpty }}</p>\n    "
            },] },
];
/**
 * @nocollapse
 */
ChecklistPickerResults.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
    { type: core.ChangeDetectorRef, },
]; };
var GroupedMultiPickerResults = /** @class */ (function (_super) {
    __extends(GroupedMultiPickerResults, _super);
    /**
     * @param {?} element
     * @param {?} renderer
     * @param {?} labels
     * @param {?} ref
     */
    function GroupedMultiPickerResults(element, renderer, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.renderer = renderer;
        _this.labels = labels;
        _this.customFilterEnabled = false;
        _this.placeholder = '';
        _this.internalMap = new Map();
        return _this;
    }
    Object.defineProperty(GroupedMultiPickerResults.prototype, "term", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            var _this = this;
            // Display all only will work for static categories
            if (this.config.displayAll && this.config.getItemsForCategoryAsync) {
                throw new Error('[GroupedMultiPickerResults] - you can only have `displayAll` with a static `categoryMap`. Not available with `getItemsForCategoryAsync`');
            }
            // Custom filter
            if (this.config.customFilter) {
                this.customFilterEnabled = true;
                this.customFilterLabel = this.config.customFilter.label;
                this.customFilterValue = !!this.config.customFilter.defaultFilterValue;
                this.ref.markForCheck();
                if (!this.customFilterLabel || !this.config.customFilter.matchFunction) {
                    throw new Error('[GroupedMultiPickerResults] - custom filter/matchFunction set no label was provided!');
                }
            }
            else {
                this.customFilterEnabled = false;
            }
            // Configure ALL
            if (this.config.displayAll && !this.selectedCategory) {
                this.setAllCategory();
            }
            // Placeholder
            if (this.config.placeholder) {
                this.placeholder = this.config.placeholder;
            }
            // Focus
            setTimeout(function () {
                _this.inputElement.nativeElement.focus();
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GroupedMultiPickerResults.prototype, "categories", {
        /**
         * @return {?}
         */
        get: function () {
            if (this.config.categories || this.config.categoryMap) {
                return this.config.categories || Array.from(this.config.categoryMap.values()).filter(function (category) {
                    return category.value !== 'all';
                });
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.ngOnInit = function () {
        var _this = this;
        // Subscribe to keyboard events and debounce
        this.keyboardSubscription = Observable.Observable.fromEvent(this.inputElement.nativeElement, 'keyup')
            .debounceTime(350)
            .distinctUntilChanged()
            .subscribe(function (event) {
            _this.searchTerm = event.target['value'];
            _this.matches = _this.filterData();
            _this.ref.markForCheck();
        });
    };
    /**
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.ngOnDestroy = function () {
        // Cleanup
        this.keyboardSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.setAllCategory = function () {
        // If we have display all, set the all categories up
        if (this.config.displayAll) {
            this.selectedCategory = { value: 'all', label: 'all' };
            var /** @type {?} */ allItems_1 = [];
            Array.from(this.config.categoryMap.values())
                .filter(function (category) {
                return category.value !== 'all';
            })
                .forEach(function (v) { return allItems_1.push.apply(allItems_1, v.items); });
            this.matches = this.filter(allItems_1);
            this.config.categoryMap.set('all', { value: 'all', label: 'All', items: allItems_1 });
            this.ref.markForCheck();
        }
    };
    /**
     * @param {?} category
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.selectCategory = function (category) {
        // Scroll to top
        this.renderer.setProperty(this.listElement.element.nativeElement, 'scrollTop', 0);
        // Set focus
        this.inputElement.nativeElement.focus();
        // Find new items
        var /** @type {?} */ key = category.value;
        this.selectedCategory = category;
        // Clear
        this.matches = [];
        this.ref.markForCheck();
        // New matches
        this.getNewMatches(category, key);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.clearSearchTerm = function (event) {
        Helpers.swallowEvent(event);
        this.searchTerm = '';
        this.selectCategory({ value: this.selectedCategory.value, label: this.selectedCategory.label });
        this.ref.markForCheck();
    };
    /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.selectMatch = function (event, item) {
        // Set focus
        this.inputElement.nativeElement.focus();
        return _super.prototype.selectMatch.call(this, event, item);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.fireCustomFilter = function (value) {
        var _this = this;
        this.customFilterValue = value;
        // Clear cache map
        this.internalMap.clear();
        // Only fire if we have a selected category
        if (this.selectCategory) {
            // Find new items
            var /** @type {?} */ key = this.selectedCategory.value;
            // Get new matches
            this.getNewMatches(this.selectedCategory, key);
            this.ref.markForCheck();
        }
        // Focus
        setTimeout(function () {
            _this.inputElement.nativeElement.focus();
        });
    };
    /**
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.filterData = function () {
        if (this.selectedCategory) {
            if (this.config.categoryMap) {
                return this.filter(this.config.categoryMap.get(this.selectedCategory.value).items);
            }
            else {
                return this.filter(this.internalMap.get(this.selectedCategory.value).items);
            }
        }
        return [];
    };
    /**
     * @param {?} category
     * @param {?} key
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.getNewMatches = function (category, key) {
        var _this = this;
        // Get new matches
        if (this.config.categoryMap) {
            this.matches = this.filter(this.config.categoryMap.get(key).items);
            this.ref.markForCheck();
        }
        else {
            if (!this.config.getItemsForCategoryAsync) {
                throw new Error('The "config" for the Chips must include a function "getItemsForCategoryAsync(categoryKey: string)" to retrieve the items by category. Or if you have static data provide a "categoryMap"');
            }
            if (!this.internalMap.get(key)) {
                this.isLoading = true;
                this.config.getItemsForCategoryAsync(key, this.customFilterValue).then(function (items) {
                    _this.internalMap.set(key, { value: category.value, label: category.label, items: items });
                    _this.matches = _this.filter(items, true);
                    _this.isLoading = false;
                    _this.ref.markForCheck();
                    setTimeout(function () {
                        _this.inputElement.nativeElement.focus();
                    });
                });
            }
            else {
                this.matches = this.filter(this.internalMap.get(key).items);
                this.ref.markForCheck();
            }
        }
    };
    /**
     * @param {?} array
     * @param {?=} ignoreCustomFilter
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.filter = function (array, ignoreCustomFilter) {
        var _this = this;
        if (ignoreCustomFilter === void 0) { ignoreCustomFilter = false; }
        var /** @type {?} */ matches = array;
        if (this.searchTerm && this.searchTerm.length !== 0 && this.selectedCategory) {
            matches = matches.filter(function (match) {
                return ~String(match.label).toLowerCase().indexOf(_this.searchTerm.toLowerCase());
            });
        }
        if (this.customFilterEnabled && this.config.customFilter.matchFunction && !ignoreCustomFilter) {
            matches = matches.filter(function (match) {
                return _this.config.customFilter.matchFunction(match, _this.customFilterValue);
            });
        }
        return matches;
    };
    return GroupedMultiPickerResults;
}(BasePickerResults));
GroupedMultiPickerResults.decorators = [
    { type: core.Component, args: [{
                selector: 'grouped-multi-picker-results',
                template: "\n        <div class=\"grouped-multi-picker-groups\">\n            <novo-list direction=\"vertical\">\n                <novo-list-item\n                    *ngIf=\"config.displayAll\"\n                    (click)=\"selectCategory({ value: 'all', label: 'all' })\"\n                    [class.active]=\"selectedCategory?.value === 'all'\"\n                    data-automation-id=\"display-all\"\n                    [class.disabled]=\"isLoading\">\n                    <item-content>\n                        <span data-automation-id=\"label\">{{ labels.all }}</span>\n                    </item-content>\n                    <item-end>\n                        <i class=\"bhi-next\"></i>\n                    </item-end>\n                </novo-list-item>\n                <novo-list-item\n                    *ngFor=\"let category of categories\"\n                    (click)=\"selectCategory(category)\"\n                    [class.active]=\"selectedCategory?.value === category.value\"\n                    [attr.data-automation-id]=\"category.label\"\n                    [class.disabled]=\"isLoading\">\n                    <item-content>\n                        <span data-automation-id=\"label\">{{ category.label }}</span>\n                    </item-content>\n                    <item-end>\n                        <i class=\"bhi-next\"></i>\n                    </item-end>\n                </novo-list-item>\n            </novo-list>\n            <footer class=\"grouped-multi-picker-groups-footer\" *ngIf=\"customFilterEnabled\" data-automation-id=\"footer\" [class.disabled]=\"isLoading\">\n                <novo-switch [(ngModel)]=\"customFilterValue\" (onChange)=\"fireCustomFilter($event)\" data-automation-id=\"switch\"></novo-switch>\n                <label data-automation-id=\"label\">{{ customFilterLabel }}</label>\n            </footer>\n        </div>\n        <div class=\"grouped-multi-picker-matches\">\n            <div class=\"grouped-multi-picker-input-container\" [hidden]=\"!selectedCategory\" data-automation-id=\"input-container\">\n                <input autofocus #input [(ngModel)]=\"searchTerm\" [disabled]=\"isLoading\" data-automation-id=\"input\" [placeholder]=\"placeholder\"/>\n                <i class=\"bhi-search\" *ngIf=\"!searchTerm\" [class.disabled]=\"isLoading\" data-automation-id=\"seach-icon\"></i>\n                <i class=\"bhi-times\" *ngIf=\"searchTerm\" (click)=\"clearSearchTerm($event)\" [class.disabled]=\"isLoading\" data-automation-id=\"remove-icon\"></i>\n            </div>\n            <div class=\"grouped-multi-picker-list-container\">\n                <novo-list direction=\"vertical\" #list>\n                    <novo-list-item\n                        *ngFor=\"let match of matches\"\n                        (click)=\"selectMatch($event)\"\n                        [class.active]=\"match === activeMatch\"\n                        (mouseenter)=\"selectActive(match)\"\n                        [class.disabled]=\"preselected(match)\"\n                        [attr.data-automation-id]=\"match.label\"\n                        [class.disabled]=\"isLoading\">\n                        <item-content>\n                            <span>{{ match.label }}</span>\n                        </item-content>\n                    </novo-list-item>\n                </novo-list>\n                <div class=\"grouped-multi-picker-no-results\" *ngIf=\"matches.length === 0 && !isLoading && selectedCategory\" data-automation-id=\"empty-message\">\n                    {{ labels.groupedMultiPickerEmpty }}\n                </div>\n                <div class=\"grouped-multi-picker-no-category\" *ngIf=\"matches.length === 0 && !isLoading && !selectedCategory\" data-automation-id=\"select-category-message\">\n                    {{ labels.groupedMultiPickerSelectCategory }}\n                </div>\n                <div class=\"grouped-multi-picker-loading\" *ngIf=\"isLoading\" data-automation-id=\"loading-message\">\n                    <novo-loading theme=\"line\"></novo-loading>\n                </div>\n            </div>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
GroupedMultiPickerResults.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: NovoLabelService, },
    { type: core.ChangeDetectorRef, },
]; };
GroupedMultiPickerResults.propDecorators = {
    'inputElement': [{ type: core.ViewChild, args: ['input',] },],
    'listElement': [{ type: core.ViewChild, args: ['list',] },],
};
// NG2
// App
var SkillsSpecialtyPickerResults = /** @class */ (function (_super) {
    __extends(SkillsSpecialtyPickerResults, _super);
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} ref
     */
    function SkillsSpecialtyPickerResults(element, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.element = element;
        _this.labels = labels;
        _this.active = true;
        return _this;
    }
    /**
     * @return {?}
     */
    SkillsSpecialtyPickerResults.prototype.getListElement = function () {
        return this.element.nativeElement.querySelector('novo-list');
    };
    return SkillsSpecialtyPickerResults;
}(BasePickerResults));
SkillsSpecialtyPickerResults.decorators = [
    { type: core.Component, args: [{
                selector: 'skill-specialty-picker-results',
                template: "\n        <section class=\"picker-loading\" *ngIf=\"isLoading && !matches?.length\">\n            <novo-loading theme=\"line\"></novo-loading>\n        </section>\n        <novo-list *ngIf=\"matches.length > 0\" direction=\"vertical\">\n            <novo-list-item\n                *ngFor=\"let match of matches\"\n                (click)=\"selectMatch($event)\"\n                [class.active]=\"match === activeMatch\"\n                (mouseenter)=\"selectActive(match)\"\n                [class.disabled]=\"preselected(match)\">\n                <item-content>\n                    <h6><span [innerHtml]=\"highlight(match.label, term)\"></span></h6>\n                    <div class=\"category\">\n                        <i class=\"bhi-category-tags\"></i><span [innerHtml]=\"highlight(match.data.categories || match.data.parentCategory.name, term)\"></span>\n                    </div>\n                </item-content>\n            </novo-list-item>\n            <novo-loading theme=\"line\" *ngIf=\"isLoading && matches.length > 0\"></novo-loading>\n        </novo-list>\n        <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n        <p class=\"picker-null\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.pickerEmpty }}</p>\n    ",
            },] },
];
/**
 * @nocollapse
 */
SkillsSpecialtyPickerResults.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
    { type: core.ChangeDetectorRef, },
]; };
SkillsSpecialtyPickerResults.propDecorators = {
    'active': [{ type: core.HostBinding, args: ['class.active',] },],
};
// NG2
// Vendor
var DistributionListPickerResults = /** @class */ (function (_super) {
    __extends(DistributionListPickerResults, _super);
    /**
     * @param {?} element
     * @param {?} sanitizer
     * @param {?} labels
     * @param {?} ref
     */
    function DistributionListPickerResults(element, sanitizer, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.sanitizer = sanitizer;
        _this.labels = labels;
        _this.active = true;
        _this.sanitizer = sanitizer;
        return _this;
    }
    Object.defineProperty(DistributionListPickerResults.prototype, "isHidden", {
        /**
         * @return {?}
         */
        get: function () {
            return this.matches.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DistributionListPickerResults.prototype.getListElement = function () {
        return this.element.nativeElement.querySelector('novo-list');
    };
    /**
     * @param {?} html
     * @return {?}
     */
    DistributionListPickerResults.prototype.sanitizeHTML = function (html) {
        return this.sanitizer.bypassSecurityTrustHtml(html);
    };
    return DistributionListPickerResults;
}(BasePickerResults));
DistributionListPickerResults.decorators = [
    { type: core.Component, args: [{
                selector: 'distribution-list-picker-results',
                template: "\n        <section class=\"picker-loading\" *ngIf=\"isLoading && !matches?.length\">\n            <novo-loading theme=\"line\"></novo-loading>\n        </section>\n        <novo-list direction=\"vertical\" *ngIf=\"matches?.length > 0 && !hasError\">\n            <novo-list-item *ngFor=\"let match of matches\" (click)=\"selectMatch($event)\" [class.active]=\"match === activeMatch\" (mouseenter)=\"selectActive(match)\" [class.disabled]=\"preselected(match)\">\n                <item-header>\n                    <item-title>\n                        <span [innerHtml]=\"sanitizeHTML(match.label)\"></span>\n                    </item-title>\n                </item-header>\n                <item-content direction=\"horizontal\">\n                    <p>\n                        <span class='label'>{{ labels.distributionListOwner }}: </span><span>{{ match?.data?.owner?.name }}</span>\n                    </p>\n                    <p>\n                        <span class='label'>{{ labels.dateAdded }}: </span><span>{{ labels.formatDateWithFormat(match?.data?.dateAdded, 'L') }}</span>\n                    </p>\n                </item-content>\n            </novo-list-item>\n            <novo-loading theme=\"line\" *ngIf=\"isLoading && matches?.length > 0\"></novo-loading>\n        </novo-list>\n    ",
            },] },
];
/**
 * @nocollapse
 */
DistributionListPickerResults.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: platformBrowser.DomSanitizer, },
    { type: NovoLabelService, },
    { type: core.ChangeDetectorRef, },
]; };
DistributionListPickerResults.propDecorators = {
    'active': [{ type: core.HostBinding, args: ['class.active',] },],
    'isHidden': [{ type: core.HostBinding, args: ['hidden',] },],
};
// NG2
// APP
var NovoPickerModule = /** @class */ (function () {
    function NovoPickerModule() {
    }
    return NovoPickerModule;
}());
NovoPickerModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule, NovoLoadingModule, NovoListModule, overlay.OverlayModule, NovoOverlayModule, NovoSwitchModule],
                declarations: [
                    NovoPickerElement,
                    NovoPickerContainer,
                    PickerResults,
                    EntityPickerResult,
                    EntityPickerResults,
                    ChecklistPickerResults,
                    GroupedMultiPickerResults,
                    DistributionListPickerResults,
                    SkillsSpecialtyPickerResults
                ],
                exports: [
                    NovoPickerElement,
                    NovoPickerContainer,
                    PickerResults,
                    EntityPickerResult,
                    EntityPickerResults,
                    ChecklistPickerResults,
                    GroupedMultiPickerResults,
                    DistributionListPickerResults,
                    SkillsSpecialtyPickerResults
                ],
                entryComponents: [
                    PickerResults,
                    EntityPickerResult,
                    EntityPickerResults,
                    ChecklistPickerResults,
                    GroupedMultiPickerResults,
                    DistributionListPickerResults,
                    SkillsSpecialtyPickerResults
                ]
            },] },
];
/**
 * @nocollapse
 */
NovoPickerModule.ctorParameters = function () { return []; };
// NG2
// APP
// Value accessor for the component (supports ngModel)
var SEARCH_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoSearchBoxElement; }),
    multi: true
};
var NovoSearchBoxElement = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} _changeDetectorRef
     * @param {?} _zone
     */
    function NovoSearchBoxElement(element, labels, _changeDetectorRef, _zone) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        this._zone = _zone;
        this.icon = 'search';
        this.placeholder = 'Search...';
        this.alwaysOpen = false;
        this.theme = 'positive';
        this.closeOnSelect = true;
        this.searchChanged = new core.EventEmitter();
        this.focused = false;
        /**
         * View -> model callback called when value changes
         */
        this._onChange = function () { };
        /**
         * View -> model callback called when autocomplete has been touched
         */
        this._onTouched = function () { };
    }
    /**
     * \@name showFasterFind
     * \@description This function shows the picker and adds the active class (for animation)
     * @param {?=} event
     * @param {?=} forceClose
     * @return {?}
     */
    NovoSearchBoxElement.prototype.showSearch = function (event, forceClose) {
        var _this = this;
        if (forceClose === void 0) { forceClose = false; }
        if (!this.panelOpen) {
            // Reset search
            // Set focus on search
            setTimeout(function () {
                var /** @type {?} */ element = _this.input.nativeElement;
                if (element) {
                    element.focus();
                }
            }, 10);
        }
    };
    /**
     * @return {?}
     */
    NovoSearchBoxElement.prototype.onFocus = function () {
        var _this = this;
        this._zone.run(function () {
            _this.focused = true;
            _this.openPanel();
        });
    };
    /**
     * @return {?}
     */
    NovoSearchBoxElement.prototype.onBlur = function () {
        this.focused = false;
    };
    /**
     * BEGIN: Convienient Panel Methods.
     * @return {?}
     */
    NovoSearchBoxElement.prototype.openPanel = function () {
        this.overlay.openPanel();
    };
    /**
     * @return {?}
     */
    NovoSearchBoxElement.prototype.closePanel = function () {
        this.overlay.closePanel();
    };
    Object.defineProperty(NovoSearchBoxElement.prototype, "panelOpen", {
        /**
         * @return {?}
         */
        get: function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoSearchBoxElement.prototype, "active", {
        /**
         * @return {?}
         */
        get: function () {
            return this.panelOpen || this.alwaysOpen;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * END: Convienient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    NovoSearchBoxElement.prototype._handleKeydown = function (event) {
        if ((event.keyCode === keycodes.ESCAPE || event.keyCode === keycodes.ENTER || event.keyCode === keycodes.TAB) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoSearchBoxElement.prototype._handleInput = function (event) {
        var _this = this;
        if (document.activeElement === event.target) {
            this._onChange(((event.target)).value);
            if (this.debounceSearchChange) {
                clearTimeout(this.debounceSearchChange);
            }
            this.debounceSearchChange = setTimeout(function () {
                _this.searchChanged.emit(((event.target)).value);
            }, 400);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoSearchBoxElement.prototype.writeValue = function (value) {
        this._setValue(value);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoSearchBoxElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoSearchBoxElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoSearchBoxElement.prototype._setValue = function (value) {
        this.value = value;
        var /** @type {?} */ toDisplay = value;
        if (value && this.displayField) {
            toDisplay = value.hasOwnProperty(this.displayField) ? value[this.displayField] : value;
        }
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        this.displayValue = toDisplay ? toDisplay : '';
        this.input.nativeElement.value = this.displayValue;
        this._changeDetectorRef.markForCheck();
    };
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     * @param {?} event
     * @return {?}
     */
    NovoSearchBoxElement.prototype.setValueAndClose = function (event) {
        if (event && event.value) {
            this._setValue(event.value);
            this._onChange(event.value);
        }
        this.closePanel();
    };
    /**
     * Clear any previous selected option and emit a selection change event for this option
     * @param {?} skip
     * @return {?}
     */
    NovoSearchBoxElement.prototype.clearValue = function (skip) {
        this.writeValue(null);
        this._onChange(null);
    };
    return NovoSearchBoxElement;
}());
NovoSearchBoxElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-search',
                providers: [SEARCH_VALUE_ACCESSOR],
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                template: "\n        <!-- SEARCH ICON -->\n        <button theme=\"fab\" [color]=\"theme\" [icon]=\"icon\" (click)=\"showSearch()\" [tooltip]=\"hint\" tooltipPosition=\"bottom\" data-automation-id=\"novo-search-fab\"></button>\n        <!-- SEARCH INPUT -->\n        <input type=\"text\" [attr.name]=\"name\" [attr.value]=\"displayValue\" [attr.placeholder]=\"placeholder\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" (keydown)=\"_handleKeydown($event)\" (input)=\"_handleInput($event)\" #input data-automation-id=\"novo-search-input\"/>\n        <!-- SEARCH OVERLAY -->\n        <novo-overlay-template [parent]=\"element\" [closeOnSelect]=\"closeOnSelect\" (select)=\"closePanel()\" (closing)=\"onBlur()\">\n            <ng-content></ng-content>\n        </novo-overlay-template>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoSearchBoxElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
    { type: core.ChangeDetectorRef, },
    { type: core.NgZone, },
]; };
NovoSearchBoxElement.propDecorators = {
    'name': [{ type: core.Input },],
    'icon': [{ type: core.Input },],
    'placeholder': [{ type: core.Input },],
    'alwaysOpen': [{ type: core.Input },],
    'theme': [{ type: core.Input },],
    'closeOnSelect': [{ type: core.Input },],
    'displayField': [{ type: core.Input },],
    'displayValue': [{ type: core.Input },],
    'hint': [{ type: core.Input },],
    'searchChanged': [{ type: core.Output },],
    'focused': [{ type: core.HostBinding, args: ['class.focused',] },],
    'overlay': [{ type: core.ViewChild, args: [NovoOverlayTemplate,] },],
    'input': [{ type: core.ViewChild, args: ['input',] },],
    'active': [{ type: core.HostBinding, args: ['class.active',] },],
};
// NG2
// APP
var NovoSearchBoxModule = /** @class */ (function () {
    function NovoSearchBoxModule() {
    }
    return NovoSearchBoxModule;
}());
NovoSearchBoxModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, NovoButtonModule, NovoPickerModule, NovoTooltipModule, overlay.OverlayModule, NovoOverlayModule],
                declarations: [NovoSearchBoxElement],
                exports: [NovoSearchBoxElement]
            },] },
];
/**
 * @nocollapse
 */
NovoSearchBoxModule.ctorParameters = function () { return []; };
// NG2
// Vendor
var dragula$1 = dragulaImported;
var NovoDragulaService = /** @class */ (function () {
    function NovoDragulaService() {
        this.cancel = new core.EventEmitter();
        this.cloned = new core.EventEmitter();
        this.drag = new core.EventEmitter();
        this.dragend = new core.EventEmitter();
        this.drop = new core.EventEmitter();
        this.out = new core.EventEmitter();
        this.over = new core.EventEmitter();
        this.remove = new core.EventEmitter();
        this.shadow = new core.EventEmitter();
        this.dropModel = new core.EventEmitter();
        this.removeModel = new core.EventEmitter();
        this.events = ['cancel', 'cloned', 'drag', 'dragend', 'drop', 'out', 'over', 'remove', 'shadow', 'dropModel', 'removeModel'];
        this.bags = [];
    }
    /**
     * \@name add
     * @param {?} name
     * @param {?} drake
     * @return {?}
     */
    NovoDragulaService.prototype.add = function (name, drake) {
        var /** @type {?} */ bag = this.find(name);
        if (bag) {
            throw new Error("Bag named: " + name + " already exists.");
        }
        bag = {
            name: name,
            drake: drake,
        };
        this.bags.push(bag);
        if (drake.models) {
            // models to sync with (must have same structure as containers)
            this.handleModels(name, drake);
        }
        if (!bag.initEvents) {
            this.setupEvents(bag);
        }
        return bag;
    };
    /**
     * \@name find
     * @param {?} name
     * @return {?}
     */
    NovoDragulaService.prototype.find = function (name) {
        for (var /** @type {?} */ i = 0; i < this.bags.length; i++) {
            if (this.bags[i].name === name) {
                return this.bags[i];
            }
        }
        return null;
    };
    /**
     * \@name destroy
     * @param {?} name
     * @return {?}
     */
    NovoDragulaService.prototype.destroy = function (name) {
        var /** @type {?} */ bag = this.find(name);
        var /** @type {?} */ i = this.bags.indexOf(bag);
        this.bags.splice(i, 1);
        bag.drake.destroy();
    };
    /**
     * \@name setOptions
     * @param {?} name
     * @param {?} options
     * @return {?}
     */
    NovoDragulaService.prototype.setOptions = function (name, options) {
        var /** @type {?} */ bag = this.add(name, dragula$1(options));
        this.handleModels(name, bag.drake);
    };
    /**
     * \@name handleModels
     * @param {?} name
     * @param {?} drake
     * @return {?}
     */
    NovoDragulaService.prototype.handleModels = function (name, drake) {
        var _this = this;
        var /** @type {?} */ dragElm;
        var /** @type {?} */ dragIndex;
        var /** @type {?} */ dropIndex;
        var /** @type {?} */ sourceModel;
        drake.on('remove', function (el, source) {
            if (!drake.models) {
                return;
            }
            sourceModel = drake.models[drake.containers.indexOf(source)];
            sourceModel.splice(dragIndex, 1);
            _this.removeModel.emit([name, el, source]);
        });
        drake.on('drag', function (el, source) {
            dragElm = el;
            dragIndex = _this.domIndexOf(el, source);
        });
        drake.on('drop', function (dropElm, target, source) {
            if (!drake.models) {
                return;
            }
            dropIndex = _this.domIndexOf(dropElm, target);
            sourceModel = drake.models[drake.containers.indexOf(source)];
            if (target === source) {
                sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);
            }
            else {
                var /** @type {?} */ notCopy = dragElm === dropElm;
                var /** @type {?} */ targetModel = drake.models[drake.containers.indexOf(target)];
                var /** @type {?} */ dropElmModel = notCopy ? sourceModel[dragIndex] : JSON.parse(JSON.stringify(sourceModel[dragIndex]));
                if (notCopy) {
                    sourceModel.splice(dragIndex, 1);
                }
                targetModel.splice(dropIndex, 0, dropElmModel);
                target.removeChild(dropElm); // element must be removed for ngFor to apply correctly
            }
            _this.dropModel.emit([name, dropElm, target, source]);
        });
    };
    /**
     * \@name setupEvents
     * @param {?} bag
     * @return {?}
     */
    NovoDragulaService.prototype.setupEvents = function (bag) {
        bag.initEvents = true;
        var /** @type {?} */ that = this;
        var /** @type {?} */ emitter = function (type) {
            /**
             * @return {?}
             */
            function replicate() {
                var /** @type {?} */ args = Array.prototype.slice.call(arguments);
                that[type].emit([bag.name].concat(args));
            }
            bag.drake.on(type, replicate);
        };
        this.events.forEach(emitter);
    };
    /**
     * \@name domIndexOf
     * @param {?} child
     * @param {?} parent
     * @return {?}
     */
    NovoDragulaService.prototype.domIndexOf = function (child, parent) {
        return Array.prototype.indexOf.call(parent.children, child);
    };
    return NovoDragulaService;
}());
NovoDragulaService.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
NovoDragulaService.ctorParameters = function () { return []; };
// NG2
// Vendor
var dragula = dragulaImported;
// APP
var NovoDragulaElement = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} dragulaService
     */
    function NovoDragulaElement(element, dragulaService) {
        this.dragulaService = dragulaService;
        this.drake = null;
        this.container = element.nativeElement;
    }
    /**
     * @return {?}
     */
    NovoDragulaElement.prototype.ngOnInit = function () {
        var /** @type {?} */ bag = this.dragulaService.find(this.bag);
        if (bag) {
            this.drake = bag.drake;
            this.checkModel();
            this.drake.containers.push(this.container);
        }
        else {
            this.drake = dragula({
                containers: [this.container],
            });
            this.checkModel();
            this.dragulaService.add(this.bag, this.drake);
        }
    };
    /**
     * @return {?}
     */
    NovoDragulaElement.prototype.checkModel = function () {
        if (this.dragulaModel) {
            if (this.drake.models) {
                this.drake.models.push(this.dragulaModel);
            }
            else {
                this.drake.models = [this.dragulaModel];
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NovoDragulaElement.prototype.ngOnChanges = function (changes) {
        if (changes && changes.dragulaModel) {
            if (this.drake) {
                if (this.drake.models) {
                    var /** @type {?} */ modelIndex = this.drake.models.indexOf(changes.dragulaModel.previousValue);
                    this.drake.models.splice(modelIndex, 1, changes.dragulaModel.currentValue);
                }
                else {
                    this.drake.models = [changes.dragulaModel.currentValue];
                }
            }
        }
    };
    return NovoDragulaElement;
}());
NovoDragulaElement.decorators = [
    { type: core.Directive, args: [{
                selector: '[dragula]',
            },] },
];
/**
 * @nocollapse
 */
NovoDragulaElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoDragulaService, },
]; };
NovoDragulaElement.propDecorators = {
    'bag': [{ type: core.Input, args: ['dragula',] },],
    'dragulaModel': [{ type: core.Input },],
};
// NG2
// APP
var NovoDragulaModule = /** @class */ (function () {
    function NovoDragulaModule() {
    }
    return NovoDragulaModule;
}());
NovoDragulaModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [NovoDragulaElement],
                exports: [NovoDragulaElement]
            },] },
];
/**
 * @nocollapse
 */
NovoDragulaModule.ctorParameters = function () { return []; };
// NG2
// APP
var NovoSliderElement = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} labels
     */
    function NovoSliderElement(element, labels) {
        this.element = element;
        this.labels = labels;
        this.currentSlide = 0;
        this.start = true;
        this.end = true;
        this.currSlides = ['active'];
        this.handleKeyDownFunc = this.handleKeyDown.bind(this);
    }
    /**
     * @return {?}
     */
    NovoSliderElement.prototype.ngOnInit = function () {
        for (var /** @type {?} */ i = 0; i < this.slides; i++) {
            this.currSlides[i] = (i > 0) ? 'inactive' : 'active';
        }
        // Catch Tab Events
        this.element.nativeElement.addEventListener('keydown', this.handleKeyDownFunc);
    };
    /**
     * @return {?}
     */
    NovoSliderElement.prototype.ngOnDestroy = function () {
        this.element.nativeElement.removeEventListener('keydown', this.handleKeyDownFunc);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoSliderElement.prototype.handleKeyDown = function (event) {
        if (event.keyCode === 9) {
            event.stopImmediatePropagation();
            event.preventDefault();
        }
    };
    /**
     * @param {?} direction
     * @return {?}
     */
    NovoSliderElement.prototype.changeSlide = function (direction) {
        if (direction === 'next') {
            if (this.currentSlide === this.slides - 1) {
                return;
            }
            this.currentSlide++;
        }
        else {
            if (this.currentSlide === 0) {
                return;
            }
            this.currentSlide--;
        }
        for (var /** @type {?} */ i = 0; i < this.slides; i++) {
            this.currSlides[i] = 'inactive';
        }
        this.currSlides[this.currentSlide] = 'active';
        this.start = (this.currentSlide === 0);
        this.end = (this.currentSlide === this.slides - 1);
        this.currentClass = "slide-" + this.currentSlide;
    };
    return NovoSliderElement;
}());
NovoSliderElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-slider',
                template: "\n        <section class=\"slides\">\n            <ng-content select=\"div[slide]\"></ng-content>\n        </section>\n        <div class=\"controls\">\n            <button *ngIf=\"!start\" theme=\"icon\" icon=\"previous\" (click)=\"changeSlide('back')\"></button>\n            <div class=\"indicators\">\n                <div class=\"indicator-circle\" *ngFor=\"let indicator of currSlides; let i = index\" [ngClass]=\"indicator\"></div>\n            </div>\n            <button *ngIf=\"!end\" theme=\"primary\" icon=\"next\" (click)=\"changeSlide('next')\">{{ labels.next }}</button>\n            <ng-content select=\"button\" *ngIf=\"end\"></ng-content>\n        </div>\n    ",
                host: {
                    '[class]': 'currentClass'
                }
            },] },
];
/**
 * @nocollapse
 */
NovoSliderElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
]; };
NovoSliderElement.propDecorators = {
    'slides': [{ type: core.Input },],
};
// NG2
// APP
var NovoSliderModule = /** @class */ (function () {
    function NovoSliderModule() {
    }
    return NovoSliderModule;
}());
NovoSliderModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, NovoButtonModule],
                declarations: [NovoSliderElement],
                exports: [NovoSliderElement]
            },] },
];
/**
 * @nocollapse
 */
NovoSliderModule.ctorParameters = function () { return []; };
// NG2
// Vendor
// Value accessor for the component (supports ngModel)
var CHIPS_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoChipsElement; }),
    multi: true
};
var NovoChipElement = /** @class */ (function () {
    function NovoChipElement() {
        this.select = new core.EventEmitter();
        this.remove = new core.EventEmitter();
    }
    Object.defineProperty(NovoChipElement.prototype, "type", {
        /**
         * @param {?} type
         * @return {?}
         */
        set: function (type) {
            this._type = type ? type.toLowerCase() : null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @return {?}
     */
    NovoChipElement.prototype.onRemove = function (e) {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        this.remove.emit(e);
        return false;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NovoChipElement.prototype.onSelect = function (e) {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        this.select.emit(e);
        return false;
    };
    return NovoChipElement;
}());
NovoChipElement.decorators = [
    { type: core.Component, args: [{
                selector: 'chip,novo-chip',
                template: "\n        <span (click)=\"onSelect($event)\" (mouseover)=\"onSelect($event)\" [ngClass]=\"_type\">\n            <i *ngIf=\"_type\" class=\"bhi-circle\"></i>\n            <span><ng-content></ng-content></span>\n        </span>\n        <i class=\"bhi-close\" (click)=\"onRemove($event)\"></i>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoChipElement.ctorParameters = function () { return []; };
NovoChipElement.propDecorators = {
    'type': [{ type: core.Input },],
    'select': [{ type: core.Output },],
    'remove': [{ type: core.Output },],
};
var NovoChipsElement = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} componentUtils
     * @param {?} labels
     */
    function NovoChipsElement(element, componentUtils, labels) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.labels = labels;
        this.closeOnSelect = false;
        this.placeholder = '';
        this._disablePickerInput = false;
        this.changed = new core.EventEmitter();
        this.focus = new core.EventEmitter();
        this.blur = new core.EventEmitter();
        this.typing = new core.EventEmitter();
        this.items = [];
        this.selected = null;
        this.config = {};
        // private data model
        this._value = '';
        this._items = new ReplaySubject.ReplaySubject(1);
        // Placeholders for the callbacks
        this.onModelChange = function () {
        };
        this.onModelTouched = function () {
        };
    }
    Object.defineProperty(NovoChipsElement.prototype, "disablePickerInput", {
        /**
         * @return {?}
         */
        get: function () {
            return this._disablePickerInput;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._disablePickerInput = coercion.coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoChipsElement.prototype.ngOnInit = function () {
        this.setItems();
    };
    Object.defineProperty(NovoChipsElement.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this._value;
        },
        /**
         * @param {?} selected
         * @return {?}
         */
        set: function (selected) {
            this.itemToAdd = '';
            if (selected !== this._value) {
                this._value = selected;
                this.changed.emit({ value: selected, rawValue: this.items });
                this.onModelChange(selected);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoChipsElement.prototype.clearValue = function () {
        this.items = [];
        this._items.next(this.items);
        this.value = null;
        this.changed.emit({ value: this.value, rawValue: this.items });
        this.onModelChange(this.value);
    };
    /**
     * @return {?}
     */
    NovoChipsElement.prototype.setItems = function () {
        var _this = this;
        this.items = [];
        if (this.model && Array.isArray(this.model)) {
            var /** @type {?} */ noLabels = [];
            for (var _d = 0, _e = this.model; _d < _e.length; _d++) {
                var value = _e[_d];
                var /** @type {?} */ label = void 0;
                if (this.source && this.source.format && Helpers.validateInterpolationProps(this.source.format, value)) {
                    label = Helpers.interpolate(this.source.format, value);
                }
                if (this.source && label && label !== this.source.format) {
                    this.items.push({
                        value: value,
                        label: label
                    });
                }
                else if (this.source.getLabels && typeof this.source.getLabels === 'function') {
                    noLabels.push(value);
                }
                else if (this.source.options && Array.isArray(this.source.options)) {
                    this.items.push(this.getLabelFromOptions(value));
                }
                else {
                    this.items.push({
                        value: value,
                        label: value
                    });
                }
            }
            if (noLabels.length > 0 && this.source && this.source.getLabels && typeof this.source.getLabels === 'function') {
                this.source.getLabels(noLabels).then(function (result) {
                    for (var _d = 0, result_1 = result; _d < result_1.length; _d++) {
                        var value = result_1[_d];
                        if (value.hasOwnProperty('label')) {
                            _this.items.push({
                                value: value,
                                label: value.label
                            });
                        }
                        else if (_this.source.options && Array.isArray(_this.source.options)) {
                            _this.items.push(_this.getLabelFromOptions(value));
                        }
                        else {
                            _this.items.push(value);
                        }
                    }
                    _this._items.next(_this.items);
                });
            }
        }
        this.changed.emit({ value: this.model, rawValue: this.items });
        this._items.next(this.items);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoChipsElement.prototype.getLabelFromOptions = function (value) {
        var /** @type {?} */ optLabel = this.source.options.find(function (val) { return val.value === value; });
        return {
            value: value,
            label: optLabel ? optLabel.label : value
        };
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    NovoChipsElement.prototype.deselectAll = function (event) {
        this.selected = null;
        this.hidePreview();
    };
    /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    NovoChipsElement.prototype.select = function (event, item) {
        this.blur.emit(event);
        this.deselectAll();
        this.selected = item;
        this.showPreview();
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    NovoChipsElement.prototype.onTyping = function (event) {
        this.typing.emit(event);
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    NovoChipsElement.prototype.onFocus = function (event) {
        this.deselectAll();
        this.element.nativeElement.classList.add('selected');
        this.focus.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoChipsElement.prototype.add = function (event) {
        if (event && !(event instanceof Event)) {
            this.items.push(event);
            this.value = this.items.map(function (i) { return i.value; });
            // Set focus on the picker
            var /** @type {?} */ input = this.element.nativeElement.querySelector('novo-picker > input');
            if (input) {
                input.focus();
            }
        }
        this._items.next(this.items);
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoChipsElement.prototype.remove = function (event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        this.items.splice(this.items.indexOf(item), 1);
        this.deselectAll();
        this.value = this.items.map(function (i) { return i.value; });
        this.changed.emit({ value: this.value.length ? this.value : '', rawValue: this.items });
        this.onModelChange(this.value.length ? this.value : '');
        this._items.next(this.items);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoChipsElement.prototype.onKeyDown = function (event) {
        if (event.keyCode === KeyCodes.BACKSPACE) {
            if (event.target && event.target.value.length === 0 && this.items.length) {
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                if (this.selected) {
                    this.remove(event, this.selected);
                }
                else {
                    this.select(event, this.items[this.items.length - 1]);
                }
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NovoChipsElement.prototype.onTouched = function (e) {
        this.element.nativeElement.classList.remove('selected');
        this.onModelTouched();
        this.blur.emit(e);
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoChipsElement.prototype.writeValue = function (model) {
        this.model = model;
        this.setItems();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoChipsElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoChipsElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * \@name showPreview
     *
     * \@description This method creates an instance of the preview (called popup) and adds all the bindings to that
     * instance. Will reuse the popup or create a new one if it does not already exist. Will only work if there is
     * a previewTemplate given in the config.
     * @return {?}
     */
    NovoChipsElement.prototype.showPreview = function () {
        if (this.source.previewTemplate) {
            if (!this.popup) {
                this.popup = this.componentUtils.appendNextToLocation(this.source.previewTemplate, this.preview);
            }
            this.popup.instance.match = this.selected;
        }
    };
    /**
     * \@name hidePreview
     *
     * \@description - This method deletes the preview popup from the DOM.
     * @return {?}
     */
    NovoChipsElement.prototype.hidePreview = function () {
        if (this.popup) {
            this.popup.destroy();
            this.popup = null;
        }
    };
    return NovoChipsElement;
}());
NovoChipsElement.decorators = [
    { type: core.Component, args: [{
                selector: 'chips,novo-chips',
                providers: [CHIPS_VALUE_ACCESSOR],
                template: "\n        <chip\n            *ngFor=\"let item of _items | async\"\n            [type]=\"type || item?.value?.searchEntity\"\n            [class.selected]=\"item == selected\"\n            (remove)=\"remove($event, item)\"\n            (select)=\"select($event, item)\">\n            {{ item.label }}\n        </chip>\n        <div class=\"chip-input-container\">\n            <novo-picker\n                clearValueOnSelect=\"true\"\n                [closeOnSelect]=\"closeOnSelect\"\n                [config]=\"source\"\n                [disablePickerInput]=\"disablePickerInput\"\n                [placeholder]=\"placeholder\"\n                [(ngModel)]=\"itemToAdd\"\n                (select)=\"add($event)\"\n                (keydown)=\"onKeyDown($event)\"\n                (focus)=\"onFocus($event)\"\n                (typing)=\"onTyping($event)\"\n                (blur)=\"onTouched($event)\"\n                [selected]=\"items\"\n                [overrideElement]=\"element\">\n            </novo-picker>\n        </div>\n        <div class=\"preview-container\">\n            <span #preview></span>\n        </div>\n        <i class=\"bhi-search\" [class.has-value]=\"items.length\"></i>\n        <label class=\"clear-all\" *ngIf=\"items.length\" (click)=\"clearValue()\">{{ labels.clearAll }} <i class=\"bhi-times\"></i></label>\n   ",
                host: {
                    '[class.with-value]': 'items.length > 0'
                }
            },] },
];
/**
 * @nocollapse
 */
NovoChipsElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: ComponentUtils, },
    { type: NovoLabelService, },
]; };
NovoChipsElement.propDecorators = {
    'closeOnSelect': [{ type: core.Input },],
    'placeholder': [{ type: core.Input },],
    'source': [{ type: core.Input },],
    'type': [{ type: core.Input },],
    'disablePickerInput': [{ type: core.Input },],
    'changed': [{ type: core.Output },],
    'focus': [{ type: core.Output },],
    'blur': [{ type: core.Output },],
    'typing': [{ type: core.Output },],
    'preview': [{ type: core.ViewChild, args: ['preview', { read: core.ViewContainerRef },] },],
    'value': [{ type: core.Input },],
};
// NG2
// APP
var NovoChipsModule = /** @class */ (function () {
    function NovoChipsModule() {
    }
    return NovoChipsModule;
}());
NovoChipsModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule, NovoPickerModule],
                declarations: [NovoChipElement, NovoChipsElement],
                exports: [NovoChipElement, NovoChipsElement]
            },] },
];
/**
 * @nocollapse
 */
NovoChipsModule.ctorParameters = function () { return []; };
// NG2
// Vendor
// APP
// Value accessor for the component (supports ngModel)
var DATE_PICKER_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoDatePickerElement; }),
    multi: true
};
var NovoDatePickerElement = /** @class */ (function () {
    /**
     * @param {?} labels
     * @param {?} element
     */
    function NovoDatePickerElement(labels, element) {
        this.labels = labels;
        this.element = element;
        this.weekStart = 0;
        // Select callback for output
        this.onSelect = new core.EventEmitter(false);
        // List of all the weekdays
        this.weekdays = [];
        // List of all months
        this.months = [];
        // List of all years (generated in ngOnInit)
        this.years = [];
        // Default view mode (select days)
        this.view = 'days';
        this.rangeSelectMode = 'startDate';
        this._onChange = function () { };
        this._onTouched = function () { };
    }
    /**
     * @return {?}
     */
    NovoDatePickerElement.prototype.ngOnInit = function () {
        // Determine the year array
        var /** @type {?} */ now = new Date();
        var /** @type {?} */ start = this.minYear ? Number(this.minYear) : now.getFullYear() - 100;
        var /** @type {?} */ end = this.maxYear ? Number(this.maxYear) : now.getFullYear() + 10;
        for (var /** @type {?} */ i = start; i <= end; i++) {
            this.years.push(i);
        }
        // Set weekdays / months
        this.weekdays = this.setupWeekdays();
        this.months = this.labels.getMonths();
        // Set labels
        this.selectedLabel = this.labels.startDate;
        this.selected2Label = this.labels.endDate;
        this.updateView(this.model, false, true);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NovoDatePickerElement.prototype.ngOnChanges = function (changes) {
        var /** @type {?} */ weekRangeSelectChange = changes['weekRangeSelect'];
        if (weekRangeSelectChange && weekRangeSelectChange.currentValue !== weekRangeSelectChange.previousValue && !weekRangeSelectChange.firstChange) {
            this.clearRange();
        }
        var /** @type {?} */ weekStartChanges = changes['weekStart'];
        if (weekStartChanges && weekStartChanges.currentValue !== weekStartChanges.previousValue && !weekStartChanges.firstChange) {
            this.weekdays = this.setupWeekdays();
            this.updateView(this.model, false, false);
        }
    };
    /**
     * @return {?}
     */
    NovoDatePickerElement.prototype.setupWeekdays = function () {
        var /** @type {?} */ weekdays = this.labels.getWeekdays();
        // Weekstart must be 0-6 (Sunday - Saturday)
        if (!Helpers.isBlank(this.weekStart) && this.weekStart > 0 && this.weekStart <= 6) {
            var /** @type {?} */ newStart = weekdays.splice(this.weekStart);
            weekdays = newStart.concat(weekdays);
        }
        return weekdays;
    };
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @param {?} hoverDay
     * @param {?} rangeSelectMode
     * @param {?} weekRangeSelect
     * @return {?}
     */
    NovoDatePickerElement.prototype.isSelectingRange = function (range, day, selected, selected2, hoverDay, rangeSelectMode, weekRangeSelect) {
        if (range && !weekRangeSelect) {
            var /** @type {?} */ isRangeModeEndDate = rangeSelectMode === 'endDate' && (selected && selected2 && dateFns.isAfter(day, selected2) && dateFns.isBefore(day, hoverDay));
            var /** @type {?} */ isRangeModeStartDate = rangeSelectMode === 'startDate' && (selected && selected2 && dateFns.isBefore(day, selected) && dateFns.isAfter(day, hoverDay));
            var /** @type {?} */ isNotSelected = !selected && selected2 && dateFns.isBefore(day, selected2) && dateFns.isAfter(day, hoverDay);
            var /** @type {?} */ isNotSelected2 = selected && !selected2 && dateFns.isAfter(day, selected) && dateFns.isBefore(day, hoverDay);
            return isNotSelected2 || isNotSelected || isRangeModeStartDate || isRangeModeEndDate;
        }
        return false;
    };
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    NovoDatePickerElement.prototype.isEndFill = function (range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return !dateFns.isSameDay(selected, selected2) && dateFns.isSameDay(day, selected2) && dateFns.isAfter(day, selected);
        }
        return false;
    };
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    NovoDatePickerElement.prototype.isStartFill = function (range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return !dateFns.isSameDay(selected, selected2) && dateFns.isSameDay(day, selected) && dateFns.isBefore(day, selected2);
        }
        return false;
    };
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    NovoDatePickerElement.prototype.isFiller = function (range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return (dateFns.isAfter(day, selected) && dateFns.isBefore(day, selected2)) || dateFns.isSameDay(day, selected) || dateFns.isSameDay(day, selected2);
        }
        return false;
    };
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    NovoDatePickerElement.prototype.isSelected = function (range, day, selected, selected2) {
        if (range) {
            return day && (selected && (day.getDate() === selected.getDate() && day.getMonth() === selected.getMonth() && day.getFullYear() === selected.getFullYear()) || (selected2 && (day.getDate() === selected2.getDate() && day.getMonth() === selected2.getMonth() && day.getFullYear() === selected2.getFullYear())));
        }
        return day.getDate() === selected.getDate() && day.getMonth() === selected.getMonth() && day.getFullYear() === selected.getFullYear();
    };
    /**
     * @param {?} day
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    NovoDatePickerElement.prototype.isDisabled = function (day, start, end) {
        return dateFns.isBefore(day, start) || dateFns.isAfter(day, end);
    };
    /**
     * @param {?} date
     * @param {?} fireEvents
     * @param {?} markedSelected
     * @return {?}
     */
    NovoDatePickerElement.prototype.updateView = function (date, fireEvents, markedSelected) {
        if (date && date.startDate === null) {
            this.clearRange();
        }
        else {
            if (!date) {
                this.clearRange();
            }
            var /** @type {?} */ value = date ? new Date(date) : new Date();
            value = this.removeTime(value);
            this.month = new Date(value);
            this.monthLabel = this.labels.formatDateWithFormat(this.month, { month: 'short' });
            var /** @type {?} */ start = new Date(value.getTime());
            start.setDate(1);
            this.removeTime(start.setDate(1));
            this.buildMonth(start, this.month);
            if (markedSelected) {
                this.select(null, { date: value }, fireEvents);
            }
        }
    };
    /**
     * @return {?}
     */
    NovoDatePickerElement.prototype.setToday = function () {
        var /** @type {?} */ tmp = new Date();
        this.updateView(tmp, true, true);
        // Go back to days
        this.open(null, 'days');
    };
    /**
     * @return {?}
     */
    NovoDatePickerElement.prototype.clearRange = function () {
        this.selected = null;
        this.selectedLabel = this.labels.startDate;
        this.selected2 = null;
        this.selected2Label = this.labels.endDate;
    };
    /**
     * @param {?} month
     * @return {?}
     */
    NovoDatePickerElement.prototype.setMonth = function (month) {
        var /** @type {?} */ date = this.month ? this.month : new Date();
        var /** @type {?} */ tmp = dateFns.setMonth(date, month);
        this.updateView(tmp, true, false);
        // Go back to days
        this.open(null, 'days');
    };
    /**
     * @param {?} year
     * @return {?}
     */
    NovoDatePickerElement.prototype.setYear = function (year) {
        var /** @type {?} */ date = this.month ? this.month : new Date();
        var /** @type {?} */ tmp = dateFns.setYear(date, year);
        this.updateView(tmp, true, false);
        // Go back to days
        this.open(null, 'days');
    };
    /**
     * @param {?} event
     * @param {?} day
     * @param {?} fireEvents
     * @return {?}
     */
    NovoDatePickerElement.prototype.select = function (event, day, fireEvents) {
        Helpers.swallowEvent(event);
        if (this.range) {
            if (this.weekRangeSelect) {
                this.selected = dateFns.startOfWeek(day.date, { weekStartsOn: this.weekStart });
                this.selected2 = dateFns.endOfWeek(day.date, { weekStartsOn: this.weekStart });
                this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric'
                });
                this.selected2Label = this.labels.formatDateWithFormat(this.selected2, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric'
                });
                // Make sure to fire this, since we default to the current week selected!
                if (!fireEvents && this.weekRangeSelect) {
                    this.fireRangeSelect();
                }
            }
            else if (this.rangeSelectMode === 'startDate') {
                // SET START DATE
                this.selected = dateFns.startOfDay(day.date);
                this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric'
                });
                if (this.selected2 && dateFns.isAfter(day.date, this.selected2)) {
                    // CLEAR END DATE
                    this.selected2 = null;
                    this.selected2Label = this.labels.endDate;
                }
                if (event) {
                    this.rangeSelectMode = 'endDate';
                }
            }
            else if (this.rangeSelectMode === 'endDate') {
                // SET END DATE
                this.selected2 = dateFns.endOfDay(day.date);
                this.selected2Label = this.labels.formatDateWithFormat(this.selected2, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric'
                });
                if (this.selected && dateFns.isBefore(day.date, this.selected)) {
                    // CLEAR START DATE
                    this.selected = null;
                    this.selectedLabel = this.labels.startDate;
                }
                if (event) {
                    this.rangeSelectMode = 'startDate';
                }
            }
        }
        else {
            this.selected = day.date;
            this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                month: 'short',
                day: '2-digit',
                year: 'numeric'
            });
            this.updateHeading();
        }
        if (fireEvents && this.selected) {
            // Emit our output
            if (this.range && this.selected && this.selected2) {
                this.fireRangeSelect();
                // Also, update the ngModel
                this._onChange({
                    startDate: this.selected,
                    endDate: this.selected2 ? this.selected2 : null
                });
                this.model = {
                    startDate: this.selected,
                    endDate: this.selected2 ? this.selected2 : null
                };
            }
            if (!this.range) {
                this.onSelect.next({
                    month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
                    year: this.selected.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
                    date: this.selected
                });
                // Also, update the ngModel
                this._onChange(this.selected);
                this.model = this.selected;
            }
        }
    };
    /**
     * @return {?}
     */
    NovoDatePickerElement.prototype.fireRangeSelect = function () {
        // Make sure the start date is before the end date
        if (dateFns.isBefore(this.selected, this.selected2)) {
            this.onSelect.next({
                startDate: {
                    month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
                    year: this.selected.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
                    date: this.selected
                },
                endDate: {
                    month: this.labels.formatDateWithFormat(this.selected2, { month: 'long' }),
                    year: this.selected2.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected2, { weekday: 'long' }),
                    date: this.selected2
                }
            });
        }
    };
    /**
     * @param {?} event
     * @param {?} type
     * @return {?}
     */
    NovoDatePickerElement.prototype.open = function (event, type) {
        var _this = this;
        Helpers.swallowEvent(event);
        // If they click the toggle two time in a row, close it (go back to days)
        if (type === this.view) {
            this.view = 'days';
        }
        else {
            this.view = type;
        }
        // Make sure to scroll the selected one into view
        if (this.view === 'years' || this.view === 'months') {
            setTimeout(function () {
                var /** @type {?} */ container = _this.element.nativeElement.querySelector(".calendar-content." + _this.view);
                var /** @type {?} */ selectedItem = _this.element.nativeElement.querySelector(".calendar-content." + _this.view + " ." + (_this.view === 'years' ? 'year' : 'month') + ".selected");
                if (container && selectedItem) {
                    container.scrollTop = selectedItem.offsetTop - 100;
                }
            });
        }
        this.updateHeading();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDatePickerElement.prototype.prevMonth = function (event) {
        Helpers.swallowEvent(event);
        var /** @type {?} */ tmp = dateFns.subMonths(this.month, 1);
        this.updateView(tmp, false, false);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDatePickerElement.prototype.nextMonth = function (event) {
        Helpers.swallowEvent(event);
        var /** @type {?} */ tmp = dateFns.addMonths(this.month, 1);
        this.updateView(tmp, false, false);
    };
    /**
     * @return {?}
     */
    NovoDatePickerElement.prototype.updateHeading = function () {
        if (!this.selected) {
            return;
        }
        this.heading = {
            month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
            year: this.selected.getFullYear(),
            day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
            date: this.selected.getDate()
        };
    };
    /**
     * Remove the time aspect of the date
     * @param {?} date
     * @return {?} with time stripped out
     */
    NovoDatePickerElement.prototype.removeTime = function (date) {
        var /** @type {?} */ ret = new Date(date);
        ret.setHours(12);
        ret.setSeconds(0);
        ret.setMilliseconds(0);
        return ret;
    };
    /**
     * @param {?} start
     * @param {?} month
     * @return {?}
     */
    NovoDatePickerElement.prototype.buildMonth = function (start, month) {
        // Reset the weeks
        this.weeks = [];
        // House keeping variables to know when we are done building the month
        var /** @type {?} */ done = false, /** @type {?} */ date = dateFns.startOfWeek(start, { weekStartsOn: this.weekStart }), /** @type {?} */ monthIndex = date.getMonth(), /** @type {?} */ count = 0;
        while (!done) {
            // Build the days for the weeks
            this.weeks.push({ days: this.buildWeek(new Date(date.getTime()), month) });
            // Increment variables for the next iteration
            date = dateFns.addDays(date, 7);
            done = count++ > 2 && monthIndex !== date.getMonth();
            monthIndex = date.getMonth();
        }
    };
    /**
     * @param {?} date
     * @param {?} month
     * @return {?}
     */
    NovoDatePickerElement.prototype.buildWeek = function (date, month) {
        // Build out of the days of the week
        var /** @type {?} */ days = [];
        // Iterate over the days of the week
        for (var /** @type {?} */ i = 0; i < 7; i++) {
            // Push a variable on the day array with lots of helpers to make the template easier
            days.push({
                name: this.weekdays[i],
                number: date.getDate(),
                isToday: dateFns.isToday(date),
                date: date
            });
            // Increment for the next iteration
            date = dateFns.addDays(date, 1);
        }
        return days;
    };
    /**
     * @param {?} range
     * @return {?}
     */
    NovoDatePickerElement.prototype.toggleRangeSelect = function (range) {
        this.rangeSelectMode = range;
    };
    /**
     * @param {?} event
     * @param {?} day
     * @return {?}
     */
    NovoDatePickerElement.prototype.rangeHover = function (event, day) {
        this.hoverDay = day.date;
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoDatePickerElement.prototype.writeValue = function (model) {
        this.model = model;
        if (Helpers.isDate(model)) {
            this.updateView(model, false, true);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDatePickerElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDatePickerElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    return NovoDatePickerElement;
}());
NovoDatePickerElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-date-picker',
                providers: [DATE_PICKER_VALUE_ACCESSOR],
                animations: [
                    animations.trigger('startDateTextState', [
                        animations.state('startDate', animations.style({
                            'opacity': '1.0'
                        })),
                        animations.state('endDate', animations.style({
                            'opacity': '0.6'
                        })),
                        animations.transition('startDate <=> endDate', animations.animate('200ms ease-in'))
                    ]),
                    animations.trigger('endDateTextState', [
                        animations.state('startDate', animations.style({
                            'opacity': '0.6'
                        })),
                        animations.state('endDate', animations.style({
                            'opacity': '1.0'
                        })),
                        animations.transition('startDate <=> endDate', animations.animate('200ms ease-in'))
                    ]),
                    animations.trigger('indicatorState', [
                        animations.state('startDate', animations.style({
                            'transform': 'translateX(0%)'
                        })),
                        animations.state('endDate', animations.style({
                            'transform': 'translateX(100%)'
                        })),
                        animations.transition('startDate <=> endDate', animations.animate('200ms ease-in'))
                    ])
                ],
                template: "\n        <div class=\"calendar\">\n            <div class=\"calendar-top\" *ngIf=\"!inline && !range\">\n                <h4 class=\"day\" [attr.data-automation-id]=\"heading?.day\">{{heading?.day}}</h4>\n                <h2 class=\"month\" [attr.data-automation-id]=\"heading?.month\">{{heading?.month}}</h2>\n                <h1 class=\"date\" [attr.data-automation-id]=\"heading?.date\">{{heading?.date}}</h1>\n                <h3 class=\"year\" [attr.data-automation-id]=\"heading?.year\">{{heading?.year}}</h3>\n            </div>\n            <div class=\"date-range-tabs\" *ngIf=\"range\" [class.week-select-mode]=\"weekRangeSelect\">\n                <span class=\"range-tab\" (click)=\"toggleRangeSelect('startDate')\" [@startDateTextState]=\"rangeSelectMode\" data-automation-id=\"calendar-start-date\">{{selectedLabel}}</span>\n                <span class=\"range-tab\" (click)=\"toggleRangeSelect('endDate')\" [@endDateTextState]=\"rangeSelectMode\" data-automation-id=\"calendar-end-date\">{{selected2Label}}</span>\n                <i class=\"indicator\" [@indicatorState]=\"rangeSelectMode\"></i>\n            </div>\n            <div class=\"calendar-header\">\n                <span class=\"previous\" (click)=\"prevMonth($event)\" data-automation-id=\"calendar-previous\"></span>\n                <span class=\"heading\">\n                    <span class=\"month\" (click)=\"open($event, 'months')\" data-automation-id=\"header-month\">{{monthLabel}}</span>\n                    <span class=\"year\" (click)=\"open($event, 'years')\" data-automation-id=\"header-year\">{{month?.getFullYear()}}</span>\n                </span>\n                <span class=\"next\" (click)=\"nextMonth($event)\" data-automation-id=\"calendar-next\"></span>\n            </div>\n            <table class=\"calendar-content days\" cellspacing=\"0\" cellpadding=\"0\" [hidden]=\"!(view=='days')\">\n                <thead>\n                    <tr>\n                        <th *ngFor=\"let day of weekdays\" title=\"{{day}}\" class=\"weekday\" [attr.data-automation-id]=\"day.substr(0, 2)\">{{day.substr(0, 2)}}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let week of weeks\">\n                        <td *ngFor=\"let day of week.days\" [ngClass]=\"{\n                            today: day.isToday,\n                            'notinmonth': day.date.getMonth() !== this.month.getMonth(),\n                            selected: isSelected(range, day.date, selected, selected2),\n                            filler: isFiller(range, day.date, selected, selected2),\n                            startfill: isStartFill(range, day.date, selected, selected2),\n                            endfill: isEndFill(range, day.date, selected, selected2),\n                            'selecting-range': isSelectingRange(range, day.date, selected, selected2, hoverDay, rangeSelectMode, weekRangeSelect)\n                           }\" (click)=\"select($event, day, true)\" (mouseover)=\"rangeHover($event, day)\" [attr.data-automation-id]=\"day.number\">\n                            <button class=\"day\" [attr.data-automation-id]=\"day.number\" [disabled]=\"isDisabled(day.date, start, end)\">{{day.number}}</button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <section class=\"calendar-content months\" [hidden]=\"view !== 'months'\">\n                <div *ngFor=\"let month of months;let i = index\" (click)=\"setMonth(i)\">\n                    <div class=\"month\" [ngClass]=\"{selected: i === selected?.getMonth()}\" [attr.data-automation-id]=\"month\">{{month}}</div>\n                </div>\n            </section>\n            <section class=\"calendar-content years\" [hidden]=\"view !== 'years'\">\n                <div *ngFor=\"let year of years\" (click)=\"setYear(year)\">\n                    <div class=\"year\" [ngClass]=\"{selected: year == selected?.getFullYear()}\" [attr.data-automation-id]=\"year\">{{year}}</div>\n                </div>\n            </section>\n            <div class=\"calendar-footer\">\n                <span (click)=\"setToday()\" class=\"today\" data-automation-id=\"calendar-today\">{{ labels.today }}</span>\n            </div>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoDatePickerElement.ctorParameters = function () { return [
    { type: NovoLabelService, },
    { type: core.ElementRef, },
]; };
NovoDatePickerElement.propDecorators = {
    'minYear': [{ type: core.Input },],
    'maxYear': [{ type: core.Input },],
    'start': [{ type: core.Input },],
    'end': [{ type: core.Input },],
    'inline': [{ type: core.Input },],
    'range': [{ type: core.Input },],
    'weekRangeSelect': [{ type: core.Input },],
    'weekStart': [{ type: core.Input },],
    'onSelect': [{ type: core.Output },],
    'template': [{ type: core.ViewChild, args: [core.TemplateRef,] },],
};
var createAutoCorrectedDatePipe = createCommonjsModule(function (module, exports) {
    !function (e, t) { module.exports = t(); }(commonjsGlobal, function () { return function (e) { function t(n) { if (r[n])
        return r[n].exports; var o = r[n] = { exports: {}, id: n, loaded: !1 }; return e[n].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports; } var r = {}; return t.m = e, t.c = r, t.p = "", t(0); }([function (e, t, r) { e.exports = r(1); }, function (e, t) { function r() { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "mm dd yyyy"; return function (t) { var r = [], n = e.split(/[^dmyHMS]+/), o = { dd: 31, mm: 12, yy: 99, yyyy: 9999, HH: 23, MM: 59, SS: 59 }, i = { dd: 1, mm: 1, yy: 0, yyyy: 1, HH: 0, MM: 0, SS: 0 }, u = t.split(""); n.forEach(function (t) { var n = e.indexOf(t), i = parseInt(o[t].toString().substr(0, 1), 10); parseInt(u[n], 10) > i && (u[n + 1] = u[n], u[n] = 0, r.push(n)); }); var d = n.some(function (r) { var n = e.indexOf(r), u = r.length, d = t.substr(n, u).replace(/\D/g, ""), s = parseInt(d, 10); return s > o[r] || d.length === u && s < i[r]; }); return !d && { value: u.join(""), indexesOfPipedChars: r }; }; } Object.defineProperty(t, "__esModule", { value: !0 }), t.default = r; }]); });
});
var createAutoCorrectedDatePipe$1 = unwrapExports(createAutoCorrectedDatePipe);
var createAutoCorrectedDatePipe_1 = createAutoCorrectedDatePipe.createAutoCorrectedDatePipe;
// NG
// Value accessor for the component (supports ngModel)
var DATE_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoDatePickerInputElement; }),
    multi: true,
};
var NovoDatePickerInputElement = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} _changeDetectorRef
     */
    function NovoDatePickerInputElement(element, labels, _changeDetectorRef) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        this.formattedValue = '';
        /**
         * View -> model callback called when value changes
         */
        this._onChange = function () { };
        /**
         * View -> model callback called when autocomplete has been touched
         */
        this._onTouched = function () { };
        this.placeholder = this.labels.dateFormatPlaceholder;
    }
    /**
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.ngOnInit = function () {
        this.maskOptions = this.maskOptions || {
            mask: [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/],
            pipe: createAutoCorrectedDatePipe$1(this.format || this.labels.dateFormat.toLowerCase()),
            keepCharPositions: false,
            guide: true,
        };
    };
    /**
     * BEGIN: Convienient Panel Methods.
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.openPanel = function () {
        this.overlay.openPanel();
    };
    /**
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.closePanel = function () {
        this.overlay.closePanel();
    };
    Object.defineProperty(NovoDatePickerInputElement.prototype, "panelOpen", {
        /**
         * @return {?}
         */
        get: function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * END: Convienient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    NovoDatePickerInputElement.prototype._handleKeydown = function (event) {
        if ((event.keyCode === keycodes.ESCAPE || event.keyCode === keycodes.ENTER || event.keyCode === keycodes.TAB) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDatePickerInputElement.prototype._handleInput = function (event) {
        if (document.activeElement === event.target) {
            var /** @type {?} */ value = ((event.target)).value;
            try {
                var /** @type {?} */ dateTimeValue = Date.parse(value);
                if (!isNaN(dateTimeValue)) {
                    var /** @type {?} */ dt = new Date(dateTimeValue);
                    this.dispatchOnChange(dt);
                }
                else {
                    this.dispatchOnChange(null);
                }
            }
            catch (err) { }
            this.openPanel();
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.writeValue = function (value) {
        var _this = this;
        Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?=} newValue
     * @param {?=} skip
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.dispatchOnChange = function (newValue, skip) {
        if (skip === void 0) { skip = false; }
        if (newValue !== this.value) {
            this._onChange(newValue);
            !skip && this.writeValue(newValue);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoDatePickerInputElement.prototype._setTriggerValue = function (value) {
        if (value instanceof Date && this.value instanceof Date) {
            value = new Date(value.setHours(this.value.getHours(), this.value.getMinutes()));
        }
        this.value = value;
        if (this.value) {
            var /** @type {?} */ test = this.formatDateValue(this.value);
            this.formattedValue = test;
        }
        this._changeDetectorRef.markForCheck();
    };
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     * @param {?} event
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.setValueAndClose = function (event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date);
        }
        this.closePanel();
    };
    /**
     * Clear any previous selected option and emit a selection change event for this option
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.clearValue = function () {
        this.formattedValue = '';
        this.dispatchOnChange(null);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.formatDateValue = function (value) {
        try {
            if (!value) {
                return '';
            }
            if (!(value instanceof Date)) {
                value = new Date(value);
            }
            return this.labels.formatDateWithFormat(value, {
                month: '2-digit',
                day: '2-digit',
                year: 'numeric',
            });
        }
        catch (err) {
            return '';
        }
    };
    Object.defineProperty(NovoDatePickerInputElement.prototype, "hasValue", {
        /**
         * @return {?}
         */
        get: function () {
            return !Helpers.isEmpty(this.value);
        },
        enumerable: true,
        configurable: true
    });
    return NovoDatePickerInputElement;
}());
NovoDatePickerInputElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-date-picker-input',
                providers: [DATE_VALUE_ACCESSOR],
                template: "\n        <input type=\"text\" [name]=\"name\" [(ngModel)]=\"formattedValue\" [textMask]=\"maskOptions\" [placeholder]=\"placeholder\" (focus)=\"openPanel()\" (keydown)=\"_handleKeydown($event)\" (input)=\"_handleInput($event)\" #input data-automation-id=\"date-input\"/>\n        <i *ngIf=\"!hasValue\" (click)=\"openPanel()\" class=\"bhi-calendar\"></i>\n        <i *ngIf=\"hasValue\" (click)=\"clearValue()\" class=\"bhi-times\"></i>\n\n        <novo-overlay-template [parent]=\"element\">\n            <novo-date-picker inline=\"true\" (onSelect)=\"setValueAndClose($event)\" [ngModel]=\"value\"></novo-date-picker>\n        </novo-overlay-template>\n  ",
            },] },
];
/**
 * @nocollapse
 */
NovoDatePickerInputElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
    { type: core.ChangeDetectorRef, },
]; };
NovoDatePickerInputElement.propDecorators = {
    'name': [{ type: core.Input },],
    'placeholder': [{ type: core.Input },],
    'maskOptions': [{ type: core.Input },],
    'format': [{ type: core.Input },],
    'overlay': [{ type: core.ViewChild, args: [NovoOverlayTemplate,] },],
};
// NG2
// Vendor
// APP
var NovoDatePickerModule = /** @class */ (function () {
    function NovoDatePickerModule() {
    }
    return NovoDatePickerModule;
}());
NovoDatePickerModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule, NovoOverlayModule, angular2TextMask.TextMaskModule],
                declarations: [NovoDatePickerElement, NovoDatePickerInputElement],
                exports: [NovoDatePickerElement, NovoDatePickerInputElement]
            },] },
];
/**
 * @nocollapse
 */
NovoDatePickerModule.ctorParameters = function () { return []; };
// NG2
// APP
// Value accessor for the component (supports ngModel)
var TIME_PICKER_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoTimePickerElement; }),
    multi: true
};
var NovoTimePickerElement = /** @class */ (function () {
    function NovoTimePickerElement() {
        this.military = false;
        this.analog = false;
        this.inline = false;
        this.onSelect = new core.EventEmitter();
        this.hours = 12;
        this.minutes = 0;
        this.value = null;
        this.increments = [];
        this.MERIDIANS = ['am', 'pm'];
        this.MINUTES = ['05', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55', '00'];
        this.HOURS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
        this._onChange = function () { };
        this._onTouched = function () { };
    }
    /**
     * @param {?} arr
     * @return {?}
     */
    NovoTimePickerElement.prototype.flatten = function (arr) {
        return (_d = Array.prototype).concat.apply(_d, arr);
        var _d;
    };
    /**
     * @return {?}
     */
    NovoTimePickerElement.prototype.ngOnInit = function () {
        if (this.military) {
            this.HOURS = ['0'].concat(this.HOURS, ['13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']);
            this.increments = this.flatten(this.HOURS.map(function (hour) { return [hour + ":00", hour + ":15", hour + ":30", hour + ":45"]; }).slice());
        }
        else {
            var /** @type {?} */ hours = ['12', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'];
            this.increments = this.flatten(hours.map(function (hour) { return [hour + ":00 AM", hour + ":15 AM", hour + ":30 AM", hour + ":45 AM"]; }).concat(hours.map(function (hour) { return [hour + ":00 PM", hour + ":15 PM", hour + ":30 PM", hour + ":45 PM"]; })));
        }
        this.ngOnChanges();
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoTimePickerElement.prototype.ngOnChanges = function (changes) {
        if (this.model) {
            this.init(this.model, false);
        }
        else {
            this.selected = null;
            this.init(new Date(), false);
        }
    };
    /**
     * @param {?} value
     * @param {?} dispatch
     * @return {?}
     */
    NovoTimePickerElement.prototype.init = function (value, dispatch) {
        var /** @type {?} */ _value = new Date(value);
        var /** @type {?} */ hours = _value.getHours();
        var /** @type {?} */ minutes = _value.getMinutes();
        if (!this.military) {
            this.meridian = hours >= 12 ? 'pm' : 'am';
            hours = hours % 12;
            hours = hours || 12;
        }
        minutes = minutes < 10 ? "0" + minutes : minutes;
        this.setHours(null, hours, dispatch);
        this.setMinutes(null, minutes, dispatch);
        this.checkBetween(minutes);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoTimePickerElement.prototype.checkBetween = function (value) {
        this.inBetween = this.MINUTES.indexOf(String(value)) < 0;
    };
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    NovoTimePickerElement.prototype.setValue = function (event, value) {
        Helpers.swallowEvent(event);
        this.selected = value;
        var _d = value.split(' '), time = _d[0], meridian = _d[1];
        var _e = time.split(':'), hours = _e[0], minutes = _e[1];
        this.hours = hours;
        this.minutes = minutes;
        this.meridian = meridian;
        this.dispatchChange();
    };
    /**
     * @param {?} event
     * @param {?} hours
     * @param {?} dispatch
     * @return {?}
     */
    NovoTimePickerElement.prototype.setHours = function (event, hours, dispatch) {
        Helpers.swallowEvent(event);
        this.hours = hours;
        this.hoursClass = "hour-" + hours;
        this.activeHour = hours;
        if (dispatch) {
            this.dispatchChange();
        }
    };
    /**
     * @param {?} event
     * @param {?} minutes
     * @param {?} dispatch
     * @return {?}
     */
    NovoTimePickerElement.prototype.setMinutes = function (event, minutes, dispatch) {
        Helpers.swallowEvent(event);
        this.minutes = minutes;
        this.minutesClass = "min-" + minutes;
        this.activeMinute = minutes;
        this.checkBetween(minutes);
        if (dispatch) {
            this.dispatchChange();
        }
    };
    /**
     * @param {?} event
     * @param {?} period
     * @param {?} dispatch
     * @return {?}
     */
    NovoTimePickerElement.prototype.setPeriod = function (event, period, dispatch) {
        Helpers.swallowEvent(event);
        this.meridian = period;
        if (dispatch) {
            this.dispatchChange();
        }
    };
    /**
     * @return {?}
     */
    NovoTimePickerElement.prototype.dispatchChange = function () {
        var /** @type {?} */ hours = Number(this.hours);
        if (!this.military) {
            hours = this.meridian.toLowerCase() === 'pm' ? hours + 12 : hours;
            // Special case for 12
            if (this.meridian.toLowerCase() === 'pm' && hours === 24) {
                hours = 12;
            }
            else if (this.meridian.toLowerCase() === 'am' && hours === 12) {
                hours = 0;
            }
        }
        var /** @type {?} */ value = new Date();
        value.setHours(hours);
        value.setMinutes(this.minutes);
        value.setSeconds(0);
        this.value = this.hours + ":" + this.minutes + " " + this.meridian;
        this.onSelect.next({
            hours: hours,
            minutes: this.minutes,
            meridian: this.meridian,
            date: value,
            text: this.value,
        });
        this._onChange(value);
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoTimePickerElement.prototype.writeValue = function (model) {
        this.model = model;
        if (Helpers.isDate(model)) {
            this.init(model, false);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoTimePickerElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoTimePickerElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    return NovoTimePickerElement;
}());
NovoTimePickerElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-time-picker',
                providers: [TIME_PICKER_VALUE_ACCESSOR],
                template: "\n        <div class=\"digital\" [class.inline]=\"inline\" [class.military]=\"military\">\n            <div class=\"digital--inner\">\n                <span class=\"digital--clock\" *ngIf=\"!inline\">\n                    <span class=\"hours\" data-automation-id=\"novo-time-picker-hours\">{{hours}}</span>:<span class=\"minutes\" data-automation-id=\"novo-time-picker-minutes\">{{minutes}}</span>\n                </span>\n                <div class=\"control-block\" *ngIf=\"!military\">\n                    <span *ngFor=\"let period of MERIDIANS\" class=\"digital--period\" [class.active]=\"meridian==period\" (click)=\"setPeriod($event, period, true)\" [attr.data-automation-id]=\"period\">{{period}}</span>\n                </div>\n            </div>\n        </div>\n        <div class=\"increments\" *ngIf=\"!analog\">\n            <novo-list direction=\"vertical\" data-automation-id=\"novo-time-picker-increments\">\n                <novo-list-item *ngFor=\"let increment of increments\" (click)=\"setValue($event, increment)\" [class.active]=\"increment==selected\" [attr.data-automation-id]=\"increment\">\n                    <item-content>{{increment}}</item-content>\n                    <i *ngIf=\"increment==selected\" class=\"bhi-check\"></i>\n                </novo-list-item>\n            </novo-list>\n        </div>\n        <div class=\"analog\" *ngIf=\"analog\">\n            <div class=\"analog--inner\">\n                <div class=\"analog--face\">\n                    <span class=\"analog--center\"></span>\n                    <span class=\"analog--hand--hours\" [ngClass]=\"hoursClass\">\n                        <span class=\"analog--ball\"></span>\n                    </span>\n                    <span class=\"analog--hand--minutes\" [ngClass]=\"minutesClass\">\n                        <span class=\"analog--ball\" [ngClass]=\"{between: inBetween}\"></span>\n                    </span>\n                </div>\n                <div class=\"analog--hours\">\n                    <span *ngFor=\"let hour of HOURS\" class=\"analog--hour\" [ngClass]=\"{active: activeHour == hour}\" (click)=\"setHours($event, hour, true)\" [attr.data-automation-id]=\"hour\">{{hour}}</span>\n                </div>\n                <div class=\"analog--minutes\">\n                    <span *ngFor=\"let minute of MINUTES\" class=\"analog--minute\" [ngClass]=\"{active: activeMinute == minute}\" (click)=\"setMinutes($event, minute, true)\" [attr.data-automation-id]=\"minute\">{{minute}}</span>\n                </div>\n            </div>\n        </div>\n    ",
                host: {
                    '[class.military]': 'military'
                }
            },] },
];
/**
 * @nocollapse
 */
NovoTimePickerElement.ctorParameters = function () { return []; };
NovoTimePickerElement.propDecorators = {
    'military': [{ type: core.Input },],
    'analog': [{ type: core.Input },],
    'inline': [{ type: core.Input },],
    'onSelect': [{ type: core.Output },],
};
// NG2
// APP
var DateFormatService = /** @class */ (function () {
    /**
     * @param {?} labels
     */
    function DateFormatService(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} militaryTime
     * @return {?}
     */
    DateFormatService.prototype.getTimeMask = function (militaryTime) {
        var /** @type {?} */ mask = [/\d/, /\d/, /:/, /\d/, /\d/], /** @type {?} */ timeFormatArray = [];
        var /** @type {?} */ timeFormat = this.labels.timeFormatPlaceholderAM.toLowerCase();
        if (militaryTime) {
            return mask;
        }
        else {
            timeFormatArray = timeFormat.split('hh:mm');
            if (timeFormatArray && timeFormatArray.length) {
                mask = [];
                for (var _d = 0, timeFormatArray_1 = timeFormatArray; _d < timeFormatArray_1.length; _d++) {
                    var timeFormatPart = timeFormatArray_1[_d];
                    if (timeFormatPart === '') {
                        mask = mask.concat([/\d/, /\d|:/, /:|\d/, /\d|\w|\s/, /\d|\s|\w/]);
                    }
                    else if (timeFormatPart.length) {
                        for (var /** @type {?} */ i = 0; i < timeFormatPart.length; i++) {
                            mask.push(/\s|\w|\d|\./);
                        }
                    }
                }
            }
        }
        return mask;
    };
    /**
     * @return {?}
     */
    DateFormatService.prototype.getDateMask = function () {
        return [/\d/, /\d|\/|\.|\-/, /\/|\.|\-|\d/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d/, /\d/];
    };
    /**
     * @param {?=} militaryTime
     * @return {?}
     */
    DateFormatService.prototype.getDateTimeMask = function (militaryTime) {
        if (militaryTime === void 0) { militaryTime = false; }
        return this.getDateMask().concat([/\,?/, /\s/], this.getTimeMask(militaryTime));
    };
    /**
     * @param {?} militaryTime
     * @return {?}
     */
    DateFormatService.prototype.getTimePlaceHolder = function (militaryTime) {
        if (militaryTime) {
            return this.labels.timeFormatPlaceholder24Hour;
        }
        return this.labels.timeFormatPlaceholderAM;
    };
    /**
     * @param {?} dateString
     * @return {?}
     */
    DateFormatService.prototype.parseDateString = function (dateString) {
        var /** @type {?} */ dateFormat = this.labels.dateFormat, /** @type {?} */ dateFormatRegex = /(\w+)[\/|\.|\-](\w+)[\/|\.|\-](\w+)/gi, /** @type {?} */ dateValueRegex = /(\d+)[\/|\.|\-](\d+)[\/|\.|\-](\d+)/gi, /** @type {?} */ dateFormatTokens, /** @type {?} */ dateValueTokens, /** @type {?} */ year, /** @type {?} */ month, /** @type {?} */ day, /** @type {?} */ date = new Date();
        if (Helpers.isEmpty(dateFormat)) {
            // Default to MM/dd/yyyy
            dateFormat = 'mm/dd/yyyy';
        }
        else {
            dateFormat = dateFormat.toLowerCase();
        }
        dateFormatTokens = dateFormatRegex.exec(dateFormat);
        dateValueTokens = dateValueRegex.exec(dateString);
        if (dateFormatTokens && dateFormatTokens.length === 4 && dateValueTokens && dateValueTokens.length === 4) {
            for (var /** @type {?} */ i = 1; i < 4; i++) {
                if (dateFormatTokens[i].includes('m')) {
                    month = parseInt(dateValueTokens[i]) - 1;
                }
                else if (dateFormatTokens[i].includes('d')) {
                    day = parseInt(dateValueTokens[i]);
                }
                else {
                    year = parseInt(dateValueTokens[i]);
                }
            }
            if (month >= 0 && month <= 11 && year > 1900 && day > 0 && day <= 31) {
                date = new Date(year, month, day);
            }
        }
        else if (dateFormatTokens && dateFormatTokens.length === 4 && dateString.length >= 1) {
            var /** @type {?} */ twoTokens = /\d{1,4}(\/|\.|\-)(\d{1,2})/.exec(dateString);
            var /** @type {?} */ oneToken = /^(\d{1,4})$/.exec(dateString);
            var /** @type {?} */ delimiter = /\w+(\/|\.|\-)\w+[\/|\.|\-]\w+/gi.exec(dateFormat);
            var /** @type {?} */ dateStringWithDelimiter = dateString[dateString.length - 1].match(/\/|\.|\-/);
            if (twoTokens && twoTokens.length === 3 && this.isValidDatePart(twoTokens[2], dateFormatTokens[2]) && !dateStringWithDelimiter) {
                dateString = "" + dateString + delimiter[1];
            }
            else if (oneToken && oneToken.length === 2 && this.isValidDatePart(oneToken[1], dateFormatTokens[1]) && !dateStringWithDelimiter) {
                dateString = "" + dateString + delimiter[1];
            }
        }
        return [date, dateString];
    };
    /**
     * @param {?} timeString
     * @param {?} militaryTime
     * @return {?}
     */
    DateFormatService.prototype.parseTimeString = function (timeString, militaryTime) {
        var /** @type {?} */ value = new Date(), /** @type {?} */ timeStringParts;
        var /** @type {?} */ amFormat = this.labels.timeFormatAM;
        var /** @type {?} */ pmFormat = this.labels.timeFormatPM;
        if (!(timeString && timeString.includes(':'))) {
            return [value, timeString];
        }
        if (!militaryTime && amFormat && pmFormat) {
            var /** @type {?} */ splits = [], /** @type {?} */ pm = false;
            amFormat = this.labels.timeFormatAM.toLowerCase();
            pmFormat = this.labels.timeFormatPM.toLowerCase();
            timeString = timeString.toLowerCase();
            if (timeString.includes(amFormat)) {
                splits = timeString.split(amFormat);
            }
            else if (timeString.includes(pmFormat)) {
                splits = timeString.split(pmFormat);
                pm = true;
            }
            if (splits && splits.length) {
                for (var _d = 0, splits_1 = splits; _d < splits_1.length; _d++) {
                    var item = splits_1[_d];
                    if (item && item.trim().includes(':')) {
                        timeStringParts = item.trim().split(':');
                    }
                }
            }
            if (timeStringParts && timeStringParts.length && timeStringParts.length === 2) {
                var /** @type {?} */ hours = parseInt(timeStringParts[0]);
                if (hours === 12 && pm) {
                    hours = 12;
                }
                else if (pm) {
                    hours = hours + 12;
                }
                else if (hours === 12) {
                    hours = 0;
                }
                value.setHours(hours);
                value.setMinutes(parseInt(timeStringParts[1]));
                value.setSeconds(0);
            }
        }
        else {
            timeStringParts = /(\d{1,2}):(\d{2})/.exec(timeString);
            if (timeStringParts && timeStringParts.length && timeStringParts.length === 3) {
                value.setHours(parseInt(timeStringParts[1]));
                value.setMinutes(parseInt(timeStringParts[2]));
                value.setSeconds(0);
            }
        }
        return [value, timeString];
    };
    /**
     * @param {?} dateTimeString
     * @param {?} militaryTime
     * @param {?} type
     * @return {?}
     */
    DateFormatService.prototype.parseString = function (dateTimeString, militaryTime, type) {
        switch (type) {
            case 'datetime':
                var /** @type {?} */ str = dateTimeString.replace(/-/g, '/');
                var /** @type {?} */ parts = str.split(' ');
                var _d = this.parseDateString(parts[0]), dt = _d[0], dts = _d[1];
                if (parts.length > 1) {
                    var _e = this.parseTimeString(parts[1], militaryTime), tm = _e[0], tms = _e[1];
                    return [new Date(dt.setHours(tm.getHours(), tm.getMinutes())), dts + " " + tms];
                }
                return [dt, dts];
            case 'date':
                return this.parseDateString(dateTimeString);
            case 'time':
                return this.parseTimeString(dateTimeString, militaryTime);
            default:
                return;
        }
    };
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    DateFormatService.prototype.isValidDatePart = function (value, format) {
        var /** @type {?} */ datePart = parseInt(value);
        if (format.includes('m') && (datePart >= 2 || value.length === 2)) {
            return true;
        }
        else if (format.includes('d') && (datePart >= 4 || value.length === 2)) {
            return true;
        }
        else if (format.includes('y') && datePart >= 1000) {
            return true;
        }
        return false;
    };
    return DateFormatService;
}());
DateFormatService.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
DateFormatService.ctorParameters = function () { return [
    { type: NovoLabelService, },
]; };
// NG
// App
// Value accessor for the component (supports ngModel)
var DATE_VALUE_ACCESSOR$1 = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoTimePickerInputElement; }),
    multi: true
};
var NovoTimePickerInputElement = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} dateFormatService
     * @param {?} _changeDetectorRef
     */
    function NovoTimePickerInputElement(element, labels, dateFormatService, _changeDetectorRef) {
        this.element = element;
        this.labels = labels;
        this.dateFormatService = dateFormatService;
        this._changeDetectorRef = _changeDetectorRef;
        this.formattedValue = '';
        /**
         * View -> model callback called when value changes
         */
        this._onChange = function () { };
        /**
         * View -> model callback called when autocomplete has been touched
         */
        this._onTouched = function () { };
        this.military = false;
    }
    /**
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.ngOnInit = function () {
        this.placeholder = this.military ? this.labels.timeFormatPlaceholder24Hour : this.labels.timeFormatPlaceholderAM;
        this.maskOptions = {
            mask: this.military ? [/\d/, /\d/, ':', /\d/, /\d/] : [/\d/, /\d/, ':', /\d/, /\d/, ' ', /[aApP]/, /[mM]/],
            pipe: this.military ? createAutoCorrectedDatePipe$1('HH:MM') : createAutoCorrectedDatePipe$1('mm:MM'),
            keepCharPositions: false,
            guide: true,
        };
    };
    /**
     * BEGIN: Convienient Panel Methods.
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.openPanel = function () {
        var _this = this;
        if (!this.overlay.panelOpen) {
            this.overlay.openPanel();
            var /** @type {?} */ hour_1 = new Date().getHours();
            Promise.resolve(null).then(function () { return _this.scrollToIndex((hour_1 * 4)); });
        }
    };
    /**
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.closePanel = function () {
        this.overlay.closePanel();
    };
    Object.defineProperty(NovoTimePickerInputElement.prototype, "panelOpen", {
        /**
         * @return {?}
         */
        get: function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * END: Convienient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    NovoTimePickerInputElement.prototype._handleKeydown = function (event) {
        if ((event.keyCode === keycodes.ESCAPE || event.keyCode === keycodes.ENTER || event.keyCode === keycodes.TAB) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
            event.stopImmediatePropagation();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoTimePickerInputElement.prototype._handleInput = function (event) {
        if (document.activeElement === event.target) {
            // this._onChange((event.target as HTMLInputElement).value);
            var /** @type {?} */ text = ((event.target)).value;
            if (this.military ? text.replace(/_/g, '').length === 5 : text.replace(/_/g, '').length === 8) {
                var _d = this.dateFormatService.parseString(text, this.military, 'time'), dateTimeValue = _d[0], formatted = _d[1];
                this.dispatchOnChange(dateTimeValue);
            }
            else {
                this.dispatchOnChange(null);
            }
            this.openPanel();
            var /** @type {?} */ num = Number(text.split(':')[0]);
            this.scrollToIndex((num * 4));
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.writeValue = function (value) {
        var _this = this;
        Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?=} newValue
     * @param {?=} skip
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.dispatchOnChange = function (newValue, skip) {
        if (skip === void 0) { skip = false; }
        if (newValue !== this.value) {
            this._onChange(newValue);
            !skip && this.writeValue(newValue);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoTimePickerInputElement.prototype._setTriggerValue = function (value) {
        if (value instanceof Date && this.value instanceof Date) {
            value = new Date(value.setFullYear(this.value.getFullYear(), this.value.getMonth(), this.value.getDate()));
        }
        this.value = value;
        if (this.value) {
            this.formattedValue = this.formatDateValue(this.value);
        }
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.setValue = function (event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.setValueAndClose = function (event) {
        this.setValue(event);
        this.closePanel();
    };
    /**
     * Clear any previous selected option and emit a selection change event for this option
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.clearValue = function () {
        this.formattedValue = '';
        this.dispatchOnChange(null);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.formatDateValue = function (value) {
        if (!value) {
            return '';
        }
        var /** @type {?} */ format = this.labels.formatDateWithFormat(value, {
            hour: '2-digit',
            minute: '2-digit',
            hour12: !this.military
        });
        if (format.split(':')[0].length === 1) {
            return "0" + format;
        }
        return format;
    };
    Object.defineProperty(NovoTimePickerInputElement.prototype, "hasValue", {
        /**
         * @return {?}
         */
        get: function () {
            return !Helpers.isEmpty(this.value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.scrollToIndex = function (index$$1) {
        var /** @type {?} */ element = this.overlay._overlayRef.overlayElement;
        var /** @type {?} */ list = element.querySelector('.increments');
        var /** @type {?} */ items = list.querySelectorAll('novo-list-item');
        var /** @type {?} */ item = items[index$$1];
        if (item) {
            list.scrollTop = ((item)).offsetTop;
        }
    };
    return NovoTimePickerInputElement;
}());
NovoTimePickerInputElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-time-picker-input',
                providers: [DATE_VALUE_ACCESSOR$1],
                template: "\n        <input type=\"text\" [name]=\"name\" [(ngModel)]=\"formattedValue\" [textMask]=\"maskOptions\" [placeholder]=\"placeholder\" (focus)=\"openPanel()\" (keydown)=\"_handleKeydown($event)\" (input)=\"_handleInput($event)\" #input data-automation-id=\"time-input\"/>\n        <i *ngIf=\"!hasValue\" (click)=\"openPanel()\" class=\"bhi-clock\"></i>\n        <i *ngIf=\"hasValue\" (click)=\"clearValue()\" class=\"bhi-times\"></i>\n\n        <novo-overlay-template [parent]=\"element\">\n            <novo-time-picker inline=\"true\" (onSelect)=\"setValue($event)\" [ngModel]=\"value\" [military]=\"military\"></novo-time-picker>\n        </novo-overlay-template>\n  "
            },] },
];
/**
 * @nocollapse
 */
NovoTimePickerInputElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
    { type: DateFormatService, },
    { type: core.ChangeDetectorRef, },
]; };
NovoTimePickerInputElement.propDecorators = {
    'name': [{ type: core.Input },],
    'placeholder': [{ type: core.Input },],
    'military': [{ type: core.Input },],
    'maskOptions': [{ type: core.Input },],
    'overlay': [{ type: core.ViewChild, args: [NovoOverlayTemplate,] },],
};
// NG2
// Vendor
// APP
var NovoTimePickerModule = /** @class */ (function () {
    function NovoTimePickerModule() {
    }
    return NovoTimePickerModule;
}());
NovoTimePickerModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule, angular2TextMask.TextMaskModule, NovoOverlayModule, NovoListModule],
                declarations: [NovoTimePickerElement, NovoTimePickerInputElement],
                exports: [NovoTimePickerElement, NovoTimePickerInputElement]
            },] },
];
/**
 * @nocollapse
 */
NovoTimePickerModule.ctorParameters = function () { return []; };
// NG2
// Vendor
// APP
// Value accessor for the component (supports ngModel)
var DATE_TIME_PICKER_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoDateTimePickerElement; }),
    multi: true
};
var NovoDateTimePickerElement = /** @class */ (function () {
    /**
     * @param {?} labels
     * @param {?} element
     */
    function NovoDateTimePickerElement(labels, element) {
        this.labels = labels;
        this.element = element;
        // Select callback for output
        this.onSelect = new core.EventEmitter(false);
        this.componentTabState = 'date';
        this.datePickerValue = new Date();
        this.timePickerValue = new Date();
        this._onChange = function () { };
        this._onTouched = function () { };
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.toggleView = function (tab) {
        this.componentTabState = tab;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.setDateLabels = function (value) {
        this.selectedLabel = this.labels.formatDateWithFormat(value, {
            month: 'short',
            day: '2-digit',
            year: 'numeric'
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.setTimeLabels = function (value) {
        var /** @type {?} */ hours = value.getHours();
        var /** @type {?} */ minutes = value.getMinutes();
        this.meridian = value.toLocaleTimeString().slice(-2);
        if (!this.military) {
            hours = this.meridian === 'PM' && hours > 12 ? hours - 12 : hours;
            // Special case for 12
            if (this.meridian === 'PM' && hours === 24) {
                hours = 12;
            }
            else if (this.meridian === 'AM' && hours === 0) {
                hours = 12;
            }
        }
        this.hours = hours.toString().length === 1 ? "0" + hours.toString() : hours.toString();
        this.minutes = minutes.toString().length === 1 ? "0" + minutes.toString() : minutes.toString();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.onDateSelected = function (event) {
        this.datePickerValue = event.date;
        this.model = this.createFullDateValue(this.datePickerValue, this.timePickerValue);
        this.setDateLabels(this.model);
        this.onSelect.emit({ date: this.model });
        this._onChange(this.model);
        this.toggleView('time');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.onTimeSelected = function (event) {
        this.timePickerValue = event.date;
        this.model = this.createFullDateValue(this.model, this.timePickerValue);
        this.setTimeLabels(this.model);
        this.onSelect.emit({ date: this.model });
        this._onChange(this.model);
    };
    /**
     * @param {?} datePickerValue
     * @param {?} timePickerValue
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.createFullDateValue = function (datePickerValue, timePickerValue) {
        return dateFns.setMilliseconds(dateFns.setSeconds(dateFns.setMinutes(dateFns.setHours(datePickerValue, dateFns.getHours(timePickerValue)), dateFns.getMinutes(timePickerValue)), dateFns.getSeconds(timePickerValue)), dateFns.getMilliseconds(timePickerValue));
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.writeValue = function (model) {
        this.model = model;
        if (Helpers.isEmpty(model)) {
            this.model = new Date();
        }
        else if (!isNaN(model)) {
            this.model = new Date(model);
        }
        this.datePickerValue = this.model;
        this.timePickerValue = this.model;
        if (Helpers.isDate(this.model)) {
            this.setDateLabels(this.model);
            this.setTimeLabels(this.model);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    return NovoDateTimePickerElement;
}());
NovoDateTimePickerElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-date-time-picker',
                providers: [DATE_TIME_PICKER_VALUE_ACCESSOR],
                animations: [
                    core.trigger('dateTextState', [
                        core.state('date', core.style({
                            'opacity': '1.0'
                        })),
                        core.state('time', core.style({
                            'opacity': '0.6'
                        })),
                        core.transition('date <=> time', core.animate('200ms ease-in'))
                    ]),
                    core.trigger('timeTextState', [
                        core.state('date', core.style({
                            'opacity': '0.6'
                        })),
                        core.state('time', core.style({
                            'opacity': '1.0'
                        })),
                        core.transition('date <=> time', core.animate('200ms ease-in'))
                    ]),
                    core.trigger('indicatorState', [
                        core.state('date', core.style({
                            'transform': 'translateX(0%)'
                        })),
                        core.state('time', core.style({
                            'transform': 'translateX(100%)'
                        })),
                        core.transition('date <=> time', core.animate('200ms ease-in'))
                    ]),
                    core.trigger('containerState', [
                        core.state('date', core.style({
                            'transform': 'translateX(0%)'
                        })),
                        core.state('time', core.style({
                            'transform': 'translateX(-100%)'
                        })),
                        core.transition('date <=> time', core.animate('200ms ease-in'))
                    ])
                ],
                template: "\n        <div class=\"date-time-container\">\n            <div class=\"date-time-tabs\">\n                <span class=\"date-tab\" (click)=\"toggleView('date')\" [@dateTextState]=\"componentTabState\" data-automation-id=\"novo-date-time-date-tab\">{{selectedLabel}}</span>\n                <span class=\"time-tab\" (click)=\"toggleView('time')\" [@timeTextState]=\"componentTabState\" data-automation-id=\"novo-date-time-time-tab\">\n                    <span class=\"hours\" data-automation-id=\"novo-time-picker-hours\">{{hours}}</span>:<span\n                    class=\"minutes\" data-automation-id=\"novo-time-picker-minutes\">{{minutes}}</span>\n                    <span *ngIf=\"!military\" class=\"meridian\">{{meridian}}</span>\n                </span>\n                <i class=\"date-time-indicator\" [@indicatorState]=\"componentTabState\"></i>\n            </div>\n            <div class=\"view-container\" [@containerState]=\"componentTabState\">\n                <div class=\"calendar\">\n                    <novo-date-picker (onSelect)=\"onDateSelected($event)\" [(ngModel)]=\"model\" inline=\"true\" [minYear]=\"minYear\" [maxYear]=\"maxYear\" [start]=\"start\" [end]=\"end\"></novo-date-picker>\n                </div>\n                <div class=\"time-picker\">\n                    <novo-time-picker (onSelect)=\"onTimeSelected($event)\" [(ngModel)]=\"model\" [military]=\"military\" inline=\"true\"></novo-time-picker>\n                </div>\n            </div>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoDateTimePickerElement.ctorParameters = function () { return [
    { type: NovoLabelService, },
    { type: core.ElementRef, },
]; };
NovoDateTimePickerElement.propDecorators = {
    'minYear': [{ type: core.Input },],
    'maxYear': [{ type: core.Input },],
    'start': [{ type: core.Input },],
    'end': [{ type: core.Input },],
    'military': [{ type: core.Input },],
    'onSelect': [{ type: core.Output },],
};
// NG
// Vendor
// Value accessor for the component (supports ngModel)
var DATE_VALUE_ACCESSOR$2 = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoDateTimePickerInputElement; }),
    multi: true,
};
var NovoDateTimePickerInputElement = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} _changeDetectorRef
     */
    function NovoDateTimePickerInputElement(element, labels, _changeDetectorRef) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * View -> model callback called when value changes
         */
        this._onChange = function () { };
        /**
         * View -> model callback called when autocomplete has been touched
         */
        this._onTouched = function () { };
        this.military = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.writeValue = function (value) {
        var _this = this;
        this.datePart = dateFns.isDate(value) ? dateFns.parse(value) : value;
        this.timePart = dateFns.isDate(value) ? dateFns.parse(value) : value;
        Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.updateDate = function (event) {
        this.datePart = event;
        this.checkParts();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.updateTime = function (event) {
        this.timePart = event;
        this.checkParts();
    };
    /**
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.checkParts = function () {
        try {
            if (this.datePart instanceof Date && this.timePart instanceof Date) {
                var /** @type {?} */ newDt = new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), this.timePart.getHours(), this.timePart.getMinutes());
                this.dispatchOnChange(newDt);
            }
            else {
                this.dispatchOnChange(null);
            }
        }
        catch (err) {
            // Date not valid
            this.dispatchOnChange(null);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?=} newValue
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.dispatchOnChange = function (newValue) {
        if (newValue !== this.value) {
            this._onChange(newValue);
            this._setTriggerValue(newValue);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype._setTriggerValue = function (value) {
        this.value = value;
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.setValue = function (event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.setValueAndClose = function (event) {
        this.setValue(event);
    };
    /**
     * Clear any previous selected option and emit a selection change event for this option
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.clearValue = function () {
        this.dispatchOnChange(null);
    };
    Object.defineProperty(NovoDateTimePickerInputElement.prototype, "hasValue", {
        /**
         * @return {?}
         */
        get: function () {
            return !Helpers.isEmpty(this.value);
        },
        enumerable: true,
        configurable: true
    });
    return NovoDateTimePickerInputElement;
}());
NovoDateTimePickerInputElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-date-time-picker-input',
                providers: [DATE_VALUE_ACCESSOR$2],
                template: "\n        <novo-date-picker-input [ngModel]=\"datePart\" (ngModelChange)=\"updateDate($event)\" [maskOptions]=\"maskOptions\"></novo-date-picker-input>\n        <novo-time-picker-input [ngModel]=\"timePart\" (ngModelChange)=\"updateTime($event)\" [military]=\"military\"></novo-time-picker-input>\n  ",
            },] },
];
/**
 * @nocollapse
 */
NovoDateTimePickerInputElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
    { type: core.ChangeDetectorRef, },
]; };
NovoDateTimePickerInputElement.propDecorators = {
    'name': [{ type: core.Input },],
    'placeholder': [{ type: core.Input },],
    'maskOptions': [{ type: core.Input },],
    'military': [{ type: core.Input },],
    'format': [{ type: core.Input },],
};
// NG2
// Vendor
// APP
var NovoDateTimePickerModule = /** @class */ (function () {
    function NovoDateTimePickerModule() {
    }
    return NovoDateTimePickerModule;
}());
NovoDateTimePickerModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule, NovoDatePickerModule, NovoTimePickerModule, angular2TextMask.TextMaskModule, NovoOverlayModule],
                declarations: [NovoDateTimePickerElement, NovoDateTimePickerInputElement],
                exports: [NovoDateTimePickerElement, NovoDateTimePickerInputElement]
            },] },
];
/**
 * @nocollapse
 */
NovoDateTimePickerModule.ctorParameters = function () { return []; };
// NG2
// Value accessor for the component (supports ngModel)
var CKEDITOR_CONTROL_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoCKEditorElement; }),
    multi: true
};
/**
 * CKEditor component
 * Usage :
 *  <novo-editor [(ngModel)]="data" [config]="{...}" debounce="500"></novo-editor>
 */
var NovoCKEditorElement = /** @class */ (function () {
    /**
     * @param {?} zone
     */
    function NovoCKEditorElement(zone) {
        this.zone = zone;
        this.startupFocus = false;
        this.change = new core.EventEmitter();
        this.ready = new core.EventEmitter();
        this.blur = new core.EventEmitter();
        this.focus = new core.EventEmitter();
        this.paste = new core.EventEmitter();
        this.loaded = new core.EventEmitter();
        this._value = '';
    }
    Object.defineProperty(NovoCKEditorElement.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this._value;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            if (v !== this._value) {
                this._value = v;
                this.onChange(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoCKEditorElement.prototype.ngOnDestroy = function () {
        var _this = this;
        if (this.instance) {
            this.instance.focusManager.blur(true); // Remove focus from editor
            setTimeout(function () {
                _this.instance.removeAllListeners();
                CKEDITOR.instances[_this.instance.name].destroy();
                _this.instance.destroy();
                _this.instance = null;
            });
        }
    };
    /**
     * @return {?}
     */
    NovoCKEditorElement.prototype.ngAfterViewInit = function () {
        var /** @type {?} */ config = this.config || this.getBaseConfig();
        if (this.startupFocus) {
            config.startupFocus = true;
        }
        this.ckeditorInit(config);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoCKEditorElement.prototype.updateValue = function (value) {
        var _this = this;
        this.zone.run(function () {
            _this.value = value;
            _this.onChange(value);
            _this.onTouched();
            _this.change.emit(value);
        });
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NovoCKEditorElement.prototype.ckeditorInit = function (config) {
        var _this = this;
        if (!CKEDITOR) {
            console.error('Make sure to include CKEditor sources in your dependencies!');
            return;
        }
        // CKEditor replace textarea
        this.instance = CKEDITOR.replace(this.host.nativeElement, config);
        // Set initial value
        this.instance.setData(this.value);
        // listen for instanceReady event
        this.instance.on('instanceReady', function (evt) {
            // send the evt to the EventEmitter
            _this.ready.emit(evt);
        });
        // CKEditor change event
        this.instance.on('change', function () {
            _this.onTouched();
            var /** @type {?} */ value = _this.instance.getData();
            // Debounce update
            if (_this.debounce) {
                if (_this.debounceTimeout) {
                    clearTimeout(_this.debounceTimeout);
                }
                _this.debounceTimeout = setTimeout(function () {
                    _this.updateValue(value);
                    _this.debounceTimeout = null;
                }, parseInt(_this.debounce));
            }
            else {
                _this.updateValue(value);
            }
        });
        this.instance.on('blur', function (event) {
            _this.blur.emit(event);
        });
        this.instance.on('focus', function (event) {
            _this.focus.emit(event);
        });
        this.instance.on('paste', function (event) {
            _this.paste.emit(event);
        });
        this.instance.on('loaded', function (event) {
            _this.loaded.emit(event);
        });
    };
    /**
     * @return {?}
     */
    NovoCKEditorElement.prototype.getBaseConfig = function () {
        var /** @type {?} */ baseConfig = {
            enterMode: CKEDITOR.ENTER_BR,
            shiftEnterMode: CKEDITOR.ENTER_P,
            disableNativeSpellChecker: false,
            removePlugins: 'liststyle,tabletools,contextmenu' // allows browser based spell checking
        };
        var /** @type {?} */ minimalConfig = {
            toolbar: [{
                    name: 'basicstyles',
                    items: ['Styles', 'FontSize', 'Bold', 'Italic', 'Underline', 'TextColor', '-', 'NumberedList', 'BulletedList', 'Outdent', 'Indent', 'Link']
                }]
        };
        var /** @type {?} */ extendedConfig = {
            toolbar: [
                { name: 'clipboard', items: ['Paste', 'PasteText', 'PasteFromWord', 'Undo', 'Redo'] },
                { name: 'paragraph', items: ['NumberedList', 'BulletedList', 'Outdent', 'Indent', 'Blockquote', 'CreateDiv', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', 'BidiLtr', 'BidiRtl'] },
                { name: 'links', items: ['Link'] },
                { name: 'insert', items: ['Image', 'Table', 'HorizontalRule'] },
                { name: 'tools', items: ['Maximize', 'Source'] },
                '/',
                { name: 'basicstyles', items: ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript'] },
                { name: 'styles', items: ['Styles', 'Format', 'Font', 'FontSize'] },
                { name: 'colors', items: ['TextColor', 'BGColor'] }
            ]
        };
        return Object.assign(baseConfig, this.minimal ? minimalConfig : extendedConfig);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoCKEditorElement.prototype.writeValue = function (value) {
        this._value = value;
        if (this.instance) {
            this.instance.setData(value);
        }
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    NovoCKEditorElement.prototype.onChange = function (value) {
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    NovoCKEditorElement.prototype.onTouched = function (event) {
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoCKEditorElement.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoCKEditorElement.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} text
     * @return {?}
     */
    NovoCKEditorElement.prototype.insertText = function (text) {
        var /** @type {?} */ trimmedText = text.trim();
        this.instance.insertText(trimmedText);
    };
    return NovoCKEditorElement;
}());
NovoCKEditorElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-editor',
                providers: [CKEDITOR_CONTROL_VALUE_ACCESSOR],
                template: '<textarea [name]="name" [id]="name" #host></textarea>'
            },] },
];
/**
 * @nocollapse
 */
NovoCKEditorElement.ctorParameters = function () { return [
    { type: core.NgZone, },
]; };
NovoCKEditorElement.propDecorators = {
    'config': [{ type: core.Input },],
    'debounce': [{ type: core.Input },],
    'name': [{ type: core.Input },],
    'minimal': [{ type: core.Input },],
    'startupFocus': [{ type: core.Input },],
    'change': [{ type: core.Output },],
    'ready': [{ type: core.Output },],
    'blur': [{ type: core.Output },],
    'focus': [{ type: core.Output },],
    'paste': [{ type: core.Output },],
    'loaded': [{ type: core.Output },],
    'host': [{ type: core.ViewChild, args: ['host',] },],
    'value': [{ type: core.Input },],
};
// NG2
// APP
var NovoNovoCKEditorModule = /** @class */ (function () {
    function NovoNovoCKEditorModule() {
    }
    return NovoNovoCKEditorModule;
}());
NovoNovoCKEditorModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule],
                declarations: [NovoCKEditorElement],
                exports: [NovoCKEditorElement]
            },] },
];
/**
 * @nocollapse
 */
NovoNovoCKEditorModule.ctorParameters = function () { return []; };
// NG2
// APP
var NovoTipWellElement = /** @class */ (function () {
    /**
     * @param {?} labels
     */
    function NovoTipWellElement(labels) {
        this.labels = labels;
        this.button = true;
        this.confirmed = new core.EventEmitter();
        this.isActive = true;
        this.isActive = true;
        // Check if localStorage is enabled
        this.isLocalStorageEnabled = (function () {
            var isEnabled = false;
            if (typeof localStorage === 'object') {
                try {
                    localStorage.setItem('lsTest', '1');
                    localStorage.removeItem('lsTest');
                    isEnabled = true;
                }
                catch (e) {
                    console.warn('This web browser does not support storing settings locally. In Safari, the most common cause of this is using "Private Browsing Mode". Some settings may not save or some features may not work properly for you.');
                }
            }
            return isEnabled;
        })();
    }
    /**
     * @return {?}
     */
    NovoTipWellElement.prototype.ngOnInit = function () {
        this.tip = this.tip || '';
        this.buttonText = this.buttonText || this.labels.okGotIt;
        this.button = typeof this.button === 'string' ? this.button === 'true' : this.button;
        this.icon = this.icon || null;
        // Set a (semi) unique name for the tip-well
        this.name = this.name || Math.round(Math.random() * 100);
        this.localStorageKey = "novo-tw_" + this.name;
        // Check localStorage for state
        if (this.isLocalStorageEnabled) {
            var /** @type {?} */ storedValue = JSON.parse(localStorage.getItem(this.localStorageKey));
            this.isActive = storedValue !== false;
        }
    };
    /**
     * \@name hideTip
     * @return {?}
     */
    NovoTipWellElement.prototype.hideTip = function () {
        if (this.isLocalStorageEnabled) {
            localStorage.setItem(this.localStorageKey, JSON.stringify(false));
        }
        this.isActive = false;
        this.confirmed.emit();
    };
    return NovoTipWellElement;
}());
NovoTipWellElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-tip-well',
                template: "\n        <div *ngIf=\"isActive\">\n            <div>\n                <i class=\"bhi-{{ icon }}\" *ngIf=\"icon\" [attr.data-automation-id]=\"'novo-tip-well-icon-' + name\"></i>\n                <p [attr.data-automation-id]=\"'novo-tip-well-tip-' + name\">{{ tip }}</p>\n            </div>\n            <button theme=\"dialogue\" (click)=\"hideTip()\" *ngIf=\"button\" [attr.data-automation-id]=\"'novo-tip-well-button-' + name\">{{ buttonText }}</button>\n        </div>\n    ",
                host: {
                    '[class.active]': 'isActive'
                }
            },] },
];
/**
 * @nocollapse
 */
NovoTipWellElement.ctorParameters = function () { return [
    { type: NovoLabelService, },
]; };
NovoTipWellElement.propDecorators = {
    'name': [{ type: core.Input },],
    'tip': [{ type: core.Input },],
    'buttonText': [{ type: core.Input },],
    'button': [{ type: core.Input },],
    'icon': [{ type: core.Input },],
    'confirmed': [{ type: core.Output },],
};
// NG2
// APP
var NovoTipWellModule = /** @class */ (function () {
    function NovoTipWellModule() {
    }
    return NovoTipWellModule;
}());
NovoTipWellModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, NovoButtonModule],
                declarations: [NovoTipWellElement],
                exports: [NovoTipWellElement]
            },] },
];
/**
 * @nocollapse
 */
NovoTipWellModule.ctorParameters = function () { return []; };
// NG2
// APP
var NovoFieldsetHeaderElement = /** @class */ (function () {
    function NovoFieldsetHeaderElement() {
    }
    return NovoFieldsetHeaderElement;
}());
NovoFieldsetHeaderElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-fieldset-header',
                template: "\n        <h6><i [class]=\"icon || 'bhi-section'\"></i>{{title}}</h6>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoFieldsetHeaderElement.ctorParameters = function () { return []; };
NovoFieldsetHeaderElement.propDecorators = {
    'title': [{ type: core.Input },],
    'icon': [{ type: core.Input },],
};
var NovoControlCustom = /** @class */ (function () {
    /**
     * @param {?} componentUtils
     */
    function NovoControlCustom(componentUtils) {
        this.componentUtils = componentUtils;
    }
    /**
     * @return {?}
     */
    NovoControlCustom.prototype.ngOnInit = function () {
        this.controlComponent = this.componentUtils.appendNextToLocation(this.control.customControl, this.referencePoint);
        this.controlComponent.instance.control = this.control;
        this.controlComponent.instance.form = this.form;
        if (this.control.customControlConfig) {
            this.controlComponent.instance.config = this.control.customControlConfig;
        }
    };
    return NovoControlCustom;
}());
NovoControlCustom.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-control-custom',
                template: "\n        <span #ref></span>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoControlCustom.ctorParameters = function () { return [
    { type: ComponentUtils, },
]; };
NovoControlCustom.propDecorators = {
    'control': [{ type: core.Input },],
    'form': [{ type: core.Input },],
    'referencePoint': [{ type: core.ViewChild, args: ['ref', { read: core.ViewContainerRef },] },],
};
var NovoFieldsetElement = /** @class */ (function () {
    function NovoFieldsetElement() {
        this.controls = [];
    }
    return NovoFieldsetElement;
}());
NovoFieldsetElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-fieldset',
                template: "\n        <div class=\"novo-fieldset-container\">\n            <novo-fieldset-header [icon]=\"icon\" [title]=\"title\" *ngIf=\"title\"></novo-fieldset-header>\n            <ng-container *ngFor=\"let control of controls;let controlIndex = index;\">\n                <div class=\"novo-form-row\" [class.disabled]=\"control.disabled\" *ngIf=\"control.__type !== 'GroupedControl'\">\n                    <novo-control *ngIf=\"!control.customControl\" [autoFocus]=\"autoFocus && index === 0 && controlIndex === 0\" [control]=\"control\" [form]=\"form\"></novo-control>\n                    <novo-control-custom *ngIf=\"control.customControl\" [control]=\"control\" [form]=\"form\"></novo-control-custom>\n                </div>\n                <div *ngIf=\"control.__type === 'GroupedControl'\">TODO - GroupedControl</div>\n            </ng-container>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoFieldsetElement.ctorParameters = function () { return []; };
NovoFieldsetElement.propDecorators = {
    'controls': [{ type: core.Input },],
    'form': [{ type: core.Input },],
    'title': [{ type: core.Input },],
    'icon': [{ type: core.Input },],
    'index': [{ type: core.Input },],
    'autoFocus': [{ type: core.Input },],
};
var NovoDynamicFormElement = /** @class */ (function () {
    /**
     * @param {?} element
     */
    function NovoDynamicFormElement(element) {
        this.element = element;
        this.controls = [];
        this.fieldsets = [];
        this.hideNonRequiredFields = true;
        this.autoFocusFirstField = false;
        this.allFieldsRequired = false;
        this.allFieldsNotRequired = false;
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.numControls = 0;
    }
    /**
     * @return {?}
     */
    NovoDynamicFormElement.prototype.ngOnInit = function () {
        this.ngOnChanges();
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoDynamicFormElement.prototype.ngOnChanges = function (changes) {
        var _this = this;
        this.form.layout = this.layout;
        if (!(this.fieldsets && this.fieldsets.length) && this.controls && this.controls.length) {
            this.fieldsets = [{
                    controls: this.controls
                }];
            this.numControls = this.controls.length;
        }
        else if (this.fieldsets) {
            this.fieldsets.forEach(function (fieldset) {
                _this.numControls = _this.numControls + fieldset.controls.length;
            });
        }
        var /** @type {?} */ requiredFields = [];
        var /** @type {?} */ nonRequiredFields = [];
        this.fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                if (control.required) {
                    requiredFields.push(control);
                }
                else {
                    nonRequiredFields.push(control);
                }
            });
        });
        this.allFieldsRequired = requiredFields.length === this.numControls;
        this.allFieldsNotRequired = nonRequiredFields.length === this.numControls;
        if (this.allFieldsNotRequired && this.hideNonRequiredFields) {
            this.fieldsets.forEach(function (fieldset) {
                fieldset.controls.forEach(function (control) {
                    _this.form.controls[control.key].hidden = false;
                });
            });
        }
        this.form.fieldsets = this.fieldsets.slice();
    };
    /**
     * @return {?}
     */
    NovoDynamicFormElement.prototype.showAllFields = function () {
        var _this = this;
        this.form.fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                _this.form.controls[control.key].hidden = false;
            });
        });
        this.showingAllFields = true;
        this.showingRequiredFields = false;
    };
    /**
     * @param {?} hideRequiredWithValue
     * @return {?}
     */
    NovoDynamicFormElement.prototype.showOnlyRequired = function (hideRequiredWithValue) {
        var _this = this;
        this.form.fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                // Hide any non-required fields
                if (!control.required) {
                    _this.form.controls[control.key].hidden = true;
                }
                // Hide required fields that have been successfully filled out
                if (hideRequiredWithValue && !Helpers.isBlank(_this.form.value[control.key])) {
                    _this.form.controls[control.key].hidden = true;
                }
                // Don't hide fields with errors
                if (_this.form.controls[control.key].errors) {
                    _this.form.controls[control.key].hidden = false;
                }
            });
        });
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.forceValidation();
    };
    Object.defineProperty(NovoDynamicFormElement.prototype, "values", {
        /**
         * @return {?}
         */
        get: function () {
            return this.form ? this.form.value : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDynamicFormElement.prototype, "isValid", {
        /**
         * @return {?}
         */
        get: function () {
            return this.form ? this.form.valid : false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoDynamicFormElement.prototype.updatedValues = function () {
        var _this = this;
        var /** @type {?} */ ret = null;
        this.form.fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                if (_this.form.controls[control.key].dirty || control.dirty) {
                    if (!ret) {
                        ret = {};
                    }
                    ret[control.key] = _this.form.value[control.key];
                }
            });
        });
        return ret;
    };
    /**
     * @return {?}
     */
    NovoDynamicFormElement.prototype.forceValidation = function () {
        var _this = this;
        Object.keys(this.form.controls).forEach(function (key) {
            var /** @type {?} */ control = _this.form.controls[key];
            if (control.required && Helpers.isBlank(_this.form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    };
    return NovoDynamicFormElement;
}());
NovoDynamicFormElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-dynamic-form',
                template: "\n        <div class=\"novo-form-container\">\n            <header>\n                <ng-content select=\"form-title\"></ng-content>\n                <ng-content select=\"form-subtitle\"></ng-content>\n            </header>\n            <form class=\"novo-form\" [formGroup]=\"form\">\n                <ng-container *ngFor=\"let fieldset of form.fieldsets;let i = index\">\n                    <novo-fieldset *ngIf=\"fieldset.controls.length\" [index]=\"i\" [autoFocus]=\"autoFocusFirstField\" [icon]=\"fieldset.icon\" [controls]=\"fieldset.controls\" [title]=\"fieldset.title\" [form]=\"form\"></novo-fieldset>\n                </ng-container>\n            </form>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoDynamicFormElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
]; };
NovoDynamicFormElement.propDecorators = {
    'controls': [{ type: core.Input },],
    'fieldsets': [{ type: core.Input },],
    'form': [{ type: core.Input },],
    'layout': [{ type: core.Input },],
    'hideNonRequiredFields': [{ type: core.Input },],
    'autoFocusFirstField': [{ type: core.Input },],
};
// NG2
var NovoFormElement = /** @class */ (function () {
    function NovoFormElement() {
        this.hideHeader = false;
        this.showingAllFields = false;
        this.showingRequiredFields = true;
    }
    /**
     * @return {?}
     */
    NovoFormElement.prototype.ngOnInit = function () {
        this.form.layout = this.layout;
    };
    Object.defineProperty(NovoFormElement.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this.form.getRawValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoFormElement.prototype, "isValid", {
        /**
         * @return {?}
         */
        get: function () {
            return this.form.valid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoFormElement.prototype.showAllFields = function () {
        var _this = this;
        Object.keys(this.form.controls).forEach(function (key) {
            _this.form.controls[key].hidden = false;
        });
        this.showingAllFields = true;
        this.showingRequiredFields = false;
    };
    /**
     * @param {?} hideRequiredWithValue
     * @return {?}
     */
    NovoFormElement.prototype.showOnlyRequired = function (hideRequiredWithValue) {
        var _this = this;
        Object.keys(this.form.controls).forEach(function (key) {
            // Hide any non-required fields
            if (!_this.form.controls[key].required) {
                _this.form.controls[key].hidden = true;
            }
            // Hide required fields that have been successfully filled out
            if (hideRequiredWithValue && !Helpers.isBlank(_this.form.value[key])) {
                _this.form.controls[key].hidden = true;
            }
            // Don't hide fields with errors
            if (_this.form.controls[key].errors) {
                _this.form.controls[key].hidden = false;
            }
        });
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.forceValidation();
    };
    /**
     * @return {?}
     */
    NovoFormElement.prototype.forceValidation = function () {
        var _this = this;
        Object.keys(this.form.controls).forEach(function (key) {
            var /** @type {?} */ control = _this.form.controls[key];
            if (control.required && Helpers.isBlank(_this.form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    };
    return NovoFormElement;
}());
NovoFormElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-form',
                template: "\n        <div class=\"novo-form-container\">\n            <header *ngIf=\"!hideHeader\">\n                <ng-content select=\"form-title\"></ng-content>\n                <ng-content select=\"form-subtitle\"></ng-content>\n            </header>\n            <form class=\"novo-form\" [formGroup]=\"form\">\n                <ng-content></ng-content>\n            </form>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoFormElement.ctorParameters = function () { return []; };
NovoFormElement.propDecorators = {
    'form': [{ type: core.Input },],
    'layout': [{ type: core.Input },],
    'hideHeader': [{ type: core.Input },],
};
// NG2
var NovoFormControl = /** @class */ (function (_super) {
    __extends(NovoFormControl, _super);
    /**
     * @param {?} value
     * @param {?} control
     */
    function NovoFormControl(value, control) {
        var _this = _super.call(this, value, control.validators, control.asyncValidators) || this;
        _this.displayValueChanges = new core.EventEmitter();
        _this.valueHistory = [];
        _this.validators = control.validators;
        _this.initialValue = value;
        _this.valueHistory.push(value);
        _this.key = control.key;
        _this.label = control.label;
        _this.readOnly = control.readOnly;
        _this.hidden = control.hidden;
        _this.encrypted = control.encrypted;
        _this.config = control.config;
        _this.type = control.type;
        _this.subType = control.subType;
        _this.required = control.required;
        _this.hasRequiredValidator = _this.required;
        _this.tooltip = control.tooltip;
        _this.tooltipPosition = control.tooltipPosition;
        _this.label = control.label;
        _this.name = control.name;
        _this.required = control.required;
        _this.sortOrder = control.sortOrder;
        _this.controlType = control.controlType;
        _this.placeholder = control.placeholder;
        _this.multiple = control.multiple;
        _this.headerConfig = control.headerConfig;
        _this.optionsType = control.optionsType;
        _this.readOnly = control.readOnly;
        _this.layoutOptions = control.layoutOptions;
        _this.military = control.military;
        _this.maxlength = control.maxlength;
        _this.minlength = control.minlength;
        _this.closeOnSelect = control.closeOnSelect;
        _this.interactions = control.interactions;
        _this.appendToBody = control.appendToBody;
        _this.parentScrollSelector = control.parentScrollSelector;
        _this.description = control.description;
        _this.options = control.options;
        _this.tipWell = control.tipWell;
        // Reactive Form, need to enable/disable, can't bind to [disabled]
        if (_this.readOnly) {
            _this.disable();
        }
        else {
            _this.enable();
        }
        return _this;
    }
    /**
     * \@name hide
     * @param {?=} clearValue - flag to reset the control's value
     * @return {?}
     */
    NovoFormControl.prototype.hide = function (clearValue) {
        if (clearValue === void 0) { clearValue = true; }
        this.hidden = true;
        if (clearValue) {
            this.setValue(null);
        }
    };
    /**
     * \@name show
     * @return {?}
     */
    NovoFormControl.prototype.show = function () {
        this.hidden = false;
    };
    /**
     * \@name setRequired
     * @param {?} isRequired
     * @return {?}
     */
    NovoFormControl.prototype.setRequired = function (isRequired) {
        this.required = isRequired;
        // Update validators to have the required
        if (this.required && !this.hasRequiredValidator) {
            var /** @type {?} */ validators = this.validators.slice();
            validators.push(forms.Validators.required);
            // TODO: duplicated below
            this.setValidators(validators);
            this.updateValueAndValidity();
            this.hasRequiredValidator = this.required;
        }
        else if (!this.required && this.hasRequiredValidator) {
            var /** @type {?} */ validators = this.validators.slice();
            validators = validators.filter(function (val) { return val !== forms.Validators.required; });
            // TODO: duplicated above
            this.setValidators(validators);
            this.updateValueAndValidity();
            this.hasRequiredValidator = this.required;
        }
    };
    /**
     * \@name setValue
     *
     * @param {?} value
     * @param {?=} __1
     * @return {?}
     */
    NovoFormControl.prototype.setValue = function (value, _d) {
        var _this = this;
        var _e = _d === void 0 ? {} : _d, onlySelf = _e.onlySelf, emitEvent = _e.emitEvent, emitModelToViewChange = _e.emitModelToViewChange, emitViewToModelChange = _e.emitViewToModelChange;
        this.markAsDirty();
        this.markAsTouched();
        this.displayValueChanges.emit(value);
        _super.prototype.setValue.call(this, value, { onlySelf: onlySelf, emitEvent: emitEvent, emitModelToViewChange: emitModelToViewChange, emitViewToModelChange: emitViewToModelChange });
        // History
        clearTimeout(this.historyTimeout);
        this.historyTimeout = setTimeout(function () {
            _this.valueHistory.push(value);
        }, 300);
    };
    /**
     * \@name setReadOnly
     * @param {?} isReadOnly
     * @return {?}
     */
    NovoFormControl.prototype.setReadOnly = function (isReadOnly) {
        this.readOnly = isReadOnly;
        if (this.readOnly) {
            this.disable();
        }
        else {
            this.enable();
        }
    };
    /**
     * \@name markAsInvalid
     * @param {?} message
     * @return {?}
     */
    NovoFormControl.prototype.markAsInvalid = function (message) {
        this.markAsDirty();
        this.markAsTouched();
        this.setErrors(Object.assign({}, this.errors, { custom: message }));
    };
    return NovoFormControl;
}(forms.FormControl));
var NovoFormGroup = /** @class */ (function (_super) {
    __extends(NovoFormGroup, _super);
    function NovoFormGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NovoFormGroup.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this.getRawValue();
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._value = v;
        },
        enumerable: true,
        configurable: true
    });
    return NovoFormGroup;
}(forms.FormGroup));
// NG2
// APP
var BaseControl = /** @class */ (function () {
    /**
     * @param {?=} type
     * @param {?=} config
     */
    function BaseControl(type, config) {
        if (type === void 0) { type = 'BaseControl'; }
        if (config === void 0) { config = {}; }
        this.__type = 'BaseControl';
        this.__type = type;
        this.__config = config;
        this.validators = config.validators || [];
        this.asyncValidators = config.asyncValidators || [];
        this.value = config.value;
        this.key = config.key || '';
        this.label = config.label || '';
        this.checkboxLabel = config.checkboxLabel;
        this.name = config.name || '';
        this.required = !!config.required;
        this.hidden = !!config.hidden;
        this.encrypted = !!config.encrypted;
        this.sortOrder = config.sortOrder === undefined ? 1 : config.sortOrder;
        this.controlType = config.controlType || '';
        this.placeholder = config.placeholder || '';
        this.config = config.config || null;
        this.dirty = !!config.value;
        this.multiple = !!config.multiple;
        this.headerConfig = config.headerConfig || null;
        this.currencyFormat = config.currencyFormat || null;
        this.associatedEntity = config.associatedEntity || null;
        this.optionsType = config.optionsType || null;
        this.options = config.options || [];
        this.forceClear = new core.EventEmitter();
        this.readOnly = !!config.readOnly || !!config.disabled;
        this.disabled = !!config.disabled;
        this.layoutOptions = config.layoutOptions || {};
        this.military = !!config.military;
        if (this.required) {
            this.validators.push(forms.Validators.required);
        }
        if (!Helpers.isBlank(config.maxlength)) {
            this.maxlength = config.maxlength;
            this.validators.push(forms.Validators.maxLength(this.maxlength));
        }
        if (!Helpers.isBlank(config.minlength)) {
            this.minlength = config.minlength;
            this.validators.push(forms.Validators.minLength(this.minlength));
        }
        this.closeOnSelect = !!config.closeOnSelect;
        this.interactions = config.interactions;
        this.dataSpecialization = config.dataSpecialization;
        this.appendToBody = !!config.appendToBody;
        this.parentScrollSelector = config.parentScrollSelector;
        this.description = config.description;
        if (config.tooltip) {
            this.tooltip = config.tooltip;
            this.tooltipPosition = config.tooltipPosition;
        }
        this.customControl = config.customControl;
        this.customControlConfig = config.customControlConfig;
        this.tipWell = config.tipWell;
        this.width = config.width;
        this.startupFocus = !!config.startupFocus;
    }
    return BaseControl;
}());
var MAX_INTEGER = 2147483647;
var MIN_YEAR = 1753;
var FormValidators = /** @class */ (function () {
    function FormValidators() {
    }
    /**
     * @param {?} control
     * @return {?}
     */
    FormValidators.maxInteger = function (control) {
        return control.value < MAX_INTEGER ? null : { 'integerTooLarge': true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    FormValidators.minYear = function (control) {
        if (!control.value) {
            return null;
        }
        return control.value >= MIN_YEAR ? null : { 'minYear': true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    FormValidators.maxDouble = function (control) {
        return control.value < Number.MAX_SAFE_INTEGER ? null : { 'doubleTooLarge': true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    FormValidators.isEmail = function (control) {
        var /** @type {?} */ EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
        return !control.value || EMAIL_REGEXP.test(control.value) ? null : { 'invalidEmail': true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    FormValidators.isValidAddress = function (control) {
        if (control.value && control.dirty) {
            var /** @type {?} */ valid = true;
            // Address
            if ((!control.value.address1 || control.value.address1.length === 0) &&
                (!control.value.city || control.value.city.length === 0) &&
                (!control.value.state || control.value.state.length === 0) &&
                (!control.value.address2 || control.value.address2.length === 0) &&
                (!control.value.zip || control.value.zip.length === 0) &&
                (!control.value.countryName || control.value.countryName.length === 0)) {
                valid = false;
            }
            return valid ? null : { 'invalidAddress': true };
        }
        return null;
    };
    return FormValidators;
}());
// APP
var AddressControl = /** @class */ (function (_super) {
    __extends(AddressControl, _super);
    /**
     * @param {?} config
     */
    function AddressControl(config) {
        var _this = _super.call(this, 'AddressControl', config) || this;
        _this.controlType = 'address';
        _this.validators.push(FormValidators.isValidAddress);
        return _this;
    }
    return AddressControl;
}(BaseControl));
// APP
var CheckListControl = /** @class */ (function (_super) {
    __extends(CheckListControl, _super);
    /**
     * @param {?} config
     */
    function CheckListControl(config) {
        var _this = _super.call(this, 'CheckListControl', config) || this;
        _this.controlType = 'checklist';
        _this.options = config.options || [];
        return _this;
    }
    return CheckListControl;
}(BaseControl));
// APP
var CheckboxControl = /** @class */ (function (_super) {
    __extends(CheckboxControl, _super);
    /**
     * @param {?} config
     */
    function CheckboxControl(config) {
        var _this = _super.call(this, 'CheckboxControl', config) || this;
        _this.controlType = 'checkbox';
        return _this;
    }
    return CheckboxControl;
}(BaseControl));
// APP
var DateControl = /** @class */ (function (_super) {
    __extends(DateControl, _super);
    /**
     * @param {?} config
     */
    function DateControl(config) {
        var _this = _super.call(this, 'DateControl', config) || this;
        _this.controlType = 'date';
        return _this;
    }
    return DateControl;
}(BaseControl));
// APP
var DateTimeControl = /** @class */ (function (_super) {
    __extends(DateTimeControl, _super);
    /**
     * @param {?} config
     */
    function DateTimeControl(config) {
        var _this = _super.call(this, 'DateTimeControl', config) || this;
        _this.controlType = 'date-time';
        return _this;
    }
    return DateTimeControl;
}(BaseControl));
// APP
var EditorControl = /** @class */ (function (_super) {
    __extends(EditorControl, _super);
    /**
     * @param {?} config
     */
    function EditorControl(config) {
        var _this = _super.call(this, 'EditorControl', config) || this;
        _this.controlType = 'editor';
        _this.minimal = false;
        return _this;
    }
    return EditorControl;
}(BaseControl));
// APP
var AceEditorControl = /** @class */ (function (_super) {
    __extends(AceEditorControl, _super);
    /**
     * @param {?} config
     */
    function AceEditorControl(config) {
        var _this = _super.call(this, 'AceEditorControl', config) || this;
        _this.controlType = 'ace-editor';
        return _this;
    }
    return AceEditorControl;
}(BaseControl));
// APP
var FileControl = /** @class */ (function (_super) {
    __extends(FileControl, _super);
    /**
     * @param {?} config
     */
    function FileControl(config) {
        var _this = _super.call(this, 'FileControl', config) || this;
        _this.controlType = 'file';
        // TODO - translate
        _this.placeholder = config.placeholder;
        _this.multiple = config.multiple;
        return _this;
    }
    return FileControl;
}(BaseControl));
// APP
var NativeSelectControl = /** @class */ (function (_super) {
    __extends(NativeSelectControl, _super);
    /**
     * @param {?} config
     */
    function NativeSelectControl(config) {
        var _this = _super.call(this, 'NativeSelectControl', config) || this;
        _this.controlType = 'native-select';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return NativeSelectControl;
}(BaseControl));
// APP
var PickerControl = /** @class */ (function (_super) {
    __extends(PickerControl, _super);
    /**
     * @param {?} config
     */
    function PickerControl(config) {
        var _this = _super.call(this, 'PickerControl', config) || this;
        _this.controlType = 'picker';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return PickerControl;
}(BaseControl));
var TablePickerControl = /** @class */ (function (_super) {
    __extends(TablePickerControl, _super);
    /**
     * @param {?} config
     */
    function TablePickerControl(config) {
        var _this = _super.call(this, Object.assign(config, { appendToBody: true, parentScrollSelector: '.table-container' })) || this;
        _this.__type = 'TablePickerControl';
        return _this;
    }
    return TablePickerControl;
}(PickerControl));
var AppendToBodyPickerControl = /** @class */ (function (_super) {
    __extends(AppendToBodyPickerControl, _super);
    /**
     * @param {?} config
     */
    function AppendToBodyPickerControl(config) {
        var _this = _super.call(this, Object.assign(config, { appendToBody: true, parentScrollSelector: '.table-container' })) || this;
        _this.__type = 'AppendToBodyPickerControl';
        return _this;
    }
    return AppendToBodyPickerControl;
}(PickerControl));
// APP
var QuickNoteControl = /** @class */ (function (_super) {
    __extends(QuickNoteControl, _super);
    /**
     * @param {?} config
     */
    function QuickNoteControl(config) {
        var _this = _super.call(this, 'QuickNoteControl', config) || this;
        _this.controlType = 'quick-note';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return QuickNoteControl;
}(BaseControl));
// APP
var RadioControl = /** @class */ (function (_super) {
    __extends(RadioControl, _super);
    /**
     * @param {?} config
     */
    function RadioControl(config) {
        var _this = _super.call(this, 'RadioControl', config) || this;
        _this.controlType = 'radio';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return RadioControl;
}(BaseControl));
// APP
var ReadOnlyControl = /** @class */ (function (_super) {
    __extends(ReadOnlyControl, _super);
    /**
     * @param {?} config
     */
    function ReadOnlyControl(config) {
        var _this = _super.call(this, 'ReadOnlyControl', config) || this;
        _this.controlType = 'read-only';
        config.readOnly = true;
        return _this;
    }
    return ReadOnlyControl;
}(BaseControl));
// APP
var SelectControl = /** @class */ (function (_super) {
    __extends(SelectControl, _super);
    /**
     * @param {?} config
     */
    function SelectControl(config) {
        var _this = _super.call(this, 'SelectControl', config) || this;
        _this.controlType = 'select';
        _this.options = [];
        _this.options = config.options || [];
        _this.placeholder = config.placeholder || '';
        return _this;
    }
    return SelectControl;
}(BaseControl));
// APP
var TextAreaControl = /** @class */ (function (_super) {
    __extends(TextAreaControl, _super);
    /**
     * @param {?} config
     */
    function TextAreaControl(config) {
        var _this = _super.call(this, 'TextAreaControl', config) || this;
        _this.controlType = 'text-area';
        return _this;
    }
    return TextAreaControl;
}(BaseControl));
// APP
var TextBoxControl = /** @class */ (function (_super) {
    __extends(TextBoxControl, _super);
    /**
     * @param {?} config
     */
    function TextBoxControl(config) {
        var _this = _super.call(this, 'TextBoxControl', config) || this;
        _this.controlType = 'textbox';
        _this.type = _this.getTextboxType(config.type) || '';
        _this.subType = config.type || '';
        _this.setValidators(_this.subType);
        return _this;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    TextBoxControl.prototype.setValidators = function (type) {
        switch (type) {
            case 'email':
                this.validators.push(FormValidators.isEmail);
                break;
            case 'number':
            case 'currency':
                this.validators.push(FormValidators.maxInteger);
                break;
            case 'float':
            case 'percentage':
                this.validators.push(FormValidators.maxDouble);
                break;
            case 'year':
                this.validators.push(FormValidators.minYear);
                break;
            default:
                break;
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    TextBoxControl.prototype.getTextboxType = function (type) {
        switch (type) {
            case 'percentage':
            case 'currency':
            case 'float':
            case 'year':
                return 'number';
            default:
                return type;
        }
    };
    return TextBoxControl;
}(BaseControl));
// APP
var TilesControl = /** @class */ (function (_super) {
    __extends(TilesControl, _super);
    /**
     * @param {?} config
     */
    function TilesControl(config) {
        var _this = _super.call(this, 'TilesControl', config) || this;
        _this.controlType = 'tiles';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return TilesControl;
}(BaseControl));
// APP
var TimeControl = /** @class */ (function (_super) {
    __extends(TimeControl, _super);
    /**
     * @param {?} config
     */
    function TimeControl(config) {
        var _this = _super.call(this, 'TimeControl', config) || this;
        _this.controlType = 'time';
        return _this;
    }
    return TimeControl;
}(BaseControl));
// APP
var GroupedControl = /** @class */ (function () {
    /**
     * @param {?} config
     */
    function GroupedControl(config) {
        var _this = this;
        this.__type = 'GroupedControl';
        Object.keys(config).forEach(function (key) { return _this[key] = config[key]; });
    }
    return GroupedControl;
}());
var ControlFactory = /** @class */ (function () {
    function ControlFactory() {
    }
    /**
     * @param {?} type
     * @param {?} config
     * @return {?}
     */
    ControlFactory.create = function (type, config) {
        switch (type) {
            case 'AddressControl':
                return new AddressControl(config);
            case 'CheckboxControl':
                return new CheckboxControl(config);
            case 'CheckListControl':
                return new CheckListControl(config);
            case 'CheckListControl':
                return new CheckListControl(config);
            case 'DateTimeControl':
                return new DateTimeControl(config);
            case 'EditorControl':
                return new EditorControl(config);
            case 'FileControl':
                return new FileControl(config);
            case 'NativeSelectControl':
                return new NativeSelectControl(config);
            case 'PickerControl':
                return new PickerControl(config);
            case 'AppendToBodyPickerControl':
                return new AppendToBodyPickerControl(config);
            case 'TablePickerControl':
                return new TablePickerControl(config);
            case 'QuickNoteControl':
                return new QuickNoteControl(config);
            case 'RadioControl':
                return new RadioControl(config);
            case 'ReadOnlyControl':
                return new ReadOnlyControl(config);
            case 'TextAreaControl':
                return new TextAreaControl(config);
            case 'TextBoxControl':
                return new TextBoxControl(config);
            case 'SelectControl':
                return new SelectControl(config);
            case 'TilesControl':
                return new TilesControl(config);
            case 'TimeControl':
                return new TimeControl(config);
            default:
                console.warn('[ControlFactory] - unable to find control for type. Make sure to set "editorType" and "editorConfig" on your column', type);
                return null;
        }
    };
    return ControlFactory;
}());
// NG2
var OptionsService = /** @class */ (function () {
    function OptionsService() {
    }
    /**
     * @param {?} http
     * @param {?} field
     * @param {?} config
     * @return {?}
     */
    OptionsService.prototype.getOptionsConfig = function (http$$1, field, config) {
        return {
            field: 'value',
            format: '$label',
            options: function (query) {
                return new Promise(function (resolve, reject) {
                    if (query && query.length) {
                        http$$1.get(field.optionsUrl + "?filter=" + (query || ''))
                            .subscribe(resolve, reject);
                    }
                    else {
                        resolve([]);
                    }
                });
            },
        };
    };
    return OptionsService;
}());
OptionsService.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
OptionsService.ctorParameters = function () { return []; };
// NG2
// Vendor
// APP
var FormUtils = /** @class */ (function () {
    /**
     * @param {?} labels
     * @param {?} optionsService
     */
    function FormUtils(labels, optionsService) {
        this.labels = labels;
        this.optionsService = optionsService;
        this.ASSOCIATED_ENTITY_LIST = ['Candidate', 'ClientContact', 'ClientCorporation', 'Lead', 'Opportunity', 'JobOrder', 'CorporateUser', 'Person', 'Placement'];
        this.PICKER_TEST_LIST = ['CandidateText', 'ClientText', 'ClientContactText', 'ClientCorporationText', 'LeadText', 'OpportunityText', 'JobOrderText', 'CorporateUserText', 'PersonText'];
    }
    /**
     * @param {?} controls
     * @return {?}
     */
    FormUtils.prototype.toFormGroup = function (controls) {
        var /** @type {?} */ group = {};
        controls.forEach(function (control) {
            var /** @type {?} */ value = Helpers.isBlank(control.value) ? '' : control.value;
            group[control.key] = new NovoFormControl(value, control);
        });
        return new NovoFormGroup(group);
    };
    /**
     * @return {?}
     */
    FormUtils.prototype.emptyFormGroup = function () {
        return new NovoFormGroup({});
    };
    /**
     * @param {?} formGroup
     * @param {?} controls
     * @return {?}
     */
    FormUtils.prototype.addControls = function (formGroup, controls) {
        controls.forEach(function (control) {
            var /** @type {?} */ value = Helpers.isBlank(control.value) ? '' : control.value;
            var /** @type {?} */ formControl = new NovoFormControl(value, control);
            formGroup.addControl(control.key, formControl);
        });
    };
    /**
     * \@name toFormGroupFromFieldset
     * @param {?} fieldsets
     * @return {?}
     */
    FormUtils.prototype.toFormGroupFromFieldset = function (fieldsets) {
        var /** @type {?} */ controls = [];
        fieldsets.forEach(function (fieldset) {
            controls.push.apply(controls, fieldset.controls);
        });
        return this.toFormGroup(controls);
    };
    /**
     * \@name determineInputType
     * @param {?} field
     * @return {?}
     */
    FormUtils.prototype.determineInputType = function (field) {
        var /** @type {?} */ type;
        var /** @type {?} */ dataSpecializationTypeMap = {
            'DATETIME': 'datetime',
            'TIME': 'time',
            'MONEY': 'currency',
            'PERCENTAGE': 'percentage',
            'HTML': 'editor',
            'HTML-MINIMAL': 'editor-minimal',
            'YEAR': 'year',
        };
        var /** @type {?} */ dataTypeToTypeMap = {
            'Timestamp': 'date',
            'Boolean': 'tiles',
        };
        var /** @type {?} */ inputTypeToTypeMap = {
            'CHECKBOX': 'radio',
            'RADIO': 'radio',
            'SELECT': 'select',
            'TILES': 'tiles',
        };
        var /** @type {?} */ inputTypeMultiToTypeMap = {
            'CHECKBOX': 'checklist',
            'RADIO': 'checklist',
            'SELECT': 'chips',
        };
        var /** @type {?} */ typeToTypeMap = {
            'file': 'file',
            'COMPOSITE': 'address'
        };
        var /** @type {?} */ numberDataTypeToTypeMap = {
            'Double': 'float',
            'BigDecimal': 'float',
            'Integer': 'number'
        };
        if (field.type === 'TO_MANY') {
            if (field.associatedEntity && ~this.ASSOCIATED_ENTITY_LIST.indexOf(field.associatedEntity.entity)) {
                type = 'entitychips'; // TODO!
            }
            else {
                type = 'chips';
            }
        }
        else if (field.type === 'TO_ONE') {
            if (field.associatedEntity && ~this.ASSOCIATED_ENTITY_LIST.indexOf(field.associatedEntity.entity)) {
                type = 'entitypicker'; // TODO!
            }
            else {
                type = 'picker';
            }
        }
        else if (field.optionsUrl && field.inputType === 'SELECT') {
            if (field.optionsType && ~this.PICKER_TEST_LIST.indexOf(field.optionsType)) {
                type = 'entitypicker'; // TODO!
            }
            else {
                type = 'picker';
            }
        }
        else if (Object.keys(dataSpecializationTypeMap).indexOf(field.dataSpecialization) > -1) {
            type = dataSpecializationTypeMap[field.dataSpecialization];
        }
        else if (Object.keys(dataTypeToTypeMap).indexOf(field.dataType) > -1) {
            type = dataTypeToTypeMap[field.dataType];
        }
        else if (field.inputType === 'TEXTAREA') {
            type = 'textarea';
        }
        else if (field.options && Object.keys(inputTypeToTypeMap).indexOf(field.inputType) > -1 && !field.multiValue) {
            type = inputTypeToTypeMap[field.inputType];
        }
        else if (field.options && Object.keys(inputTypeMultiToTypeMap).indexOf(field.inputType) > -1 && field.multiValue) {
            type = inputTypeMultiToTypeMap[field.inputType];
        }
        else if (Object.keys(typeToTypeMap).indexOf(field.type) > -1) {
            type = typeToTypeMap[field.type];
        }
        else if (Object.keys(numberDataTypeToTypeMap).indexOf(field.dataType) > -1) {
            type = numberDataTypeToTypeMap[field.dataType];
        } /* else {
            throw new Error('FormUtils: This field type is unsupported.');
        }*/
        return type;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FormUtils.prototype.isFieldEncrypted = function (key) {
        return key.indexOf('customEncrypted') > -1;
    };
    /**
     * @param {?} field
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @param {?=} forTable
     * @return {?}
     */
    FormUtils.prototype.getControlForField = function (field, http$$1, config, overrides, forTable) {
        if (forTable === void 0) { forTable = false; }
        // TODO: if field.type overrides `determineInputType` we should use it in that method or use this method
        // TODO: (cont.) as the setter of the field argument
        var /** @type {?} */ type = this.determineInputType(field) || field.type;
        var /** @type {?} */ control;
        var /** @type {?} */ controlConfig = {
            type: type,
            key: field.name,
            label: field.label,
            placeholder: field.hint || '',
            required: field.required,
            hidden: !field.required,
            encrypted: this.isFieldEncrypted(field.name ? field.name.toString() : ''),
            value: field.value || field.defaultValue,
            sortOrder: field.sortOrder,
            associatedEntity: field.associatedEntity,
            optionsType: field.optionsType,
            multiple: field.multiValue,
            readOnly: !!field.disabled || !!field.readOnly,
            maxlength: field.maxLength,
            interactions: field.interactions,
            dataSpecialization: field.dataSpecialization,
            description: field.description || '',
            tooltip: field.tooltip,
            tooltipPosition: field.tooltipPosition,
            customControl: field.customControl,
            customControlConfig: field.customControlConfig
        };
        // TODO: getControlOptions should always return the correct format
        var /** @type {?} */ optionsConfig = this.getControlOptions(field, http$$1, config);
        if (Array.isArray(optionsConfig) && !(type === 'chips' || type === 'picker')) {
            controlConfig.options = optionsConfig;
        }
        else if (Array.isArray(optionsConfig) && (type === 'chips' || type === 'picker')) {
            controlConfig.config = {
                options: optionsConfig
            };
        }
        else if (optionsConfig) {
            controlConfig.config = optionsConfig;
        }
        if (type === 'year') {
            controlConfig.maxlength = 4;
        }
        // TODO: Overrides should be an iterable of all properties (potentially a private method)
        var /** @type {?} */ overrideResultsTemplate;
        var /** @type {?} */ overridePreviewTemplate;
        if (overrides && overrides[field.name]) {
            if (overrides[field.name].resultsTemplate) {
                overrideResultsTemplate = overrides[field.name].resultsTemplate;
                controlConfig.config.resultsTemplate = overrideResultsTemplate;
                delete overrides[field.name].resultsTemplate;
            }
            if (overrides[field.name].overridePreviewTemplate) {
                overrideResultsTemplate = overrides[field.name].overridePreviewTemplate;
                controlConfig.config.overridePreviewTemplate = overrideResultsTemplate;
                delete overrides[field.name].overridePreviewTemplate;
            }
            if (overrides[field.name].pickerCallback) {
                controlConfig.config.callback = overrides[field.name].pickerCallback;
            }
            Object.assign(controlConfig, overrides[field.name]);
        }
        switch (type) {
            case 'entitychips':
                // TODO: This doesn't belong in this codebase
                controlConfig.multiple = true;
                controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                controlConfig.config.previewTemplate = overridePreviewTemplate || EntityPickerResult;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'chips':
                controlConfig.multiple = true;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'entitypicker':
                // TODO: This doesn't belong in this codebase
                controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'picker':
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'datetime':
                controlConfig.military = config ? !!config.military : false;
                control = new DateTimeControl(controlConfig);
                break;
            case 'date':
                controlConfig.military = config ? !!config.military : false;
                control = new DateControl(controlConfig);
                break;
            case 'time':
                controlConfig.military = config ? !!config.military : false;
                control = new TimeControl(controlConfig);
                break;
            case 'currency':
            case 'money':
            case 'email':
            case 'percentage':
            case 'float':
            case 'number':
            case 'year':
                // TODO: Only types from `determineInputType` should be used in this class
                if (type === 'money') {
                    type = 'currency';
                }
                controlConfig.type = type;
                control = new TextBoxControl(controlConfig);
                break;
            case 'text':
                control = new TextBoxControl(controlConfig);
                break;
            case 'textarea':
                control = new TextAreaControl(controlConfig);
                break;
            case 'editor':
                control = new EditorControl(controlConfig);
                break;
            case 'editor-minimal':
                control = new EditorControl(controlConfig);
                control.minimal = true;
                break;
            case 'tiles':
                control = new TilesControl(controlConfig);
                break;
            case 'checkbox':
                control = new CheckboxControl(controlConfig);
                break;
            case 'checklist':
                control = new CheckListControl(controlConfig);
                break;
            case 'radio':
                control = new RadioControl(controlConfig);
                break;
            case 'select':
                control = new SelectControl(controlConfig);
                break;
            case 'address':
                if (field.fields && field.fields.length) {
                    for (var _d = 0, _e = field.fields; _d < _e.length; _d++) {
                        var subfield = _e[_d];
                        if (subfield.defaultValue) {
                            if (Helpers.isBlank(controlConfig.value)) {
                                controlConfig.value = {};
                            }
                            controlConfig.value[subfield.name] = subfield.defaultValue;
                        }
                        else if (subfield.name === 'countryID') {
                            if (Helpers.isBlank(controlConfig.value)) {
                                controlConfig.value = {};
                            }
                            controlConfig.value[subfield.name] = 1;
                        }
                    }
                }
                control = new AddressControl(controlConfig);
                break;
            case 'file':
                control = new FileControl(controlConfig);
                break;
            default:
                control = new TextBoxControl(controlConfig);
                break;
        }
        return control;
    };
    /**
     * @param {?} meta
     * @param {?} currencyFormat
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @param {?=} forTable
     * @return {?}
     */
    FormUtils.prototype.toControls = function (meta, currencyFormat, http$$1, config, overrides, forTable) {
        var _this = this;
        if (forTable === void 0) { forTable = false; }
        var /** @type {?} */ controls = [];
        if (meta && meta.fields) {
            var /** @type {?} */ fields = meta.fields;
            fields.forEach(function (field) {
                if (field.name !== 'id' && (field.dataSpecialization !== 'SYSTEM' || ['address', 'billingAddress', 'secondaryAddress'].indexOf(field.name) !== -1) && !field.readOnly) {
                    var /** @type {?} */ control = _this.getControlForField(field, http$$1, config, overrides, forTable);
                    // Set currency format
                    if (control.subType === 'currency') {
                        control.currencyFormat = currencyFormat;
                    }
                    // Add to controls
                    controls.push(control);
                }
            });
        }
        return controls;
    };
    /**
     * @param {?} meta
     * @param {?} currencyFormat
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @return {?}
     */
    FormUtils.prototype.toTableControls = function (meta, currencyFormat, http$$1, config, overrides) {
        var /** @type {?} */ controls = this.toControls(meta, currencyFormat, http$$1, config, overrides, true);
        var /** @type {?} */ ret = {};
        controls.forEach(function (control) {
            ret[control.key] = {
                editorType: control.__type,
                editorConfig: control.__config
            };
        });
        return ret;
    };
    /**
     * @param {?} meta
     * @param {?} currencyFormat
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @return {?}
     */
    FormUtils.prototype.toFieldSets = function (meta, currencyFormat, http$$1, config, overrides) {
        var _this = this;
        var /** @type {?} */ fieldsets = [];
        var /** @type {?} */ ranges = [];
        if (meta && meta.fields) {
            var /** @type {?} */ fields = meta.fields.map(function (field) {
                if (!field.hasOwnProperty('sortOrder')) {
                    field.sortOrder = Number.MAX_SAFE_INTEGER - 1;
                }
                return field;
            }).sort(Helpers.sortByField(['sortOrder', 'name']));
            if (meta.sectionHeaders && meta.sectionHeaders.length) {
                meta.sectionHeaders.sort(Helpers.sortByField(['sortOrder', 'name']));
                meta.sectionHeaders.forEach(function (item, i) {
                    if (item.enabled) {
                        if (item.sortOrder > 0 && fieldsets.length === 0) {
                            fieldsets.push({
                                controls: []
                            });
                            ranges.push({
                                min: 0,
                                max: item.sortOrder - 1,
                                fieldsetIdx: 0
                            });
                        }
                        fieldsets.push({
                            title: item.label,
                            icon: item.icon || 'bhi-section',
                            controls: []
                        });
                        ranges.push({
                            min: item.sortOrder,
                            max: Number.MAX_SAFE_INTEGER,
                            fieldsetIdx: fieldsets.length - 1
                        });
                        if (i > 0 && fieldsets.length > 1) {
                            ranges[fieldsets.length - 2].max = item.sortOrder - 1;
                        }
                    }
                });
                if (!ranges.length) {
                    fieldsets.push({
                        controls: []
                    });
                    ranges.push({
                        min: 0,
                        max: Number.MAX_SAFE_INTEGER,
                        fieldsetIdx: 0
                    });
                }
            }
            else {
                fieldsets.push({
                    controls: []
                });
                ranges.push({
                    min: 0,
                    max: Number.MAX_SAFE_INTEGER,
                    fieldsetIdx: 0
                });
            }
            fields.forEach(function (field) {
                if (field.name !== 'id' && (field.dataSpecialization !== 'SYSTEM' || ['address', 'billingAddress', 'secondaryAddress'].indexOf(field.name) !== -1) && !field.readOnly) {
                    var /** @type {?} */ control = _this.getControlForField(field, http$$1, config, overrides);
                    // Set currency format
                    if (control.subType === 'currency') {
                        control.currencyFormat = currencyFormat;
                    }
                    var /** @type {?} */ location = ranges.find(function (item) {
                        return (item.min <= field.sortOrder && field.sortOrder <= item.max) || (item.min <= field.sortOrder && item.min === item.max);
                    });
                    if (location) {
                        // Add to controls
                        fieldsets[location.fieldsetIdx].controls.push(control);
                    }
                }
            });
        }
        if (fieldsets.length > 0) {
            return fieldsets;
        }
        else {
            return [{
                    controls: this.toControls(meta, currencyFormat, http$$1, config)
                }];
        }
    };
    /**
     * @param {?} field
     * @param {?} http
     * @param {?} config
     * @return {?}
     */
    FormUtils.prototype.getControlOptions = function (field, http$$1, config) {
        // TODO: The token property of config is the only property used; just pass in `token: string`
        if (field.dataType === 'Boolean' && !field.options) {
            // TODO: dataType should only be determined by `determineInputType` which doesn't ever return 'Boolean' it
            // TODO: (cont.) returns `tiles`
            return [
                { value: false, label: this.labels.no },
                { value: true, label: this.labels.yes }
            ];
        }
        else if (field.optionsUrl) {
            return this.optionsService.getOptionsConfig(http$$1, field, config);
        }
        else if (Array.isArray(field.options) && field.type === 'chips') {
            var /** @type {?} */ options = field.options;
            return {
                field: 'value',
                format: '$label',
                options: options
            };
        }
        else if (field.options) {
            return field.options;
        }
        return null;
    };
    /**
     * @param {?} controls
     * @param {?} values
     * @param {?=} keepClean
     * @param {?=} keyOverride
     * @return {?}
     */
    FormUtils.prototype.setInitialValues = function (controls, values, keepClean, keyOverride) {
        for (var /** @type {?} */ i = 0; i < controls.length; i++) {
            var /** @type {?} */ control = controls[i];
            var /** @type {?} */ key = keyOverride ? control.key.replace(keyOverride, '') : control.key;
            var /** @type {?} */ value = values[key];
            if (Helpers.isBlank(value)) {
                continue;
            }
            if (Array.isArray(value) && value.length === 0) {
                continue;
            }
            if (Array.isArray(value) && value.length > 0) {
                value = value.filter(function (val) { return !(Object.keys(val).length === 0 && val.constructor === Object); });
                if (value.length === 0) {
                    continue;
                }
            }
            if (value.data && value.data.length === 0) {
                continue;
            }
            if (Object.keys(value).length === 0 && value.constructor === Object) {
                continue;
            }
            control.value = value;
            // TODO: keepClean is not required, but is always used. It should default (to true?)
            control.dirty = !keepClean;
        }
    };
    /**
     * @param {?} fieldsets
     * @param {?} values
     * @param {?=} keepClean
     * @return {?}
     */
    FormUtils.prototype.setInitialValuesFieldsets = function (fieldsets, values, keepClean) {
        var _this = this;
        fieldsets.forEach(function (fieldset) {
            _this.setInitialValues(fieldset.controls, values, keepClean);
        });
    };
    /**
     * @param {?} controls
     * @return {?}
     */
    FormUtils.prototype.forceShowAllControls = function (controls) {
        controls.forEach(function (control) {
            control.hidden = false;
        });
    };
    /**
     * @param {?} fieldsets
     * @return {?}
     */
    FormUtils.prototype.forceShowAllControlsInFieldsets = function (fieldsets) {
        fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                control.hidden = false;
            });
        });
    };
    /**
     * @param {?} form
     * @return {?}
     */
    FormUtils.prototype.forceValidation = function (form) {
        Object.keys(form.controls).forEach(function (key) {
            var /** @type {?} */ control = form.controls[key];
            if (control.required && Helpers.isBlank(form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    };
    return FormUtils;
}());
FormUtils.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
FormUtils.ctorParameters = function () { return [
    { type: NovoLabelService, },
    { type: OptionsService, },
]; };
// NG2
// APP
var NovoToastService = /** @class */ (function () {
    /**
     * @param {?} componentUtils
     */
    function NovoToastService(componentUtils) {
        this.componentUtils = componentUtils;
        this.references = [];
        this.themes = [
            'default',
            'success',
            'info',
            'warning',
            'danger'
        ];
        this.icons = {
            default: 'bell',
            success: 'check',
            info: 'info',
            warning: 'warning',
            danger: 'remove'
        };
        this.defaults = {
            hideDelay: 3500,
            position: 'growlTopRight',
            theme: 'default'
        };
    }
    Object.defineProperty(NovoToastService.prototype, "parentViewContainer", {
        /**
         * @param {?} view
         * @return {?}
         */
        set: function (view) {
            this._parentViewContainer = view;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} options
     * @return {?}
     */
    NovoToastService.prototype.alert = function (options) {
        var _this = this;
        return new Promise(function (resolve) {
            if (!_this._parentViewContainer) {
                console.error('No parent view container specified for the ToastService. Set it inside your main application. \nthis.toastService.parentViewContainer = view (ViewContainerRef)');
                return;
            }
            var /** @type {?} */ toast = _this.componentUtils.appendNextToLocation(NovoToastElement, _this._parentViewContainer);
            _this.references.push(toast);
            _this.handleAlert(toast.instance, options);
            resolve(toast);
        });
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    NovoToastService.prototype.isVisible = function (toast) {
        return toast.show;
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    NovoToastService.prototype.hide = function (toast) {
        var _this = this;
        toast.animate = false;
        setTimeout(function () {
            toast.show = false;
            var /** @type {?} */ REF = _this.references.filter(function (x) { return x.instance === toast; })[0];
            if (REF) {
                _this.references.splice(_this.references.indexOf(REF), 1);
                REF.destroy();
            }
        }, 300);
    };
    /**
     * @param {?} toast
     * @param {?} options
     * @return {?}
     */
    NovoToastService.prototype.handleAlert = function (toast, options) {
        var _this = this;
        this.setToastOnSession(toast, options);
        setTimeout(function () {
            _this.show(toast);
        }, 20);
        if (!toast.isCloseable) {
            this.toastTimer(toast);
        }
    };
    /**
     * @param {?} toast
     * @param {?} opts
     * @return {?}
     */
    NovoToastService.prototype.setToastOnSession = function (toast, opts) {
        var /** @type {?} */ OPTIONS = (typeof opts === 'object') ? opts : {};
        toast.parent = this;
        toast.title = OPTIONS.title || '';
        toast.message = OPTIONS.message || '';
        toast.hideDelay = OPTIONS.hideDelay || this.defaults.hideDelay;
        toast.link = OPTIONS.link || '';
        toast.isCloseable = OPTIONS.isCloseable || false;
        var /** @type {?} */ CUSTOM_CLASS = OPTIONS.customClass || '';
        var /** @type {?} */ ALERT_STYLE = OPTIONS.theme || this.defaults.theme;
        var /** @type {?} */ ALERT_POSITION = OPTIONS.position || this.defaults.position;
        var /** @type {?} */ ALERT_ICON = OPTIONS.icon || this.icons.default;
        toast.iconClass = "bhi-" + ALERT_ICON;
        toast.launched = true;
        toast.alertTheme = ALERT_STYLE + " " + ALERT_POSITION + " " + CUSTOM_CLASS + " toast-container launched";
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    NovoToastService.prototype.show = function (toast) {
        toast.show = true;
        setTimeout(addClass, 25);
        /**
         * Adds animate class to be called after a timeout
         *
         * @return {?}
         */
        function addClass() {
            toast.animate = true;
        }
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    NovoToastService.prototype.toastTimer = function (toast) {
        var _this = this;
        if (toast.hideDelay < 0) {
            return;
        }
        setTimeout(function () {
            _this.hide(toast);
        }, toast.hideDelay);
    };
    return NovoToastService;
}());
NovoToastService.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
NovoToastService.ctorParameters = function () { return [
    { type: ComponentUtils, },
]; };
// NG2
// APP
var NovoModalService = /** @class */ (function () {
    /**
     * @param {?} componentUtils
     */
    function NovoModalService(componentUtils) {
        this.componentUtils = componentUtils;
        this._parentViewContainer = null;
    }
    Object.defineProperty(NovoModalService.prototype, "parentViewContainer", {
        /**
         * @param {?} view
         * @return {?}
         */
        set: function (view) {
            this._parentViewContainer = view;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} component
     * @param {?=} scope
     * @return {?}
     */
    NovoModalService.prototype.open = function (component, scope) {
        if (scope === void 0) { scope = {}; }
        if (!this._parentViewContainer) {
            console.error('No parent view container specified for the ModalService. Set it inside your main application. \nthis.modalService.parentViewContainer = view (ViewContainerRef)');
            return null;
        }
        var /** @type {?} */ modal = new NovoModalRef();
        modal.component = component;
        modal.open();
        var /** @type {?} */ bindings = core.ReflectiveInjector.resolve([
            { provide: NovoModalRef, useValue: modal },
            { provide: NovoModalParams, useValue: scope }
        ]);
        modal.containerRef = this.componentUtils.appendNextToLocation(NovoModalContainerElement, this._parentViewContainer, bindings);
        return modal;
    };
    return NovoModalService;
}());
NovoModalService.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
NovoModalService.ctorParameters = function () { return [
    { type: ComponentUtils, },
]; };
// NG2
// APP
var ControlConfirmModal = /** @class */ (function () {
    /**
     * @param {?} modalRef
     * @param {?} params
     * @param {?} labels
     */
    function ControlConfirmModal(modalRef, params, labels) {
        this.modalRef = modalRef;
        this.params = params;
        this.labels = labels;
    }
    /**
     * @param {?} result
     * @return {?}
     */
    ControlConfirmModal.prototype.close = function (result) {
        this.modalRef.close(result);
    };
    return ControlConfirmModal;
}());
ControlConfirmModal.decorators = [
    { type: core.Component, args: [{
                selector: 'control-confirm-modal',
                template: "\n        <novo-notification type=\"warning\" [attr.data-automation-id]=\"'field-interaction-modal-' + params['key']\">\n            <h1>{{ labels.confirmChangesModalMessage }}</h1>\n            <h2 *ngIf=\"!params['message']\"><label>{{ params['label'] }}:</label> {{ params['oldValue'] }} <i class=\"bhi-arrow-right\"></i> {{ params['newValue'] }}</h2>\n            <h2 *ngIf=\"params['message']\">{{ params['message'] }}</h2>\n            <button theme=\"standard\" (click)=\"close(false)\" [attr.data-automation-id]=\"'field-interaction-modal-cancel' + params['key']\">{{ labels.cancel }}</button>\n            <button theme=\"primary\" icon=\"check\" (click)=\"close(true)\" autofocus [attr.data-automation-id]=\"'field-interaction-modal-save-' + params['key']\">{{ labels.save }}</button>\n        </novo-notification>\n    "
            },] },
];
/**
 * @nocollapse
 */
ControlConfirmModal.ctorParameters = function () { return [
    { type: NovoModalRef, },
    { type: NovoModalParams, },
    { type: NovoLabelService, },
]; };
var ControlPromptModal = /** @class */ (function () {
    /**
     * @param {?} modalRef
     * @param {?} params
     * @param {?} labels
     */
    function ControlPromptModal(modalRef, params, labels) {
        this.modalRef = modalRef;
        this.params = params;
        this.labels = labels;
    }
    /**
     * @param {?} result
     * @return {?}
     */
    ControlPromptModal.prototype.close = function (result) {
        this.modalRef.close(result);
    };
    return ControlPromptModal;
}());
ControlPromptModal.decorators = [
    { type: core.Component, args: [{
                selector: 'control-prompt-modal',
                template: "\n        <novo-notification type=\"warning\" [attr.data-automation-id]=\"'field-interaction-modal-' + params['key']\">\n            <h1>{{ labels.promptModalMessage }}</h1>\n            <p *ngFor=\"let change of params['changes']\">{{ change }}</p>\n            <button theme=\"standard\" (click)=\"close(false)\" [attr.data-automation-id]=\"'field-interaction-modal-cancel' + params['key']\">{{ labels.cancel }}</button>\n            <button theme=\"primary\" icon=\"check\" (click)=\"close(true)\" autofocus [attr.data-automation-id]=\"'field-interaction-modal-yes-' + params['key']\">{{ labels.yes }}</button>\n        </novo-notification>\n    "
            },] },
];
/**
 * @nocollapse
 */
ControlPromptModal.ctorParameters = function () { return [
    { type: NovoModalRef, },
    { type: NovoModalParams, },
    { type: NovoLabelService, },
]; };
// NG2
// Vendor
// APP
var FieldInteractionApi = /** @class */ (function () {
    /**
     * @param {?} toaster
     * @param {?} modalService
     * @param {?} formUtils
     * @param {?} http
     * @param {?} labels
     */
    function FieldInteractionApi(toaster, modalService, formUtils, http$$1, labels) {
        this.toaster = toaster;
        this.modalService = modalService;
        this.formUtils = formUtils;
        this.http = http$$1;
        this.labels = labels;
    }
    Object.defineProperty(FieldInteractionApi.prototype, "form", {
        /**
         * @return {?}
         */
        get: function () {
            return this._form;
        },
        /**
         * @param {?} form
         * @return {?}
         */
        set: function (form) {
            this._form = form;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "associations", {
        /**
         * @return {?}
         */
        get: function () {
            return this.form.hasOwnProperty('associations') ? this.form.associations : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "currentEntity", {
        /**
         * @return {?}
         */
        get: function () {
            return this.form.hasOwnProperty('currentEntity') ? this.form.currentEntity : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "currentEntityId", {
        /**
         * @return {?}
         */
        get: function () {
            return this.form.hasOwnProperty('currentEntityId') ? this.form.currentEntityId : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "isEdit", {
        /**
         * @return {?}
         */
        get: function () {
            return this.form.hasOwnProperty('edit') ? this.form.edit : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "isAdd", {
        /**
         * @return {?}
         */
        get: function () {
            return this.form.hasOwnProperty('edit') ? !this.form.edit : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "globals", {
        /**
         * @return {?}
         */
        get: function () {
            return this._globals;
        },
        /**
         * @param {?} globals
         * @return {?}
         */
        set: function (globals) {
            this._globals = globals;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "currentKey", {
        /**
         * @return {?}
         */
        get: function () {
            return this._currentKey;
        },
        /**
         * @param {?} key
         * @return {?}
         */
        set: function (key) {
            this._currentKey = key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "appBridge", {
        /**
         * @return {?}
         */
        get: function () {
            return this._appBridge;
        },
        /**
         * @param {?} appBridge
         * @return {?}
         */
        set: function (appBridge) {
            this._appBridge = appBridge;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FieldInteractionApi.prototype.isActiveControlValid = function () {
        return !!this.getValue(this.currentKey);
    };
    /**
     * @return {?}
     */
    FieldInteractionApi.prototype.getActiveControl = function () {
        return this.getControl(this.currentKey);
    };
    /**
     * @return {?}
     */
    FieldInteractionApi.prototype.getActiveKey = function () {
        return this.currentKey;
    };
    /**
     * @return {?}
     */
    FieldInteractionApi.prototype.getActiveValue = function () {
        return this.getValue(this.currentKey);
    };
    /**
     * @return {?}
     */
    FieldInteractionApi.prototype.getActiveInitialValue = function () {
        return this.getInitialValue(this.currentKey);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.getControl = function (key) {
        if (!key) {
            console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
            return null;
        }
        var /** @type {?} */ control = this.form.controls[key];
        if (!control) {
            console.error('[FieldInteractionAPI] - could not find a control in the form by the key --', key); // tslint:disable-line
            return null;
        }
        return ((control));
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.getValue = function (key) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            return control.value;
        }
        return null;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.getRawValue = function (key) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            return control.rawValue;
        }
        return null;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.getInitialValue = function (key) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            return control.initialValue;
        }
        return null;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.setValue = function (key, value, options) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.setValue(value, options);
        }
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.patchValue = function (key, value, options) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.setValue(value, options);
        }
    };
    /**
     * @param {?} key
     * @param {?} isReadOnly
     * @return {?}
     */
    FieldInteractionApi.prototype.setReadOnly = function (key, isReadOnly) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.setReadOnly(isReadOnly);
        }
    };
    /**
     * @param {?} key
     * @param {?} required
     * @return {?}
     */
    FieldInteractionApi.prototype.setRequired = function (key, required) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.setRequired(required);
        }
    };
    /**
     * @param {?} key
     * @param {?=} clearValue
     * @return {?}
     */
    FieldInteractionApi.prototype.hide = function (key, clearValue) {
        if (clearValue === void 0) { clearValue = true; }
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.hide(clearValue);
            this.disable(key, { emitEvent: false });
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.show = function (key) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.show();
            this.enable(key, { emitEvent: false });
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.disable = function (key, options) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.disable(options);
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.enable = function (key, options) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.enable(options);
        }
    };
    /**
     * @param {?} key
     * @param {?=} validationMessage
     * @return {?}
     */
    FieldInteractionApi.prototype.markAsInvalid = function (key, validationMessage) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            if (control) {
                control.markAsInvalid(validationMessage);
            }
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.markAsDirty = function (key, options) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.markAsDirty(options);
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.markAsPending = function (key, options) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.markAsPending(options);
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.markAsPristine = function (key, options) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.markAsPristine(options);
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.markAsTouched = function (key, options) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.markAsTouched(options);
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.markAsUntouched = function (key, options) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.markAsUntouched(options);
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.updateValueAndValidity = function (key, options) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.updateValueAndValidity(options);
        }
    };
    /**
     * @param {?} toastConfig
     * @return {?}
     */
    FieldInteractionApi.prototype.displayToast = function (toastConfig) {
        if (this.toaster) {
            this.toaster.alert(toastConfig);
        }
    };
    /**
     * @param {?} key
     * @param {?} tip
     * @param {?=} icon
     * @param {?=} allowDismiss
     * @return {?}
     */
    FieldInteractionApi.prototype.displayTip = function (key, tip, icon, allowDismiss) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control.tipWell = {
                tip: tip,
                icon: icon,
                button: allowDismiss
            };
        }
    };
    /**
     * @param {?} key
     * @param {?=} message
     * @return {?}
     */
    FieldInteractionApi.prototype.confirmChanges = function (key, message) {
        var _this = this;
        var /** @type {?} */ history = this.getProperty(key, 'valueHistory');
        var /** @type {?} */ oldValue = history[history.length - 2];
        var /** @type {?} */ newValue = this.getValue(key);
        var /** @type {?} */ label = this.getProperty(key, 'label');
        ((document.activeElement)).blur();
        return this.modalService.open(ControlConfirmModal, { oldValue: oldValue, newValue: newValue, label: label, message: message, key: key }).onClosed.then(function (result) {
            if (!result) {
                _this.setValue(key, oldValue, { emitEvent: false });
            }
        });
    };
    /**
     * @param {?} key
     * @param {?} changes
     * @return {?}
     */
    FieldInteractionApi.prototype.promptUser = function (key, changes) {
        ((document.activeElement)).blur();
        return this.modalService.open(ControlPromptModal, { changes: changes }).onClosed;
    };
    /**
     * @param {?} key
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    FieldInteractionApi.prototype.setProperty = function (key, prop, value) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            control[prop] = value;
        }
    };
    /**
     * @param {?} key
     * @param {?} prop
     * @return {?}
     */
    FieldInteractionApi.prototype.getProperty = function (key, prop) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            return control[prop];
        }
        return null;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.isValueEmpty = function (key) {
        var /** @type {?} */ value = this.getValue(key);
        return Helpers.isEmpty(value);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.isValueBlank = function (key) {
        var /** @type {?} */ value = this.getValue(key);
        return Helpers.isBlank(value);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.hasField = function (key) {
        return !!this.form.controls[key];
    };
    /**
     * @param {?} key
     * @param {?} newOption
     * @return {?}
     */
    FieldInteractionApi.prototype.addStaticOption = function (key, newOption) {
        var /** @type {?} */ control = this.getControl(key);
        var /** @type {?} */ optionToAdd = newOption;
        if (control) {
            var /** @type {?} */ currentOptions = this.getProperty(key, 'options');
            if (!currentOptions || !currentOptions.length) {
                var /** @type {?} */ config = this.getProperty(key, 'config');
                if (config) {
                    currentOptions = config.options;
                    if (currentOptions && Array.isArray(currentOptions)) {
                        if (currentOptions[0].value && !optionToAdd.value) {
                            optionToAdd = { value: newOption, label: newOption };
                        }
                        config.options = currentOptions.concat([optionToAdd]);
                        this.setProperty(key, 'config', config);
                    }
                }
            }
            else {
                if (currentOptions[0].value && !optionToAdd.value) {
                    optionToAdd = { value: newOption, label: newOption };
                }
                this.setProperty(key, 'options', currentOptions.concat([optionToAdd]));
            }
        }
    };
    /**
     * @param {?} key
     * @param {?} optionToRemove
     * @return {?}
     */
    FieldInteractionApi.prototype.removeStaticOption = function (key, optionToRemove) {
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            var /** @type {?} */ currentOptions = this.getProperty(key, 'options');
            if (!currentOptions || !currentOptions.length) {
                var /** @type {?} */ config = this.getProperty(key, 'config');
                if (config) {
                    currentOptions = config.options;
                    if (currentOptions && Array.isArray(currentOptions)) {
                        var /** @type {?} */ index$$1_1 = -1;
                        currentOptions.forEach(function (opt, i) {
                            if (opt.value || opt.label) {
                                if (opt.value === optionToRemove || opt.label === optionToRemove) {
                                    index$$1_1 = i;
                                }
                            }
                            else {
                                if (opt === optionToRemove) {
                                    index$$1_1 = i;
                                }
                            }
                        });
                        if (index$$1_1 !== -1) {
                            currentOptions.splice(index$$1_1, 1);
                        }
                        config.options = currentOptions.slice();
                        this.setProperty(key, 'config', config);
                    }
                }
            }
            else {
                var /** @type {?} */ index$$1_2 = -1;
                currentOptions.forEach(function (opt, i) {
                    if (opt.value || opt.label) {
                        if (opt.value === optionToRemove || opt.label === optionToRemove) {
                            index$$1_2 = i;
                        }
                    }
                    else {
                        if (opt === optionToRemove) {
                            index$$1_2 = i;
                        }
                    }
                });
                if (index$$1_2 !== -1) {
                    currentOptions.splice(index$$1_2, 1);
                }
                this.setProperty(key, 'options', currentOptions.slice());
            }
        }
    };
    /**
     * @param {?} key
     * @param {?} config
     * @param {?=} mapper
     * @return {?}
     */
    FieldInteractionApi.prototype.modifyPickerConfig = function (key, config, mapper) {
        var _this = this;
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            var /** @type {?} */ newConfig = Object.assign({}, control.config);
            if (config.optionsUrl || config.optionsUrlBuilder || config.optionsPromise) {
                newConfig = {
                    format: config.format,
                    options: function (query) {
                        if (config.optionsPromise) {
                            return config.optionsPromise(query, _this.http);
                        }
                        return new Promise(function (resolve, reject) {
                            var /** @type {?} */ url = config.optionsUrlBuilder ? config.optionsUrlBuilder(query) : config.optionsUrl + "?filter=" + (query || '');
                            if (query && query.length) {
                                _this.http
                                    .get(url)
                                    .map(function (res) {
                                    if (res.json) {
                                        return res.json();
                                    }
                                    return res;
                                })
                                    .map(function (results) {
                                    if (mapper) {
                                        return results.map(mapper);
                                    }
                                    return results;
                                })
                                    .subscribe(resolve, reject);
                            }
                            else {
                                resolve([]);
                            }
                        });
                    }
                };
            }
            else if (config.options) {
                newConfig.options = config.options.slice();
            }
            this.setProperty(key, 'config', newConfig);
        }
    };
    /**
     * @param {?} key
     * @param {?} loading
     * @return {?}
     */
    FieldInteractionApi.prototype.setLoading = function (key, loading) {
        var _this = this;
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            if (loading) {
                this.form.controls[key].fieldInteractionloading = true;
                control.setErrors({ 'loading': true });
                // History
                clearTimeout(this.asyncBlockTimeout);
                this.asyncBlockTimeout = setTimeout(function () {
                    _this.setLoading(key, false);
                    _this.displayTip(key, _this.labels.asyncFailure, 'info', false);
                    _this.setProperty(key, '_displayedAsyncFailure', true);
                }, 10000);
            }
            else {
                this.form.controls[key].fieldInteractionloading = false;
                clearTimeout(this.asyncBlockTimeout);
                control.setErrors({ 'loading': null });
                control.updateValueAndValidity({ emitEvent: false });
                if (this.getProperty(key, '_displayedAsyncFailure')) {
                    this.setProperty(key, 'tipWell', null);
                }
            }
        }
    };
    /**
     * @param {?} key
     * @param {?} metaForNewField
     * @param {?=} position
     * @param {?=} initialValue
     * @return {?}
     */
    FieldInteractionApi.prototype.addControl = function (key, metaForNewField, position, initialValue) {
        if (position === void 0) { position = FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD; }
        if (!metaForNewField.key && !metaForNewField.name) {
            console.error('[FieldInteractionAPI] - missing "key" in meta for new field'); // tslint:disable-line
            return null;
        }
        if (!metaForNewField.key) {
            // If key is not explicitly declared, use name as key
            metaForNewField.key = metaForNewField.name;
        }
        if (this.form.controls[metaForNewField.key]) {
            // Field is already on the form
            return null;
        }
        var /** @type {?} */ control = this.form.controls[key];
        var /** @type {?} */ fieldsetIndex, /** @type {?} */ controlIndex;
        if (control) {
            fieldsetIndex = -1;
            controlIndex = -1;
            this.form.fieldsets.forEach(function (fieldset, fi) {
                fieldset.controls.forEach(function (fieldsetControl, ci) {
                    if (fieldsetControl.key === key) {
                        fieldsetIndex = fi;
                        controlIndex = ci;
                    }
                });
            });
            // Change the position of the newly added field
            switch (position) {
                case FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD:
                    // Adding field above active field
                    // index can stay the same
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.BELOW_FIELD:
                    // Adding field below active field
                    controlIndex += 1;
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.TOP_OF_FORM:
                    // Adding field to the top of the form
                    controlIndex = 0;
                    fieldsetIndex = 0;
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.BOTTOM_OF_FORM:
                    // Adding field to the bottom of the form
                    fieldsetIndex = this.form.fieldsets.length - 1;
                    controlIndex = this.form.fieldsets[fieldsetIndex].controls.length;
                    break;
                default:
                    break;
            }
            if (fieldsetIndex !== -1 && controlIndex !== -1) {
                var /** @type {?} */ novoControl = this.formUtils.getControlForField(metaForNewField, this.http, {});
                novoControl.hidden = false;
                var /** @type {?} */ formControl = new NovoFormControl(initialValue, novoControl);
                this.form.addControl(novoControl.key, formControl);
                this.form.fieldsets[fieldsetIndex].controls.splice(controlIndex, 0, novoControl);
            }
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.removeControl = function (key) {
        if (!this.form.controls[key]) {
            // Field is not on the form
            return null;
        }
        var /** @type {?} */ control = this.getControl(key);
        if (control) {
            var /** @type {?} */ fieldsetIndex_1 = -1;
            var /** @type {?} */ controlIndex_1 = -1;
            this.form.fieldsets.forEach(function (fieldset, fi) {
                fieldset.controls.forEach(function (fieldsetControl, ci) {
                    if (fieldsetControl.key === key) {
                        fieldsetIndex_1 = fi;
                        controlIndex_1 = ci;
                    }
                });
            });
            if (fieldsetIndex_1 !== -1 && controlIndex_1 !== -1) {
                this.form.removeControl(key);
                this.form.fieldsets[fieldsetIndex_1].controls.splice(controlIndex_1, 1);
            }
        }
    };
    /**
     * @param {?} func
     * @param {?=} wait
     * @return {?}
     */
    FieldInteractionApi.prototype.debounce = function (func, wait) {
        if (wait === void 0) { wait = 50; }
        var /** @type {?} */ h;
        clearTimeout(h);
        h = setTimeout(function () { return func(); }, wait);
    };
    return FieldInteractionApi;
}());
FieldInteractionApi.FIELD_POSITIONS = {
    ABOVE_FIELD: 'ABOVE_FIELD',
    BELOW_FIELD: 'BELOW_FIELD',
    TOP_OF_FORM: 'TOP_OF_FORM',
    BOTTOM_OF_FORM: 'BOTTOM_OF_FORM'
};
FieldInteractionApi.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
FieldInteractionApi.ctorParameters = function () { return [
    { type: NovoToastService, },
    { type: NovoModalService, },
    { type: FormUtils, },
    { type: http.Http, },
    { type: NovoLabelService, },
]; };
// NG2
var NovoAutoSize = /** @class */ (function () {
    /**
     * @param {?} element
     */
    function NovoAutoSize(element) {
        this.element = element;
    }
    /**
     * @param {?} textArea
     * @return {?}
     */
    NovoAutoSize.prototype.onInput = function (textArea) {
        this.adjust();
    };
    /**
     * @return {?}
     */
    NovoAutoSize.prototype.ngAfterContentInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.adjust();
        });
    };
    /**
     * @return {?}
     */
    NovoAutoSize.prototype.adjust = function () {
        var /** @type {?} */ hasValue = this.element.nativeElement.value.length !== 0;
        this.element.nativeElement.style.overflow = 'hidden';
        if (hasValue) {
            this.element.nativeElement.style.height = Math.min((this.element.nativeElement.scrollHeight - 11), 300) + 'px';
        }
        else {
            this.element.nativeElement.style.height = '14px';
        }
    };
    return NovoAutoSize;
}());
NovoAutoSize.decorators = [
    { type: core.Directive, args: [{
                selector: 'textarea[autosize]'
            },] },
];
/**
 * @nocollapse
 */
NovoAutoSize.ctorParameters = function () { return [
    { type: core.ElementRef, },
]; };
NovoAutoSize.propDecorators = {
    'onInput': [{ type: core.HostListener, args: ['input', ['$event.target'],] },],
};
var NovoCustomControlContainerElement = /** @class */ (function () {
    function NovoCustomControlContainerElement() {
    }
    return NovoCustomControlContainerElement;
}());
NovoCustomControlContainerElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-custom-control-container',
                template: "\n        <div class=\"novo-control-container\" [hidden]=\"form.controls[control.key].hidden || form.controls[control.key].type === 'hidden' || form.controls[control.key].controlType === 'hidden'\">\n            <!--Label (for horizontal)-->\n            <label [attr.for]=\"control.key\" *ngIf=\"form.layout !== 'vertical' && form.controls[control.key].label\">{{ form.controls[control.key].label }}</label>\n            <div class=\"novo-control-outer-container\">\n                <!--Label (for vertical)-->\n                <label\n                    *ngIf=\"form.layout === 'vertical' && form.controls[control.key].label\"\n                    class=\"novo-control-label\"\n                    [attr.for]=\"control.key\"\n                    [class.novo-control-always-active]=\"true\">\n                    {{ form.controls[control.key].label }}\n                </label>\n                <div class=\"novo-control-inner-container\">\n                    <div class=\"novo-control-inner-input-container\">\n                        <!--Required Indicator-->\n                        <i [hidden]=\"!form.controls[control.key].required || form.controls[control.key].readOnly\"\n                            class=\"required-indicator\"\n                            [ngClass]=\"{'bhi-circle': !isValid, 'bhi-check': isValid}\" *ngIf=\"form.controls[control.key].required\">\n                        </i>\n                        <!--Form Controls-->\n                        <div class=\"novo-control-input {{ form.controls[control.key].controlType }}\" [attr.data-automation-id]=\"control.key\">\n                            <ng-content></ng-content>\n                        </div>\n                    </div>\n                    <!--Error Message-->\n                    <div class=\"field-message\">\n                        <div class=\"messages\">\n                            <span class=\"error-text\" *ngIf=\"(form.controls[control.key].dirty || control.dirty) && form.controls[control.key].errors?.required\">{{ form.controls[control.key].label | uppercase }} is required</span>\n                            <span class=\"error-text\" *ngIf=\"(form.controls[control.key].dirty || control.dirty) && (form.controls[control.key].errors?.custom)\">{{ form.controls[control.key].errors.custom }}</span>\n                            <!--Field Hint-->\n                            <span class=\"description\" *ngIf=\"form.controls[control.key].description\">\n                                {{ form.controls[control.key].description }}\n                            </span>\n                        </div>\n                    </div>\n                    <!--Tip Wel-->\n                    <novo-tip-well *ngIf=\"form.controls[control.key].tipWell\" [name]=\"control.key\" [tip]=\"form.controls[control.key]?.tipWell?.tip\" [icon]=\"form.controls[control.key]?.tipWell?.icon\" [button]=\"form.controls[control.key]?.tipWell?.button\"></novo-tip-well>\n                </div>\n            </div>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoCustomControlContainerElement.ctorParameters = function () { return []; };
NovoCustomControlContainerElement.propDecorators = {
    'control': [{ type: core.Input },],
    'form': [{ type: core.Input },],
};
var NovoControlElement = /** @class */ (function (_super) {
    __extends(NovoControlElement, _super);
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} dateFormatService
     * @param {?} fieldInteractionApi
     */
    function NovoControlElement(element, labels, dateFormatService, fieldInteractionApi) {
        var _this = _super.call(this, element) || this;
        _this.labels = labels;
        _this.dateFormatService = dateFormatService;
        _this.fieldInteractionApi = fieldInteractionApi;
        _this.condensed = false;
        _this.autoFocus = false;
        _this.change = new core.EventEmitter();
        _this.edit = new core.EventEmitter();
        _this.save = new core.EventEmitter();
        _this.delete = new core.EventEmitter();
        _this.upload = new core.EventEmitter();
        _this._blurEmitter = new core.EventEmitter();
        _this._focusEmitter = new core.EventEmitter();
        _this._focused = false;
        _this._enteredText = '';
        _this.formattedValue = '';
        _this.maxLengthMet = false;
        _this.characterCount = 0;
        return _this;
    }
    Object.defineProperty(NovoControlElement.prototype, "onBlur", {
        /**
         * @return {?}
         */
        get: function () {
            return this._blurEmitter.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "onFocus", {
        /**
         * @return {?}
         */
        get: function () {
            return this._focusEmitter.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "showFieldMessage", {
        /**
         * @return {?}
         */
        get: function () {
            return !this.errors && !this.maxLengthMet && Helpers.isBlank(this.control.description);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "showCount", {
        /**
         * @return {?}
         */
        get: function () {
            return (this.form.controls[this.control.key].maxlength &&
                this.focused &&
                (this.form.controls[this.control.key].controlType === 'text-area' || this.form.controls[this.control.key].controlType === 'textbox'));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoControlElement.prototype.ngAfterViewInit = function () {
        var _this = this;
        var /** @type {?} */ DO_NOT_FOCUS_ME = ['picker', 'time', 'date', 'date-time'];
        if (this.autoFocus && !DO_NOT_FOCUS_ME.includes(this.control.controlType)) {
            setTimeout(function () {
                var /** @type {?} */ input = _this.element.nativeElement.querySelector('input');
                if (input) {
                    input.focus();
                }
            });
        }
    };
    /**
     * @return {?}
     */
    NovoControlElement.prototype.ngOnInit = function () {
        var _this = this;
        // Make sure to initially format the time controls
        if (this.control && this.form.controls[this.control.key].value) {
            if (this.form.controls[this.control.key].controlType === 'textbox' || this.form.controls[this.control.key].controlType === 'text-area') {
                this.characterCount = this.form.controls[this.control.key].value.length;
            }
        }
        if (this.control) {
            // Listen to clear events
            this.forceClearSubscription = this.control.forceClear.subscribe(function () {
                _this.clearValue();
            });
            // Subscribe to control interactions
            if (this.control.interactions) {
                var _loop_5 = function (interaction) {
                    switch (interaction.event) {
                        case 'blur':
                            this_1.valueChangeSubscription = this_1.onBlur.debounceTime(300).subscribe(function () {
                                _this.executeInteraction(interaction);
                            });
                            break;
                        case 'focus':
                            this_1.valueChangeSubscription = this_1.onFocus.debounceTime(300).subscribe(function () {
                                _this.executeInteraction(interaction);
                            });
                            break;
                        case 'change':
                            this_1.valueChangeSubscription = this_1.form.controls[this_1.control.key].valueChanges.debounceTime(300).subscribe(function () {
                                _this.executeInteraction(interaction);
                            });
                            break;
                        case 'init':
                            interaction.invokeOnInit = true;
                            break;
                        default:
                            break;
                    }
                    if (interaction.invokeOnInit) {
                        this_1.executeInteraction(interaction);
                    }
                };
                var this_1 = this;
                for (var _d = 0, _e = this.control.interactions; _d < _e.length; _d++) {
                    var interaction = _e[_d];
                    _loop_5(/** @type {?} */ interaction);
                }
            }
        }
        if (this.form.controls[this.control.key] && this.form.controls[this.control.key].subType === 'percentage') {
            if (!Helpers.isEmpty(this.form.controls[this.control.key].value)) {
                this.percentValue = Number((this.form.controls[this.control.key].value * 100).toFixed(6).replace(/\.?0*$/, ''));
            }
            this.percentChangeSubscription = this.form.controls[this.control.key].displayValueChanges.subscribe(function (value) {
                if (!Helpers.isEmpty(value)) {
                    _this.percentValue = Number((value * 100).toFixed(6).replace(/\.?0*$/, ''));
                }
            });
        }
    };
    /**
     * @param {?} interaction
     * @return {?}
     */
    NovoControlElement.prototype.executeInteraction = function (interaction) {
        var _this = this;
        if (interaction.script && Helpers.isFunction(interaction.script)) {
            setTimeout(function () {
                _this.fieldInteractionApi.form = _this.form;
                _this.fieldInteractionApi.currentKey = _this.control.key;
                try {
                    interaction.script(_this.fieldInteractionApi, _this.control.key);
                }
                catch (err) {
                    console.info('Field Interaction Error!', _this.control.key); // tslint:disable-line
                    console.error(err); // tslint:disable-line
                }
            });
        }
    };
    /**
     * @return {?}
     */
    NovoControlElement.prototype.ngOnDestroy = function () {
        // Unsubscribe from control interactions
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
        // if (this.dateChangeSubscription) {
        //     this.dateChangeSubscription.unsubscribe();
        // }
        if (this.forceClearSubscription) {
            // Un-listen for clear events
            this.forceClearSubscription.unsubscribe();
        }
        if (this.percentChangeSubscription) {
            // Un-listen for clear events
            this.percentChangeSubscription.unsubscribe();
        }
        if (this.dateChangeSubscription) {
            this.dateChangeSubscription.unsubscribe();
        }
        _super.prototype.ngOnDestroy.call(this);
    };
    Object.defineProperty(NovoControlElement.prototype, "errors", {
        /**
         * @return {?}
         */
        get: function () {
            return this.form.controls[this.control.key].errors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "isValid", {
        /**
         * @return {?}
         */
        get: function () {
            return this.form.controls[this.control.key].valid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "isDirty", {
        /**
         * @return {?}
         */
        get: function () {
            return this.form.controls[this.control.key].dirty || this.control.dirty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "hasValue", {
        /**
         * @return {?}
         */
        get: function () {
            return !Helpers.isEmpty(this.form.value[this.control.key]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "focused", {
        /**
         * @return {?}
         */
        get: function () {
            return this._focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "tooltip", {
        /**
         * @return {?}
         */
        get: function () {
            return this.form.controls[this.control.key].tooltip;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "tooltipPosition", {
        /**
         * @return {?}
         */
        get: function () {
            if (Helpers.isBlank(this.form.controls[this.control.key].tooltipPosition)) {
                return 'right';
            }
            return this.form.controls[this.control.key].tooltipPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "alwaysActive", {
        /**
         * @return {?}
         */
        get: function () {
            // Controls that have the label active if there is any user entered text in the field
            if (this.form.controls[this.control.key].controlType === 'picker' && this._enteredText.length) {
                return true;
            }
            // Controls that always have the label active
            return ['tiles', 'checklist', 'checkbox', 'date', 'time', 'date-time', 'address', 'file', 'editor', 'ace-editor', 'radio', 'text-area', 'quick-note'].indexOf(this.form.controls[this.control.key].controlType) !== -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "requiresExtraSpacing", {
        /**
         * @return {?}
         */
        get: function () {
            // Chips
            if (this.form.controls[this.control.key].controlType === 'picker' && this.form.controls[this.control.key].multiple && this.hasValue) {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.handleTyping = function (event) {
        this._focused = event && event.length;
        this._enteredText = event;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.handleFocus = function (event) {
        this._focused = true;
        this._focusEmitter.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.handleBlur = function (event) {
        this._focused = false;
        this._blurEmitter.emit(event);
    };
    /**
     * @return {?}
     */
    NovoControlElement.prototype.clearValue = function () {
        this.form.controls[this.control.key].setValue(null);
        this.formattedValue = null;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.handleTextAreaInput = function (event) {
        this.emitChange(event);
        this.restrictKeys(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.checkMaxLength = function (event) {
        if (this.control && this.form.controls[this.control.key].maxlength) {
            this.characterCount = event.target.value.length;
            this.maxLengthMet = event.target.value.length >= this.form.controls[this.control.key].maxlength;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.modelChangeWithRaw = function (event) {
        if (Helpers.isEmpty(event.value)) {
            this._focused = false;
            this._enteredText = '';
        }
        this.form.controls[this.control.key].rawValue = event.rawValue;
        this.change.emit(event.value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoControlElement.prototype.modelChange = function (value) {
        if (Helpers.isEmpty(value)) {
            this._focused = false;
            this._enteredText = '';
        }
        this.change.emit(value);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.restrictKeys = function (event) {
        var /** @type {?} */ NUMBERS_ONLY = /[0-9\-]/;
        var /** @type {?} */ NUMBERS_WITH_DECIMAL = /[0-9\.\-]/;
        var /** @type {?} */ UTILITY_KEYS = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab'];
        var /** @type {?} */ key = event.key;
        // Types
        if (this.form.controls[this.control.key].subType === 'number' && !(NUMBERS_ONLY.test(key) || UTILITY_KEYS.includes(key))) {
            event.preventDefault();
        }
        else if (~['currency', 'float', 'percentage'].indexOf(this.form.controls[this.control.key].subType) && !(NUMBERS_WITH_DECIMAL.test(key) || UTILITY_KEYS.includes(key))) {
            event.preventDefault();
        }
        // Max Length
        if (this.form.controls[this.control.key].maxlength && event.target.value.length >= this.form.controls[this.control.key].maxlength) {
            event.preventDefault();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.handlePercentChange = function (event) {
        var /** @type {?} */ value = event.target['value'];
        var /** @type {?} */ percent = Helpers.isEmpty(value) ? null : Number((value / 100).toFixed(6).replace(/\.?0*$/, ''));
        if (!Helpers.isEmpty(percent)) {
            this.change.emit(percent);
            this.form.controls[this.control.key].setValue(percent);
        }
        else {
            this.change.emit(null);
            this.form.controls[this.control.key].setValue(null);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.handleTabForPickers = function (event) {
        if (this.active && event && event.keyCode) {
            if (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.TAB) {
                this.toggleActive(event, false);
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoControlElement.prototype.emitChange = function (value) {
        this.change.emit(value);
        this.checkMaxLength(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoControlElement.prototype.handleEdit = function (value) {
        this.edit.emit(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoControlElement.prototype.handleSave = function (value) {
        this.save.emit(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoControlElement.prototype.handleDelete = function (value) {
        this.delete.emit(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoControlElement.prototype.handleUpload = function (value) {
        this.upload.emit(value);
    };
    return NovoControlElement;
}(OutsideClick));
NovoControlElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-control',
                template: "\n        <div class=\"novo-control-container\" [formGroup]=\"form\" [hidden]=\"form.controls[control.key].hidden || form.controls[control.key].type === 'hidden' || form.controls[control.key].controlType === 'hidden'\">\n            <!--Encrypted Field-->\n            <span [tooltip]=\"labels.encryptedFieldTooltip\" [tooltipPosition]=\"'right'\"><i [hidden]=\"!form.controls[control.key].encrypted\"\n            class=\"bhi-lock\"></i></span>\n            <!--Label (for horizontal)-->\n            <label [attr.for]=\"control.key\" *ngIf=\"form.layout !== 'vertical' && form.controls[control.key].label && !condensed\" [ngClass]=\"{'encrypted': form.controls[control.key].encrypted }\">\n                {{ form.controls[control.key].label }}\n            </label>\n            <div class=\"novo-control-outer-container\">\n                <!--Label (for vertical)-->\n                <label\n                    *ngIf=\"form.layout === 'vertical' && form.controls[control.key].label && !condensed\"\n                    class=\"novo-control-label\"\n                    [attr.for]=\"control.key\"\n                    [class.novo-control-empty]=\"!hasValue\"\n                    [class.novo-control-focused]=\"focused\"\n                    [class.novo-control-filled]=\"hasValue\"\n                    [class.novo-control-always-active]=\"alwaysActive || form.controls[control.key].placeholder\"\n                    [class.novo-control-extra-spacing]=\"requiresExtraSpacing\">\n                    {{ form.controls[control.key].label }}\n                </label>\n                <div class=\"novo-control-inner-container\">\n                    <div class=\"novo-control-inner-input-container\">\n                        <!--Required Indicator-->\n                        <i [hidden]=\"!form.controls[control.key].required || form.controls[control.key].readOnly\"\n                            class=\"required-indicator\"\n                            [ngClass]=\"{'bhi-circle': !isValid, 'bhi-check': isValid}\" *ngIf=\"!condensed || form.controls[control.key].required\">\n                        </i>\n                        <!--Form Controls-->\n                        <div class=\"novo-control-input {{ form.controls[control.key].controlType }}\" [ngSwitch]=\"form.controls[control.key].controlType\" [attr.data-automation-id]=\"control.key\" [class.control-disabled]=\"form.controls[control.key].disabled\">\n                            <!--Text-based Inputs-->\n                            <!--TODO prefix/suffix on the control-->\n                            <div class=\"novo-control-input-container novo-control-input-with-label\" *ngSwitchCase=\"'textbox'\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\">\n                                <input *ngIf=\"form.controls[control.key].type !== 'number'\" [formControlName]=\"control.key\" [id]=\"control.key\" [type]=\"form.controls[control.key].type\" [placeholder]=\"form.controls[control.key].placeholder\" (input)=\"emitChange($event)\" [maxlength]=\"form.controls[control.key].maxlength\" (focus)=\"handleFocus($event)\" (blur)=\"handleBlur($event)\" autocomplete>\n                                <input *ngIf=\"form.controls[control.key].type === 'number' && form.controls[control.key].subType !== 'percentage'\" [formControlName]=\"control.key\" [id]=\"control.key\" [type]=\"form.controls[control.key].type\" [placeholder]=\"form.controls[control.key].placeholder\" (keydown)=\"restrictKeys($event)\" (input)=\"emitChange($event)\" [maxlength]=\"form.controls[control.key].maxlength\" (focus)=\"handleFocus($event)\" (blur)=\"handleBlur($event)\" step=\"any\" (mousewheel)=\"numberInput.blur()\" #numberInput>\n                                <input *ngIf=\"form.controls[control.key].type === 'number' && form.controls[control.key].subType === 'percentage'\" [type]=\"form.controls[control.key].type\" [placeholder]=\"form.controls[control.key].placeholder\" (keydown)=\"restrictKeys($event)\" [value]=\"percentValue\" (input)=\"handlePercentChange($event)\" (focus)=\"handleFocus($event)\" (blur)=\"handleBlur($event)\" step=\"any\" (mousewheel)=\"percentInput.blur()\" #percentInput>\n                                <label class=\"input-label\" *ngIf=\"form.controls[control.key].subType === 'currency'\">{{ control.currencyFormat }}</label>\n                                <label class=\"input-label\" *ngIf=\"form.controls[control.key].subType === 'percentage'\">%</label>\n                            </div>\n                            <!--TextArea-->\n                            <textarea *ngSwitchCase=\"'text-area'\" [name]=\"control.key\" [attr.id]=\"control.key\" [placeholder]=\"form.controls[control.key].placeholder\" [formControlName]=\"control.key\" autosize (input)=\"handleTextAreaInput($event)\" (focus)=\"handleFocus($event)\" (blur)=\"handleBlur($event)\" [maxlength]=\"control.maxlength\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\"></textarea>\n                            <!--Editor-->\n                            <novo-editor *ngSwitchCase=\"'editor'\" [name]=\"control.key\" [formControlName]=\"control.key\" [startupFocus]=\"control.startupFocus\" [minimal]=\"control.minimal\" (focus)=\"handleFocus($event)\" (blur)=\"handleBlur($event)\"></novo-editor>\n                            <!--AceEditor-->\n                            <novo-ace-editor *ngSwitchCase=\"'ace-editor'\" [name]=\"control.key\" [formControlName]=\"control.key\" (focus)=\"handleFocus($event)\" (blur)=\"handleBlur($event)\"></novo-ace-editor>\n                            <!--HTML5 Select-->\n                            <select [id]=\"control.key\" *ngSwitchCase=\"'native-select'\" [formControlName]=\"control.key\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\">\n                                <option *ngIf=\"form.controls[control.key].placeholder\" value=\"\" disabled selected hidden>{{ form.controls[control.key].placeholder }}</option>\n                                <option *ngFor=\"let opt of form.controls[control.key].options\" [value]=\"opt.key\">{{opt.value}}</option>\n                            </select>\n                            <!--File-->\n                            <novo-file-input *ngSwitchCase=\"'file'\" [formControlName]=\"control.key\" [id]=\"control.key\" [name]=\"control.key\" [placeholder]=\"form.controls[control.key].placeholder\" [value]=\"form.controls[control.key].value\" [multiple]=\"form.controls[control.key].multiple\" [layoutOptions]=\"form.controls[control.key].layoutOptions\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\" (edit)=\"handleEdit($event)\" (save)=\"handleSave($event)\" (delete)=\"handleDelete($event)\" (upload)=\"handleUpload($event)\"></novo-file-input>\n                            <!--Tiles-->\n                            <novo-tiles *ngSwitchCase=\"'tiles'\" [options]=\"control.options\" [formControlName]=\"control.key\" (onChange)=\"modelChange($event)\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\"></novo-tiles>\n                            <!--Picker-->\n                            <div class=\"novo-control-input-container\" *ngSwitchCase=\"'picker'\">\n                                <novo-picker [config]=\"form.controls[control.key].config\" [formControlName]=\"control.key\" [placeholder]=\"form.controls[control.key].placeholder\" [parentScrollSelector]=\"form.controls[control.key].parentScrollSelector\" *ngIf=\"!form.controls[control.key].multiple\" (select)=\"modelChange($event);\" (changed)=\"modelChangeWithRaw($event)\" (typing)=\"handleTyping($event)\" (focus)=\"handleFocus($event)\" (blur)=\"handleBlur($event)\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\"></novo-picker>\n                                <chips [source]=\"form.controls[control.key].config\" [type]=\"form.controls[control.key].config.type\" [formControlName]=\"control.key\" [placeholder]=\"form.controls[control.key].placeholder\" *ngIf=\"control.multiple\" [closeOnSelect]=\"form.controls[control.key].closeOnSelect\" (changed)=\"modelChangeWithRaw($event)\" (typing)=\"handleTyping($event)\" (focus)=\"handleFocus($event)\" (blur)=\"handleBlur($event)\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\"></chips>\n                            </div>\n                            <!--Novo Select-->\n                            <novo-select *ngSwitchCase=\"'select'\" [options]=\"form.controls[control.key].options\" [headerConfig]=\"form.controls[control.key].headerConfig\" [placeholder]=\"form.controls[control.key].placeholder\" [formControlName]=\"control.key\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\" (onSelect)=\"modelChange($event)\"></novo-select>\n                            <!--Radio-->\n                            <div class=\"novo-control-input-container\" *ngSwitchCase=\"'radio'\">\n                                <novo-radio [vertical]=\"vertical\" [name]=\"control.key\" [formControlName]=\"control.key\" *ngFor=\"let option of form.controls[control.key].options\" [value]=\"option.value\" [label]=\"option.label\" [checked]=\"option.value === form.value[control.key]\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\" [button]=\"!!option.icon\" [icon]=\"option.icon\" [attr.data-automation-id]=\"control.key + '-' + (option?.label || option?.value)\"></novo-radio>\n                            </div>\n                            <!--Time-->\n                            <div class=\"novo-control-input-container\" *ngSwitchCase=\"'time'\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\">\n                                <novo-time-picker-input [attr.id]=\"control.key\" [name]=\"control.key\" [formControlName]=\"control.key\" [placeholder]=\"form.controls[control.key].placeholder\" [military]=\"form.controls[control.key].military\"></novo-time-picker-input>\n                            </div>\n                            <!--Date-->\n                            <div class=\"novo-control-input-container\" *ngSwitchCase=\"'date'\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\">\n                                <novo-date-picker-input [attr.id]=\"control.key\" [name]=\"control.key\" [formControlName]=\"control.key\" [placeholder]=\"form.controls[control.key].placeholder\"></novo-date-picker-input>\n                            </div>\n                            <!--Date and Time-->\n                            <div class=\"novo-control-input-container\" *ngSwitchCase=\"'date-time'\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\">\n                                <novo-date-time-picker-input [attr.id]=\"control.key\" [name]=\"control.key\" [formControlName]=\"control.key\" [placeholder]=\"form.controls[control.key].placeholder\" [military]=\"form.controls[control.key].military\"></novo-date-time-picker-input>\n                            </div>\n                            <!--Address-->\n                            <novo-address *ngSwitchCase=\"'address'\" [formControlName]=\"control.key\"></novo-address>\n                            <!--Checkbox-->\n                            <novo-checkbox *ngSwitchCase=\"'checkbox'\" [formControlName]=\"control.key\" [name]=\"control.key\" [label]=\"control.checkboxLabel\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\" [layoutOptions]=\"layoutOptions\"></novo-checkbox>\n                            <!--Checklist-->\n                            <novo-check-list *ngSwitchCase=\"'checklist'\" [formControlName]=\"control.key\" [name]=\"control.key\" [options]=\"form.controls[control.key].options\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\" (onSelect)=\"modelChange($event)\"></novo-check-list>\n                            <!--QuickNote-->\n                            <novo-quick-note *ngSwitchCase=\"'quick-note'\" [formControlName]=\"control.key\" [startupFocus]=\"control.startupFocus\" [placeholder]=\"form.controls[control.key].placeholder\" [config]=\"form.controls[control.key].config\" (change)=\"modelChange($event)\" [tooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\"></novo-quick-note>\n                            <!--ReadOnly-->\n                            <!--TODO - Handle rendering of different READONLY values-->\n                            <div *ngSwitchCase=\"'read-only'\">{{ form.value[control.key] }}</div>\n                        </div>\n                    </div>\n                    <!--Error Message-->\n                    <div class=\"field-message\" *ngIf=\"!condensed\" [class.has-tip]=\"form.controls[control.key].tipWell\">\n                        <div class=\"messages\">\n                            <span class=\"error-text\" *ngIf=\"showFieldMessage\"></span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && errors?.required\">{{ form.controls[control.key].label | uppercase }} {{ labels.isRequired }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && errors?.minlength\">{{ form.controls[control.key].label | uppercase }} {{ labels.minLength }} {{ form.controls[control.key].minlength }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && maxLengthMet && focused && !errors?.maxlength\">{{ labels.maxLengthMet }}({{ form.controls[control.key].maxlength }})</span>\n                            <span class=\"error-text\" *ngIf=\"errors?.maxlength\">{{ labels.invalidMaxLength }}({{ form.controls[control.key].maxlength }})</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && errors?.invalidEmail\">{{ form.controls[control.key].label | uppercase }} {{ labels.invalidEmail }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && errors?.invalidAddress\">{{ form.controls[control.key].label | uppercase }} {{ labels.invalidAddress }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && (errors?.integerTooLarge || errors?.doubleTooLarge)\">{{ form.controls[control.key].label | uppercase }} {{ labels.isTooLarge }}</span>\n                            <span *ngIf=\"isDirty && errors?.minYear\">{{ form.controls[control.key].label | uppercase }} {{ labels.notValidYear }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && (errors?.custom)\">{{ errors.custom }}</span>\n                            <!--Field Hint-->\n                            <span class=\"description\" *ngIf=\"form.controls[control.key].description\">\n                                {{ form.controls[control.key].description }}\n                            </span>\n                        </div>\n                        <span class=\"character-count\" [class.error]=\"errors?.maxlength\" *ngIf=\"showCount\">{{ characterCount }}/{{ form.controls[control.key].maxlength }}</span>\n                    </div>\n                    <!--Tip Wel-->\n                    <novo-tip-well *ngIf=\"form.controls[control.key].tipWell\" [name]=\"control.key\" [tip]=\"form.controls[control.key]?.tipWell?.tip\" [icon]=\"form.controls[control.key]?.tipWell?.icon\" [button]=\"form.controls[control.key]?.tipWell?.button\"></novo-tip-well>\n                </div>\n                <i *ngIf=\"form.controls[control.key].fieldInteractionloading\" class=\"loading\">\n                    <svg version=\"1.1\"\n                     xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:a=\"http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/\"\n                     x=\"0px\" y=\"0px\" width=\"18.2px\" height=\"18.5px\" viewBox=\"0 0 18.2 18.5\" style=\"enable-background:new 0 0 18.2 18.5;\"\n                     xml:space=\"preserve\">\n                    <style type=\"text/css\">\n                        .spinner { fill:#FFFFFF; }\n                    </style>\n                        <path class=\"spinner\" d=\"M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9\n                            c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1\n                            c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z\"/>\n                    </svg>\n                </i>\n            </div>\n        </div>\n    ",
                host: {
                    '[class]': 'form.controls[control.key].controlType',
                    '[attr.data-control-type]': 'form.controls[control.key].controlType',
                    '[class.disabled]': 'form.controls[control.key].readOnly',
                    '[class.hidden]': 'form.controls[control.key].hidden',
                    '[attr.data-control-key]': 'control.key',
                },
            },] },
];
/**
 * @nocollapse
 */
NovoControlElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
    { type: DateFormatService, },
    { type: FieldInteractionApi, },
]; };
NovoControlElement.propDecorators = {
    'control': [{ type: core.Input },],
    'form': [{ type: core.Input },],
    'condensed': [{ type: core.Input },],
    'autoFocus': [{ type: core.Input },],
    'change': [{ type: core.Output },],
    'edit': [{ type: core.Output },],
    'save': [{ type: core.Output },],
    'delete': [{ type: core.Output },],
    'upload': [{ type: core.Output },],
    'onBlur': [{ type: core.Output, args: ['blur',] },],
    'onFocus': [{ type: core.Output, args: ['focus',] },],
};
/**
 * AUTOGENERATED FILE - DO NOT EDIT
 * Generated by: https://bhsource.bullhorn.com/DEV_WORKSPACE/country-state-parser
 * Last generated on: Tue Mar 27 2018 13:07:14 GMT-0500 (Central Daylight Time)
 */
var COUNTRIES = [{
        code: 'US',
        id: 1,
        name: 'United States',
        states: [{
                code: 'AL',
                name: 'Alabama'
            }, {
                code: 'AK',
                name: 'Alaska'
            }, {
                code: 'AZ',
                name: 'Arizona'
            }, {
                code: 'AR',
                name: 'Arkansas'
            }, {
                code: 'CA',
                name: 'California'
            }, {
                code: 'CO',
                name: 'Colorado'
            }, {
                code: 'CT',
                name: 'Connecticut'
            }, {
                code: 'DE',
                name: 'Delaware'
            }, {
                code: 'DC',
                name: 'District Of Columbia'
            }, {
                code: 'FL',
                name: 'Florida'
            }, {
                code: 'GA',
                name: 'Georgia'
            }, {
                code: 'GU',
                name: 'Guam'
            }, {
                code: 'HI',
                name: 'Hawaii'
            }, {
                code: 'ID',
                name: 'Idaho'
            }, {
                code: 'IL',
                name: 'Illinois'
            }, {
                code: 'IN',
                name: 'Indiana'
            }, {
                code: 'IA',
                name: 'Iowa'
            }, {
                code: 'KS',
                name: 'Kansas'
            }, {
                code: 'KY',
                name: 'Kentucky'
            }, {
                code: 'LA',
                name: 'Louisiana'
            }, {
                code: 'ME',
                name: 'Maine'
            }, {
                code: 'MH',
                name: 'Marshall Islands'
            }, {
                code: 'MD',
                name: 'Maryland'
            }, {
                code: 'MA',
                name: 'Massachusetts'
            }, {
                code: 'MI',
                name: 'Michigan'
            }, {
                code: 'MN',
                name: 'Minnesota'
            }, {
                code: 'MS',
                name: 'Mississippi'
            }, {
                code: 'MO',
                name: 'Missouri'
            }, {
                code: 'MT',
                name: 'Montana'
            }, {
                code: 'NE',
                name: 'Nebraska'
            }, {
                code: 'NV',
                name: 'Nevada'
            }, {
                code: 'NH',
                name: 'New Hampshire'
            }, {
                code: 'NJ',
                name: 'New Jersey'
            }, {
                code: 'NM',
                name: 'New Mexico'
            }, {
                code: 'NY',
                name: 'New York'
            }, {
                code: 'NC',
                name: 'North Carolina'
            }, {
                code: 'ND',
                name: 'North Dakota'
            }, {
                code: 'MP',
                name: 'Northern Mariana Islands'
            }, {
                code: 'OH',
                name: 'Ohio'
            }, {
                code: 'OK',
                name: 'Oklahoma'
            }, {
                code: 'OR',
                name: 'Oregon'
            }, {
                code: 'PW',
                name: 'Palau'
            }, {
                code: 'PA',
                name: 'Pennsylvania'
            }, {
                code: 'PR',
                name: 'Puerto Rico'
            }, {
                code: 'RI',
                name: 'Rhode Island'
            }, {
                code: 'SC',
                name: 'South Carolina'
            }, {
                code: 'SD',
                name: 'South Dakota'
            }, {
                code: 'TN',
                name: 'Tennessee'
            }, {
                code: 'TX',
                name: 'Texas'
            }, {
                code: 'UT',
                name: 'Utah'
            }, {
                code: 'VT',
                name: 'Vermont'
            }, {
                code: 'VI',
                name: 'Virgin Islands'
            }, {
                code: 'VA',
                name: 'Virginia'
            }, {
                code: 'WA',
                name: 'Washington'
            }, {
                code: 'WV',
                name: 'West Virginia'
            }, {
                code: 'WI',
                name: 'Wisconsin'
            }, {
                code: 'WY',
                name: 'Wyoming'
            }]
    }, {
        code: 'UK',
        id: 2359,
        name: 'United Kingdom',
        states: [{
                code: 'ABD',
                name: 'Aberdeenshire'
            }, {
                code: 'ALD',
                name: 'Alderney'
            }, {
                code: 'ANS',
                name: 'Angus'
            }, {
                code: 'ANN',
                name: 'Antrim and Newtownabbey'
            }, {
                code: 'AGB',
                name: 'Argyllshire'
            }, {
                code: 'ABC',
                name: 'Armagh'
            }, {
                code: 'EAY',
                name: 'Ayrshire'
            }, {
                code: 'BLA',
                name: 'Ballymena'
            }, {
                code: 'BAY',
                name: 'Ballymoney'
            }, {
                code: 'BNB',
                name: 'Banbridge'
            }, {
                code: 'BAN',
                name: 'Banffshire'
            }, {
                code: 'BDF',
                name: 'Bedfordshire'
            }, {
                code: 'BFS',
                name: 'Belfast'
            }, {
                code: 'BRK',
                name: 'Berkshire'
            }, {
                code: 'BGW',
                name: 'Blaenau Gwent'
            }, {
                code: 'SCB',
                name: 'Borders'
            }, {
                code: 'BGE',
                name: 'Bridgend'
            }, {
                code: 'BST',
                name: 'Bristol'
            }, {
                code: 'BKM',
                name: 'Buckinghamshire'
            }, {
                code: 'CAY',
                name: 'Caerphilly'
            }, {
                code: 'CAI',
                name: 'Caithness'
            }, {
                code: 'CAM',
                name: 'Cambridgeshire'
            }, {
                code: 'CRF',
                name: 'Cardiff'
            }, {
                code: 'CMN',
                name: 'Carmarthenshire'
            }, {
                code: 'CKF',
                name: 'Carrickfergus'
            }, {
                code: 'CAS',
                name: 'Castlereagh'
            }, {
                code: 'CGN',
                name: 'Ceredigion'
            }, {
                code: 'CHE',
                name: 'Cheshire'
            }, {
                code: 'CLK',
                name: 'Clackmannanshire'
            }, {
                code: 'CLR',
                name: 'Coleraine'
            }, {
                code: 'CWY',
                name: 'Conwy'
            }, {
                code: 'CKT',
                name: 'Cookstown'
            }, {
                code: 'CON',
                name: 'Cornwall'
            }, {
                code: 'DUR',
                name: 'County Durham'
            }, {
                code: 'DRS',
                name: 'County Londonderry'
            }, {
                code: 'CRA',
                name: 'Craigavon'
            }, {
                code: 'CMA',
                name: 'Cumbria'
            }, {
                code: 'DEN',
                name: 'Denbighshire'
            }, {
                code: 'DBY',
                name: 'Derbyshire'
            }, {
                code: 'DEV',
                name: 'Devon'
            }, {
                code: 'DOR',
                name: 'Dorset'
            }, {
                code: 'EDU',
                name: 'Dumbartonshire'
            }, {
                code: 'DGY',
                name: 'Dumfries and Galloway'
            }, {
                code: 'DGN',
                name: 'Dungannon and South Tyrone'
            }, {
                code: 'ELN',
                name: 'East Lothian'
            }, {
                code: 'ESX',
                name: 'East Sussex'
            }, {
                code: 'ERY',
                name: 'East Yorkshire'
            }, {
                code: 'ESS',
                name: 'Essex'
            }, {
                code: 'FMO',
                name: 'Fermanagh and Omagh'
            }, {
                code: 'FIF',
                name: 'Fife'
            }, {
                code: 'FLN',
                name: 'Flintshire'
            }, {
                code: 'GLG',
                name: 'Glasgow'
            }, {
                code: 'GLS',
                name: 'Gloucestershire'
            }, {
                code: 'LND',
                name: 'Greater London'
            }, {
                code: 'MAN',
                name: 'Greater Manchester'
            }, {
                code: 'GSY',
                name: 'Guernsey'
            }, {
                code: 'GWN',
                name: 'Gwynedd'
            }, {
                code: 'HAM',
                name: 'Hampshire'
            }, {
                code: 'HEF',
                name: 'Herefordshire'
            }, {
                code: 'HRM',
                name: 'Herm'
            }, {
                code: 'HRT',
                name: 'Hertfordshire'
            }, {
                code: 'HLD',
                name: 'Highland'
            }, {
                code: 'INV',
                name: 'Inverness-shire'
            }, {
                code: 'AGY',
                name: 'Isle of Anglesey'
            }, {
                code: 'IOM',
                name: 'Isle of Man'
            }, {
                code: 'IOW',
                name: 'Isle of Wight'
            }, {
                code: 'JSY',
                name: 'Jersey'
            }, {
                code: 'KEN',
                name: 'Kent'
            }, {
                code: 'KCD',
                name: 'Kincardineshire'
            }, {
                code: 'KKD',
                name: 'Kirkcudbrightshire'
            }, {
                code: 'LAN',
                name: 'Lancashire'
            }, {
                code: 'LRN',
                name: 'Larne'
            }, {
                code: 'LEC',
                name: 'Leicestershire'
            }, {
                code: 'LMV',
                name: 'Limavady'
            }, {
                code: 'LIN',
                name: 'Lincolnshire'
            }, {
                code: 'LBC',
                name: 'Lisburn and Castlereagh'
            }, {
                code: 'MFT',
                name: 'Magherafelt'
            }, {
                code: 'MER',
                name: 'Merseyside'
            }, {
                code: 'MTY',
                name: 'Merthyr Tydfil'
            }, {
                code: 'MLN',
                name: 'Midlothian'
            }, {
                code: 'MON',
                name: 'Monmouthshire'
            }, {
                code: 'MRY',
                name: 'Morayshire'
            }, {
                code: 'MYL',
                name: 'Moyle'
            }, {
                code: 'NAI',
                name: 'Nairn'
            }, {
                code: 'NTL',
                name: 'Neath Port Talbot'
            }, {
                code: 'NWP',
                name: 'Newport'
            }, {
                code: 'NMD',
                name: 'Newry, Mourne and Down'
            }, {
                code: 'NFK',
                name: 'Norfolk'
            }, {
                code: 'AND',
                name: 'North Down and Ards'
            }, {
                code: 'NLK',
                name: 'North Lanarkshire'
            }, {
                code: 'NYK',
                name: 'North Yorkshire'
            }, {
                code: 'NTH',
                name: 'Northamptonshire'
            }, {
                code: 'NBL',
                name: 'Northumberland'
            }, {
                code: 'NTT',
                name: 'Nottinghamshire'
            }, {
                code: 'OMA',
                name: 'Omagh'
            }, {
                code: 'ORK',
                name: 'Orkney Islands'
            }, {
                code: 'OXF',
                name: 'Oxfordshire'
            }, {
                code: 'PEM',
                name: 'Pembrokeshire'
            }, {
                code: 'PKN',
                name: 'Perth and Kinross'
            }, {
                code: 'PER',
                name: 'Perthshire and Kinross'
            }, {
                code: 'POW',
                name: 'Powys'
            }, {
                code: 'RCC',
                name: 'Redcar and Cleveland'
            }, {
                code: 'RFW',
                name: 'Renfrewshire'
            }, {
                code: 'RCT',
                name: 'Rhondda Cynon Taff'
            }, {
                code: 'RUT',
                name: 'Rutland'
            }, {
                code: 'SRK',
                name: 'Sark'
            }, {
                code: 'ZET',
                name: 'Shetland Islands'
            }, {
                code: 'SHR',
                name: 'Shropshire'
            }, {
                code: 'SOM',
                name: 'Somerset'
            }, {
                code: 'SLK',
                name: 'South Lanarkshire'
            }, {
                code: 'SYK',
                name: 'South Yorkshire'
            }, {
                code: 'STS',
                name: 'Staffordshire'
            }, {
                code: 'STG',
                name: 'Stirlingshire'
            }, {
                code: 'STR',
                name: 'Strabane'
            }, {
                code: 'SFK',
                name: 'Suffolk'
            }, {
                code: 'SRY',
                name: 'Surrey'
            }, {
                code: 'SSX',
                name: 'Sussex'
            }, {
                code: 'SUT',
                name: 'Sutherland'
            }, {
                code: 'SWA',
                name: 'Swansea'
            }, {
                code: 'TOF',
                name: 'Torfaen'
            }, {
                code: 'TWR',
                name: 'Tyne and Wear'
            }, {
                code: 'VGL',
                name: 'Vale of Glamorgan'
            }, {
                code: 'WAR',
                name: 'Warwickshire'
            }, {
                code: 'WLN',
                name: 'West Lothian'
            }, {
                code: 'WMD',
                name: 'West Midlands'
            }, {
                code: 'WSX',
                name: 'West Sussex'
            }, {
                code: 'WRY',
                name: 'West Yorkshire'
            }, {
                code: 'ELS',
                name: 'Western Isles'
            }, {
                code: 'WIL',
                name: 'Wiltshire'
            }, {
                code: 'WOR',
                name: 'Worcestershire'
            }, {
                code: 'WRX',
                name: 'Wrexham'
            }]
    }, {
        code: 'AF',
        id: 2185,
        name: 'Afghanistan',
        states: [{
                code: 'AF01',
                name: 'Badakhshan'
            }, {
                code: 'AF02',
                name: 'Badghis'
            }, {
                code: 'AF03',
                name: 'Baghlan'
            }, {
                code: 'AF30',
                name: 'Balkh'
            }, {
                code: 'AF05',
                name: 'Bamian'
            }, {
                code: 'AF41',
                name: 'Daikondi'
            }, {
                code: 'AF06',
                name: 'Farah'
            }, {
                code: 'AF07',
                name: 'Faryab'
            }, {
                code: 'AF08',
                name: 'Ghazni'
            }, {
                code: 'AF09',
                name: 'Ghowr'
            }, {
                code: 'AF10',
                name: 'Helmand'
            }, {
                code: 'AF11',
                name: 'Herat'
            }, {
                code: 'AF31',
                name: 'Jowzjan'
            }, {
                code: 'AF13',
                name: 'Kabul'
            }, {
                code: 'AF23',
                name: 'Kandahar'
            }, {
                code: 'AF14',
                name: 'Kapisa'
            }, {
                code: 'AF37',
                name: 'Khowst'
            }, {
                code: 'AF34',
                name: 'Konar'
            }, {
                code: 'AF24',
                name: 'Kondoz'
            }, {
                code: 'AF35',
                name: 'Laghman'
            }, {
                code: 'AF17',
                name: 'Lowgar'
            }, {
                code: 'AF18',
                name: 'Nangarhar'
            }, {
                code: 'AF19',
                name: 'Nimruz'
            }, {
                code: 'AF38',
                name: 'Nurestan'
            }, {
                code: 'AF39',
                name: 'Oruzgan'
            }, {
                code: 'AF36',
                name: 'Paktia'
            }, {
                code: 'AF29',
                name: 'Paktika'
            }, {
                code: 'AF42',
                name: 'Panjshir'
            }, {
                code: 'AF40',
                name: 'Parvan'
            }, {
                code: 'AF32',
                name: 'Samangan'
            }, {
                code: 'AF33',
                name: 'Sar-e Pol'
            }, {
                code: 'AF26',
                name: 'Takhar'
            }, {
                code: 'AF27',
                name: 'Vardak'
            }, {
                code: 'AF28',
                name: 'Zabol'
            }]
    }, {
        code: 'AX',
        id: 2407,
        name: 'Åland Islands',
        states: []
    }, {
        code: 'AL',
        id: 2186,
        name: 'Albania',
        states: []
    }, {
        code: 'DZ',
        id: 2187,
        name: 'Algeria',
        states: []
    }, {
        code: 'AS',
        id: 2408,
        name: 'American Samoa',
        states: []
    }, {
        code: 'AD',
        id: 2188,
        name: 'Andorra',
        states: []
    }, {
        code: 'AO',
        id: 2189,
        name: 'Angola',
        states: [{
                code: 'AO19',
                name: 'Bengo'
            }, {
                code: 'AO01',
                name: 'Benguela'
            }, {
                code: 'AO02',
                name: 'Bié'
            }, {
                code: 'AO03',
                name: 'Cabinda'
            }, {
                code: 'AO04',
                name: 'Cuando Cubango'
            }, {
                code: 'AO05',
                name: 'Cuanza Norte'
            }, {
                code: 'AO06',
                name: 'Cuanza Sul'
            }, {
                code: 'AO07',
                name: 'Cunene'
            }, {
                code: 'AO08',
                name: 'Huambo'
            }, {
                code: 'AO09',
                name: 'Huíla'
            }, {
                code: 'AO20',
                name: 'Luanda'
            }, {
                code: 'AO17',
                name: 'Lunda Norte'
            }, {
                code: 'AO18',
                name: 'Lunda Sul'
            }, {
                code: 'AO12',
                name: 'Malanje'
            }, {
                code: 'AO14',
                name: 'Moxico'
            }, {
                code: 'AO13',
                name: 'Namibe'
            }, {
                code: 'AO15',
                name: 'Uíge'
            }, {
                code: 'AO16',
                name: 'Zaire'
            }]
    }, {
        code: 'AI',
        id: 2409,
        name: 'Anguilla',
        states: []
    }, {
        code: 'AQ',
        id: 2190,
        name: 'Antarctica',
        states: []
    }, {
        code: 'AG',
        id: 2191,
        name: 'Antigua and Barbuda',
        states: []
    }, {
        code: 'AR',
        id: 2192,
        name: 'Argentina',
        states: [{
                code: 'AR01',
                name: 'Buenos Aires'
            }, {
                code: 'AR02',
                name: 'Catamarca'
            }, {
                code: 'AR03',
                name: 'Chaco'
            }, {
                code: 'AR04',
                name: 'Chubut'
            }, {
                code: 'AR07',
                name: 'Ciudad de Buenos Aires'
            }, {
                code: 'AR05',
                name: 'Córdoba'
            }, {
                code: 'AR06',
                name: 'Corrientes'
            }, {
                code: 'AR08',
                name: 'Entre Ríos'
            }, {
                code: 'AR09',
                name: 'Formosa'
            }, {
                code: 'AR10',
                name: 'Jujuy'
            }, {
                code: 'AR11',
                name: 'La Pampa'
            }, {
                code: 'AR12',
                name: 'La Rioja'
            }, {
                code: 'AR13',
                name: 'Mendoza'
            }, {
                code: 'AR14',
                name: 'Misiones'
            }, {
                code: 'AR15',
                name: 'Neuquén'
            }, {
                code: 'AR16',
                name: 'Río Negro'
            }, {
                code: 'AR17',
                name: 'Salta'
            }, {
                code: 'AR18',
                name: 'San Juan'
            }, {
                code: 'AR19',
                name: 'San Luis'
            }, {
                code: 'AR20',
                name: 'Santa Cruz'
            }, {
                code: 'AR21',
                name: 'Santa Fe'
            }, {
                code: 'AR22',
                name: 'Santiago del Estero'
            }, {
                code: 'AR23',
                name: 'Tierra del Fuego'
            }, {
                code: 'AR24',
                name: 'Tucumán'
            }]
    }, {
        code: 'AM',
        id: 2193,
        name: 'Armenia',
        states: []
    }, {
        code: 'AB',
        id: 2373,
        name: 'Aruba',
        states: []
    }, {
        code: 'AU',
        id: 2194,
        name: 'Australia',
        states: [{
                code: 'ACT',
                name: 'Australian Capital Territory'
            }, {
                code: 'NSW',
                name: 'New South Wales'
            }, {
                code: 'NT',
                name: 'Northern Territory'
            }, {
                code: 'QLD',
                name: 'Queensland'
            }, {
                code: 'SA',
                name: 'South Australia'
            }, {
                code: 'TAS',
                name: 'Tasmania'
            }, {
                code: 'VIC',
                name: 'Victoria'
            }, {
                code: 'WA',
                name: 'Western Australia'
            }]
    }, {
        code: 'AT',
        id: 2195,
        name: 'Austria',
        states: [{
                code: 'AU01',
                name: 'Burgenland'
            }, {
                code: 'AU02',
                name: 'Carinthia'
            }, {
                code: 'AU03',
                name: 'Lower Austria'
            }, {
                code: 'AU05',
                name: 'Salzburg'
            }, {
                code: 'AU06',
                name: 'Styria'
            }, {
                code: 'AU07',
                name: 'Tyrol'
            }, {
                code: 'AU04',
                name: 'Upper Austria'
            }, {
                code: 'AU09',
                name: 'Vienna'
            }, {
                code: 'AU08',
                name: 'Vorarlberg'
            }]
    }, {
        code: 'AZ',
        id: 2196,
        name: 'Azerbaijan',
        states: [{
                code: 'AZ-ABS',
                name: 'Absheron'
            }, {
                code: 'AZ-AGM',
                name: 'Aghdam'
            }, {
                code: 'AZ-AGS',
                name: 'Aghdash'
            }, {
                code: 'AZ-AGC',
                name: 'Aghjabedi'
            }, {
                code: 'AZ-AGA',
                name: 'Aghstafa'
            }, {
                code: 'AZ-AGU',
                name: 'Aghsu'
            }, {
                code: 'AZ-AB',
                name: 'Ali-Bairamly'
            }, {
                code: 'AZ-AST',
                name: 'Astara'
            }, {
                code: 'AZ-BAB',
                name: 'Babek'
            }, {
                code: 'AZ-BA',
                name: 'Baku'
            }, {
                code: 'AZ-BAL',
                name: 'Balaken'
            }, {
                code: 'AZ-BAR',
                name: 'Barda'
            }, {
                code: 'AZ-BEY',
                name: 'Beilagan'
            }, {
                code: 'AZ-BIL',
                name: 'Bilasuvar'
            }, {
                code: 'AZ-DAS',
                name: 'Dashkesan'
            }, {
                code: 'AZ-DAV',
                name: 'Devechi'
            }, {
                code: 'AZ-FUZ',
                name: 'Fizuli'
            }, {
                code: 'AZ-QAB',
                name: 'Gabala'
            }, {
                code: 'AZ-GAD',
                name: 'Gadabey'
            }, {
                code: 'AZ-QAX',
                name: 'Gakh'
            }, {
                code: 'AZ-GA',
                name: 'Ganja'
            }, {
                code: 'AZ-QAZ',
                name: 'Gazakh'
            }, {
                code: 'AZ-GOR',
                name: 'Geranboy'
            }, {
                code: 'AZ-QOB',
                name: 'Gobustan'
            }, {
                code: 'AZ-GOY',
                name: 'Goychay'
            }, {
                code: 'AZ-QBA',
                name: 'Guba'
            }, {
                code: 'AZ-QBI',
                name: 'Gubadly'
            }, {
                code: 'AZ-QUS',
                name: 'Gusar'
            }, {
                code: 'AZ-HAC',
                name: 'Hacuqabul'
            }, {
                code: 'AZ-IMI',
                name: 'Imishli'
            }, {
                code: 'AZ-ISM',
                name: 'Ismailly'
            }, {
                code: 'AZ-CAL',
                name: 'Jalilabad'
            }, {
                code: 'AZ-CAB',
                name: 'Jebrail'
            }, {
                code: 'AZ-CUL',
                name: 'Julfa'
            }, {
                code: 'AZ-KAL',
                name: 'Kelbajar'
            }, {
                code: 'AZ-XAC',
                name: 'Khachmaz'
            }, {
                code: 'AZ-XA',
                name: 'Khankendy'
            }, {
                code: 'AZ-XAN',
                name: 'Khanlar'
            }, {
                code: 'AZ-XCI',
                name: 'Khojaly'
            }, {
                code: 'AZ-XVD',
                name: 'Khojavend'
            }, {
                code: 'AZ-XIZ',
                name: 'Khyzy'
            }, {
                code: 'AZ-KUR',
                name: 'Kyurdamir'
            }, {
                code: 'AZ-LAC',
                name: 'Lachin'
            }, {
                code: 'AZ-LAN',
                name: 'Lenkaran'
            }, {
                code: 'AZ-LA',
                name: 'Lenkaran'
            }, {
                code: 'AZ-LER',
                name: 'Lerik'
            }, {
                code: 'AZ-MAS',
                name: 'Masally'
            }, {
                code: 'AZ-MI',
                name: 'Mingechevir'
            }, {
                code: 'AZ-NA',
                name: 'Naftalan'
            }, {
                code: 'AZ-NX',
                name: 'Nakhchivan'
            }, {
                code: 'AZ-NEF',
                name: 'Neftchala'
            }, {
                code: 'AZ-OGU',
                name: 'Oghuz'
            }, {
                code: 'AZ-ORD',
                name: 'Ordubad'
            }, {
                code: 'AZ-SAT',
                name: 'Saatly'
            }, {
                code: 'AZ-SAB',
                name: 'Sabirabad'
            }, {
                code: 'AZ-SAL',
                name: 'Salyan'
            }, {
                code: 'AZ-SMX',
                name: 'Samuh'
            }, {
                code: 'AZ-SAD',
                name: 'Sedarak'
            }, {
                code: 'AZ-SAH',
                name: 'Shahbuz'
            }, {
                code: 'AZ-SMI',
                name: 'Shamakhy'
            }, {
                code: 'AZ-SKR',
                name: 'Shamkir'
            }, {
                code: 'AZ-SAK',
                name: 'Sheki'
            }, {
                code: 'AZ-SA',
                name: 'Sheki'
            }, {
                code: 'AZ-SAR',
                name: 'Sherur'
            }, {
                code: 'AZ-SS',
                name: 'Shusha'
            }, {
                code: 'AZ-SUS',
                name: 'Shusha'
            }, {
                code: 'AZ-SIY',
                name: 'Siazan'
            }, {
                code: 'AZ-SM',
                name: 'Sumgayit'
            }, {
                code: 'AZ-TAR',
                name: 'Terter'
            }, {
                code: 'AZ-TOV',
                name: 'Tovuz'
            }, {
                code: 'AZ-UCA',
                name: 'Ujar'
            }, {
                code: 'AZ-YAR',
                name: 'Yardymly'
            }, {
                code: 'AZ-YE',
                name: 'Yevlakh'
            }, {
                code: 'AZ-YEV',
                name: 'Yevlakh'
            }, {
                code: 'AZ-ZAQ',
                name: 'Zagatala'
            }, {
                code: 'AZ-ZAN',
                name: 'Zangilan'
            }, {
                code: 'AZ-ZAR',
                name: 'Zerdab'
            }]
    }, {
        code: 'BS',
        id: 2197,
        name: 'Bahamas',
        states: [{
                code: 'BF24',
                name: 'Acklins'
            }, {
                code: 'BF32',
                name: 'Berry Islands'
            }, {
                code: 'BF05',
                name: 'Bimini'
            }, {
                code: 'BF36',
                name: 'Black Point'
            }, {
                code: 'BF06',
                name: 'Cat Island'
            }, {
                code: 'BF37',
                name: 'Central Abaco'
            }, {
                code: 'BF38',
                name: 'Central Andros'
            }, {
                code: 'BF39',
                name: 'Central Eleuthera'
            }, {
                code: 'BF25',
                name: 'City of Freeport'
            }, {
                code: 'BF40',
                name: 'Crooked Island'
            }, {
                code: 'BF41',
                name: 'East Grand Bahama'
            }, {
                code: 'BF10',
                name: 'Exuma'
            }, {
                code: 'BF42',
                name: 'Grand Cay'
            }, {
                code: 'BS.GT\t',
                name: 'Green Turtle Cay'
            }, {
                code: 'BF22',
                name: 'Harbour Island'
            }, {
                code: 'BF43',
                name: 'Hope Town'
            }, {
                code: 'BF13',
                name: 'Inagua'
            }, {
                code: 'BF15',
                name: 'Long Island'
            }, {
                code: 'BF44',
                name: 'Mangrove Cay'
            }, {
                code: 'BF16',
                name: 'Mayaguana'
            }, {
                code: 'BF45',
                name: 'Moore\'s Island'
            }, {
                code: 'BS.NW',
                name: 'New Providence'
            }, {
                code: 'BF46',
                name: 'North Abaco'
            }, {
                code: 'BF47',
                name: 'North Andros'
            }, {
                code: 'BF48',
                name: 'North Eleuthera'
            }, {
                code: 'BF18',
                name: 'Ragged Island'
            }, {
                code: 'BF49',
                name: 'Rum Cay'
            }, {
                code: 'BF35',
                name: 'San Salvador'
            }, {
                code: 'BF50',
                name: 'South Abaco'
            }, {
                code: 'BF51',
                name: 'South Andros'
            }, {
                code: 'BF52',
                name: 'South Eleuthera'
            }, {
                code: 'BF53',
                name: 'Spanish Wells'
            }, {
                code: 'BF54',
                name: 'West Grand Bahama'
            }]
    }, {
        code: 'BH',
        id: 2198,
        name: 'Bahrain',
        states: [{
                code: 'BA16',
                name: 'Capital'
            }, {
                code: 'BA19',
                name: 'Central'
            }, {
                code: 'BA15',
                name: 'Muharraq'
            }, {
                code: 'BA18',
                name: 'Northern'
            }, {
                code: 'BA17',
                name: 'Southern'
            }]
    }, {
        code: 'BD',
        id: 2199,
        name: 'Bangladesh',
        states: [{
                code: 'BG85',
                name: 'Barisal'
            }, {
                code: 'BG84',
                name: 'Chittagong'
            }, {
                code: 'BG81',
                name: 'Dhaka'
            }, {
                code: 'BG82',
                name: 'Khulna'
            }, {
                code: 'BG81',
                name: 'Mymensingh'
            }, {
                code: 'BG83',
                name: 'Rajshahi'
            }, {
                code: 'BG87',
                name: 'Rangpur'
            }, {
                code: 'BG86',
                name: 'Sylhet'
            }]
    }, {
        code: 'BB',
        id: 2200,
        name: 'Barbados',
        states: [{
                code: 'BB01',
                name: 'Christ Church'
            }, {
                code: 'BB02',
                name: 'Saint Andrew'
            }, {
                code: 'BB03',
                name: 'Saint George'
            }, {
                code: 'BB04',
                name: 'Saint James'
            }, {
                code: 'BB05',
                name: 'Saint John'
            }, {
                code: 'BB06',
                name: 'Saint Joseph'
            }, {
                code: 'BB07',
                name: 'Saint Lucy'
            }, {
                code: 'BB08',
                name: 'Saint Michael'
            }, {
                code: 'BB09',
                name: 'Saint Peter'
            }, {
                code: 'BB10',
                name: 'Saint Philip'
            }, {
                code: 'BB11',
                name: 'Saint Thomas'
            }]
    }, {
        code: 'BY',
        id: 2201,
        name: 'Belarus',
        states: [{
                code: 'BO01',
                name: 'Brest'
            }, {
                code: 'BO02',
                name: 'Gomel'
            }, {
                code: 'BO03',
                name: 'Grodno'
            }, {
                code: 'BO05',
                name: 'Minsk'
            }, {
                code: 'BO04',
                name: 'Minsk City'
            }, {
                code: 'BO06',
                name: 'Mogilev'
            }, {
                code: 'BO07',
                name: 'Vitebsk'
            }]
    }, {
        code: 'BE',
        id: 2202,
        name: 'Belgium',
        states: [{
                code: 'BE01',
                name: 'Antwerpen Province'
            }, {
                code: 'BE11',
                name: 'Brussels-Capital Region'
            }, {
                code: 'BE12',
                name: 'Flemish Brabant Province'
            }, {
                code: 'BE03',
                name: 'Hainaut Province'
            }, {
                code: 'BE04',
                name: 'Liege Province'
            }, {
                code: 'BE05',
                name: 'Limburg Province'
            }, {
                code: 'BE06',
                name: 'Luxembourg Province'
            }, {
                code: 'BE07',
                name: 'Namur Province'
            }, {
                code: 'BE08',
                name: 'Oost-Vlaanderen Province'
            }, {
                code: 'BE10',
                name: 'Walloon Brabant Province'
            }, {
                code: 'BE09',
                name: 'West-Vlaanderen Province'
            }]
    }, {
        code: 'BZ',
        id: 2203,
        name: 'Belize',
        states: []
    }, {
        code: 'BJ',
        id: 2204,
        name: 'Benin',
        states: [{
                code: 'BN07',
                name: 'Alibori'
            }, {
                code: 'BN08',
                name: 'Atacora'
            }, {
                code: 'BN09',
                name: 'Atlantique'
            }, {
                code: 'BN10',
                name: 'Borgou'
            }, {
                code: 'BN11',
                name: 'Collines'
            }, {
                code: 'BN12',
                name: 'Couffo'
            }, {
                code: 'BN13',
                name: 'Donga'
            }, {
                code: 'BN14',
                name: 'Littoral'
            }, {
                code: 'BN15',
                name: 'Mono'
            }, {
                code: 'BN16',
                name: 'Ouémé'
            }, {
                code: 'BN17',
                name: 'Plateau'
            }, {
                code: 'BN18',
                name: 'Zou'
            }]
    }, {
        code: 'BU',
        id: 2372,
        name: 'Bermuda',
        states: [{
                code: 'BD01',
                name: 'Devonshire'
            }, {
                code: 'BD02',
                name: 'Hamilton'
            }, {
                code: 'BD03',
                name: 'Hamilton municipality'
            }, {
                code: 'BD04',
                name: 'Paget'
            }, {
                code: 'BD05',
                name: 'Pembroke'
            }, {
                code: 'BD06',
                name: 'Saint George municipality'
            }, {
                code: 'BD07',
                name: 'Saint George\'s'
            }, {
                code: 'BD08',
                name: 'Sandys'
            }, {
                code: 'BD09',
                name: 'Smiths'
            }, {
                code: 'BD10',
                name: 'Southampton'
            }, {
                code: 'BD11',
                name: 'Warwick'
            }]
    }, {
        code: 'BT',
        id: 2205,
        name: 'Bhutan',
        states: []
    }, {
        code: 'BO',
        id: 2206,
        name: 'Bolivia; Plurinational State',
        states: [{
                code: 'BL01',
                name: 'Chuquisaca'
            }, {
                code: 'BL02',
                name: 'Cochabamba'
            }, {
                code: 'BL03',
                name: 'El Beni'
            }, {
                code: 'BL04',
                name: 'La Paz'
            }, {
                code: 'BL05',
                name: 'Oruro'
            }, {
                code: 'BL06',
                name: 'Pando'
            }, {
                code: 'BL07',
                name: 'Potosí'
            }, {
                code: 'BL08',
                name: 'Santa Cruz'
            }, {
                code: 'BL09',
                name: 'Tarija'
            }]
    }, {
        code: 'BA',
        id: 2207,
        name: 'Bosnia and Herzegovina',
        states: [{
                code: 'BA-05',
                name: 'Bosansko-podrinjski kanton'
            }, {
                code: 'BA-BRC',
                name: 'Brcko distrikt'
            }, {
                code: 'BA-BIH',
                name: 'Federacija Bosna i Hercegovina'
            }, {
                code: 'BA-07',
                name: 'Hercegovacko-neretvanski kanton'
            }, {
                code: 'BA-09',
                name: 'Kanton Sarajevo'
            }, {
                code: 'BA-10',
                name: 'Livanjski kanton'
            }, {
                code: 'BA-02',
                name: 'Posavski kanton'
            }, {
                code: 'BA-SRP',
                name: 'Republika Srpska'
            }, {
                code: 'BA-06',
                name: 'Srednjobosanski kanton'
            }, {
                code: 'BA-03',
                name: 'Tuzlanski kanton'
            }, {
                code: 'BA-01',
                name: 'Unsko-sanski kanton'
            }, {
                code: 'BA-08',
                name: 'Zapadnohercegovacki kanton'
            }, {
                code: 'BA-04',
                name: 'Zenicko-dobojski kanton'
            }]
    }, {
        code: 'BW',
        id: 2208,
        name: 'Botswana',
        states: [{
                code: 'BC01',
                name: 'Central'
            }, {
                code: 'BC12',
                name: 'Chobe'
            }, {
                code: 'BC13',
                name: 'Francistown'
            }, {
                code: 'BC14',
                name: 'Gaborone'
            }, {
                code: 'BC03',
                name: 'Ghanzi'
            }, {
                code: 'BC15',
                name: 'Jwaneng'
            }, {
                code: 'BC04',
                name: 'Kgalagadi'
            }, {
                code: 'BC05',
                name: 'Kgatleng'
            }, {
                code: 'BC06',
                name: 'Kweneng'
            }, {
                code: 'BC16',
                name: 'Lobatse'
            }, {
                code: 'BC08',
                name: 'North-East'
            }, {
                code: 'BC11',
                name: 'North-West'
            }, {
                code: 'BC17',
                name: 'Selibe Phikwe'
            }, {
                code: 'BC09',
                name: 'South East'
            }, {
                code: 'BC10',
                name: 'Southern'
            }, {
                code: 'BC18',
                name: 'Sowa Town'
            }]
    }, {
        code: 'BV',
        id: 2410,
        name: 'Bouvet Island',
        states: []
    }, {
        code: 'BR',
        id: 2209,
        name: 'Brazil',
        states: [{
                code: 'AC',
                name: 'Acre'
            }, {
                code: 'AL',
                name: 'Alagoas'
            }, {
                code: 'AP',
                name: 'Amapá'
            }, {
                code: 'AM',
                name: 'Amazonas'
            }, {
                code: 'BA',
                name: 'Bahia'
            }, {
                code: 'CE',
                name: 'Ceará'
            }, {
                code: 'DF',
                name: 'Distrito Federal'
            }, {
                code: 'ES',
                name: 'Espírito Santo'
            }, {
                code: 'GO',
                name: 'Goiás'
            }, {
                code: 'MA',
                name: 'Maranhão'
            }, {
                code: 'MT',
                name: 'Mato Grosso'
            }, {
                code: 'MS',
                name: 'Mato Grosso do Sul'
            }, {
                code: 'MG',
                name: 'Minas Gerais'
            }, {
                code: 'PA',
                name: 'Pará'
            }, {
                code: 'PR',
                name: 'Paraná'
            }, {
                code: 'PB',
                name: 'Paraíba'
            }, {
                code: 'PE',
                name: 'Pernambuco'
            }, {
                code: 'PI',
                name: 'Piauí'
            }, {
                code: 'RN',
                name: 'Rio Grande do Norte'
            }, {
                code: 'RS',
                name: 'Rio Grande do Sul'
            }, {
                code: 'RJ',
                name: 'Rio de Janeiro'
            }, {
                code: 'RO',
                name: 'Rondônia'
            }, {
                code: 'RR',
                name: 'Roraima'
            }, {
                code: 'SC',
                name: 'Santa Catarina'
            }, {
                code: 'SP',
                name: 'São Paulo'
            }, {
                code: 'SE',
                name: 'Sergipe'
            }, {
                code: 'TO',
                name: 'Tocantins'
            }]
    }, {
        code: 'IO',
        id: 2411,
        name: 'British Indian Ocean Territory',
        states: []
    }, {
        code: 'BN',
        id: 2210,
        name: 'Brunei Darussalam',
        states: [{
                code: 'BX01',
                name: 'Amo'
            }, {
                code: 'BX02',
                name: 'Bandar Seri Begawan'
            }, {
                code: 'BX03',
                name: 'Bangar'
            }, {
                code: 'BX04',
                name: 'Batu Apoi'
            }, {
                code: 'BX05',
                name: 'Berakas'
            }, {
                code: 'BX06',
                name: 'Bokok'
            }, {
                code: 'BX07',
                name: 'Bukit Sawat'
            }, {
                code: 'BX08',
                name: 'Burong Pinggai Ayer'
            }, {
                code: 'BX09',
                name: 'Gadong'
            }, {
                code: 'BX10',
                name: 'Keriam'
            }, {
                code: 'BX11',
                name: 'Kianggeh'
            }, {
                code: 'BX12',
                name: 'Kilanas'
            }, {
                code: 'BX13',
                name: 'Kiudang'
            }, {
                code: 'BX14',
                name: 'Kota Batu'
            }, {
                code: 'BX15',
                name: 'Kuala Balai'
            }, {
                code: 'BX16',
                name: 'Kuala Belait'
            }, {
                code: 'BX17',
                name: 'Labi'
            }, {
                code: 'BX18',
                name: 'Labu'
            }, {
                code: 'BX19',
                name: 'Lamunin'
            }, {
                code: 'BX20',
                name: 'Liang'
            }, {
                code: 'BX21',
                name: 'Lumapas'
            }, {
                code: 'BX22',
                name: 'Melilas'
            }, {
                code: 'BX23',
                name: 'Mentiri'
            }, {
                code: 'BX24',
                name: 'Pekan Tutong'
            }, {
                code: 'BX25',
                name: 'Pengkalan Batu'
            }, {
                code: 'BX26',
                name: 'Peramu'
            }, {
                code: 'BX27',
                name: 'Rambai'
            }, {
                code: 'BX28',
                name: 'Saba'
            }, {
                code: 'BX29',
                name: 'Sengkurong'
            }, {
                code: 'BX30',
                name: 'Serasa'
            }, {
                code: 'BX31',
                name: 'Seria'
            }, {
                code: 'BX32',
                name: 'Sukang'
            }, {
                code: 'BX33',
                name: 'Sungai Kebun'
            }, {
                code: 'BX34',
                name: 'Sungai Kedayan'
            }, {
                code: 'BX35',
                name: 'Tamoi'
            }, {
                code: 'BX36',
                name: 'Tanjong Maya'
            }, {
                code: 'BX37',
                name: 'Telisai'
            }, {
                code: 'BX38',
                name: 'Ukong'
            }]
    }, {
        code: 'BG',
        id: 2211,
        name: 'Bulgaria',
        states: [{
                code: 'BU38',
                name: 'Blagoevgrad'
            }, {
                code: 'BU39',
                name: 'Burgas'
            }, {
                code: 'BU40',
                name: 'Dobrich'
            }, {
                code: 'BU41',
                name: 'Gabrovo'
            }, {
                code: 'BU42',
                name: 'Grad Sofiya'
            }, {
                code: 'BU43',
                name: 'Khaskovo'
            }, {
                code: 'BU44',
                name: 'Kurdzhali'
            }, {
                code: 'BU45',
                name: 'Kyustendil'
            }, {
                code: 'BU46',
                name: 'Lovech'
            }, {
                code: 'BU47',
                name: 'Montana'
            }, {
                code: 'BU48',
                name: 'Pazardzhik'
            }, {
                code: 'BU49',
                name: 'Pernik'
            }, {
                code: 'BU50',
                name: 'Pleven'
            }, {
                code: 'BU51',
                name: 'Plovdiv'
            }, {
                code: 'BU52',
                name: 'Razgrad'
            }, {
                code: 'BU53',
                name: 'Ruse'
            }, {
                code: 'BU54',
                name: 'Shumen'
            }, {
                code: 'BU55',
                name: 'Silistra'
            }, {
                code: 'BU56',
                name: 'Sliven'
            }, {
                code: 'BU57',
                name: 'Smolyan'
            }, {
                code: 'BU58',
                name: 'Sofiya'
            }, {
                code: 'BU59',
                name: 'Stara Zagora'
            }, {
                code: 'BU60',
                name: 'Turgovishte'
            }, {
                code: 'BU61',
                name: 'Varna'
            }, {
                code: 'BU62',
                name: 'Veliko Turnovo'
            }, {
                code: 'BU63',
                name: 'Vidin'
            }, {
                code: 'BU64',
                name: 'Vratsa'
            }, {
                code: 'BU65',
                name: 'Yambol'
            }]
    }, {
        code: 'BF',
        id: 2212,
        name: 'Burkina Faso',
        states: [{
                code: 'UV79',
                name: 'Boucle du Mouhoun'
            }, {
                code: 'UV80',
                name: 'Cascades'
            }, {
                code: 'UV82',
                name: 'Centre Est'
            }, {
                code: 'UV83',
                name: 'Centre Nord'
            }, {
                code: 'UV84',
                name: 'Centre Ouest'
            }, {
                code: 'UV81',
                name: 'Centre'
            }, {
                code: 'UV85',
                name: 'Centre Sud'
            }, {
                code: 'UV86',
                name: 'Est'
            }, {
                code: 'UV87',
                name: 'Hauts Bassins'
            }, {
                code: 'UV88',
                name: 'Nord'
            }, {
                code: 'UV89',
                name: 'Plateau Central'
            }, {
                code: 'UV90',
                name: 'Sahel'
            }, {
                code: 'UV91',
                name: 'Sud-Ouest'
            }]
    }, {
        code: 'BM',
        id: 2385,
        name: 'Burma',
        states: [{
                code: 'BM03',
                name: 'Ayeyarwady'
            }, {
                code: 'BM16',
                name: 'Bago'
            }, {
                code: 'BM02',
                name: 'Chin'
            }, {
                code: 'BM04',
                name: 'Kachin'
            }, {
                code: 'BM06',
                name: 'Kayah'
            }, {
                code: 'BM05',
                name: 'Kayin'
            }, {
                code: 'BM15',
                name: 'Magway'
            }, {
                code: 'BM08',
                name: 'Mandalay'
            }, {
                code: 'BM13',
                name: 'Mon'
            }, {
                code: 'BM18',
                name: 'Naypyidaw'
            }, {
                code: 'BM01',
                name: 'Rakhine'
            }, {
                code: 'BM10',
                name: 'Sagaing'
            }, {
                code: 'BM11',
                name: 'Shan'
            }, {
                code: 'BM12',
                name: 'Tanintharyi'
            }, {
                code: 'BM17',
                name: 'Yangon'
            }]
    }, {
        code: 'BI',
        id: 2213,
        name: 'Burundi',
        states: []
    }, {
        code: 'KH',
        id: 2214,
        name: 'Cambodia',
        states: [{
                code: 'CB25',
                name: 'Bântéay Méanchey'
            }, {
                code: 'CB29',
                name: 'Batdâmbâng'
            }, {
                code: 'CB02',
                name: 'Kâmpóng Cham'
            }, {
                code: 'CB03',
                name: 'Kâmpóng Chhnang'
            }, {
                code: 'CB04',
                name: 'Kâmpóng Spœ'
            }, {
                code: 'CB05',
                name: 'Kâmpóng Thum'
            }, {
                code: 'CB21',
                name: 'Kâmpôt'
            }, {
                code: 'CB07',
                name: 'Kândal'
            }, {
                code: 'CB08',
                name: 'Kaôh Kong'
            }, {
                code: 'CB09',
                name: 'Krâchéh'
            }, {
                code: 'CB26',
                name: 'Krong Keb'
            }, {
                code: 'CB30',
                name: 'Krong Pailin'
            }, {
                code: 'CB28',
                name: 'Krong Preah Sihanouk'
            }, {
                code: 'CB10',
                name: 'Môndól Kiri'
            }, {
                code: 'CB27',
                name: 'Otdâr Méanchey'
            }, {
                code: 'CB22',
                name: 'Phnom Penh'
            }, {
                code: 'CB12',
                name: 'Pouthisat'
            }, {
                code: 'CB13',
                name: 'Preah Vihéar'
            }, {
                code: 'CB14',
                name: 'Prey Vêng'
            }, {
                code: 'CB23',
                name: 'Rôtânôkiri'
            }, {
                code: 'CB24',
                name: 'Siemréab'
            }, {
                code: 'CB17',
                name: 'Stœ?ng Trêng'
            }, {
                code: 'CB18',
                name: 'Svay Rieng'
            }, {
                code: 'CB19',
                name: 'Takêv'
            }, {
                code: 'CB31',
                name: 'Tbong Khmum'
            }]
    }, {
        code: 'CM',
        id: 2215,
        name: 'Cameroon',
        states: [{
                code: 'CM10',
                name: 'Adamaoua'
            }, {
                code: 'CM11',
                name: 'Centre'
            }, {
                code: 'CM04',
                name: 'Est'
            }, {
                code: 'CM12',
                name: 'Extrême-Nord'
            }, {
                code: 'CM05',
                name: 'Littoral'
            }, {
                code: 'CM07',
                name: 'Nord-Ouest'
            }, {
                code: 'CM13',
                name: 'Nord'
            }, {
                code: 'CM08',
                name: 'Ouest'
            }, {
                code: 'CM09',
                name: 'Sud-Ouest'
            }, {
                code: 'CM14',
                name: 'Sud'
            }]
    }, {
        code: 'CA',
        id: 2216,
        name: 'Canada',
        states: [{
                code: 'AB',
                name: 'Alberta'
            }, {
                code: 'BC',
                name: 'British Columbia'
            }, {
                code: 'MB',
                name: 'Manitoba'
            }, {
                code: 'NB',
                name: 'New Brunswick'
            }, {
                code: 'NL',
                name: 'Newfoundland and Labrador'
            }, {
                code: 'NT',
                name: 'Northwest Territories'
            }, {
                code: 'NS',
                name: 'Nova Scotia'
            }, {
                code: 'NU',
                name: 'Nunavut'
            }, {
                code: 'ON',
                name: 'Ontario'
            }, {
                code: 'PE',
                name: 'Prince Edward Island'
            }, {
                code: 'QC',
                name: 'Quebec'
            }, {
                code: 'SK',
                name: 'Saskatchewan'
            }, {
                code: 'YT',
                name: 'Yukon'
            }]
    }, {
        code: 'CV',
        id: 2217,
        name: 'Cape Verde',
        states: []
    }, {
        code: 'KY',
        id: 2379,
        name: 'Cayman Islands',
        states: [{
                code: 'KY.BT',
                name: 'Bodden Town'
            }, {
                code: 'KY.EE',
                name: 'East End'
            }, {
                code: 'KY.GT',
                name: 'George Town'
            }, {
                code: 'KY.NS',
                name: 'North Side'
            }, {
                code: 'KY.SI',
                name: 'Sister Islands'
            }, {
                code: 'KY.WB',
                name: 'West Bay'
            }]
    }, {
        code: 'CF',
        id: 2218,
        name: 'Central African Republic',
        states: [{
                code: 'CT01',
                name: 'Bamingui-Bangoran'
            }, {
                code: 'CT18',
                name: 'Bangui'
            }, {
                code: 'CT02',
                name: 'Basse-Kotto'
            }, {
                code: 'CT05',
                name: 'Haut-Mbomou'
            }, {
                code: 'CT03',
                name: 'Haute-Kotto'
            }, {
                code: 'CT06',
                name: 'Kémo'
            }, {
                code: 'CT07',
                name: 'Lobaye'
            }, {
                code: 'CT04',
                name: 'Mambéré-Kadéï'
            }, {
                code: 'CT08',
                name: 'Mbomou'
            }, {
                code: 'CT15',
                name: 'Nana-Grébizi'
            }, {
                code: 'CT09',
                name: 'Nana-Mambéré'
            }, {
                code: 'CT17',
                name: 'Ombella-M\'Poko'
            }, {
                code: 'CT11',
                name: 'Ouaka'
            }, {
                code: 'CT12',
                name: 'Ouham'
            }, {
                code: 'CT13',
                name: 'Ouham-Pendé'
            }, {
                code: 'CT16',
                name: 'Sangha-Mbaéré'
            }, {
                code: 'CT14',
                name: 'Vakaga'
            }]
    }, {
        code: 'TD',
        id: 2219,
        name: 'Chad',
        states: [{
                code: 'CD22',
                name: 'Barh el Ghazel'
            }, {
                code: 'CD01',
                name: 'Batha'
            }, {
                code: 'CD23',
                name: 'Borkou'
            }, {
                code: 'CD15',
                name: 'Chari-Baguirmi'
            }, {
                code: 'CD27',
                name: 'Ennedi Est'
            }, {
                code: 'CD28',
                name: 'Ennedi Ouest'
            }, {
                code: 'CD05',
                name: 'Guéra'
            }, {
                code: 'CD18',
                name: 'Hadjer-Lamis'
            }, {
                code: 'CD06',
                name: 'Kanem'
            }, {
                code: 'CD07',
                name: 'Lac'
            }, {
                code: 'CD08',
                name: 'Logone Occidental'
            }, {
                code: 'CD09',
                name: 'Logone Oriental'
            }, {
                code: 'CD19',
                name: 'Mandoul'
            }, {
                code: 'CD16',
                name: 'Mayo-Kebbi Est'
            }, {
                code: 'CD20',
                name: 'Mayo-Kebbi Ouest'
            }, {
                code: 'CD17',
                name: 'Moyen-Chari'
            }, {
                code: 'CD12',
                name: 'Ouaddaï'
            }, {
                code: 'CD13',
                name: 'Salamat'
            }, {
                code: 'CD25',
                name: 'Sila'
            }, {
                code: 'CD14',
                name: 'Tandjilé'
            }, {
                code: 'CD26',
                name: 'Tibesti'
            }, {
                code: 'CD21',
                name: 'Ville de N\'Djamena'
            }, {
                code: 'CD02',
                name: 'Wadi Fira'
            }]
    }, {
        code: 'CH99',
        id: 2386,
        name: 'Channel Islands',
        states: []
    }, {
        code: 'CL',
        id: 2220,
        name: 'Chile',
        states: [{
                code: 'CL.AI',
                name: 'Aisén del General Carlos Ibáñez del Campo'
            }, {
                code: 'CL.AN',
                name: 'Antofagasta'
            }, {
                code: 'CL.AR',
                name: 'Araucanía'
            }, {
                code: 'CL.AP',
                name: 'Arica and Parinacota'
            }, {
                code: 'CL.AT',
                name: 'Atacama'
            }, {
                code: 'CL.BI',
                name: 'Bío-Bío'
            }, {
                code: 'CL.CO',
                name: 'Coquimbo'
            }, {
                code: 'CL.LI',
                name: 'Libertador General Bernardo O\'Higgins'
            }, {
                code: 'CL.LG',
                name: 'Los Lagos'
            }, {
                code: 'CL.LR',
                name: 'Los Ríos'
            }, {
                code: 'CL.MA',
                name: 'Magallanes y Antártica Chilena'
            }, {
                code: 'CL.ML',
                name: 'Maule'
            }, {
                code: 'CL.RM',
                name: 'Región Metropolitana de Santiago'
            }, {
                code: 'CL.TP',
                name: 'Tarapacá'
            }, {
                code: 'CL.VS',
                name: 'Valparaíso'
            }]
    }, {
        code: 'CN',
        id: 2221,
        name: 'China',
        states: [{
                code: 'CH01',
                name: 'Anhui'
            }, {
                code: 'CH22',
                name: 'Beijing'
            }, {
                code: 'CH33',
                name: 'Chongqing'
            }, {
                code: 'CH07',
                name: 'Fujian'
            }, {
                code: 'CH15',
                name: 'Gansu'
            }, {
                code: 'CH17',
                name: 'Guangdon'
            }, {
                code: 'CH30',
                name: 'Guangdong'
            }, {
                code: 'CH16',
                name: 'Guangxi'
            }, {
                code: 'CH18',
                name: 'Guizhou'
            }, {
                code: 'CH31',
                name: 'Hainan'
            }, {
                code: 'CH10',
                name: 'Hebei'
            }, {
                code: 'CH08',
                name: 'Heilongjiang'
            }, {
                code: 'CH09',
                name: 'Henan'
            }, {
                code: 'CH34',
                name: 'Hong Kong'
            }, {
                code: 'CH12',
                name: 'Hubei'
            }, {
                code: 'CH11',
                name: 'Hunan'
            }, {
                code: 'CH04',
                name: 'Jiangsu'
            }, {
                code: 'CH03',
                name: 'Jiangxi'
            }, {
                code: 'CH05',
                name: 'Jilin'
            }, {
                code: 'CH19',
                name: 'Liaoning'
            }, {
                code: 'CH20',
                name: 'Nei Mongol'
            }, {
                code: 'CH21',
                name: 'Ningxia'
            }, {
                code: 'CH06',
                name: 'Qinghai'
            }, {
                code: 'CH26',
                name: 'Shaanxi'
            }, {
                code: 'CH25',
                name: 'Shandong'
            }, {
                code: 'CH23',
                name: 'Shanghai'
            }, {
                code: 'CH24',
                name: 'Shanxi'
            }, {
                code: 'CH32',
                name: 'Sichuan'
            }, {
                code: 'CH27',
                name: 'Sichuan'
            }, {
                code: 'CH28',
                name: 'Tianjin'
            }, {
                code: 'CH13',
                name: 'Xinjiang'
            }, {
                code: 'CH14',
                name: 'Xizang'
            }, {
                code: 'CH29',
                name: 'Yunnan'
            }, {
                code: 'CH02',
                name: 'Zhejiang'
            }]
    }, {
        code: 'CX',
        id: 2412,
        name: 'Christmas Island',
        states: []
    }, {
        code: 'CC',
        id: 2413,
        name: 'Cocos (Keeling) Islands',
        states: []
    }, {
        code: 'CO',
        id: 2222,
        name: 'Colombia',
        states: [{
                code: 'CO01',
                name: 'Amazonas'
            }, {
                code: 'CO02',
                name: 'Antioquia'
            }, {
                code: 'CO03',
                name: 'Arauca'
            }, {
                code: 'CO04',
                name: 'Atlántico'
            }, {
                code: 'CO35',
                name: 'Bolívar'
            }, {
                code: 'CO36',
                name: 'Boyacá'
            }, {
                code: 'CO37',
                name: 'Caldas'
            }, {
                code: 'CO08',
                name: 'Caquetá'
            }, {
                code: 'CO32',
                name: 'Casanare'
            }, {
                code: 'CO09',
                name: 'Cauca'
            }, {
                code: 'CO10',
                name: 'Cesar'
            }, {
                code: 'CO11',
                name: 'Chocó'
            }, {
                code: 'CO12',
                name: 'Córdoba'
            }, {
                code: 'CO33',
                name: 'Cundinamarca'
            }, {
                code: 'CO34',
                name: 'Distrito Capital'
            }, {
                code: 'CO15',
                name: 'Guainía'
            }, {
                code: 'CO14',
                name: 'Guaviare'
            }, {
                code: 'CO16',
                name: 'Huila'
            }, {
                code: 'CO17',
                name: 'La Guajira'
            }, {
                code: 'CO38',
                name: 'Magdalena'
            }, {
                code: 'CO19',
                name: 'Meta'
            }, {
                code: 'CO20',
                name: 'Nariño'
            }, {
                code: 'CO21',
                name: 'Norte de Santander'
            }, {
                code: 'CO22',
                name: 'Putumayo'
            }, {
                code: 'CO23',
                name: 'Quindío'
            }, {
                code: 'CO24',
                name: 'Risaralda'
            }, {
                code: 'CO25',
                name: 'San Andrés y Providencia'
            }, {
                code: 'CO26',
                name: 'Santander'
            }, {
                code: 'CO27',
                name: 'Sucre'
            }, {
                code: 'CO28',
                name: 'Tolima'
            }, {
                code: 'CO29',
                name: 'Valle del Cauca'
            }, {
                code: 'CO30',
                name: 'Vaupés'
            }, {
                code: 'CO31',
                name: 'Vichada'
            }]
    }, {
        code: 'KM',
        id: 2223,
        name: 'Comoros',
        states: []
    }, {
        code: 'ZR',
        id: 2368,
        name: 'Congo; Democratic Republic of',
        states: [{
                code: 'CD.BU',
                name: 'Bas-Uélé'
            }, {
                code: 'CD.HK',
                name: 'Haut-Katanga'
            }, {
                code: 'CD.HL',
                name: 'Haut-Lomami'
            }, {
                code: 'CD.HU',
                name: 'Haut-Uélé'
            }, {
                code: 'CD.IT',
                name: 'Ituri'
            }, {
                code: 'CD.KS',
                name: 'Kasaï'
            }, {
                code: 'CD.LL',
                name: 'Kasaï-Central'
            }, {
                code: 'CD.KO',
                name: 'Kasaï Oriental'
            }, {
                code: 'CD.KN',
                name: 'Kinshasa'
            }, {
                code: 'CD.BC',
                name: 'Kongo Central'
            }, {
                code: 'CD.KG',
                name: 'Kwango'
            }, {
                code: 'CD.KU',
                name: 'Kwilu'
            }, {
                code: 'CD.LM',
                name: 'Lomami'
            }, {
                code: 'CD.LB',
                name: 'Lualaba'
            }, {
                code: 'CD.MA',
                name: 'Mai-Ndombe'
            }, {
                code: 'CD.MN',
                name: 'Maniema'
            }, {
                code: 'CD.MO',
                name: 'Mongala'
            }, {
                code: 'CD.NK',
                name: 'Nord-Kivu'
            }, {
                code: 'CD.NU',
                name: 'Nord-Ubangi'
            }, {
                code: 'CD.SN',
                name: 'Sankuru'
            }, {
                code: 'CD.SK',
                name: 'Sud-Kivu'
            }, {
                code: 'CD.SU',
                name: 'Sud-Ubangi'
            }, {
                code: 'CD.TG',
                name: 'Tanganyika'
            }, {
                code: 'CD.TO',
                name: 'Tshopo'
            }, {
                code: 'CD.TP',
                name: 'Tshuapa'
            }, {
                code: 'CD.ET',
                name: 'Équateur'
            }]
    }, {
        code: 'CG',
        id: 2383,
        name: 'Congo; Republic of',
        states: []
    }, {
        code: 'CK',
        id: 2414,
        name: 'Cook Islands',
        states: []
    }, {
        code: 'CR',
        id: 2226,
        name: 'Costa Rica',
        states: [{
                code: 'CS01',
                name: 'Alajuela'
            }, {
                code: 'CS02',
                name: 'Cartago'
            }, {
                code: 'CS03',
                name: 'Guanacaste'
            }, {
                code: 'CS04',
                name: 'Heredia'
            }, {
                code: 'CS06',
                name: 'Limón'
            }, {
                code: 'CS07',
                name: 'Puntarenas'
            }, {
                code: 'CS08',
                name: 'San José'
            }]
    }, {
        code: 'CI',
        id: 2227,
        name: 'Cote D\'Ivoire',
        states: [{
                code: 'IV93',
                name: 'Abidjan'
            }, {
                code: 'IV76',
                name: 'Bas-Sassandra'
            }, {
                code: 'IV94',
                name: 'Comoé'
            }, {
                code: 'IV77',
                name: 'Denguélé'
            }, {
                code: 'IV95',
                name: 'Gôh-Djiboua'
            }, {
                code: 'IV81',
                name: 'Lacs'
            }, {
                code: 'IV82',
                name: 'Lagunes'
            }, {
                code: 'IV78',
                name: 'Montagnes'
            }, {
                code: 'IV96',
                name: 'Sassandra-Marahoué'
            }, {
                code: 'IV87',
                name: 'Savanes'
            }, {
                code: 'IV90',
                name: 'Vallée du Bandama'
            }, {
                code: 'IV97',
                name: 'Woroba'
            }, {
                code: 'IV98',
                name: 'Yamoussoukro'
            }, {
                code: 'IV92',
                name: 'Zanzan'
            }]
    }, {
        code: 'HR',
        id: 2228,
        name: 'Croatia',
        states: [{
                code: 'HR07',
                name: 'Bjelovarsko-bilogorska'
            }, {
                code: 'HR12',
                name: 'Brodsko-posavska'
            }, {
                code: 'HR19',
                name: 'Dubrovacko-neretvanska'
            }, {
                code: 'HR21',
                name: 'Grad Zagreb'
            }, {
                code: 'HR-18',
                name: 'Istarska'
            }, {
                code: 'HR04',
                name: 'Karlovacka'
            }, {
                code: 'HR06',
                name: 'Koprivnicko-križevacka'
            }, {
                code: 'HR02',
                name: 'Krapinsko-zagorska'
            }, {
                code: 'HR09',
                name: 'Licko-senjska'
            }, {
                code: 'HR20',
                name: 'Medimurska'
            }, {
                code: 'HR14',
                name: 'Osjecko-baranjska'
            }, {
                code: 'HR11',
                name: 'Požeško-slavonska'
            }, {
                code: 'HR08',
                name: 'Primorsko-goranska'
            }, {
                code: 'HR15',
                name: 'Šibensko-kninska'
            }, {
                code: 'HR03',
                name: 'Sisacko-moslavacka'
            }, {
                code: 'HR17',
                name: 'Splitsko-dalmatinska'
            }, {
                code: 'HR05',
                name: 'Varaždinska'
            }, {
                code: 'HR10',
                name: 'Viroviticko-podravska'
            }, {
                code: 'HR16',
                name: 'Vukovarsko-srijemska'
            }, {
                code: 'HR13',
                name: 'Zadarska'
            }, {
                code: 'HR01',
                name: 'Zagrebacka'
            }]
    }, {
        code: 'CU',
        id: 2229,
        name: 'Cuba',
        states: [{
                code: 'CU17',
                name: 'Artemisa'
            }, {
                code: 'CU05',
                name: 'Camagüey'
            }, {
                code: 'CU07',
                name: 'Ciego de Ávila'
            }, {
                code: 'CU08',
                name: 'Cienfuegos'
            }, {
                code: 'CU09',
                name: 'Granma'
            }, {
                code: 'CU10',
                name: 'Guantánamo'
            }, {
                code: 'CU12',
                name: 'Holguín'
            }, {
                code: 'CU04',
                name: 'Isla de la Juventud'
            }, {
                code: 'CU02',
                name: 'La Habana'
            }, {
                code: 'CU13',
                name: 'Las Tunas'
            }, {
                code: 'CU03',
                name: 'Matanzas'
            }, {
                code: 'CU18',
                name: 'Mayabeque'
            }, {
                code: 'CU01',
                name: 'Pinar del Río'
            }, {
                code: 'CU14',
                name: 'Sancti Spíritus'
            }, {
                code: 'CU15',
                name: 'Santiago de Cuba'
            }, {
                code: 'CU16',
                name: 'Villa Clara'
            }]
    }, {
        code: 'C999',
        id: 2387,
        name: 'Curacao',
        states: []
    }, {
        code: 'CY',
        id: 2230,
        name: 'Cyprus',
        states: [{
                code: 'CY01',
                name: 'Famagusta'
            }, {
                code: 'CY02',
                name: 'Kyrenia'
            }, {
                code: 'CY03',
                name: 'Larnaca'
            }, {
                code: 'CY05',
                name: 'Limassol'
            }, {
                code: 'CY04',
                name: 'Nicosia'
            }, {
                code: 'CY06',
                name: 'Paphos'
            }]
    }, {
        code: 'CZ',
        id: 2231,
        name: 'Czech Republic',
        states: [{
                code: 'JC',
                name: 'Jihoceský kraj'
            }, {
                code: 'JM',
                name: 'Jihomoravský kraj'
            }, {
                code: 'KA',
                name: 'Karlovarský kraj'
            }, {
                code: 'KR',
                name: 'Královéhradecký kraj'
            }, {
                code: 'LI',
                name: 'Liberecký kraj'
            }, {
                code: 'MO',
                name: 'Moravskoslezský kraj'
            }, {
                code: 'OL',
                name: 'Olomoucký kraj'
            }, {
                code: 'PA',
                name: 'Pardubický kraj'
            }, {
                code: 'PL',
                name: 'Plzenský kraj'
            }, {
                code: 'PR',
                name: 'Praha, hlavní mesto'
            }, {
                code: 'ST',
                name: 'Stredoceský kraj'
            }, {
                code: 'VY',
                name: 'Vysocina'
            }, {
                code: 'ZL',
                name: 'Zlínský kraj'
            }, {
                code: 'US',
                name: 'Ústecký kraj'
            }]
    }, {
        code: 'DK',
        id: 2232,
        name: 'Denmark',
        states: [{
                code: 'DA01',
                name: 'Arhus County'
            }, {
                code: 'DA02',
                name: 'Bornholm Regional Municipality'
            }, {
                code: 'DA17',
                name: 'Capital Region'
            }, {
                code: 'DA18',
                name: 'Central Jutland Region'
            }, {
                code: 'DA16',
                name: 'Frederiksberg municipal'
            }, {
                code: 'DA03',
                name: 'Frederiksborg County'
            }, {
                code: 'DA04',
                name: 'Fyn County'
            }, {
                code: 'DA06',
                name: 'Kobenhavn County'
            }, {
                code: 'DA05',
                name: 'Kobenhavn municipal'
            }, {
                code: 'DA07',
                name: 'Nordjylland County'
            }, {
                code: 'DA19',
                name: 'North Jutland Region'
            }, {
                code: 'DA08',
                name: 'Ribe County'
            }, {
                code: 'DA09',
                name: 'Ringkobing County'
            }, {
                code: 'DA10',
                name: 'Roskilde County'
            }, {
                code: 'DA11',
                name: 'Sonderjylland County'
            }, {
                code: 'DA21',
                name: 'South Denmark Region'
            }, {
                code: 'DA12',
                name: 'Storstrom County'
            }, {
                code: 'DA13',
                name: 'Vejle County'
            }, {
                code: 'DA14',
                name: 'Vestsjaelland County'
            }, {
                code: 'DA15',
                name: 'Viborg County'
            }, {
                code: 'DA20',
                name: 'Zealand Region'
            }]
    }, {
        code: 'DJ',
        id: 2233,
        name: 'Djibouti',
        states: []
    }, {
        code: 'DM',
        id: 2234,
        name: 'Dominica',
        states: []
    }, {
        code: 'DO',
        id: 2235,
        name: 'Dominican Republic',
        states: [{
                code: 'DR01',
                name: 'Azua'
            }, {
                code: 'DR02',
                name: 'Bahoruco'
            }, {
                code: 'DR03',
                name: 'Barahona'
            }, {
                code: 'DR04',
                name: 'Dajabón'
            }, {
                code: 'DR34',
                name: 'Distrito Nacional'
            }, {
                code: 'DR06',
                name: 'Duarte'
            }, {
                code: 'DR28',
                name: 'El Seibo'
            }, {
                code: 'DR11',
                name: 'Elías Piña'
            }, {
                code: 'DR08',
                name: 'Espaillat'
            }, {
                code: 'DR29',
                name: 'Hato Mayor'
            }, {
                code: 'DR19',
                name: 'Hermanas Mirabal'
            }, {
                code: 'DR09',
                name: 'Independencia'
            }, {
                code: 'DR10',
                name: 'La Altagracia'
            }, {
                code: 'DR12',
                name: 'La Romana'
            }, {
                code: 'DR30',
                name: 'La Vega'
            }, {
                code: 'DR14',
                name: 'María Trinidad Sánchez'
            }, {
                code: 'DR31',
                name: 'Monseñor Nouel'
            }, {
                code: 'DR15',
                name: 'Monte Cristi'
            }, {
                code: 'DR32',
                name: 'Monte Plata'
            }, {
                code: 'DR16',
                name: 'Pedernales'
            }, {
                code: 'DR35',
                name: 'Peravia'
            }, {
                code: 'DR18',
                name: 'Puerto Plata'
            }, {
                code: 'DR20',
                name: 'Samaná'
            }, {
                code: 'DR33',
                name: 'San Cristóbal'
            }, {
                code: 'DR36',
                name: 'San José de Ocoa'
            }, {
                code: 'DR23',
                name: 'San Juan'
            }, {
                code: 'DR24',
                name: 'San Pedro de Macorís'
            }, {
                code: 'DR21',
                name: 'Sánchez Ramírez'
            }, {
                code: 'DR25',
                name: 'Santiago'
            }, {
                code: 'DR26',
                name: 'Santiago Rodríguez'
            }, {
                code: 'DR37',
                name: 'Santo Domingo'
            }, {
                code: 'DR27',
                name: 'Valverde'
            }]
    }, {
        code: 'EC',
        id: 2236,
        name: 'Ecuador',
        states: [{
                code: 'EC02',
                name: 'Azuay'
            }, {
                code: 'EC02',
                name: 'Azuay'
            }, {
                code: 'EC03',
                name: 'Bolívar'
            }, {
                code: 'EC04',
                name: 'Cañar'
            }, {
                code: 'EC05',
                name: 'Carchi'
            }, {
                code: 'EC06',
                name: 'Chimborazo'
            }, {
                code: 'EC07',
                name: 'Cotopaxi'
            }, {
                code: 'EC08',
                name: 'El Oro'
            }, {
                code: 'EC09',
                name: 'Esmeraldas'
            }, {
                code: 'EC01',
                name: 'Galápagos'
            }, {
                code: 'EC10',
                name: 'Guayas'
            }, {
                code: 'EC11',
                name: 'Imbabura'
            }, {
                code: 'EC12',
                name: 'Loja'
            }, {
                code: 'EC13',
                name: 'Los Ríos'
            }, {
                code: 'EC14',
                name: 'Manabí'
            }, {
                code: 'EC15',
                name: 'Morona-Santiago'
            }, {
                code: 'EC23',
                name: 'Napo'
            }, {
                code: 'EC24',
                name: 'Orellana'
            }, {
                code: 'EC17',
                name: 'Pastaza'
            }, {
                code: 'EC18',
                name: 'Pichincha'
            }, {
                code: 'EC25',
                name: 'Santa Elena'
            }, {
                code: 'EC26',
                name: 'Santo Domingo de los Tsáchilas'
            }, {
                code: 'EC22',
                name: 'Sucumbíos'
            }, {
                code: 'EC19',
                name: 'Tungurahua'
            }, {
                code: 'EC20',
                name: 'Zamora-Chinchipe'
            }]
    }, {
        code: 'EG',
        id: 2237,
        name: 'Egypt',
        states: [{
                code: 'EG01',
                name: 'Ad Daqahliyah'
            }, {
                code: 'EG02',
                name: 'Al Bahr al Ahmar'
            }, {
                code: 'EG03',
                name: 'Al Buhayrah'
            }, {
                code: 'EG04',
                name: 'Al Fayyum'
            }, {
                code: 'EG05',
                name: 'Al Gharbiyah'
            }, {
                code: 'EG06',
                name: 'Al Iskandariyah'
            }, {
                code: 'EG07',
                name: 'Al Isma`iliyah'
            }, {
                code: 'EG08',
                name: 'Al Jizah'
            }, {
                code: 'EG09',
                name: 'Al Minufiyah'
            }, {
                code: 'EG10',
                name: 'Al Minya'
            }, {
                code: 'EG11',
                name: 'Al Qahirah'
            }, {
                code: 'EG12',
                name: 'Al Qalyubiyah'
            }, {
                code: 'EG28',
                name: 'Al Uqsur'
            }, {
                code: 'EG13',
                name: 'Al Wadi al Jadid'
            }, {
                code: 'EG15',
                name: 'As Suways'
            }, {
                code: 'EG14',
                name: 'Ash Sharqiyah'
            }, {
                code: 'EG16',
                name: 'Aswan'
            }, {
                code: 'EG17',
                name: 'Asyut'
            }, {
                code: 'EG18',
                name: 'Bani Suwayf'
            }, {
                code: 'EG19',
                name: 'Bur Sa`id'
            }, {
                code: 'EG20',
                name: 'Dumyat'
            }, {
                code: 'EG26',
                name: 'Janub Sina'
            }, {
                code: 'EG21',
                name: 'Kafr ash Shaykh'
            }, {
                code: 'EG22',
                name: 'Matruh'
            }, {
                code: 'EG23',
                name: 'Qina'
            }, {
                code: 'EG27',
                name: 'Shamal Sina'
            }, {
                code: 'EG24',
                name: 'Suhaj'
            }]
    }, {
        code: 'SV',
        id: 2238,
        name: 'El Salvador',
        states: [{
                code: 'ES01',
                name: 'Ahuachapán'
            }, {
                code: 'ES02',
                name: 'Cabañas'
            }, {
                code: 'ES03',
                name: 'Chalatenango'
            }, {
                code: 'ES04',
                name: 'Cuscatlán'
            }, {
                code: 'ES05',
                name: 'La Libertad'
            }, {
                code: 'ES06',
                name: 'La Paz'
            }, {
                code: 'ES07',
                name: 'La Unión'
            }, {
                code: 'ES08',
                name: 'Morazán'
            }, {
                code: 'ES09',
                name: 'San Miguel'
            }, {
                code: 'ES10',
                name: 'San Salvador'
            }, {
                code: 'ES12',
                name: 'San Vicente'
            }, {
                code: 'ES11',
                name: 'Santa Ana'
            }, {
                code: 'ES13',
                name: 'Sonsonate'
            }, {
                code: 'ES14',
                name: 'Usulután'
            }]
    }, {
        code: 'GQ',
        id: 2239,
        name: 'Equatorial Guinea',
        states: []
    }, {
        code: 'ER',
        id: 2240,
        name: 'Eritrea',
        states: []
    }, {
        code: 'EE',
        id: 2241,
        name: 'Estonia',
        states: [{
                code: 'EN01',
                name: 'Harju'
            }, {
                code: 'EN02',
                name: 'Hiiu'
            }, {
                code: 'EN03',
                name: 'Ida-Viru'
            }, {
                code: 'EN04',
                name: 'Järva'
            }, {
                code: 'EN05',
                name: 'Jõgeva'
            }, {
                code: 'EN07',
                name: 'Lääne'
            }, {
                code: 'EN08',
                name: 'Lääne-Viru'
            }, {
                code: 'EN11',
                name: 'Pärnu'
            }, {
                code: 'EN12',
                name: 'Põlva'
            }, {
                code: 'EN13',
                name: 'Rapla'
            }, {
                code: 'EN14',
                name: 'Saare'
            }, {
                code: 'EN18',
                name: 'Tartu'
            }, {
                code: 'EN19',
                name: 'Valga'
            }, {
                code: 'EN20',
                name: 'Viljandi'
            }, {
                code: 'EN21',
                name: 'Võru'
            }]
    }, {
        code: 'ET',
        id: 2242,
        name: 'Ethiopia',
        states: [{
                code: 'ET44',
                name: 'Addis Ababa'
            }, {
                code: 'ET45',
                name: 'Afar'
            }, {
                code: 'ET46',
                name: 'Amhara'
            }, {
                code: 'ET47',
                name: 'Benshangul-Gumaz'
            }, {
                code: 'ET48',
                name: 'Dire Dawa'
            }, {
                code: 'ET49',
                name: 'Gambela Peoples'
            }, {
                code: 'ET50',
                name: 'Harari People'
            }, {
                code: 'ET51',
                name: 'Oromia'
            }, {
                code: 'ET52',
                name: 'Somali'
            }, {
                code: 'ET54',
                name: 'Southern Nations, Nationalities and Peoples'
            }, {
                code: 'ET53',
                name: 'Tigray'
            }]
    }, {
        code: 'FK',
        id: 2415,
        name: 'Falkland Islands (Malvinas)',
        states: []
    }, {
        code: 'FI99',
        id: 2388,
        name: 'Faroe Islands',
        states: []
    }, {
        code: 'FJ',
        id: 2243,
        name: 'Fiji',
        states: []
    }, {
        code: 'FI',
        id: 2244,
        name: 'Finland',
        states: [{
                code: 'FI-AL',
                name: 'Ahvenanmaan lääni'
            }, {
                code: 'FI-ES',
                name: 'Etelä-Suomen lääni'
            }, {
                code: 'FI-IS',
                name: 'Itä-Suomen lääni'
            }, {
                code: 'FI-LS',
                name: 'Länsi-Suomen lääni'
            }, {
                code: 'FI-LL',
                name: 'Lapin lääni'
            }, {
                code: 'FI-OL',
                name: 'Oulun lääni'
            }]
    }, {
        code: 'FR',
        id: 2245,
        name: 'France',
        states: [{
                code: 'FRC2',
                name: 'Ain'
            }, {
                code: 'FRC3',
                name: 'Aisne'
            }, {
                code: 'FRC4',
                name: 'Allier'
            }, {
                code: 'FRC6',
                name: 'Alpes-Maritimes'
            }, {
                code: 'FRC5',
                name: 'Alpes-de-Haute-Provence'
            }, {
                code: 'FRC1',
                name: 'Alsace'
            }, {
                code: 'FR97',
                name: 'Aquitaine'
            }, {
                code: 'FRC7',
                name: 'Ardèche'
            }, {
                code: 'FRC8',
                name: 'Ardennes'
            }, {
                code: 'FRC9',
                name: 'Ariège'
            }, {
                code: 'FRD1',
                name: 'Aube'
            }, {
                code: 'FRD2',
                name: 'Aude'
            }, {
                code: 'FR.AR',
                name: 'Auvergne-Rhône-Alpes'
            }, {
                code: 'FR98',
                name: 'Auvergne'
            }, {
                code: 'FRD3',
                name: 'Aveyron'
            }, {
                code: 'FRD4',
                name: 'Bas-Rhin'
            }, {
                code: 'FR99',
                name: 'Basse-Normandie'
            }, {
                code: 'FRD5',
                name: 'Bouches-du-Rhône'
            }, {
                code: 'FR.BF',
                name: 'Bourgogne-Franche-Comté'
            }, {
                code: 'FRA1',
                name: 'Bourgogne'
            }, {
                code: 'FRA2',
                name: 'Bretagne'
            }, {
                code: 'FRD8',
                name: 'Calvados'
            }, {
                code: 'FRD9',
                name: 'Cantal'
            }, {
                code: 'FRA3',
                name: 'Centre'
            }, {
                code: 'FR.CN',
                name: 'Centre-Val de Loire'
            }, {
                code: 'FRA4',
                name: 'Champagne-Ardenne'
            }, {
                code: 'FRE1',
                name: 'Charente-Maritime'
            }, {
                code: 'FRE2',
                name: 'Charente'
            }, {
                code: 'FRE3',
                name: 'Cher'
            }, {
                code: 'FRE4',
                name: 'Corrèze'
            }, {
                code: 'FRE5',
                name: 'Corse-du-Sud'
            }, {
                code: 'FR.CE',
                name: 'Corse'
            }, {
                code: 'FRD6',
                name: 'Côte-d\'Or'
            }, {
                code: 'FRD7',
                name: 'Côtes-d\'Armor'
            }, {
                code: 'FRE6',
                name: 'Creuse'
            }, {
                code: 'FRE7',
                name: 'Deux-Sèvres'
            }, {
                code: 'FRE8',
                name: 'Dordogne'
            }, {
                code: 'FRE9',
                name: 'Doubs'
            }, {
                code: 'FRF1',
                name: 'Drôme'
            }, {
                code: 'FRF2',
                name: 'Essonne'
            }, {
                code: 'FRF3',
                name: 'Eure-et-Loir'
            }, {
                code: 'FRF4',
                name: 'Eure'
            }, {
                code: 'FRF5',
                name: 'Finistère'
            }, {
                code: 'FRA6',
                name: 'Franche-Comte'
            }, {
                code: 'FRF6',
                name: 'Gard'
            }, {
                code: 'FRF7',
                name: 'Gers'
            }, {
                code: 'FRF8',
                name: 'Gironde'
            }, {
                code: 'FR.AO',
                name: 'Grand Est'
            }, {
                code: 'FRG1',
                name: 'Haut-Rhin'
            }, {
                code: 'FRG2',
                name: 'Haute-Corse'
            }, {
                code: 'FRG3',
                name: 'Haute-Garonne'
            }, {
                code: 'FRG4',
                name: 'Haute-Loire'
            }, {
                code: 'FRG5',
                name: 'Haute-Marne'
            }, {
                code: 'FRA7',
                name: 'Haute-Normandie'
            }, {
                code: 'FRG6',
                name: 'Haute-Saône'
            }, {
                code: 'FRG7',
                name: 'Haute-Savoie'
            }, {
                code: 'FRG8',
                name: 'Haute-Vienne'
            }, {
                code: 'FRG9',
                name: 'Hautes-Alpes'
            }, {
                code: 'FRH1',
                name: 'Hautes-Pyrénées'
            }, {
                code: 'FR.NC',
                name: 'Hauts-de-France'
            }, {
                code: 'FRH2',
                name: 'Hauts-de-Seine'
            }, {
                code: 'FRF9',
                name: 'Hérault'
            }, {
                code: 'FRA8',
                name: 'Ile-de-France'
            }, {
                code: 'FRH3',
                name: 'Ille-et-Vilaine'
            }, {
                code: 'FRH5',
                name: 'Indre'
            }, {
                code: 'FRH4',
                name: 'Indre-et-Loire'
            }, {
                code: 'FRH6',
                name: 'Isère'
            }, {
                code: 'FRH7',
                name: 'Jura'
            }, {
                code: 'FRH8',
                name: 'Landes'
            }, {
                code: 'FRA9',
                name: 'Languedoc-Roussillon'
            }, {
                code: 'FRB1',
                name: 'Limousin'
            }, {
                code: 'FRI3',
                name: 'Loir-et-Cher'
            }, {
                code: 'FRI2',
                name: 'Loiret'
            }, {
                code: 'FRI1',
                name: 'Loire'
            }, {
                code: 'FRH9',
                name: 'Loire-Atlantique'
            }, {
                code: 'FRB2',
                name: 'Lorraine'
            }, {
                code: 'FRI4',
                name: 'Lot-et-Garonne'
            }, {
                code: 'FRI5',
                name: 'Lot'
            }, {
                code: 'FRI6',
                name: 'Lozère'
            }, {
                code: 'FRI7',
                name: 'Maine-et-Loire'
            }, {
                code: 'FRI8',
                name: 'Manche'
            }, {
                code: 'FRI9',
                name: 'Marne'
            }, {
                code: 'FRJ1',
                name: 'Mayenne'
            }, {
                code: 'FRJ2',
                name: 'Meurthe-et-Moselle'
            }, {
                code: 'FRJ3',
                name: 'Meuse'
            }, {
                code: 'FRB3',
                name: 'Midi-Pyrenees'
            }, {
                code: 'FRJ4',
                name: 'Morbihan'
            }, {
                code: 'FRJ5',
                name: 'Moselle'
            }, {
                code: 'FRJ6',
                name: 'Nièvre'
            }, {
                code: 'FRJ7',
                name: 'Nord France'
            }, {
                code: 'FR67',
                name: 'Nord'
            }, {
                code: 'FR.ND',
                name: 'Normandie'
            }, {
                code: 'FR.AC',
                name: 'Nouvelle-Aquitaine'
            }, {
                code: 'FR.LP',
                name: 'Occitanie'
            }, {
                code: 'FRJ8',
                name: 'Oise'
            }, {
                code: 'FRJ9',
                name: 'Orne'
            }, {
                code: 'FRK1',
                name: 'Paris'
            }, {
                code: 'FRB4',
                name: 'Pas-de-Calais'
            }, {
                code: 'FRB5',
                name: 'Pays de la Loire'
            }, {
                code: 'FRB6',
                name: 'Picardie'
            }, {
                code: 'FRB7',
                name: 'Poitou-Charentes'
            }, {
                code: 'FRB8',
                name: 'Provence-Alpes-Cote d\'Azur'
            }, {
                code: 'FRK2',
                name: 'Puy-de-Dôme'
            }, {
                code: 'FRK3',
                name: 'Pyrénées-Atlantiques'
            }, {
                code: 'FRK4',
                name: 'Pyrénées-Orientales'
            }, {
                code: 'FRB9',
                name: 'Rhône'
            }, {
                code: 'FRK5',
                name: 'Saône-et-Loire'
            }, {
                code: 'FRK6',
                name: 'Sarthe'
            }, {
                code: 'FRK7',
                name: 'Savoie'
            }, {
                code: 'FRK9',
                name: 'Seine-Maritime'
            }, {
                code: 'FRL1',
                name: 'Seine-Saint-Denis'
            }, {
                code: 'FRK8',
                name: 'Seine-et-Marne'
            }, {
                code: 'FRL2',
                name: 'Somme'
            }, {
                code: 'FRL3',
                name: 'Tarn-et-Garonne'
            }, {
                code: 'FRL4',
                name: 'Tarn'
            }, {
                code: 'FRL5',
                name: 'Territoire de Belfor'
            }, {
                code: 'FR14',
                name: 'Territoire de Belfort'
            }, {
                code: 'FRL6',
                name: 'Val-d\'Oise'
            }, {
                code: 'FRL7',
                name: 'Val-de-Marne'
            }, {
                code: 'FRL8',
                name: 'Var'
            }, {
                code: 'FRL9',
                name: 'Vaucluse'
            }, {
                code: 'FRM1',
                name: 'Vendée'
            }, {
                code: 'FRM2',
                name: 'Vienne'
            }, {
                code: 'FR94',
                name: 'Ville de Paris'
            }, {
                code: 'FRM3',
                name: 'Vosges'
            }, {
                code: 'FRM4',
                name: 'Yonne'
            }, {
                code: 'FRM5',
                name: 'Yvelines'
            }, {
                code: 'FR.IF',
                name: 'Île-de-France'
            }]
    }, {
        code: 'GF',
        id: 2416,
        name: 'French Guiana',
        states: []
    }, {
        code: 'PF',
        id: 2417,
        name: 'French Polynesia',
        states: []
    }, {
        code: 'TF',
        id: 2418,
        name: 'French Southern Territories',
        states: []
    }, {
        code: 'GA',
        id: 2246,
        name: 'Gabon',
        states: [{
                code: 'GB01',
                name: 'Estuaire'
            }, {
                code: 'GB02',
                name: 'Haut-Ogooué'
            }, {
                code: 'GB03',
                name: 'Moyen-Ogooué'
            }, {
                code: 'GB04',
                name: 'Ngounié'
            }, {
                code: 'GB05',
                name: 'Nyanga'
            }, {
                code: 'GB06',
                name: 'Ogooué-Ivindo'
            }, {
                code: 'GB07',
                name: 'Ogooué-Lolo'
            }, {
                code: 'GB08',
                name: 'Ogooué-Maritime'
            }, {
                code: 'GB09',
                name: 'Woleu-Ntem'
            }]
    }, {
        code: 'GM',
        id: 2389,
        name: 'Gambia',
        states: [{
                code: 'GA01',
                name: 'Banjul'
            }, {
                code: 'GA03',
                name: 'Central River'
            }, {
                code: 'GA02',
                name: 'Lower River'
            }, {
                code: 'GA07',
                name: 'North Bank'
            }, {
                code: 'GA04',
                name: 'Upper River'
            }, {
                code: 'GA05',
                name: 'West Coast'
            }]
    }, {
        code: 'GE',
        id: 2248,
        name: 'Georgia',
        states: [{
                code: 'GG02',
                name: 'Abkhazia'
            }, {
                code: 'GG04',
                name: 'Ajaria'
            }, {
                code: 'GG65',
                name: 'Guria'
            }, {
                code: 'GG66',
                name: 'Imereti'
            }, {
                code: 'GG67',
                name: 'Kakheti'
            }, {
                code: 'GG68',
                name: 'Kvemo Kartli'
            }, {
                code: 'GG69',
                name: 'Mtskheta-Mtianeti'
            }, {
                code: 'GG70',
                name: 'Racha-Lochkhumi-Kvemo Svaneti'
            }, {
                code: 'GG71',
                name: 'Samegrelo-Zemo Svaneti'
            }, {
                code: 'GG72',
                name: 'Samtskhe-Javakheti'
            }, {
                code: 'GG73',
                name: 'Shida Kartli'
            }, {
                code: 'GG51',
                name: 'Tbilisi'
            }]
    }, {
        code: 'DE',
        id: 2249,
        name: 'Germany',
        states: [{
                code: 'BW',
                name: 'Baden-Württemberg'
            }, {
                code: 'BY',
                name: 'Bayern'
            }, {
                code: 'BE',
                name: 'Berlin'
            }, {
                code: 'BB',
                name: 'Brandenburg'
            }, {
                code: 'HB',
                name: 'Bremen'
            }, {
                code: 'HH',
                name: 'Hamburg'
            }, {
                code: 'HE',
                name: 'Hessen'
            }, {
                code: 'MV',
                name: 'Mecklenburg-Vorpommern'
            }, {
                code: 'NI',
                name: 'Niedersachsen'
            }, {
                code: 'NW',
                name: 'Nordrhein-Westfalen'
            }, {
                code: 'RP',
                name: 'Rheinland-Pfalz'
            }, {
                code: 'SL',
                name: 'Saarland'
            }, {
                code: 'SN',
                name: 'Sachsen'
            }, {
                code: 'ST',
                name: 'Sachsen-Anhalt'
            }, {
                code: 'SH',
                name: 'Schleswig-Holstein'
            }, {
                code: 'TH',
                name: 'Thüringen'
            }]
    }, {
        code: 'GH',
        id: 2250,
        name: 'Ghana',
        states: [{
                code: 'GH02',
                name: 'Ashanti'
            }, {
                code: 'GH03',
                name: 'Brong-Ahafo'
            }, {
                code: 'GH04',
                name: 'Central'
            }, {
                code: 'GH05',
                name: 'Eastern'
            }, {
                code: 'GH01',
                name: 'Greater Accra'
            }, {
                code: 'GH06',
                name: 'Northern'
            }, {
                code: 'GH10',
                name: 'Upper East'
            }, {
                code: 'GH11',
                name: 'Upper West'
            }, {
                code: 'GH08',
                name: 'Volta'
            }, {
                code: 'GH09',
                name: 'Western'
            }]
    }, {
        code: 'G999',
        id: 2390,
        name: 'Gibraltar',
        states: [{
                code: 'GI.GI',
                name: 'Gibraltar'
            }]
    }, {
        code: 'GR',
        id: 2251,
        name: 'Greece',
        states: [{
                code: '13',
                name: 'Achaïa'
            }, {
                code: '69',
                name: 'Agio Oros'
            }, {
                code: '01',
                name: 'Aitolia kai Akarnania'
            }, {
                code: '11',
                name: 'Argolida'
            }, {
                code: '12',
                name: 'Arkadia'
            }, {
                code: '31',
                name: 'Arta'
            }, {
                code: 'A1',
                name: 'Attiki'
            }, {
                code: '64',
                name: 'Chalkidiki'
            }, {
                code: '94',
                name: 'Chania'
            }, {
                code: '85',
                name: 'Chios'
            }, {
                code: '81',
                name: 'Dodekanisos'
            }, {
                code: '52',
                name: 'Drama'
            }, {
                code: '71',
                name: 'Evros'
            }, {
                code: '05',
                name: 'Evrytania'
            }, {
                code: '04',
                name: 'Evvoia'
            }, {
                code: '63',
                name: 'Florina'
            }, {
                code: '07',
                name: 'Fokida'
            }, {
                code: '06',
                name: 'Fthiotida'
            }, {
                code: '51',
                name: 'Grevena'
            }, {
                code: '14',
                name: 'Ileia'
            }, {
                code: '53',
                name: 'Imathia'
            }, {
                code: '33',
                name: 'Ioannina'
            }, {
                code: '91',
                name: 'Irakleio'
            }, {
                code: '41',
                name: 'Karditsa'
            }, {
                code: '56',
                name: 'Kastoria'
            }, {
                code: '55',
                name: 'Kavala'
            }, {
                code: '23',
                name: 'Kefallonia'
            }, {
                code: '22',
                name: 'Kerkyra'
            }, {
                code: '57',
                name: 'Kilkis'
            }, {
                code: '15',
                name: 'Korinthia'
            }, {
                code: '58',
                name: 'Kozani'
            }, {
                code: '82',
                name: 'Kyklades'
            }, {
                code: '16',
                name: 'Lakonia'
            }, {
                code: '42',
                name: 'Larisa'
            }, {
                code: '92',
                name: 'Lasithi'
            }, {
                code: '24',
                name: 'Lefkada'
            }, {
                code: '83',
                name: 'Lesvos'
            }, {
                code: '43',
                name: 'Magnisia'
            }, {
                code: '17',
                name: 'Messinia'
            }, {
                code: '59',
                name: 'Pella'
            }, {
                code: '61',
                name: 'Pieria'
            }, {
                code: '34',
                name: 'Preveza'
            }, {
                code: '93',
                name: 'Rethymno'
            }, {
                code: '73',
                name: 'Rodopi'
            }, {
                code: '84',
                name: 'Samos'
            }, {
                code: '62',
                name: 'Serres'
            }, {
                code: '32',
                name: 'Thesprotia'
            }, {
                code: '54',
                name: 'Thessaloniki'
            }, {
                code: '44',
                name: 'Trikala'
            }, {
                code: '03',
                name: 'Voiotia'
            }, {
                code: '72',
                name: 'Xanthi'
            }, {
                code: '21',
                name: 'Zakynthos'
            }]
    }, {
        code: 'GL',
        id: 2252,
        name: 'Greenland',
        states: []
    }, {
        code: 'GD',
        id: 2253,
        name: 'Grenada',
        states: []
    }, {
        code: 'GP',
        id: 2419,
        name: 'Guadeloupe',
        states: []
    }, {
        code: 'GU',
        id: 2376,
        name: 'Guam',
        states: []
    }, {
        code: 'GT',
        id: 2371,
        name: 'Guatemala',
        states: [{
                code: 'GT01',
                name: 'Alta Verapaz'
            }, {
                code: 'GT02',
                name: 'Baja Verapaz'
            }, {
                code: 'GT03',
                name: 'Chimaltenango'
            }, {
                code: 'GT04',
                name: 'Chiquimula'
            }, {
                code: 'GT05',
                name: 'El Progreso'
            }, {
                code: 'GT06',
                name: 'Escuintla'
            }, {
                code: 'GT07',
                name: 'Guatemala'
            }, {
                code: 'GT08',
                name: 'Huehuetenango'
            }, {
                code: 'GT09',
                name: 'Izabal'
            }, {
                code: 'GT10',
                name: 'Jalapa'
            }, {
                code: 'GT11',
                name: 'Jutiapa'
            }, {
                code: 'GT12',
                name: 'Petén'
            }, {
                code: 'GT13',
                name: 'Quetzaltenango'
            }, {
                code: 'GT14',
                name: 'Quiché'
            }, {
                code: 'GT15',
                name: 'Retalhuleu'
            }, {
                code: 'GT16',
                name: 'Sacatepéquez'
            }, {
                code: 'GT17',
                name: 'San Marcos'
            }, {
                code: 'GT18',
                name: 'Santa Rosa'
            }, {
                code: 'GT19',
                name: 'Sololá'
            }, {
                code: 'GT20',
                name: 'Suchitepéquez'
            }, {
                code: 'GT21',
                name: 'Totonicapán'
            }, {
                code: 'GT22',
                name: 'Zacapa'
            }]
    }, {
        code: 'GG',
        id: 2420,
        name: 'Guernsey',
        states: []
    }, {
        code: 'GN',
        id: 2255,
        name: 'Guinea',
        states: [{
                code: 'GV01',
                name: 'Beyla'
            }, {
                code: 'GV02',
                name: 'Boffa'
            }, {
                code: 'GV03',
                name: 'Boké'
            }, {
                code: 'GV04',
                name: 'Conakry'
            }, {
                code: 'GV30',
                name: 'Coyah'
            }, {
                code: 'GV05',
                name: 'Dabola'
            }, {
                code: 'GV06',
                name: 'Dalaba'
            }, {
                code: 'GV07',
                name: 'Dinguiraye'
            }, {
                code: 'GV31',
                name: 'Dubréka'
            }, {
                code: 'GV09',
                name: 'Faranah'
            }, {
                code: 'GV10',
                name: 'Forécariah'
            }, {
                code: 'GV11',
                name: 'Fria'
            }, {
                code: 'GV12',
                name: 'Gaoual'
            }, {
                code: 'GV13',
                name: 'Guéckédou'
            }, {
                code: 'GV32',
                name: 'Kankan'
            }, {
                code: 'GV15',
                name: 'Kérouané'
            }, {
                code: 'GV16',
                name: 'Kindia'
            }, {
                code: 'GV17',
                name: 'Kissidougou'
            }, {
                code: 'GV33',
                name: 'Koubia'
            }, {
                code: 'GV18',
                name: 'Koundara'
            }, {
                code: 'GV19',
                name: 'Kouroussa'
            }, {
                code: 'GV34',
                name: 'Labé'
            }, {
                code: 'GV35',
                name: 'Lélouma'
            }, {
                code: 'GV36',
                name: 'Lola'
            }, {
                code: 'GV21',
                name: 'Macenta'
            }, {
                code: 'GV22',
                name: 'Mali'
            }, {
                code: 'GV23',
                name: 'Mamou'
            }, {
                code: 'GV37',
                name: 'Mandiana'
            }, {
                code: 'GV38',
                name: 'Nzérékoré'
            }, {
                code: 'GV25',
                name: 'Pita'
            }, {
                code: 'GV39',
                name: 'Siguiri'
            }, {
                code: 'GV27',
                name: 'Télimélé'
            }, {
                code: 'GV28',
                name: 'Tougué'
            }, {
                code: 'GV29',
                name: 'Yomou'
            }]
    }, {
        code: 'GW',
        id: 2256,
        name: 'Guinea-Bissau',
        states: [{
                code: 'PU01',
                name: 'Bafatá'
            }, {
                code: 'PU12',
                name: 'Biombo'
            }, {
                code: 'PU11',
                name: 'Bissau'
            }, {
                code: 'PU05',
                name: 'Bolama'
            }, {
                code: 'PU06',
                name: 'Cacheu'
            }, {
                code: 'PU10',
                name: 'Gabú'
            }, {
                code: 'PU04',
                name: 'Oio'
            }, {
                code: 'PU02',
                name: 'Quinara'
            }, {
                code: 'PU07',
                name: 'Tombali'
            }]
    }, {
        code: 'GY',
        id: 2257,
        name: 'Guyana',
        states: [{
                code: 'GY10',
                name: 'Barima-Waini'
            }, {
                code: 'GY11',
                name: 'Cuyuni-Mazaruni'
            }, {
                code: 'GY12',
                name: 'Demerara-Mahaica'
            }, {
                code: 'GY13',
                name: 'East Berbice-Corentyne'
            }, {
                code: 'GY14',
                name: 'Essequibo Islands-West Demerara'
            }, {
                code: 'GY15',
                name: 'Mahaica-Berbice'
            }, {
                code: 'GY16',
                name: 'Pomeroon-Supenaam'
            }, {
                code: 'GY17',
                name: 'Potaro-Siparuni'
            }, {
                code: 'GY18',
                name: 'Upper Demerara-Berbice'
            }, {
                code: 'GY19',
                name: 'Upper Takutu-Upper Essequibo'
            }]
    }, {
        code: 'HT',
        id: 2258,
        name: 'Haiti',
        states: [{
                code: 'HA07',
                name: 'Centre'
            }, {
                code: 'HA14',
                name: 'Grand\' Anse'
            }, {
                code: 'HA06',
                name: 'L\'Artibonite'
            }, {
                code: 'HA15',
                name: 'Nippes'
            }, {
                code: 'HA10',
                name: 'Nord-Est'
            }, {
                code: 'HA03',
                name: 'Nord-Ouest'
            }, {
                code: 'HA09',
                name: 'Nord'
            }, {
                code: 'HA11',
                name: 'Ouest'
            }, {
                code: 'HA13',
                name: 'Sud-Est'
            }, {
                code: 'HA12',
                name: 'Sud'
            }]
    }, {
        code: 'HM',
        id: 2421,
        name: 'Heard and McDonald Islands',
        states: []
    }, {
        code: 'VA',
        id: 2362,
        name: 'Holy See (Vatican City State)',
        states: []
    }, {
        code: 'HN',
        id: 2259,
        name: 'Honduras',
        states: [{
                code: 'HO01',
                name: 'Atlántida'
            }, {
                code: 'HO02',
                name: 'Choluteca'
            }, {
                code: 'HO03',
                name: 'Colón'
            }, {
                code: 'HO04',
                name: 'Comayagua'
            }, {
                code: 'HO05',
                name: 'Copán'
            }, {
                code: 'HO06',
                name: 'Cortés'
            }, {
                code: 'HO07',
                name: 'El Paraíso'
            }, {
                code: 'HO08',
                name: 'Francisco Morazán'
            }, {
                code: 'HO09',
                name: 'Gracias a Dios'
            }, {
                code: 'HO10',
                name: 'Intibucá'
            }, {
                code: 'HO11',
                name: 'Islas de la Bahía'
            }, {
                code: 'HO12',
                name: 'La Paz'
            }, {
                code: 'HO13',
                name: 'Lempira'
            }, {
                code: 'HO14',
                name: 'Ocotepeque'
            }, {
                code: 'HO15',
                name: 'Olancho'
            }, {
                code: 'HO16',
                name: 'Santa Bárbara'
            }, {
                code: 'HO17',
                name: 'Valle'
            }, {
                code: 'HO18',
                name: 'Yoro'
            }]
    }, {
        code: 'HK',
        id: 2377,
        name: 'Hong Kong',
        states: [{
                code: 'HK001',
                name: 'Hong Kong Island'
            }, {
                code: 'HK002',
                name: 'Kowloon'
            }, {
                code: 'HK003',
                name: 'New Territories'
            }]
    }, {
        code: 'HU',
        id: 2260,
        name: 'Hungary',
        states: [{
                code: 'BK',
                name: 'Bács-Kiskun'
            }, {
                code: 'BA',
                name: 'Baranya'
            }, {
                code: 'BE',
                name: 'Békés'
            }, {
                code: 'BC',
                name: 'Békéscsaba'
            }, {
                code: 'BZ',
                name: 'Borsod-Abaúj-Zemplén'
            }, {
                code: 'BU',
                name: 'Budapest'
            }, {
                code: 'CS',
                name: 'Csongrád'
            }, {
                code: 'DE',
                name: 'Debrecen'
            }, {
                code: 'DU',
                name: 'Dunaújváros'
            }, {
                code: 'EG',
                name: 'Eger'
            }, {
                code: 'ER',
                name: 'Erd'
            }, {
                code: 'FE',
                name: 'Fejér'
            }, {
                code: 'GY',
                name: 'Gyor'
            }, {
                code: 'GS',
                name: 'Gyor-Moson-Sopron'
            }, {
                code: 'HB',
                name: 'Hajdú-Bihar'
            }, {
                code: 'HE',
                name: 'Heves'
            }, {
                code: 'HV',
                name: 'Hódmezovásárhely'
            }, {
                code: 'JN',
                name: 'Jász-Nagykun-Szolnok'
            }, {
                code: 'KV',
                name: 'Kaposvár'
            }, {
                code: 'KM',
                name: 'Kecskemét'
            }, {
                code: 'KE',
                name: 'Komárom-Esztergom'
            }, {
                code: 'MI',
                name: 'Miskolc'
            }, {
                code: 'NK',
                name: 'Nagykanizsa'
            }, {
                code: 'NO',
                name: 'Nógrád'
            }, {
                code: 'NY',
                name: 'Nyíregyháza'
            }, {
                code: 'PS',
                name: 'Pécs'
            }, {
                code: 'PE',
                name: 'Pest'
            }, {
                code: 'ST',
                name: 'Salgótarján'
            }, {
                code: 'SO',
                name: 'Somogy'
            }, {
                code: 'SN',
                name: 'Sopron'
            }, {
                code: 'SZ',
                name: 'Szabolcs-Szatmár-Bereg'
            }, {
                code: 'SD',
                name: 'Szeged'
            }, {
                code: 'SF',
                name: 'Székesfehérvár'
            }, {
                code: 'SS',
                name: 'Szekszárd'
            }, {
                code: 'SK',
                name: 'Szolnok'
            }, {
                code: 'SH',
                name: 'Szombathely'
            }, {
                code: 'TB',
                name: 'Tatabánya'
            }, {
                code: 'TO',
                name: 'Tolna'
            }, {
                code: 'VA',
                name: 'Vas'
            }, {
                code: 'VE',
                name: 'Veszprém'
            }, {
                code: 'VM',
                name: 'Veszprém City'
            }, {
                code: 'ZA',
                name: 'Zala'
            }, {
                code: 'ZE',
                name: 'Zalaegerszeg'
            }]
    }, {
        code: 'IS',
        id: 2261,
        name: 'Iceland',
        states: [{
                code: '7',
                name: 'Austurland'
            }, {
                code: '1',
                name: 'Höfuðborgarsvæði utan Reykjavíkur'
            }, {
                code: '6',
                name: 'Norðurland eystra'
            }, {
                code: '5',
                name: 'Norðurland vestra'
            }, {
                code: '0',
                name: 'Reykjavík'
            }, {
                code: '8',
                name: 'Suðurland'
            }, {
                code: '2',
                name: 'Suðurnes'
            }, {
                code: '4',
                name: 'Vestfirðir'
            }, {
                code: '3',
                name: 'Vesturland'
            }]
    }, {
        code: 'IN',
        id: 2262,
        name: 'India',
        states: [{
                code: 'AN',
                name: 'Andaman and Nicobar Islands'
            }, {
                code: 'AP',
                name: 'Andhra Pradesh'
            }, {
                code: 'AR',
                name: 'Arunachal Pradesh'
            }, {
                code: 'AS',
                name: 'Assam'
            }, {
                code: 'BR',
                name: 'Bihar'
            }, {
                code: 'CH',
                name: 'Chandigarh'
            }, {
                code: 'CT',
                name: 'Chhattisgarh'
            }, {
                code: 'DN',
                name: 'Dadra and Nagar Haveli'
            }, {
                code: 'DD',
                name: 'Daman and Diu'
            }, {
                code: 'DL',
                name: 'Delhi'
            }, {
                code: 'GA',
                name: 'Goa'
            }, {
                code: 'GJ',
                name: 'Gujarat'
            }, {
                code: 'HR',
                name: 'Haryana'
            }, {
                code: 'HP',
                name: 'Himachal Pradesh'
            }, {
                code: 'JK',
                name: 'Jammu and Kashmir'
            }, {
                code: 'JH',
                name: 'Jharkhand'
            }, {
                code: 'KA',
                name: 'Karnataka'
            }, {
                code: 'KL',
                name: 'Kerala'
            }, {
                code: 'LD',
                name: 'Lakshadweep'
            }, {
                code: 'MP',
                name: 'Madhya Pradesh'
            }, {
                code: 'MH',
                name: 'Maharashtra'
            }, {
                code: 'MN',
                name: 'Manipur'
            }, {
                code: 'ML',
                name: 'Meghalaya'
            }, {
                code: 'MZ',
                name: 'Mizoram'
            }, {
                code: 'NL',
                name: 'Nagaland'
            }, {
                code: 'OR',
                name: 'Orissa'
            }, {
                code: 'PY',
                name: 'Pondicherry'
            }, {
                code: 'PB',
                name: 'Punjab'
            }, {
                code: 'RJ',
                name: 'Rajasthan'
            }, {
                code: 'SK',
                name: 'Sikkim'
            }, {
                code: 'TN',
                name: 'Tamil Nadu'
            }, {
                code: 'TG',
                name: 'Telangana'
            }, {
                code: 'TR',
                name: 'Tripura'
            }, {
                code: 'UP',
                name: 'Uttar Pradesh'
            }, {
                code: 'UL',
                name: 'Uttaranchal'
            }, {
                code: 'WB',
                name: 'West Bengal'
            }]
    }, {
        code: 'ID',
        id: 2263,
        name: 'Indonesia',
        states: [{
                code: 'AC',
                name: 'Aceh'
            }, {
                code: 'BA',
                name: 'Bali'
            }, {
                code: 'BB',
                name: 'Bangka Belitung'
            }, {
                code: 'BT',
                name: 'Banten'
            }, {
                code: 'BE',
                name: 'Bengkulu'
            }, {
                code: 'GO',
                name: 'Gorontalo'
            }, {
                code: 'JK',
                name: 'Jakarta Raya'
            }, {
                code: 'JA',
                name: 'Jambi'
            }, {
                code: 'JB',
                name: 'Jawa Barat'
            }, {
                code: 'JT',
                name: 'Jawa Tengah'
            }, {
                code: 'JI',
                name: 'Jawa Timur'
            }, {
                code: 'KB',
                name: 'Kalimantan Barat'
            }, {
                code: 'KS',
                name: 'Kalimantan Selatan'
            }, {
                code: 'KT',
                name: 'Kalimantan Tengah'
            }, {
                code: 'KI',
                name: 'Kalimantan Timur'
            }, {
                code: 'KR',
                name: 'Kepulauan Riau'
            }, {
                code: 'LA',
                name: 'Lampung'
            }, {
                code: 'MA',
                name: 'Maluku'
            }, {
                code: 'MU',
                name: 'Maluku Utara'
            }, {
                code: 'NB',
                name: 'Nusa Tenggara Barat'
            }, {
                code: 'NT',
                name: 'Nusa Tenggara Timur'
            }, {
                code: 'PA',
                name: 'Papua'
            }, {
                code: 'PB',
                name: 'Papua Barat'
            }, {
                code: 'RI',
                name: 'Riau'
            }, {
                code: 'SR',
                name: 'Sulawesi Barat'
            }, {
                code: 'SN',
                name: 'Sulawesi Selatan'
            }, {
                code: 'ST',
                name: 'Sulawesi Tengah'
            }, {
                code: 'SG',
                name: 'Sulawesi Tenggara'
            }, {
                code: 'SA',
                name: 'Sulawesi Utara'
            }, {
                code: 'SB',
                name: 'Sumatera Barat'
            }, {
                code: 'SS',
                name: 'Sumatera Selatan'
            }, {
                code: 'SU',
                name: 'Sumatera Utara'
            }, {
                code: 'YO',
                name: 'Yogyakarta'
            }]
    }, {
        code: 'IR',
        id: 2264,
        name: 'Iran; Islamic Republic of',
        states: [{
                code: 'IR44',
                name: 'Alborz'
            }, {
                code: 'IR32',
                name: 'Ardebil'
            }, {
                code: 'IR22',
                name: 'Bushehr'
            }, {
                code: 'IR03',
                name: 'Chahar Mahall and Bakhtiari'
            }, {
                code: 'IR33',
                name: 'East Azarbaijan'
            }, {
                code: 'IR28',
                name: 'Esfahan'
            }, {
                code: 'IR07',
                name: 'Fars'
            }, {
                code: 'IR08',
                name: 'Gilan'
            }, {
                code: 'IR37',
                name: 'Golestan'
            }, {
                code: 'IR09',
                name: 'Hamadan'
            }, {
                code: 'IR11',
                name: 'Hormozgan'
            }, {
                code: 'IR42',
                name: 'IRazavi Khorasan'
            }, {
                code: 'IR10',
                name: 'Ilam'
            }, {
                code: 'IR29',
                name: 'Kerman'
            }, {
                code: 'IR13',
                name: 'Kermanshah'
            }, {
                code: 'IR15',
                name: 'Khuzestan'
            }, {
                code: 'IR05',
                name: 'Kohgiluyeh and Buyer Ahmad'
            }, {
                code: 'IR16',
                name: 'Kordestan'
            }, {
                code: 'IR23',
                name: 'Lorestan'
            }, {
                code: 'IR34',
                name: 'Markazi'
            }, {
                code: 'IR35',
                name: 'Mazandaran'
            }, {
                code: 'IR43',
                name: 'North Khorasan'
            }, {
                code: 'IR38',
                name: 'Qazvin'
            }, {
                code: 'IR39',
                name: 'Qom'
            }, {
                code: 'IR25',
                name: 'Semnan'
            }, {
                code: 'IR04',
                name: 'Sistan and Baluchestan'
            }, {
                code: 'IR41',
                name: 'South Khorasan'
            }, {
                code: 'IR26',
                name: 'Tehran'
            }, {
                code: 'IR01',
                name: 'West Azarbaijan'
            }, {
                code: 'IR40',
                name: 'Yazd'
            }, {
                code: 'IR36',
                name: 'Zanjan'
            }]
    }, {
        code: 'IQ',
        id: 2265,
        name: 'Iraq',
        states: [{
                code: 'IZ01',
                name: 'Al-Anbar'
            }, {
                code: 'IZ02',
                name: 'Al-Basrah'
            }, {
                code: 'IZ03',
                name: 'Al-Muthanna'
            }, {
                code: 'IZ04',
                name: 'Al-Qadisiyah'
            }, {
                code: 'IZ17',
                name: 'An-Najaf'
            }, {
                code: 'IZ11',
                name: 'Arbil'
            }, {
                code: 'IZ05',
                name: 'As-Sulaymaniyah'
            }, {
                code: 'IZ13',
                name: 'At-Ta\'mim'
            }, {
                code: 'IZ06',
                name: 'Babil'
            }, {
                code: 'IZ07',
                name: 'Baghdad'
            }, {
                code: 'IZ08',
                name: 'Dahuk'
            }, {
                code: 'IZ09',
                name: 'Dhi Qar'
            }, {
                code: 'IZ10',
                name: 'Diyala'
            }, {
                code: 'IZ12',
                name: 'Karbala'
            }, {
                code: 'IZ14',
                name: 'Maysan'
            }, {
                code: 'IZ15',
                name: 'Ninawa'
            }, {
                code: 'IZ18',
                name: 'Salah ad-Din'
            }, {
                code: 'IZ16',
                name: 'Wasit'
            }]
    }, {
        code: 'IE',
        id: 2266,
        name: 'Ireland',
        states: [{
                code: 'CW',
                name: 'Carlow'
            }, {
                code: 'CN',
                name: 'Cavan'
            }, {
                code: 'CE',
                name: 'Clare'
            }, {
                code: 'C',
                name: 'Connacht'
            }, {
                code: 'CO',
                name: 'Cork'
            }, {
                code: 'DL',
                name: 'Donegal'
            }, {
                code: 'D',
                name: 'Dublin'
            }, {
                code: 'G',
                name: 'Galway'
            }, {
                code: 'KY',
                name: 'Kerry'
            }, {
                code: 'KE',
                name: 'Kildare'
            }, {
                code: 'KK',
                name: 'Kilkenny'
            }, {
                code: 'LS',
                name: 'Laois'
            }, {
                code: 'L',
                name: 'Leinster'
            }, {
                code: 'LM',
                name: 'Leitrim'
            }, {
                code: 'LK',
                name: 'Limerick'
            }, {
                code: 'LD',
                name: 'Longford'
            }, {
                code: 'LH',
                name: 'Louth'
            }, {
                code: 'MO',
                name: 'Mayo'
            }, {
                code: 'MH',
                name: 'Meath'
            }, {
                code: 'MN',
                name: 'Monaghan'
            }, {
                code: 'M',
                name: 'Munster'
            }, {
                code: 'OY',
                name: 'Offaly'
            }, {
                code: 'RN',
                name: 'Roscommon'
            }, {
                code: 'SO',
                name: 'Sligo'
            }, {
                code: 'TA',
                name: 'Tipperary'
            }, {
                code: 'U',
                name: 'Ulster'
            }, {
                code: 'WD',
                name: 'Waterford'
            }, {
                code: 'WH',
                name: 'Westmeath'
            }, {
                code: 'WX',
                name: 'Wexford'
            }, {
                code: 'WW',
                name: 'Wicklow'
            }]
    }, {
        code: 'IM',
        id: 2445,
        name: 'Isle of Man',
        states: []
    }, {
        code: 'IL',
        id: 2267,
        name: 'Israel',
        states: [{
                code: 'IS01',
                name: 'HaDarom'
            }, {
                code: 'IS02',
                name: 'HaMerkaz'
            }, {
                code: 'IS03',
                name: 'HaZafon'
            }, {
                code: 'IS04',
                name: 'Haifa'
            }, {
                code: 'IS06',
                name: 'Jerusalem'
            }, {
                code: 'IS05',
                name: 'Tel Aviv'
            }]
    }, {
        code: 'IT',
        id: 2268,
        name: 'Italy',
        states: [{
                code: '65',
                name: 'Abruzzo'
            }, {
                code: 'AG',
                name: 'Agrigento'
            }, {
                code: 'AL',
                name: 'Alessandria'
            }, {
                code: 'AN',
                name: 'Ancona'
            }, {
                code: 'AO',
                name: 'Aosta'
            }, {
                code: 'AR',
                name: 'Arezzo'
            }, {
                code: 'AP',
                name: 'Ascoli Piceno'
            }, {
                code: 'AT',
                name: 'Asti'
            }, {
                code: 'AV',
                name: 'Avellino'
            }, {
                code: 'BA',
                name: 'Bari'
            }, {
                code: 'BT',
                name: 'Barletta-Andria-Trani'
            }, {
                code: '77',
                name: 'Basilicata'
            }, {
                code: 'BL',
                name: 'Belluno'
            }, {
                code: 'BN',
                name: 'Benevento'
            }, {
                code: 'BG',
                name: 'Bergamo'
            }, {
                code: 'BI',
                name: 'Biella'
            }, {
                code: 'BO',
                name: 'Bologna'
            }, {
                code: 'BZ',
                name: 'Bolzano'
            }, {
                code: 'BS',
                name: 'Brescia'
            }, {
                code: 'BR',
                name: 'Brindisi'
            }, {
                code: 'CA',
                name: 'Cagliari'
            }, {
                code: '78',
                name: 'Calabria'
            }, {
                code: 'CL',
                name: 'Caltanissetta'
            }, {
                code: '72',
                name: 'Campania'
            }, {
                code: 'CB',
                name: 'Campobasso'
            }, {
                code: 'CI',
                name: 'Carbonia-Iglesias'
            }, {
                code: 'CE',
                name: 'Caserta'
            }, {
                code: 'CT',
                name: 'Catania'
            }, {
                code: 'CZ',
                name: 'Catanzaro'
            }, {
                code: 'CH',
                name: 'Chieti'
            }, {
                code: 'CO',
                name: 'Como'
            }, {
                code: 'CS',
                name: 'Cosenza'
            }, {
                code: 'CR',
                name: 'Cremona'
            }, {
                code: 'KR',
                name: 'Crotone'
            }, {
                code: 'CN',
                name: 'Cuneo'
            }, {
                code: '45',
                name: 'Emilia-Romagna'
            }, {
                code: 'EN',
                name: 'Enna'
            }, {
                code: 'FM',
                name: 'Fermo'
            }, {
                code: 'FE',
                name: 'Ferrara'
            }, {
                code: 'FI',
                name: 'Firenze'
            }, {
                code: 'FG',
                name: 'Foggia'
            }, {
                code: 'FC',
                name: 'Forli-Cesena'
            }, {
                code: '36',
                name: 'Friuli-Venezia Giulia'
            }, {
                code: 'FR',
                name: 'Frosinone'
            }, {
                code: 'GE',
                name: 'Genova'
            }, {
                code: 'GO',
                name: 'Gorizia'
            }, {
                code: 'GR',
                name: 'Grosseto'
            }, {
                code: 'IM',
                name: 'Imperia'
            }, {
                code: 'IS',
                name: 'Isernia'
            }, {
                code: 'AQ',
                name: 'L\'Aquila'
            }, {
                code: 'SP',
                name: 'La Spezia'
            }, {
                code: 'LT',
                name: 'Latina'
            }, {
                code: '62',
                name: 'Lazio'
            }, {
                code: 'LE',
                name: 'Lecce'
            }, {
                code: 'LC',
                name: 'Lecco'
            }, {
                code: '42',
                name: 'Liguria'
            }, {
                code: 'LI',
                name: 'Livorno'
            }, {
                code: 'LO',
                name: 'Lodi'
            }, {
                code: '25',
                name: 'Lombardia'
            }, {
                code: 'LU',
                name: 'Lucca'
            }, {
                code: 'MC',
                name: 'Macerata'
            }, {
                code: 'MN',
                name: 'Mantova'
            }, {
                code: '57',
                name: 'Marche'
            }, {
                code: 'MS',
                name: 'Massa-Carrara'
            }, {
                code: 'MT',
                name: 'Matera'
            }, {
                code: 'VS',
                name: 'Medio Campidano'
            }, {
                code: 'ME',
                name: 'Messina'
            }, {
                code: 'MI',
                name: 'Milano'
            }, {
                code: 'MO',
                name: 'Modena'
            }, {
                code: '67',
                name: 'Molise'
            }, {
                code: 'MB',
                name: 'Monza e Brianza'
            }, {
                code: 'NA',
                name: 'Napoli'
            }, {
                code: 'NO',
                name: 'Novara'
            }, {
                code: 'NU',
                name: 'Nuoro'
            }, {
                code: 'OG',
                name: 'Ogliastra'
            }, {
                code: 'OT',
                name: 'Olbia-Tempio'
            }, {
                code: 'OR',
                name: 'Oristano'
            }, {
                code: 'PD',
                name: 'Padova'
            }, {
                code: 'PA',
                name: 'Palermo'
            }, {
                code: 'PR',
                name: 'Parma'
            }, {
                code: 'PV',
                name: 'Pavia'
            }, {
                code: 'PG',
                name: 'Perugia'
            }, {
                code: 'PU',
                name: 'Pesaro e Urbino'
            }, {
                code: 'PE',
                name: 'Pescara'
            }, {
                code: 'PC',
                name: 'Piacenza'
            }, {
                code: '21',
                name: 'Piemonte'
            }, {
                code: 'PI',
                name: 'Pisa'
            }, {
                code: 'PT',
                name: 'Pistoia'
            }, {
                code: 'PN',
                name: 'Pordenone'
            }, {
                code: 'PZ',
                name: 'Potenza'
            }, {
                code: 'PO',
                name: 'Prato'
            }, {
                code: '75',
                name: 'Puglia'
            }, {
                code: 'RG',
                name: 'Ragusa'
            }, {
                code: 'RA',
                name: 'Ravenna'
            }, {
                code: 'RC',
                name: 'Reggio Calabria'
            }, {
                code: 'RE',
                name: 'Reggio Emilia'
            }, {
                code: 'RI',
                name: 'Rieti'
            }, {
                code: 'RN',
                name: 'Rimini'
            }, {
                code: 'RM',
                name: 'Roma'
            }, {
                code: 'RO',
                name: 'Rovigo'
            }, {
                code: 'SA',
                name: 'Salerno'
            }, {
                code: '88',
                name: 'Sardegna'
            }, {
                code: 'SS',
                name: 'Sassari'
            }, {
                code: 'SV',
                name: 'Savona'
            }, {
                code: '82',
                name: 'Sicilia'
            }, {
                code: 'SI',
                name: 'Siena'
            }, {
                code: 'SR',
                name: 'Siracusa'
            }, {
                code: 'SO',
                name: 'Sondrio'
            }, {
                code: 'TA',
                name: 'Taranto'
            }, {
                code: 'TE',
                name: 'Teramo'
            }, {
                code: 'TR',
                name: 'Terni'
            }, {
                code: 'TO',
                name: 'Torino'
            }, {
                code: '52',
                name: 'Toscana'
            }, {
                code: 'TP',
                name: 'Trapani'
            }, {
                code: '32',
                name: 'Trentino-Alto Adige'
            }, {
                code: 'TN',
                name: 'Trento'
            }, {
                code: 'TV',
                name: 'Treviso'
            }, {
                code: 'TS',
                name: 'Trieste'
            }, {
                code: 'UD',
                name: 'Udine'
            }, {
                code: '55',
                name: 'Umbria'
            }, {
                code: '23',
                name: 'Valle d\'Aosta'
            }, {
                code: 'VA',
                name: 'Varese'
            }, {
                code: '34',
                name: 'Veneto'
            }, {
                code: 'VE',
                name: 'Venezia'
            }, {
                code: 'VB',
                name: 'Verbano-Cusio-Ossola'
            }, {
                code: 'VC',
                name: 'Vercelli'
            }, {
                code: 'VR',
                name: 'Verona'
            }, {
                code: 'VV',
                name: 'Vibo Valentia'
            }, {
                code: 'VI',
                name: 'Vicenza'
            }, {
                code: 'VT',
                name: 'Viterbo'
            }]
    }, {
        code: 'JM',
        id: 2269,
        name: 'Jamaica',
        states: [{
                code: 'JM01',
                name: 'Clarendon'
            }, {
                code: 'JM02',
                name: 'Hanover'
            }, {
                code: 'JM17',
                name: 'Kingston'
            }, {
                code: 'JM04',
                name: 'Manchester'
            }, {
                code: 'JM07',
                name: 'Portland'
            }, {
                code: 'JM08',
                name: 'Saint Andrew'
            }, {
                code: 'JM09',
                name: 'Saint Ann'
            }, {
                code: 'JM10',
                name: 'Saint Catherine'
            }, {
                code: 'JM11',
                name: 'Saint Elizabeth'
            }, {
                code: 'JM12',
                name: 'Saint James'
            }, {
                code: 'JM13',
                name: 'Saint Mary'
            }, {
                code: 'JM14',
                name: 'Saint Thomas'
            }, {
                code: 'JM15',
                name: 'Trelawny'
            }, {
                code: 'JM16',
                name: 'Westmoreland'
            }]
    }, {
        code: 'JP',
        id: 2270,
        name: 'Japan',
        states: [{
                code: 'JP23',
                name: 'Aichi'
            }, {
                code: 'JP05',
                name: 'Akita'
            }, {
                code: 'JP02',
                name: 'Aomori'
            }, {
                code: 'JP12',
                name: 'Chiba'
            }, {
                code: 'JP38',
                name: 'Ehime'
            }, {
                code: 'JP18',
                name: 'Fukui'
            }, {
                code: 'JP40',
                name: 'Fukuoka'
            }, {
                code: 'JP07',
                name: 'Fukushima'
            }, {
                code: 'JP21',
                name: 'Gifu'
            }, {
                code: 'JP10',
                name: 'Gunma'
            }, {
                code: 'JP34',
                name: 'Hiroshima'
            }, {
                code: 'JP01',
                name: 'Hokkaido'
            }, {
                code: 'JP28',
                name: 'Hyogo'
            }, {
                code: 'JP08',
                name: 'Ibaraki'
            }, {
                code: 'JP17',
                name: 'Ishikawa'
            }, {
                code: 'JP03',
                name: 'Iwate'
            }, {
                code: 'JP37',
                name: 'Kagawa'
            }, {
                code: 'JP46',
                name: 'Kagoshima'
            }, {
                code: 'JP14',
                name: 'Kanagawa'
            }, {
                code: 'JP39',
                name: 'Kochi'
            }, {
                code: 'JP43',
                name: 'Kumamoto'
            }, {
                code: 'JP26',
                name: 'Kyoto'
            }, {
                code: 'JP24',
                name: 'Mie'
            }, {
                code: 'JP04',
                name: 'Miyagi'
            }, {
                code: 'JP45',
                name: 'Miyazaki'
            }, {
                code: 'JP20',
                name: 'Nagano'
            }, {
                code: 'JP42',
                name: 'Nagasaki'
            }, {
                code: 'JP29',
                name: 'Nara'
            }, {
                code: 'JP15',
                name: 'Niigata'
            }, {
                code: 'JP44',
                name: 'Oita'
            }, {
                code: 'JP33',
                name: 'Okayama'
            }, {
                code: 'JP47',
                name: 'Okinawa'
            }, {
                code: 'JP27',
                name: 'Osaka'
            }, {
                code: 'JP41',
                name: 'Saga'
            }, {
                code: 'JP11',
                name: 'Saitama'
            }, {
                code: 'JP25',
                name: 'Shiga'
            }, {
                code: 'JP32',
                name: 'Shimane'
            }, {
                code: 'JP22',
                name: 'Shizuoka'
            }, {
                code: 'JP09',
                name: 'Tochigi'
            }, {
                code: 'JP36',
                name: 'Tokushima'
            }, {
                code: 'JP13',
                name: 'Tokyo'
            }, {
                code: 'JP31',
                name: 'Tottori'
            }, {
                code: 'JP16',
                name: 'Toyama'
            }, {
                code: 'JP30',
                name: 'Wakayama'
            }, {
                code: 'JP06',
                name: 'Yamagata'
            }, {
                code: 'JP35',
                name: 'Yamaguchi'
            }, {
                code: 'JP19',
                name: 'Yamanashi'
            }]
    }, {
        code: 'JE',
        id: 2422,
        name: 'Jersey',
        states: []
    }, {
        code: 'JO',
        id: 2271,
        name: 'Jordan',
        states: [{
                code: 'JO01',
                name: 'Ajlun'
            }, {
                code: 'JO02',
                name: 'Amman'
            }, {
                code: 'JO03',
                name: 'Aqaba'
            }, {
                code: 'JO04',
                name: 'Balqa'
            }, {
                code: 'JO05',
                name: 'Irbid'
            }, {
                code: 'JO06',
                name: 'JarasJ'
            }, {
                code: 'JO07',
                name: 'Karak'
            }, {
                code: 'JO08',
                name: 'Ma\'an'
            }, {
                code: 'JO09',
                name: 'Madaba'
            }, {
                code: 'JO10',
                name: 'Mafraq'
            }, {
                code: 'JO11',
                name: 'Tafilah'
            }, {
                code: 'JO12',
                name: 'Zarqa'
            }]
    }, {
        code: 'KZ',
        id: 2272,
        name: 'Kazakhstan',
        states: [{
                code: 'KZ01',
                name: 'Almaty'
            }, {
                code: 'KZ02',
                name: 'Almaty (City)'
            }, {
                code: 'KZ03',
                name: 'Aqmola'
            }, {
                code: 'KZ04',
                name: 'Aqtöbe'
            }, {
                code: 'KZ05',
                name: 'Astana'
            }, {
                code: 'KZ06',
                name: 'Atyrau'
            }, {
                code: 'KZ08',
                name: 'Bayqonyr'
            }, {
                code: 'KZ15',
                name: 'East Kazakhstan'
            }, {
                code: 'KZ09',
                name: 'Mangghystau'
            }, {
                code: 'KZ16',
                name: 'North Kazakhstan'
            }, {
                code: 'KZ11',
                name: 'Pavlodar'
            }, {
                code: 'KZ12',
                name: 'Qaraghandy'
            }, {
                code: 'KZ13',
                name: 'Qostanay'
            }, {
                code: 'KZ14',
                name: 'Qyzylorda'
            }, {
                code: 'KZ10',
                name: 'South Kazakhstan'
            }, {
                code: 'KZ07',
                name: 'West Kazakhstan'
            }, {
                code: 'KZ17',
                name: 'Zhambyl'
            }]
    }, {
        code: 'KE',
        id: 2273,
        name: 'Kenya',
        states: [{
                code: 'KE10',
                name: 'Baringo'
            }, {
                code: 'KE11',
                name: 'Bomet'
            }, {
                code: 'KE12',
                name: 'Bungoma'
            }, {
                code: 'KE13',
                name: 'Busia'
            }, {
                code: 'KE14',
                name: 'Elgeyo Marakwet'
            }, {
                code: 'KE15',
                name: 'Embu'
            }, {
                code: 'KE16',
                name: 'Garissa'
            }, {
                code: 'KE17',
                name: 'Homa Bay'
            }, {
                code: 'KE18',
                name: 'Isiolo'
            }, {
                code: 'KE19',
                name: 'Kajiado'
            }, {
                code: 'KE20',
                name: 'Kakamega'
            }, {
                code: 'KE21',
                name: 'Kericho'
            }, {
                code: 'KE22',
                name: 'Kiambu'
            }, {
                code: 'KE23',
                name: 'Kilifi'
            }, {
                code: 'KE24',
                name: 'Kirinyaga'
            }, {
                code: 'KE25',
                name: 'Kisii'
            }, {
                code: 'KE26',
                name: 'Kisumu'
            }, {
                code: 'KE27',
                name: 'Kitui'
            }, {
                code: 'KE28',
                name: 'Kwale'
            }, {
                code: 'KE29',
                name: 'Laikipia'
            }, {
                code: 'KE30',
                name: 'Lamu'
            }, {
                code: 'KE31',
                name: 'Machakos'
            }, {
                code: 'KE32',
                name: 'Makueni'
            }, {
                code: 'KE33',
                name: 'Mandera'
            }, {
                code: 'KE34',
                name: 'Marsabit'
            }, {
                code: 'KE35',
                name: 'Meru'
            }, {
                code: 'KE36',
                name: 'Migori'
            }, {
                code: 'KE37',
                name: 'Mombasa'
            }, {
                code: 'KE38',
                name: 'Murang'
            }, {
                code: 'KE05',
                name: 'Nairobi'
            }, {
                code: 'KE39',
                name: 'Nakuru'
            }, {
                code: 'KE40',
                name: 'Nandi'
            }, {
                code: 'KE41',
                name: 'Narok'
            }, {
                code: 'KE42',
                name: 'Nyamira'
            }, {
                code: 'KE43',
                name: 'Nyandarua'
            }, {
                code: 'KE44',
                name: 'Nyeri'
            }, {
                code: 'KE45',
                name: 'Samburu'
            }, {
                code: 'KE46',
                name: 'Siaya'
            }, {
                code: 'KE47',
                name: 'Taita Taveta'
            }, {
                code: 'KE48',
                name: 'Tana River'
            }, {
                code: 'KE49',
                name: 'Tharaka Nithi'
            }, {
                code: 'KE50',
                name: 'Trans Nzoia'
            }, {
                code: 'KE51',
                name: 'Turkana'
            }, {
                code: 'KE52',
                name: 'Uasin Gishu'
            }, {
                code: 'KE53',
                name: 'Vihiga'
            }, {
                code: 'KE54',
                name: 'Wajir'
            }, {
                code: 'KE55',
                name: 'West Pokot'
            }]
    }, {
        code: 'KI',
        id: 2391,
        name: 'Kiribati',
        states: []
    }, {
        code: 'KP',
        id: 2274,
        name: 'Korea; Democratic People\'s Republic Of (North)',
        states: [{
                code: 'KN01',
                name: 'Chagang-do'
            }, {
                code: 'KN17',
                name: 'Hamgyong-bukto'
            }, {
                code: 'KN03',
                name: 'Hamgyong-namdo'
            }, {
                code: 'KN07',
                name: 'Hwanghae-bukto'
            }, {
                code: 'KN06',
                name: 'Hwanghae-namdo'
            }, {
                code: 'KN09',
                name: 'Kangwon-do'
            }, {
                code: 'KN18',
                name: 'Najin Sonbong-si'
            }, {
                code: 'KN11',
                name: 'P\'yongan-bukto'
            }, {
                code: 'KN15',
                name: 'P\'yongan-namdo'
            }, {
                code: 'KN12',
                name: 'P\'yongyang-si'
            }, {
                code: 'KN13',
                name: 'Yanggang-do'
            }]
    }, {
        code: 'KR',
        id: 2275,
        name: 'Korea; Republic Of (South)',
        states: [{
                code: 'KS10',
                name: 'Busan'
            }, {
                code: 'KS05',
                name: 'Chungcheongbuk-do'
            }, {
                code: 'KS17',
                name: 'Chungcheongnam-do'
            }, {
                code: 'KS15',
                name: 'Daegu'
            }, {
                code: 'KS19',
                name: 'Daejeon'
            }, {
                code: 'KS06',
                name: 'Gangwon-do'
            }, {
                code: 'KS18',
                name: 'Gwangju'
            }, {
                code: 'KS13',
                name: 'Gyeonggi-do'
            }, {
                code: 'KS14',
                name: 'Gyeongsangbuk-do'
            }, {
                code: 'KS20',
                name: 'Gyeongsangnam-do'
            }, {
                code: 'KS12',
                name: 'Incheon'
            }, {
                code: 'KS01',
                name: 'Jeju-do'
            }, {
                code: 'KS03',
                name: 'Jeollabuk-do'
            }, {
                code: 'KS16',
                name: 'Jeollanam-do'
            }, {
                code: 'KS22',
                name: 'Sejong'
            }, {
                code: 'KS11',
                name: 'Seoul'
            }, {
                code: 'KS21',
                name: 'Ulsan'
            }]
    }, {
        code: 'KV',
        id: 2392,
        name: 'Kosovo',
        states: []
    }, {
        code: 'KW',
        id: 2276,
        name: 'Kuwait',
        states: [{
                code: 'KU04',
                name: 'Al Ahmadi'
            }, {
                code: 'KU07',
                name: 'Al Farwaniyah'
            }, {
                code: 'KU05',
                name: 'Al Jahrah'
            }, {
                code: 'KU02',
                name: 'Al Kuwayt'
            }, {
                code: 'KU08',
                name: 'Hawalli'
            }, {
                code: 'KU09',
                name: 'Mubarak Al-Kabir'
            }]
    }, {
        code: 'KG',
        id: 2277,
        name: 'Kyrgyzstan',
        states: [{
                code: 'KG09',
                name: 'Batken'
            }, {
                code: 'KG01',
                name: 'Bishkek'
            }, {
                code: 'KG02',
                name: 'Chüy'
            }, {
                code: 'KG03',
                name: 'Jalal-Abad'
            }, {
                code: 'KG04',
                name: 'Naryn'
            }, {
                code: 'KG10',
                name: 'Osh [City]'
            }, {
                code: 'KG08',
                name: 'Osh'
            }, {
                code: 'KG06',
                name: 'Talas'
            }, {
                code: 'KG07',
                name: 'Ysyk-Köl'
            }]
    }, {
        code: 'LA',
        id: 2278,
        name: 'Lao People\'s Democratic Republic',
        states: [{
                code: 'LA01',
                name: 'Attapu'
            }, {
                code: 'LA22',
                name: 'Bokeo'
            }, {
                code: 'LA23',
                name: 'Bolikhamxai'
            }, {
                code: 'LA02',
                name: 'Champasak'
            }, {
                code: 'LA03',
                name: 'Houaphan'
            }, {
                code: 'LA15',
                name: 'Khammouan'
            }, {
                code: 'LA16',
                name: 'Louang Namtha'
            }, {
                code: 'LA17',
                name: 'Louangphrabang'
            }, {
                code: 'LA07',
                name: 'Oudômxai'
            }, {
                code: 'LA18',
                name: 'Phôngsali'
            }, {
                code: 'LA19',
                name: 'Saravan'
            }, {
                code: 'LA20',
                name: 'Savannakhét'
            }, {
                code: 'LA27',
                name: 'Vientiane'
            }, {
                code: 'LA24',
                name: 'Vientiane [prefecture]'
            }, {
                code: 'LA13',
                name: 'Xaignabouri'
            }, {
                code: 'LA28',
                name: 'Xaisômboun'
            }, {
                code: 'LA26',
                name: 'Xékong'
            }, {
                code: 'LA14',
                name: 'Xiangkhoang'
            }]
    }, {
        code: 'LV',
        id: 2279,
        name: 'Latvia',
        states: [{
                code: 'LG34',
                name: 'Adaži'
            }, {
                code: 'LG35',
                name: 'Aglona'
            }, {
                code: 'LG36',
                name: 'Aizkraukle'
            }, {
                code: 'LG37',
                name: 'Aizpute'
            }, {
                code: 'LG38',
                name: 'Akniste'
            }, {
                code: 'LG39',
                name: 'Aloja'
            }, {
                code: 'LG40',
                name: 'Alsunga'
            }, {
                code: 'LG41',
                name: 'Aluksne'
            }, {
                code: 'LG42',
                name: 'Amata'
            }, {
                code: 'LG43',
                name: 'Ape'
            }, {
                code: 'LG44',
                name: 'Auce'
            }, {
                code: 'LG45',
                name: 'Babite'
            }, {
                code: 'LG46',
                name: 'Baldone'
            }, {
                code: 'LG47',
                name: 'Baltinava'
            }, {
                code: 'LG48',
                name: 'Balvi'
            }, {
                code: 'LG49',
                name: 'Bauska'
            }, {
                code: 'LG50',
                name: 'Beverina'
            }, {
                code: 'LG51',
                name: 'Broceni'
            }, {
                code: 'LG52',
                name: 'Burtnieki'
            }, {
                code: 'LG53',
                name: 'Carnikava'
            }, {
                code: 'LG54',
                name: 'Cesis'
            }, {
                code: 'LG55',
                name: 'Cesvaine'
            }, {
                code: 'LG56',
                name: 'Cibla'
            }, {
                code: 'LG57',
                name: 'Dagda'
            }, {
                code: 'LG06',
                name: 'Daugavpils'
            }, {
                code: 'LG58',
                name: 'Daugavpils'
            }, {
                code: 'LG59',
                name: 'Dobele'
            }, {
                code: 'LG60',
                name: 'Dundaga'
            }, {
                code: 'LG61',
                name: 'Durbe'
            }, {
                code: 'LG62',
                name: 'Engure'
            }, {
                code: 'LG63',
                name: 'Ergli'
            }, {
                code: 'LG64',
                name: 'Garkalne'
            }, {
                code: 'LG65',
                name: 'Grobina'
            }, {
                code: 'LG66',
                name: 'Gulbene'
            }, {
                code: 'LG67',
                name: 'Iecava'
            }, {
                code: 'LG68',
                name: 'Ikškile'
            }, {
                code: 'LG69',
                name: 'Ilukste'
            }, {
                code: 'LG70',
                name: 'Incukalns'
            }, {
                code: 'LG71',
                name: 'Jaunjelgava'
            }, {
                code: 'LG72',
                name: 'Jaunpiebalga'
            }, {
                code: 'LG73',
                name: 'Jaunpils'
            }, {
                code: 'LG75',
                name: 'Jekabpils'
            }, {
                code: 'LG74',
                name: 'Jekabpils'
            }, {
                code: 'LG76',
                name: 'Jelgava'
            }, {
                code: 'LG11',
                name: 'Jelgava'
            }, {
                code: 'LG13',
                name: 'Jurmala'
            }, {
                code: 'LG77',
                name: 'Kandava'
            }, {
                code: 'LG78',
                name: 'Karsava'
            }, {
                code: 'LG79',
                name: 'Kegums'
            }, {
                code: 'LG80',
                name: 'Kekava'
            }, {
                code: 'LG81',
                name: 'Kocenu'
            }, {
                code: 'LG82',
                name: 'Koknese'
            }, {
                code: 'LG83',
                name: 'Kraslava'
            }, {
                code: 'LG84',
                name: 'Krimulda'
            }, {
                code: 'LG85',
                name: 'Krustpils'
            }, {
                code: 'LG86',
                name: 'Kuldiga'
            }, {
                code: 'LG87',
                name: 'Lielvarde'
            }, {
                code: 'LG16',
                name: 'Liepaja'
            }, {
                code: 'LG88',
                name: 'Ligatne'
            }, {
                code: 'LG89',
                name: 'Limbaži'
            }, {
                code: 'LG90',
                name: 'Livani'
            }, {
                code: 'LG91',
                name: 'Lubana'
            }, {
                code: 'LG92',
                name: 'Ludza'
            }, {
                code: 'LG93',
                name: 'Madona'
            }, {
                code: 'LG94',
                name: 'Malpils'
            }, {
                code: 'LG95',
                name: 'Marupe'
            }, {
                code: 'LG96',
                name: 'Mazsalaca'
            }, {
                code: 'LGF1',
                name: 'Mersraga'
            }, {
                code: 'LG97',
                name: 'Naukšeni'
            }, {
                code: 'LG98',
                name: 'Nereta'
            }, {
                code: 'LG99',
                name: 'Nica'
            }, {
                code: 'LGA1',
                name: 'Ogre'
            }, {
                code: 'LGA2',
                name: 'Olaine'
            }, {
                code: 'LGA3',
                name: 'Ozolnieki'
            }, {
                code: 'LGA4',
                name: 'Pargauja'
            }, {
                code: 'LGA5',
                name: 'Pavilosta'
            }, {
                code: 'LGA6',
                name: 'Plavinas'
            }, {
                code: 'LGA7',
                name: 'Preili'
            }, {
                code: 'LGA8',
                name: 'Priekule'
            }, {
                code: 'LGA9',
                name: 'Priekuli'
            }, {
                code: 'LGB1',
                name: 'Rauna'
            }, {
                code: 'LGB2',
                name: 'Rezekne'
            }, {
                code: 'LG23',
                name: 'Rezekne'
            }, {
                code: 'LGB3',
                name: 'Riebini'
            }, {
                code: 'LG25',
                name: 'Riga'
            }, {
                code: 'LGB4',
                name: 'Roja'
            }, {
                code: 'LGB5',
                name: 'Ropaži'
            }, {
                code: 'LGB6',
                name: 'Rucava'
            }, {
                code: 'LGB7',
                name: 'Rugaji'
            }, {
                code: 'LGB8',
                name: 'Rujiena'
            }, {
                code: 'LGB9',
                name: 'Rundale'
            }, {
                code: 'LGC1',
                name: 'Salacgriva'
            }, {
                code: 'LGC2',
                name: 'Sala'
            }, {
                code: 'LGC3',
                name: 'Salaspils'
            }, {
                code: 'LGC4',
                name: 'Saldus'
            }, {
                code: 'LGC5',
                name: 'Saulkrasti'
            }, {
                code: 'LGC6',
                name: 'Seja'
            }, {
                code: 'LGC7',
                name: 'Sigulda'
            }, {
                code: 'LGC8',
                name: 'Skriveri'
            }, {
                code: 'LGC9',
                name: 'Skrunda'
            }, {
                code: 'LGD1',
                name: 'Smiltene'
            }, {
                code: 'LGD2',
                name: 'Stopini'
            }, {
                code: 'LGD3',
                name: 'Strenci'
            }, {
                code: 'LGD4',
                name: 'Talsi'
            }, {
                code: 'LGD5',
                name: 'Tervete'
            }, {
                code: 'LGD6',
                name: 'Tukums'
            }, {
                code: 'LGD7',
                name: 'Vainode'
            }, {
                code: 'LGD8',
                name: 'Valka'
            }, {
                code: 'LGD9',
                name: 'Valmiera'
            }, {
                code: 'LGE1',
                name: 'Varaklani'
            }, {
                code: 'LGE2',
                name: 'Varkava'
            }, {
                code: 'LGE3',
                name: 'Vecpiebalga'
            }, {
                code: 'LGE4',
                name: 'Vecumnieki'
            }, {
                code: 'LGE5',
                name: 'Ventspils'
            }, {
                code: 'LG32',
                name: 'Ventspils'
            }, {
                code: 'LGE6',
                name: 'Viesite'
            }, {
                code: 'LGE7',
                name: 'Vilaka'
            }, {
                code: 'LGE8',
                name: 'Vilani'
            }, {
                code: 'LGE9',
                name: 'Zilupe'
            }]
    }, {
        code: 'LB',
        id: 2280,
        name: 'Lebanon',
        states: [{
                code: 'LE10',
                name: 'Aakkar'
            }, {
                code: 'LE07',
                name: 'An Nabatiyah'
            }, {
                code: 'LE11',
                name: 'Baalbek-Hermel'
            }, {
                code: 'LE04',
                name: 'Beirut'
            }, {
                code: 'LE08',
                name: 'Beqaa'
            }, {
                code: 'LE05',
                name: 'Mount Lebanon'
            }, {
                code: 'LE09',
                name: 'North Lebanon'
            }, {
                code: 'LE06',
                name: 'South Lebanon'
            }]
    }, {
        code: 'LS',
        id: 2281,
        name: 'Lesotho',
        states: [{
                code: 'LT10',
                name: 'Berea'
            }, {
                code: 'LT11',
                name: 'Butha-Buthe'
            }, {
                code: 'LT12',
                name: 'Leribe'
            }, {
                code: 'LT14',
                name: 'Mafeteng'
            }, {
                code: 'LT13',
                name: 'Mafeteng'
            }, {
                code: 'LT15',
                name: 'Mohale\'s Hoek'
            }, {
                code: 'LT16',
                name: 'Mokhotlong'
            }, {
                code: 'LT17',
                name: 'Qacha\'s Nek'
            }, {
                code: 'LT18',
                name: 'Quthing'
            }, {
                code: 'LT19',
                name: 'Thaba-Tseka'
            }]
    }, {
        code: 'LR',
        id: 2282,
        name: 'Liberia',
        states: [{
                code: 'LI15',
                name: 'Bomi'
            }, {
                code: 'LI01',
                name: 'Bong'
            }, {
                code: 'LI21\t',
                name: 'Gbarpolu'
            }, {
                code: 'LI11',
                name: 'Grand Bassa'
            }, {
                code: 'LI12',
                name: 'Grand Cape Mount'
            }, {
                code: 'LI19',
                name: 'Grand Gedeh'
            }, {
                code: 'LI16',
                name: 'Grand Kru'
            }, {
                code: 'LI20',
                name: 'Lofa'
            }, {
                code: 'LI17',
                name: 'Margibi'
            }, {
                code: 'LI13',
                name: 'Maryland'
            }, {
                code: 'LI14',
                name: 'Montserrado'
            }, {
                code: 'LI09',
                name: 'Nimba'
            }, {
                code: 'LI22',
                name: 'River Gee'
            }, {
                code: 'LI18',
                name: 'Rivercess'
            }, {
                code: 'LI10',
                name: 'Sinoe'
            }]
    }, {
        code: 'LY',
        id: 2380,
        name: 'Libyan Arab Jamahiriya',
        states: []
    }, {
        code: 'LI',
        id: 2284,
        name: 'Liechtenstein',
        states: []
    }, {
        code: 'LT',
        id: 2285,
        name: 'Lithuania',
        states: [{
                code: 'LH56',
                name: 'Alytus'
            }, {
                code: 'LH57',
                name: 'Kaunas'
            }, {
                code: 'LH58',
                name: 'Klaipeda'
            }, {
                code: 'LH59',
                name: 'Marijampole'
            }, {
                code: 'LH60',
                name: 'Panevežys'
            }, {
                code: 'LH61',
                name: 'Siauliai'
            }, {
                code: 'LH62',
                name: 'Taurage'
            }, {
                code: 'LH63',
                name: 'Telšiai'
            }, {
                code: 'LH64',
                name: 'Utena'
            }, {
                code: 'LH65',
                name: 'Vilnius'
            }]
    }, {
        code: 'LU',
        id: 2286,
        name: 'Luxembourg',
        states: [{
                code: 'LU01',
                name: 'Diekirch'
            }, {
                code: 'LU02',
                name: 'Grevenmacher'
            }, {
                code: 'LU03',
                name: 'Luxembourg'
            }]
    }, {
        code: 'MO',
        id: 2287,
        name: 'Macau',
        states: []
    }, {
        code: 'MK',
        id: 2288,
        name: 'Macedonia',
        states: []
    }, {
        code: 'YU',
        id: 2367,
        name: 'Macedonia; the Former Yugoslav Republic',
        states: []
    }, {
        code: 'MG',
        id: 2289,
        name: 'Madagascar',
        states: [{
                code: 'MA05',
                name: 'Antananarivo'
            }, {
                code: 'MA01',
                name: 'Antsiranana'
            }, {
                code: 'MA02',
                name: 'Fianarantsoa'
            }, {
                code: 'MA03',
                name: 'Mahajanga'
            }, {
                code: 'MA04',
                name: 'Toamasina'
            }, {
                code: 'MA06',
                name: 'Toliara'
            }]
    }, {
        code: 'MW',
        id: 2290,
        name: 'Malawi',
        states: [{
                code: 'MI26',
                name: 'Balaka'
            }, {
                code: 'MI24',
                name: 'Blantyre'
            }, {
                code: 'MI02',
                name: 'Chikwawa'
            }, {
                code: 'MI03',
                name: 'Chiradzulu'
            }, {
                code: 'MI04',
                name: 'Chitipa'
            }, {
                code: 'MI06',
                name: 'Dedza'
            }, {
                code: 'MI07',
                name: 'Dowa'
            }, {
                code: 'MI08',
                name: 'Karonga'
            }, {
                code: 'MI09',
                name: 'Kasungu'
            }, {
                code: 'MI27',
                name: 'Likoma'
            }, {
                code: 'MI11',
                name: 'Lilongwe'
            }, {
                code: 'MI28',
                name: 'Machinga'
            }, {
                code: 'MI12',
                name: 'Mangochi'
            }, {
                code: 'MI13',
                name: 'Mchinji'
            }, {
                code: 'MI29',
                name: 'Mulanje'
            }, {
                code: 'MI25',
                name: 'Mwanza'
            }, {
                code: 'MI15',
                name: 'Mzimba'
            }, {
                code: 'MI31',
                name: 'Neno'
            }, {
                code: 'MI17',
                name: 'Nkhata Bay'
            }, {
                code: 'MI18',
                name: 'Nkhotakota'
            }, {
                code: 'MI19',
                name: 'Nsanje'
            }, {
                code: 'MI16',
                name: 'Ntcheu'
            }, {
                code: 'MI20',
                name: 'Ntchisi'
            }, {
                code: 'MI30',
                name: 'Phalombe'
            }, {
                code: 'MI21',
                name: 'Rumphi'
            }, {
                code: 'MI22',
                name: 'Salima'
            }, {
                code: 'MI05',
                name: 'Thyolo'
            }, {
                code: 'MI23',
                name: 'Zomba'
            }]
    }, {
        code: 'MY',
        id: 2291,
        name: 'Malaysia',
        states: [{
                code: 'MY01',
                name: 'Johor'
            }, {
                code: 'MY02',
                name: 'Kedah'
            }, {
                code: 'MY03',
                name: 'Kelantan'
            }, {
                code: 'MY04',
                name: 'Melaka'
            }, {
                code: 'MY05',
                name: 'Negeri Sembilan'
            }, {
                code: 'MY06',
                name: 'Pahang'
            }, {
                code: 'MY08',
                name: 'Perak'
            }, {
                code: 'MY09',
                name: 'Perlis'
            }, {
                code: 'MY07',
                name: 'Pulau Pinang'
            }, {
                code: 'MY12',
                name: 'Sabah'
            }, {
                code: 'MY13',
                name: 'Sarawak'
            }, {
                code: 'MY10',
                name: 'Selangor'
            }, {
                code: 'MY11',
                name: 'Terengganu'
            }, {
                code: 'MY14',
                name: 'W.P. Kuala Lumpur'
            }, {
                code: 'MY15',
                name: 'W.P. Labuan'
            }, {
                code: 'MY16',
                name: 'W.P. Putrajaya'
            }]
    }, {
        code: 'MV',
        id: 2384,
        name: 'Maldives; Republic of',
        states: []
    }, {
        code: 'ML',
        id: 2292,
        name: 'Mali',
        states: [{
                code: 'ML01',
                name: 'Bamako'
            }, {
                code: 'ML09',
                name: 'Gao'
            }, {
                code: 'ML03',
                name: 'Kayes'
            }, {
                code: 'ML10',
                name: 'Kidal'
            }, {
                code: 'ML07',
                name: 'Koulikoro'
            }, {
                code: 'ML.ME',
                name: 'Ménaka'
            }, {
                code: 'ML04',
                name: 'Mopti'
            }, {
                code: 'ML05',
                name: 'Ségou'
            }, {
                code: 'ML06',
                name: 'Sikasso'
            }, {
                code: 'ML.TD',
                name: 'Taoudénit'
            }, {
                code: 'ML08',
                name: 'Timbuktu'
            }]
    }, {
        code: 'MT',
        id: 2293,
        name: 'Malta',
        states: [{
                code: 'MT.CE',
                name: 'Central'
            }, {
                code: 'MT.GO',
                name: 'Gozo'
            }, {
                code: 'MT.NO',
                name: 'Northern'
            }, {
                code: 'MT.SE',
                name: 'South Eastern'
            }, {
                code: 'MT.SO',
                name: 'Southern'
            }]
    }, {
        code: 'RM',
        id: 2394,
        name: 'Marshall Islands',
        states: []
    }, {
        code: 'MQ',
        id: 2423,
        name: 'Martinique',
        states: []
    }, {
        code: 'MR',
        id: 2294,
        name: 'Mauritania',
        states: [{
                code: 'MR07',
                name: 'Adrar'
            }, {
                code: 'MR03',
                name: 'Assaba'
            }, {
                code: 'MR05',
                name: 'Brakna'
            }, {
                code: 'MR08',
                name: 'Dakhlet Nouadhibou'
            }, {
                code: 'MR04',
                name: 'Gorgol'
            }, {
                code: 'MR10',
                name: 'Guidimaka'
            }, {
                code: 'MR01',
                name: 'Hodh ech Chargui'
            }, {
                code: 'MR02',
                name: 'Hodh el Gharbi'
            }, {
                code: 'MR12',
                name: 'Inchiri'
            }, {
                code: 'MR.NN',
                name: 'Nouakchott Nord'
            }, {
                code: 'MR13',
                name: 'Nouakchott Ouest'
            }, {
                code: 'MR.NS',
                name: 'Nouakchott Sud'
            }, {
                code: 'MR09',
                name: 'Tagant'
            }, {
                code: 'MR11',
                name: 'Tiris Zemmour'
            }, {
                code: 'MR06',
                name: 'Trarza'
            }]
    }, {
        code: 'MU',
        id: 2295,
        name: 'Mauritius',
        states: [{
                code: 'MP21',
                name: 'Agalega Islands'
            }, {
                code: 'MP12',
                name: 'Black River'
            }, {
                code: 'MP22',
                name: 'Cargados Carajos'
            }, {
                code: 'MP13',
                name: 'Flacq'
            }, {
                code: 'MP14',
                name: 'Grand Port'
            }, {
                code: 'MP15',
                name: 'Moka'
            }, {
                code: 'MP16',
                name: 'Pamplemousses'
            }, {
                code: 'MP17',
                name: 'Plaines Wilhems'
            }, {
                code: 'MP18',
                name: 'Port Louis'
            }, {
                code: 'MP19',
                name: 'Rivière du Rempart'
            }, {
                code: 'MP23',
                name: 'Rodrigues'
            }, {
                code: 'MP20',
                name: 'Savanne'
            }]
    }, {
        code: 'M999',
        id: 2393,
        name: 'Mayotte',
        states: []
    }, {
        code: 'MX',
        id: 2296,
        name: 'Mexico',
        states: [{
                code: 'AGU',
                name: 'Aguascalientes'
            }, {
                code: 'BCS',
                name: 'Baja California Sur'
            }, {
                code: 'BCN',
                name: 'Baja California'
            }, {
                code: 'CAM',
                name: 'Campeche'
            }, {
                code: 'CHP',
                name: 'Chiapas'
            }, {
                code: 'CHH',
                name: 'Chihuahua'
            }, {
                code: 'COA',
                name: 'Coahuila'
            }, {
                code: 'COL',
                name: 'Colima'
            }, {
                code: 'DIF',
                name: 'Distrito Federal'
            }, {
                code: 'DUR',
                name: 'Durango'
            }, {
                code: 'GUA',
                name: 'Guanajuato'
            }, {
                code: 'GRO',
                name: 'Guerrero'
            }, {
                code: 'HID',
                name: 'Hidalgo'
            }, {
                code: 'JAL',
                name: 'Jalisco'
            }, {
                code: 'MEX',
                name: 'México'
            }, {
                code: 'MIC',
                name: 'Michoacán'
            }, {
                code: 'MOR',
                name: 'Morelos'
            }, {
                code: 'NAY',
                name: 'Nayarit'
            }, {
                code: 'NLE',
                name: 'Nuevo León'
            }, {
                code: 'OAX',
                name: 'Oaxaca'
            }, {
                code: 'PUE',
                name: 'Puebla'
            }, {
                code: 'QUE',
                name: 'Querétaro'
            }, {
                code: 'ROO',
                name: 'Quintana Roo'
            }, {
                code: 'SLP',
                name: 'San Luis Potosí'
            }, {
                code: 'SIN',
                name: 'Sinaloa'
            }, {
                code: 'SON',
                name: 'Sonora'
            }, {
                code: 'TAB',
                name: 'Tabasco'
            }, {
                code: 'TAM',
                name: 'Tamaulipas'
            }, {
                code: 'TLA',
                name: 'Tlaxcala'
            }, {
                code: 'VER',
                name: 'Veracruz'
            }, {
                code: 'YUC',
                name: 'Yucatán'
            }, {
                code: 'ZAC',
                name: 'Zacatecas'
            }]
    }, {
        code: 'FM',
        id: 2297,
        name: 'Micronesia; Federated States of',
        states: [{
                code: 'FM03',
                name: 'Chuuk'
            }, {
                code: 'FM01',
                name: 'Kosrae'
            }, {
                code: 'FM02',
                name: 'Pohnpei'
            }, {
                code: 'FM04',
                name: 'Yap'
            }]
    }, {
        code: 'MD',
        id: 2395,
        name: 'Moldova; Republic of',
        states: []
    }, {
        code: 'MC',
        id: 2299,
        name: 'Monaco',
        states: []
    }, {
        code: 'MN',
        id: 2300,
        name: 'Mongolia',
        states: []
    }, {
        code: 'MJ',
        id: 2396,
        name: 'Montenegro',
        states: [{
                code: 'ME-1',
                name: 'Andrijevica'
            }, {
                code: 'ME-2',
                name: 'Bar'
            }, {
                code: 'ME-3',
                name: 'Berane'
            }, {
                code: 'ME-4',
                name: 'Bijelo Polje'
            }, {
                code: 'ME-5',
                name: 'Budva'
            }, {
                code: 'ME-6',
                name: 'Cetinje'
            }, {
                code: 'ME-7',
                name: 'Danilovgrad'
            }, {
                code: 'ME-8',
                name: 'Herceg Novi'
            }, {
                code: 'ME-9',
                name: 'Kolašin'
            }, {
                code: 'ME-10',
                name: 'Kotor'
            }, {
                code: 'ME-11',
                name: 'Mojkovac'
            }, {
                code: 'ME-12',
                name: 'Nikšic'
            }, {
                code: 'ME-13',
                name: 'Plav'
            }, {
                code: 'ME-14',
                name: 'Pljevlja'
            }, {
                code: 'ME-15',
                name: 'Plužine'
            }, {
                code: 'ME-16',
                name: 'Podgorica'
            }, {
                code: 'ME-17',
                name: 'Rožaje'
            }, {
                code: 'ME-18',
                name: 'Šavnik'
            }, {
                code: 'ME-19',
                name: 'Tivat'
            }, {
                code: 'ME-20',
                name: 'Ulcinj'
            }, {
                code: 'ME-21',
                name: 'Žabljak'
            }]
    }, {
        code: 'MS',
        id: 2424,
        name: 'Montserrat',
        states: []
    }, {
        code: 'MA',
        id: 2301,
        name: 'Morocco',
        states: [{
                code: 'MA.BK',
                name: 'Béni Mellal-Khénifra'
            }, {
                code: 'MA.CS',
                name: 'Casablanca-Settat'
            }, {
                code: 'MA.OL',
                name: 'Dakhla-Oued Ed-Dahab'
            }, {
                code: 'MA.DT',
                name: 'Drâa-Tafilalet'
            }, {
                code: 'MA.FK',
                name: 'Fès-Meknès'
            }, {
                code: 'MA.GN',
                name: 'Guelmim-Oued Noun'
            }, {
                code: 'MA.OF',
                name: 'L\'oriental'
            }, {
                code: 'MA.LS',
                name: 'Laâyoune-Sakia al Hamra'
            }, {
                code: 'MA.MS',
                name: 'Marrakech-Safi'
            }, {
                code: 'MA.RK',
                name: 'Rabat-Salé-Kénitra'
            }, {
                code: 'MA.SS',
                name: 'Souss-Massa'
            }, {
                code: 'MA.TC',
                name: 'Tanger-Tétouan-Al Hoceima'
            }]
    }, {
        code: 'MZ',
        id: 2302,
        name: 'Mozambique',
        states: [{
                code: 'MZ01',
                name: 'Cabo Delgado'
            }, {
                code: 'MZ02',
                name: 'Gaza'
            }, {
                code: 'MZ03',
                name: 'Inhambane'
            }, {
                code: 'MZ10',
                name: 'Manica'
            }, {
                code: 'MZ11',
                name: 'Maputo [city]'
            }, {
                code: 'MZ04',
                name: 'Maputo'
            }, {
                code: 'MZ06',
                name: 'Nampula'
            }, {
                code: 'MZ07',
                name: 'Niassa'
            }, {
                code: 'MZ05',
                name: 'Sofala'
            }, {
                code: 'MZ08',
                name: 'Tete'
            }, {
                code: 'MZ09',
                name: 'Zambézia'
            }]
    }, {
        code: 'MM',
        id: 2303,
        name: 'Myanmar',
        states: [{
                code: 'MM.AY',
                name: 'Ayeyarwady'
            }, {
                code: 'MM.BA',
                name: 'Bago'
            }, {
                code: 'MM.CH',
                name: 'Chin'
            }, {
                code: 'MM.KC',
                name: 'Kachin'
            }, {
                code: 'MM.KH',
                name: 'Kayah'
            }, {
                code: 'MM.KN',
                name: 'Kayin'
            }, {
                code: 'MM.MG',
                name: 'Magway'
            }, {
                code: 'MM.ML',
                name: 'Mandalay'
            }, {
                code: 'MM.MO',
                name: 'Mon'
            }, {
                code: 'MM.NY',
                name: 'Naypyidaw'
            }, {
                code: 'MM.RA',
                name: 'Rakhine'
            }, {
                code: 'MM.SA',
                name: 'Sagaing'
            }, {
                code: 'MM.SH',
                name: 'Shan'
            }, {
                code: 'MM.TN',
                name: 'Tanintharyi'
            }, {
                code: 'MM.YA',
                name: 'Yangon'
            }]
    }, {
        code: 'NA',
        id: 2304,
        name: 'Namibia',
        states: [{
                code: 'WA29',
                name: 'Erongo'
            }, {
                code: 'WA30',
                name: 'Hardap'
            }, {
                code: 'WA31',
                name: 'Karas'
            }, {
                code: 'WA40',
                name: 'Kavango East'
            }, {
                code: 'WA41',
                name: 'Kavango West'
            }, {
                code: 'WA21',
                name: 'Khomas'
            }, {
                code: 'WA32',
                name: 'Kunene'
            }, {
                code: 'WA33',
                name: 'Ohangwena'
            }, {
                code: 'WA35',
                name: 'Omaheke'
            }, {
                code: 'WA36',
                name: 'Omusati'
            }, {
                code: 'WA37',
                name: 'Oshana'
            }, {
                code: 'WA38',
                name: 'Oshikoto'
            }, {
                code: 'WA39',
                name: 'Otjozondjupa'
            }, {
                code: 'WA28',
                name: 'Zambezi'
            }]
    }, {
        code: 'NR',
        id: 2397,
        name: 'Nauru',
        states: []
    }, {
        code: 'NP',
        id: 2305,
        name: 'Nepal',
        states: [{
                code: 'NP.FI',
                name: 'Five'
            }, {
                code: 'NP.FO',
                name: 'Four'
            }, {
                code: 'NP.ON',
                name: 'One'
            }, {
                code: 'NP.SE',
                name: 'Seven'
            }, {
                code: 'NP.SI',
                name: 'Six'
            }, {
                code: 'NP.TH',
                name: 'Three'
            }, {
                code: 'NP.TW',
                name: 'Two'
            }]
    }, {
        code: 'NL',
        id: 2306,
        name: 'Netherlands',
        states: [{
                code: 'DR',
                name: 'Drenthe'
            }, {
                code: 'FL',
                name: 'Flevoland'
            }, {
                code: 'FR',
                name: 'Friesland'
            }, {
                code: 'GE',
                name: 'Gelderland'
            }, {
                code: 'GR',
                name: 'Groningen'
            }, {
                code: 'LI',
                name: 'Limburg'
            }, {
                code: 'NB',
                name: 'Noord-Brabant'
            }, {
                code: 'NH',
                name: 'Noord-Holland'
            }, {
                code: 'OV',
                name: 'Overijssel'
            }, {
                code: 'UT',
                name: 'Utrecht'
            }, {
                code: 'ZE',
                name: 'Zeeland'
            }, {
                code: 'ZH',
                name: 'Zuid-Holland'
            }]
    }, {
        code: 'AN',
        id: 2425,
        name: 'Netherlands Antilles',
        states: []
    }, {
        code: 'NC',
        id: 2426,
        name: 'New Caledonia',
        states: []
    }, {
        code: 'NZ',
        id: 2307,
        name: 'New Zealand',
        states: [{
                code: 'AUK',
                name: 'Auckland'
            }, {
                code: 'BOP',
                name: 'Bay of Plenty'
            }, {
                code: 'CAN',
                name: 'Canterbury'
            }, {
                code: 'CIT',
                name: 'Chatham Islands Territory'
            }, {
                code: 'GIS',
                name: 'Gisborne'
            }, {
                code: 'HKB',
                name: 'Hawke\'s Bay'
            }, {
                code: 'MWT',
                name: 'Manawatu-Wanganui'
            }, {
                code: 'MBH',
                name: 'Marlborough'
            }, {
                code: 'NSN',
                name: 'Nelson'
            }, {
                code: 'N',
                name: 'North Island'
            }, {
                code: 'NTL',
                name: 'Northland'
            }, {
                code: 'OTA',
                name: 'Otago'
            }, {
                code: 'S',
                name: 'South Island'
            }, {
                code: 'STL',
                name: 'Southland'
            }, {
                code: 'TKI',
                name: 'Taranaki'
            }, {
                code: 'TAS',
                name: 'Tasman District'
            }, {
                code: 'WKO',
                name: 'Waikato'
            }, {
                code: 'WGN',
                name: 'Wellington'
            }, {
                code: 'WTC',
                name: 'West Coast'
            }]
    }, {
        code: 'NI',
        id: 2308,
        name: 'Nicaragua',
        states: [{
                code: 'NU01',
                name: 'Boaco'
            }, {
                code: 'NU02',
                name: 'Carazo'
            }, {
                code: 'NU03',
                name: 'Chinandega'
            }, {
                code: 'NU04',
                name: 'Chontales'
            }, {
                code: 'NU05',
                name: 'Estelí'
            }, {
                code: 'NU06',
                name: 'Granada'
            }, {
                code: 'NU07',
                name: 'Jinotega'
            }, {
                code: 'NU08',
                name: 'León'
            }, {
                code: 'NU09',
                name: 'Madriz'
            }, {
                code: 'NU10',
                name: 'Managua'
            }, {
                code: 'NU11',
                name: 'Masaya'
            }, {
                code: 'NU12',
                name: 'Matagalpa'
            }, {
                code: 'NU13',
                name: 'Nueva Segovia'
            }, {
                code: 'NU17',
                name: 'Región Autónoma del Caribe Norte'
            }, {
                code: 'NU18',
                name: 'Región Autónoma del Caribe Sur'
            }, {
                code: 'NU14',
                name: 'Río San Juan'
            }, {
                code: 'NU15',
                name: 'Rivas'
            }]
    }, {
        code: 'NE',
        id: 2309,
        name: 'Niger',
        states: [{
                code: 'NG01',
                name: 'Agadez'
            }, {
                code: 'NG02',
                name: 'Diffa'
            }, {
                code: 'NG03',
                name: 'Dosso'
            }, {
                code: 'NG04',
                name: 'Maradi'
            }, {
                code: 'NG08',
                name: 'Niamey'
            }, {
                code: 'NG06',
                name: 'Tahoua'
            }, {
                code: 'NG09',
                name: 'Tillabéri'
            }, {
                code: 'NG07',
                name: 'Zinder'
            }]
    }, {
        code: 'NG',
        id: 2310,
        name: 'Nigeria',
        states: [{
                code: 'NI45',
                name: 'Abia'
            }, {
                code: 'NI35',
                name: 'Adamawa'
            }, {
                code: 'NI21',
                name: 'Akwa Ibom'
            }, {
                code: 'NI25',
                name: 'Anambra'
            }, {
                code: 'NI46',
                name: 'Bauchi'
            }, {
                code: 'NI52',
                name: 'Bayelsa'
            }, {
                code: 'NI26',
                name: 'Benue'
            }, {
                code: 'NI27',
                name: 'Borno'
            }, {
                code: 'NI22',
                name: 'Cross River'
            }, {
                code: 'NI36',
                name: 'Delta'
            }, {
                code: 'NI53',
                name: 'Ebonyi'
            }, {
                code: 'NI37',
                name: 'Edo'
            }, {
                code: 'NI54',
                name: 'Ekiti'
            }, {
                code: 'NI47',
                name: 'Enugu'
            }, {
                code: 'NI11',
                name: 'Federal Capital Territory'
            }, {
                code: 'NI55',
                name: 'Gombe'
            }, {
                code: 'NI28',
                name: 'Imo'
            }, {
                code: 'NI39',
                name: 'Jigawa'
            }, {
                code: 'NI23',
                name: 'Kaduna'
            }, {
                code: 'NI29',
                name: 'Kano'
            }, {
                code: 'NI24',
                name: 'Katsina'
            }, {
                code: 'NI40',
                name: 'Kebbi'
            }, {
                code: 'NI41',
                name: 'Kogi'
            }, {
                code: 'NI30',
                name: 'Kwara'
            }, {
                code: 'NI05',
                name: 'Lagos'
            }, {
                code: 'NI56',
                name: 'Nassarawa'
            }, {
                code: 'NI31',
                name: 'Niger'
            }, {
                code: 'NI16',
                name: 'Ogun'
            }, {
                code: 'NI48',
                name: 'Ondo'
            }, {
                code: 'NI42',
                name: 'Osun'
            }, {
                code: 'NI32',
                name: 'Oyo'
            }, {
                code: 'NI49',
                name: 'Plateau'
            }, {
                code: 'NI50',
                name: 'Rivers'
            }, {
                code: 'NI51',
                name: 'Sokoto'
            }, {
                code: 'NI43',
                name: 'Taraba'
            }, {
                code: 'NI44',
                name: 'Yobe'
            }, {
                code: 'NI57',
                name: 'Zamfara'
            }]
    }, {
        code: 'NU',
        id: 2427,
        name: 'Niue',
        states: []
    }, {
        code: 'NF',
        id: 2428,
        name: 'Norfolk Island',
        states: []
    }, {
        code: 'MP',
        id: 2429,
        name: 'Northern Mariana Islands',
        states: []
    }, {
        code: 'NO',
        id: 2311,
        name: 'Norway',
        states: [{
                code: 'NO02',
                name: 'Akershus'
            }, {
                code: 'NO09',
                name: 'Aust-Agder'
            }, {
                code: 'NO06',
                name: 'Buskerud'
            }, {
                code: 'NO20',
                name: 'Finnmark'
            }, {
                code: 'NO04',
                name: 'Hedmark'
            }, {
                code: 'NO12',
                name: 'Hordaland'
            }, {
                code: 'NO22',
                name: 'Jan Mayen (Arctic Region)'
            }, {
                code: 'NO15',
                name: 'Møre og Romsdal'
            }, {
                code: 'NO17',
                name: 'Nord-Trøndelag'
            }, {
                code: 'NO18',
                name: 'Nordland'
            }, {
                code: 'NO05',
                name: 'Oppland'
            }, {
                code: 'NO03',
                name: 'Oslo'
            }, {
                code: 'NO01',
                name: 'Østfold'
            }, {
                code: 'NO11',
                name: 'Rogaland'
            }, {
                code: 'NO14',
                name: 'Sogn og Fjordane'
            }, {
                code: 'NO16',
                name: 'Sør-Trøndelag'
            }, {
                code: 'NO21',
                name: 'Svalbard (Arctic Region)'
            }, {
                code: 'NO08',
                name: 'Telemark'
            }, {
                code: 'NO19',
                name: 'Troms'
            }, {
                code: 'NO10',
                name: 'Vest-Agder'
            }, {
                code: 'NO07',
                name: 'Vestfold'
            }]
    }, {
        code: 'OM',
        id: 2312,
        name: 'Oman',
        states: [{
                code: 'MU01',
                name: 'Ad Dakhliyah'
            }, {
                code: 'MU09',
                name: 'Adh Dhahirah'
            }, {
                code: 'MU11',
                name: 'Al Batinah North'
            }, {
                code: 'MU02',
                name: 'Al Batinah South'
            }, {
                code: 'MU10',
                name: 'Al Buraymi'
            }, {
                code: 'MU03',
                name: 'Al Wusta'
            }, {
                code: 'MU12',
                name: 'Ash Sharqiyah North'
            }, {
                code: 'MU04',
                name: 'Ash Sharqiyah South'
            }, {
                code: 'MU08',
                name: 'Dhofar'
            }, {
                code: 'MU07',
                name: 'Musandam'
            }, {
                code: 'MU06',
                name: 'Muscat'
            }]
    }, {
        code: 'PK',
        id: 2313,
        name: 'Pakistan',
        states: [{
                code: 'PK06',
                name: 'Azad Kashmir'
            }, {
                code: 'PK02',
                name: 'Balochistan'
            }, {
                code: 'PK01',
                name: 'Federally Administered Tribal Areas'
            }, {
                code: 'PK07',
                name: 'Gilgit-Baltistan'
            }, {
                code: 'PK08',
                name: 'Islamabad'
            }, {
                code: 'PK03',
                name: 'Khyber-Pakhtunkhwa'
            }, {
                code: 'PK04',
                name: 'Punjab'
            }, {
                code: 'PK05',
                name: 'Sindh'
            }]
    }, {
        code: 'PW',
        id: 2314,
        name: 'Palau',
        states: []
    }, {
        code: 'PS',
        id: 2430,
        name: 'Palestinian Territory; Occupied',
        states: []
    }, {
        code: 'PA',
        id: 2315,
        name: 'Panama',
        states: [{
                code: 'PM01',
                name: 'Bocas del Toro'
            }, {
                code: 'PM02\t',
                name: 'Chiriquí'
            }, {
                code: 'PM03',
                name: 'Coclé'
            }, {
                code: 'PM04',
                name: 'Coclé'
            }, {
                code: 'PM05',
                name: 'Darién'
            }, {
                code: 'PM11',
                name: 'Emberá'
            }, {
                code: 'PM06',
                name: 'Herrera'
            }, {
                code: 'PM09',
                name: 'Kuna Yala'
            }, {
                code: 'PM07',
                name: 'Los Santos'
            }, {
                code: 'PM12',
                name: 'Ngäbe Buglé'
            }, {
                code: 'PM13',
                name: 'Panamá Oeste'
            }, {
                code: 'PM08',
                name: 'Panamá'
            }, {
                code: 'PM10',
                name: 'Veraguas'
            }]
    }, {
        code: 'PG',
        id: 2316,
        name: 'Papua New Guinea',
        states: [{
                code: 'PP07',
                name: 'Bougainville'
            }, {
                code: 'PP01',
                name: 'Central'
            }, {
                code: 'PP08',
                name: 'Chimbu'
            }, {
                code: 'PP10',
                name: 'East New Britain'
            }, {
                code: 'PP11',
                name: 'East Sepik'
            }, {
                code: 'PP09',
                name: 'Eastern Highlands'
            }, {
                code: 'PP19',
                name: 'Enga'
            }, {
                code: 'PP02',
                name: 'Gulf'
            }, {
                code: 'PP21',
                name: 'Hela'
            }, {
                code: 'PP22',
                name: 'Jiwaka'
            }, {
                code: 'PP12',
                name: 'Madang'
            }, {
                code: 'PP13',
                name: 'Manus'
            }, {
                code: 'PP03',
                name: 'Milne Bay'
            }, {
                code: 'PP14',
                name: 'Morobe'
            }, {
                code: 'PP20',
                name: 'National Capital District'
            }, {
                code: 'PP15',
                name: 'New Ireland'
            }, {
                code: 'PP04',
                name: 'Northern'
            }, {
                code: 'PP18',
                name: 'Sandaun'
            }, {
                code: 'PP05',
                name: 'Southern Highlands'
            }, {
                code: 'PP17',
                name: 'West New Britain'
            }, {
                code: 'PP06',
                name: 'Western'
            }, {
                code: 'PP16',
                name: 'Western Highlands'
            }]
    }, {
        code: 'PY',
        id: 2317,
        name: 'Paraguay',
        states: [{
                code: 'PA23',
                name: 'Alto Paraguay'
            }, {
                code: 'PA01',
                name: 'Alto Paraná'
            }, {
                code: 'PA02',
                name: 'Amambay'
            }, {
                code: 'PA22',
                name: 'Asunción'
            }, {
                code: 'PA24',
                name: 'Boquerón'
            }, {
                code: 'PA04',
                name: 'Caaguazú'
            }, {
                code: 'PA05',
                name: 'Caazapá'
            }, {
                code: 'PA19',
                name: 'Canindeyú'
            }, {
                code: 'PA06',
                name: 'Central'
            }, {
                code: 'PA07',
                name: 'Concepción'
            }, {
                code: 'PA08',
                name: 'Cordillera'
            }, {
                code: 'PA10',
                name: 'Guairá'
            }, {
                code: 'PA11',
                name: 'Itapúa'
            }, {
                code: 'PA12',
                name: 'Misiones'
            }, {
                code: 'PA15',
                name: 'Paraguarí'
            }, {
                code: 'PA16',
                name: 'Presidente Hayes'
            }, {
                code: 'PA17',
                name: 'San Pedro'
            }, {
                code: 'PA13',
                name: 'Ñeembucú'
            }]
    }, {
        code: 'PE',
        id: 2318,
        name: 'Peru',
        states: [{
                code: 'PE01',
                name: 'Amazonas'
            }, {
                code: 'PE02',
                name: 'Ancash'
            }, {
                code: 'PE03',
                name: 'Apurímac'
            }, {
                code: 'PE04',
                name: 'Arequipa'
            }, {
                code: 'PE05',
                name: 'Ayacucho'
            }, {
                code: 'PE06',
                name: 'Cajamarca'
            }, {
                code: 'PE07',
                name: 'Callao'
            }, {
                code: 'PE08',
                name: 'Cusco'
            }, {
                code: 'PE09',
                name: 'Huancavelica'
            }, {
                code: 'PE10',
                name: 'Huánuco'
            }, {
                code: 'PE11',
                name: 'Ica'
            }, {
                code: 'PE12',
                name: 'Junín'
            }, {
                code: 'PE13',
                name: 'La Libertad'
            }, {
                code: 'PE14',
                name: 'Lambayeque'
            }, {
                code: 'PE15',
                name: 'Lima'
            }, {
                code: 'PE26',
                name: 'Lima [Province]'
            }, {
                code: 'PE16',
                name: 'Loreto'
            }, {
                code: 'PE17',
                name: 'Madre de Dios'
            }, {
                code: 'PE18',
                name: 'Moquegua'
            }, {
                code: 'PE19',
                name: 'Pasco'
            }, {
                code: 'PE20',
                name: 'Piura'
            }, {
                code: 'PE21',
                name: 'Puno'
            }, {
                code: 'PE22',
                name: 'San Martín'
            }, {
                code: 'PE23',
                name: 'Tacna'
            }, {
                code: 'PE24',
                name: 'Tumbes'
            }, {
                code: 'PE25',
                name: 'Ucayali'
            }]
    }, {
        code: 'PH',
        id: 2319,
        name: 'Philippines',
        states: [{
                code: 'RP01',
                name: 'Abra'
            }, {
                code: 'RP02',
                name: 'Agusan del Norte'
            }, {
                code: 'RP03',
                name: 'Agusan del Sur'
            }, {
                code: 'RP04',
                name: 'Aklan'
            }, {
                code: 'RP05',
                name: 'Albay'
            }, {
                code: 'RP06',
                name: 'Antique'
            }, {
                code: 'RPH6',
                name: 'Apayao'
            }, {
                code: 'RPG8',
                name: 'Aurora'
            }, {
                code: 'RP22',
                name: 'Basilan'
            }, {
                code: 'RP07',
                name: 'Bataan'
            }, {
                code: 'RP08',
                name: 'Batanes'
            }, {
                code: 'RP09',
                name: 'Batangas'
            }, {
                code: 'RP10',
                name: 'Benguet'
            }, {
                code: 'RPH9',
                name: 'Biliran'
            }, {
                code: 'RP11',
                name: 'Bohol'
            }, {
                code: 'RP12',
                name: 'Bukidnon'
            }, {
                code: 'RP13',
                name: 'Bulacan'
            }, {
                code: 'RP14',
                name: 'Cagayan'
            }, {
                code: 'RP15',
                name: 'Camarines Norte'
            }, {
                code: 'RP16',
                name: 'Camarines Sur'
            }, {
                code: 'RP17',
                name: 'Camiguin'
            }, {
                code: 'RP18',
                name: 'Capiz'
            }, {
                code: 'RP19',
                name: 'Catanduanes'
            }, {
                code: 'RP20',
                name: 'Cavite'
            }, {
                code: 'RP21',
                name: 'Cebu'
            }, {
                code: 'RPI6',
                name: 'Compostela Valley'
            }, {
                code: 'RP57',
                name: 'Cotabato'
            }, {
                code: 'RP26',
                name: 'Davao Oriental'
            }, {
                code: 'RPI7',
                name: 'Davao del Norte'
            }, {
                code: 'RP25',
                name: 'Davao del Sur'
            }, {
                code: 'RPI9',
                name: 'Dinagat Islands'
            }, {
                code: 'RP23',
                name: 'Eastern Samar'
            }, {
                code: 'RPJ3',
                name: 'Guimaras'
            }, {
                code: 'RP27',
                name: 'Ifugao'
            }, {
                code: 'RP28',
                name: 'Ilocos Norte'
            }, {
                code: 'RP29',
                name: 'Ilocos Sur'
            }, {
                code: 'RP30',
                name: 'Iloilo'
            }, {
                code: 'RP31',
                name: 'Isabela'
            }, {
                code: 'RPJ7',
                name: 'Kalinga'
            }, {
                code: 'RP36',
                name: 'La Union'
            }, {
                code: 'RP33',
                name: 'Laguna'
            }, {
                code: 'RP34',
                name: 'Lanao del Norte'
            }, {
                code: 'RP35',
                name: 'Lanao del Sur'
            }, {
                code: 'RP37',
                name: 'Leyte'
            }, {
                code: 'RP56',
                name: 'Maguindanao'
            }, {
                code: 'RP38',
                name: 'Marinduque'
            }, {
                code: 'RP39',
                name: 'Masbate'
            }, {
                code: 'RPD9',
                name: 'Metropolitan Manila'
            }, {
                code: 'RP42',
                name: 'Misamis Occidental'
            }, {
                code: 'RP43',
                name: 'Misamis Oriental'
            }, {
                code: 'RP44',
                name: 'Mountain'
            }, {
                code: 'RPH3',
                name: 'Negros Occidental'
            }, {
                code: 'RP46',
                name: 'Negros Oriental'
            }, {
                code: 'RP67',
                name: 'Northern Samar'
            }, {
                code: 'RP47',
                name: 'Nueva Ecija'
            }, {
                code: 'RP48',
                name: 'Nueva Vizcaya'
            }, {
                code: 'RP40',
                name: 'Occidental Mindoro'
            }, {
                code: 'RP41',
                name: 'Oriental Mindoro'
            }, {
                code: 'RP49',
                name: 'Palawan'
            }, {
                code: 'RP50',
                name: 'Pampanga'
            }, {
                code: 'RP51',
                name: 'Pangasinan'
            }, {
                code: 'RPH2',
                name: 'Quezon'
            }, {
                code: 'RP68',
                name: 'Quirino'
            }, {
                code: 'RP53',
                name: 'Rizal'
            }, {
                code: 'RP54',
                name: 'Romblon'
            }, {
                code: 'RP55',
                name: 'Samar'
            }, {
                code: 'PH72',
                name: 'Sarangani'
            }, {
                code: 'RP69',
                name: 'Siquijor'
            }, {
                code: 'RP58',
                name: 'Sorsogon'
            }, {
                code: 'RP70',
                name: 'South Cotabato'
            }, {
                code: 'RP59',
                name: 'Southern Leyte'
            }, {
                code: 'RP71',
                name: 'Sultan Kudarat'
            }, {
                code: 'RP60',
                name: 'Sulu'
            }, {
                code: 'RP61',
                name: 'Surigao del Norte'
            }, {
                code: 'RP62',
                name: 'Surigao del Sur'
            }, {
                code: 'RPO3',
                name: 'Tarlac'
            }, {
                code: 'RPO4',
                name: 'Tawi-Tawi'
            }, {
                code: 'RPP1',
                name: 'Zambales'
            }, {
                code: 'RPG7',
                name: 'Zamboanga del Norte'
            }, {
                code: 'RP65',
                name: 'Zamboanga del Sur'
            }, {
                code: 'RP66',
                name: 'Zamboanga-Sibugay'
            }]
    }, {
        code: 'PN',
        id: 2431,
        name: 'Pitcairn',
        states: []
    }, {
        code: 'PL',
        id: 2320,
        name: 'Poland',
        states: [{
                code: 'PL-DS',
                name: 'Dolnoslaskie'
            }, {
                code: 'PL-KP',
                name: 'Kujawsko-pomorskie'
            }, {
                code: 'PL-LD',
                name: 'Lódzkie'
            }, {
                code: 'PL-LU',
                name: 'Lubelskie'
            }, {
                code: 'PL-LB',
                name: 'Lubuskie'
            }, {
                code: 'PL-MA',
                name: 'Malopolskie'
            }, {
                code: 'PL-MZ',
                name: 'Mazowieckie'
            }, {
                code: 'PL-OP',
                name: 'Opolskie'
            }, {
                code: 'PL-PK',
                name: 'Podkarpackie'
            }, {
                code: 'PL-PD',
                name: 'Podlaskie'
            }, {
                code: 'PL-PM',
                name: 'Pomorskie'
            }, {
                code: 'PL-SL',
                name: 'Slaskie'
            }, {
                code: 'PL-SK',
                name: 'Swietokrzyskie'
            }, {
                code: 'PL-WN',
                name: 'Warminsko-mazurskie'
            }, {
                code: 'PL-WP',
                name: 'Wielkopolskie'
            }]
    }, {
        code: 'PT',
        id: 2321,
        name: 'Portugal',
        states: [{
                code: 'PO23',
                name: 'Acores Autonomous'
            }, {
                code: 'PO02',
                name: 'Aveiro'
            }, {
                code: 'PO03',
                name: 'Beja'
            }, {
                code: 'PO04',
                name: 'Braga'
            }, {
                code: 'PO05',
                name: 'Braganca'
            }, {
                code: 'PO06',
                name: 'Castelo Branco'
            }, {
                code: 'PO07',
                name: 'Coimbra'
            }, {
                code: 'PO08',
                name: 'Evora'
            }, {
                code: 'PO09',
                name: 'Faro'
            }, {
                code: 'PO11',
                name: 'Guarda'
            }, {
                code: 'PO13',
                name: 'Leiria'
            }, {
                code: 'PO14',
                name: 'Lisboa'
            }, {
                code: 'PO10',
                name: 'Madeira Autonomous'
            }, {
                code: 'PO16',
                name: 'Portalegre'
            }, {
                code: 'PO17',
                name: 'Porto'
            }, {
                code: 'PO18',
                name: 'Santarem'
            }, {
                code: 'PO19',
                name: 'Setubal'
            }, {
                code: 'PO20',
                name: 'Viana do Castelo'
            }, {
                code: 'PO21',
                name: 'Vila Real'
            }, {
                code: 'PO22',
                name: 'Viseu'
            }]
    }, {
        code: 'PR',
        id: 2374,
        name: 'Puerto Rico',
        states: [{
                code: 'PR.AJ',
                name: 'Adjuntas'
            }, {
                code: 'PR.AD',
                name: 'Aguada'
            }, {
                code: 'PR.AL',
                name: 'Aguadilla'
            }, {
                code: 'PR.AB',
                name: 'Aguas Buenas'
            }, {
                code: 'PR.AI',
                name: 'Aibonito'
            }, {
                code: 'PR.AN',
                name: 'Añasco'
            }, {
                code: 'PR.AC',
                name: 'Arecibo'
            }, {
                code: 'PR.AR',
                name: 'Arroyo'
            }, {
                code: 'PR.BC',
                name: 'Barceloneta'
            }, {
                code: 'PR.BQ',
                name: 'Barranquitas'
            }, {
                code: 'PR.BY',
                name: 'Bayamón'
            }, {
                code: 'PR.CR',
                name: 'Cabo Rojo'
            }, {
                code: 'PR.CG',
                name: 'Caguas'
            }, {
                code: 'PR.CA',
                name: 'Camuy'
            }, {
                code: 'PR.CV',
                name: 'Canóvanas'
            }, {
                code: 'PR.CN',
                name: 'Carolina'
            }, {
                code: 'PR.CT',
                name: 'Cataño'
            }, {
                code: 'PR.CY',
                name: 'Cayey'
            }, {
                code: 'PR.CB',
                name: 'Ceiba'
            }, {
                code: 'PR.CL',
                name: 'Ciales'
            }, {
                code: 'PR.CD',
                name: 'Cidra'
            }, {
                code: 'PR.CO',
                name: 'Coamo'
            }, {
                code: 'PR.CM',
                name: 'Comerío'
            }, {
                code: 'PR.CZ',
                name: 'Corozal'
            }, {
                code: 'PR.CU',
                name: 'Culebra'
            }, {
                code: 'PR.DO',
                name: 'Dorado'
            }, {
                code: 'PR.FJ',
                name: 'Fajardo'
            }, {
                code: 'PR.FL',
                name: 'Florida'
            }, {
                code: 'PR.GC',
                name: 'Guánica'
            }, {
                code: 'PR.GM',
                name: 'Guayama'
            }, {
                code: 'PR.GL',
                name: 'Guayanilla'
            }, {
                code: 'PR.GB',
                name: 'Guaynabo'
            }, {
                code: 'PR.GR',
                name: 'Gurabo'
            }, {
                code: 'PR.HA',
                name: 'Hatillo'
            }, {
                code: 'PR.HO',
                name: 'Hormigueros'
            }, {
                code: 'PR.HU',
                name: 'Humacao'
            }, {
                code: 'PR.IS',
                name: 'Isabela'
            }, {
                code: 'PR.JY',
                name: 'Jayuya'
            }, {
                code: 'PR.JD',
                name: 'Juana Díaz'
            }, {
                code: 'PR.JC',
                name: 'Juncos'
            }, {
                code: 'PR.LJ',
                name: 'Lajas'
            }, {
                code: 'PR.LR',
                name: 'Lares'
            }, {
                code: 'PR.LM',
                name: 'Las Marías'
            }, {
                code: 'PR.LP',
                name: 'Las Piedras'
            }, {
                code: 'PR.LZ',
                name: 'Loíza'
            }, {
                code: 'PR.LQ',
                name: 'Luquillo'
            }, {
                code: 'PR.MT',
                name: 'Manatí'
            }, {
                code: 'PR.MR',
                name: 'Maricao'
            }, {
                code: 'PR.MB',
                name: 'Maunabo'
            }, {
                code: 'PR.MG',
                name: 'Mayagüez'
            }, {
                code: 'PR.MC',
                name: 'Moca'
            }, {
                code: 'PR.MV',
                name: 'Morovis'
            }, {
                code: 'PR.NG',
                name: 'Naguabo'
            }, {
                code: 'PR.NR',
                name: 'Naranjito'
            }, {
                code: 'PR.OR',
                name: 'Orocovis'
            }, {
                code: 'PR.PT',
                name: 'Patillas'
            }, {
                code: 'PR.PN\t',
                name: 'Peñuelas'
            }, {
                code: 'PR.PO',
                name: 'Ponce'
            }, {
                code: 'PR.QB',
                name: 'Quebradillas'
            }, {
                code: 'PR.RC',
                name: 'Rincón'
            }, {
                code: 'PR.RG',
                name: 'Río Grande'
            }, {
                code: 'PR.SB',
                name: 'Sabana Grande'
            }, {
                code: 'PR.SA',
                name: 'Salinas'
            }, {
                code: 'PR.SG',
                name: 'San Germán'
            }, {
                code: 'PR.SJ',
                name: 'San Juan'
            }, {
                code: 'PR.SL',
                name: 'San Lorenzo'
            }, {
                code: 'PR.SS',
                name: 'San Sebastián'
            }, {
                code: 'PR.SI',
                name: 'Santa Isabel'
            }, {
                code: 'PR.TA',
                name: 'Toa Alta'
            }, {
                code: 'PR.TB',
                name: 'Toa Baja'
            }, {
                code: 'PR.TJ',
                name: 'Trujillo Alto'
            }, {
                code: 'PR.UT',
                name: 'Utuado'
            }, {
                code: 'PR.VA',
                name: 'Vega Alta'
            }, {
                code: 'PR.VB',
                name: 'Vega Baja'
            }, {
                code: 'PR.VQ',
                name: 'Vieques'
            }, {
                code: 'PR.VL',
                name: 'Villalba'
            }, {
                code: 'PR.YB',
                name: 'Yabucoa'
            }, {
                code: 'PR.YU',
                name: 'Yauco'
            }]
    }, {
        code: 'QA',
        id: 2322,
        name: 'Qatar',
        states: [{
                code: 'QA01',
                name: 'Ad Dawhah'
            }, {
                code: 'QA13',
                name: 'Al Daayen'
            }, {
                code: 'QA04',
                name: 'Al Khawr'
            }, {
                code: 'QA10',
                name: 'Al Wakrah'
            }, {
                code: 'QA06',
                name: 'Ar Rayyan'
            }, {
                code: 'QA08',
                name: 'Madinat ach Shamal'
            }, {
                code: 'QA09',
                name: 'Umm Salal'
            }]
    }, {
        code: 'R999',
        id: 2398,
        name: 'Reunion',
        states: []
    }, {
        code: 'RO',
        id: 2323,
        name: 'Romania',
        states: [{
                code: 'RO-AB',
                name: 'Alba'
            }, {
                code: 'RO-AR',
                name: 'Arad'
            }, {
                code: 'RO-AG',
                name: 'Arges'
            }, {
                code: 'RO-BC',
                name: 'Bacau'
            }, {
                code: 'RO-BH',
                name: 'Bihor'
            }, {
                code: 'RO-BN',
                name: 'Bistrita-Nasaud'
            }, {
                code: 'RO-BT',
                name: 'Botosani'
            }, {
                code: 'RO-BR',
                name: 'Braila'
            }, {
                code: 'RO-BV',
                name: 'Brasov'
            }, {
                code: 'RO-B',
                name: 'Bucuresti'
            }, {
                code: 'RO-BZ',
                name: 'Buzau'
            }, {
                code: 'RO-CL',
                name: 'Calarasi'
            }, {
                code: 'RO-CS',
                name: 'Caras-Severin'
            }, {
                code: 'RO-CJ',
                name: 'Cluj'
            }, {
                code: 'RO-CT',
                name: 'Constanta'
            }, {
                code: 'RO-CV',
                name: 'Covasna'
            }, {
                code: 'RO-DB',
                name: 'Dâmbovita'
            }, {
                code: 'RO-DJ',
                name: 'Dolj'
            }, {
                code: 'RO-GL',
                name: 'Galati'
            }, {
                code: 'RO-GR',
                name: 'Giurgiu'
            }, {
                code: 'RO-GJ',
                name: 'Gorj'
            }, {
                code: 'RO-HR',
                name: 'Harghita'
            }, {
                code: 'RO-HD',
                name: 'Hunedoara'
            }, {
                code: 'RO-IL',
                name: 'Ialomita'
            }, {
                code: 'RO-IS',
                name: 'Iasi'
            }, {
                code: 'RO-IF',
                name: 'Ilfov'
            }, {
                code: 'RO-MM',
                name: 'Maramures'
            }, {
                code: 'RO-MH',
                name: 'Mehedinti'
            }, {
                code: 'RO-MS',
                name: 'Mures'
            }, {
                code: 'RO-NT',
                name: 'Neamt'
            }, {
                code: 'RO-OT',
                name: 'Olt'
            }, {
                code: 'RO-PH',
                name: 'Prahova'
            }, {
                code: 'RO-SJ',
                name: 'Salaj'
            }, {
                code: 'RO-SM',
                name: 'Satu Mare'
            }, {
                code: 'RO-SB',
                name: 'Sibiu'
            }, {
                code: 'RO-SV',
                name: 'Suceava'
            }, {
                code: 'RO-TR',
                name: 'Teleorman'
            }, {
                code: 'RO-TM',
                name: 'Timis'
            }, {
                code: 'RO-TL',
                name: 'Tulcea'
            }, {
                code: 'RO-VL',
                name: 'Vâlcea'
            }, {
                code: 'RO-VS',
                name: 'Vaslui'
            }, {
                code: 'RO-VN',
                name: 'Vrancea'
            }]
    }, {
        code: 'RU',
        id: 2324,
        name: 'Russian Federation',
        states: [{
                code: 'RS01',
                name: 'Adygeya Republic'
            }, {
                code: 'RS02',
                name: 'Aginskiy Buryatskiy Avtonomnyy Okrug'
            }, {
                code: 'RS03',
                name: 'Altay Republic'
            }, {
                code: 'RS04',
                name: 'Altayskiy Kray'
            }, {
                code: 'RS05',
                name: 'Amurskaya Oblast\''
            }, {
                code: 'RS06',
                name: 'Arkhangel\'skaya Oblast\''
            }, {
                code: 'RS07',
                name: 'Astrakhanskaya Oblast\''
            }, {
                code: 'RS08',
                name: 'Bashkortostan Republic'
            }, {
                code: 'RS09',
                name: 'Belgorodskaya Oblast\''
            }, {
                code: 'RS10',
                name: 'Bryanskaya Oblast\''
            }, {
                code: 'RS11',
                name: 'Buryatiya Republic'
            }, {
                code: 'RSCI',
                name: 'Chechnya Republic'
            }, {
                code: 'RS13',
                name: 'Chelyabinskaya Oblast\''
            }, {
                code: 'RS14',
                name: 'Chitinskaya Oblast\''
            }, {
                code: 'RS15',
                name: 'Chukotskiy Avtonomnyy Okrug'
            }, {
                code: 'RS16',
                name: 'Chuvashiya Republic'
            }, {
                code: 'RS17',
                name: 'Dagestan Republic'
            }, {
                code: 'RS18',
                name: 'Evenkiyskiy Avtonomnyy Okrug'
            }, {
                code: 'RS20',
                name: 'Irkutskaya Oblast\''
            }, {
                code: 'RS21',
                name: 'Ivanovskaya Oblast\''
            }, {
                code: 'RS22',
                name: 'Kabardino-Balkariya Republic'
            }, {
                code: 'RS23',
                name: 'Kaliningradskaya Oblast\''
            }, {
                code: 'RS24',
                name: 'Kalmykiya Republic'
            }, {
                code: 'RS25',
                name: 'Kaluzhskaya Oblast\''
            }, {
                code: 'RS26',
                name: 'Kamchatskaya Oblast\''
            }, {
                code: 'RS27',
                name: 'Karachayevo-Cherkesiya Republic'
            }, {
                code: 'RS28',
                name: 'Kareliya Republic'
            }, {
                code: 'RS29',
                name: 'Kemerovskaya Oblast\''
            }, {
                code: 'RS30',
                name: 'Khabarovskiy Kray'
            }, {
                code: 'RS31',
                name: 'Khakasiya Republic'
            }, {
                code: 'RS32',
                name: 'Khanty-Mansiyskiy Avtonomnyy Okrug'
            }, {
                code: 'RS33',
                name: 'Kirovskaya Oblast\''
            }, {
                code: 'RS34',
                name: 'Komi Republic'
            }, {
                code: 'RS36',
                name: 'Koryakskiy Avtonomnyy Okrug'
            }, {
                code: 'RS37',
                name: 'Kostromskaya Oblast\''
            }, {
                code: 'RS38',
                name: 'Krasnodarskiy Kray'
            }, {
                code: 'RS39',
                name: 'Krasnoyarskiy Kray'
            }, {
                code: 'RS40',
                name: 'Kurganskaya Oblast\''
            }, {
                code: 'RS41',
                name: 'Kurskaya Oblast\''
            }, {
                code: 'RS42',
                name: 'Leningradskaya Oblast\''
            }, {
                code: 'RS43',
                name: 'Lipetskaya Oblast\''
            }, {
                code: 'RS44',
                name: 'Magadanskaya Oblast\''
            }, {
                code: 'RS45',
                name: 'Mariy-El Republic'
            }, {
                code: 'RS46',
                name: 'Mordoviya Republic'
            }, {
                code: 'RS47',
                name: 'Moskovskaya Oblast\''
            }, {
                code: 'RS48',
                name: 'Moskva Federal City'
            }, {
                code: 'RS49',
                name: 'Murmanskaya Oblast\''
            }, {
                code: 'RS50',
                name: 'Nenetskiy Avtonomnyy Okrug'
            }, {
                code: 'RS51',
                name: 'Nizhegorodskaya Oblast\''
            }, {
                code: 'RS52',
                name: 'Novgorodskaya Oblast\''
            }, {
                code: 'RS53',
                name: 'Novosibirskaya Oblast\''
            }, {
                code: 'RS54',
                name: 'Omskaya Oblast\''
            }, {
                code: 'RS55',
                name: 'Orenburgskaya Oblast\''
            }, {
                code: 'RS56',
                name: 'Orlovskaya Oblast\''
            }, {
                code: 'RS57',
                name: 'Penzenskaya Oblast\''
            }, {
                code: 'RS90',
                name: 'Permskiy Kray'
            }, {
                code: 'RS59',
                name: 'Primorskiy Kray'
            }, {
                code: 'RS60',
                name: 'Pskovskaya Oblast\''
            }, {
                code: 'RS61',
                name: 'Rostovskaya Oblast\''
            }, {
                code: 'RS62',
                name: 'Ryazanskaya Oblast\''
            }, {
                code: 'RS63',
                name: 'Sakha (Yakutiya) Republic'
            }, {
                code: 'RS64',
                name: 'Sakhalinskaya Oblast\''
            }, {
                code: 'RS65',
                name: 'Samarskaya Oblast\''
            }, {
                code: 'RS66',
                name: 'Sankt-Peterburg Federal City'
            }, {
                code: 'RS67',
                name: 'Saratovskaya Oblast\''
            }, {
                code: 'RS68',
                name: 'Severnaya Osetiya-Alaniya Respublika'
            }, {
                code: 'RS69',
                name: 'Smolenskaya Oblast\''
            }, {
                code: 'RS70',
                name: 'Stavropol\'skiy Kray'
            }, {
                code: 'RS71',
                name: 'Sverdlovskaya Oblast\''
            }, {
                code: 'RS72',
                name: 'Tambovskaya Oblast\''
            }, {
                code: 'RS73',
                name: 'Tatarstan Republic'
            }, {
                code: 'RS74',
                name: 'Taymyrskiy (Dolgano-Nenetskiy) Avtonomnyy Okrug'
            }, {
                code: 'RS75',
                name: 'Tomskaya Oblast\''
            }, {
                code: 'RS76',
                name: 'Tul\'skaya Oblast\''
            }, {
                code: 'RS77',
                name: 'Tverskaya Oblast\''
            }, {
                code: 'RS78',
                name: 'Tyumenskaya Oblast\''
            }, {
                code: 'RS79',
                name: 'Tyva Republic'
            }, {
                code: 'RS80',
                name: 'Udmurtiya Republic'
            }, {
                code: 'RS81',
                name: 'Ul\'yanovskaya Oblast\''
            }, {
                code: 'RS82',
                name: 'Ust\'-Ordynskiy Buryatskiy Avtonomnyy Okrug'
            }, {
                code: 'RS83',
                name: 'Vladimirskaya Oblast\''
            }, {
                code: 'RS84',
                name: 'Volgogradskaya Oblast\''
            }, {
                code: 'RS85',
                name: 'Vologodskaya Oblast\''
            }, {
                code: 'RS86',
                name: 'Voronezhskaya Oblast\''
            }, {
                code: 'RS87',
                name: 'Yamalo-Nenetskiy Avtonomnyy Okrug'
            }, {
                code: 'RS88',
                name: 'Yaroslavskaya Oblast\''
            }, {
                code: 'RS89',
                name: 'Yevreyskaya Avtonomnaya Oblast\''
            }]
    }, {
        code: 'RW',
        id: 2325,
        name: 'Rwanda',
        states: [{
                code: 'RW11',
                name: 'Eastern'
            }, {
                code: 'RW12',
                name: 'Kigali City'
            }, {
                code: 'RW13',
                name: 'Northern'
            }, {
                code: 'RW15',
                name: 'Southern'
            }, {
                code: 'RW14',
                name: 'Western'
            }]
    }, {
        code: 'BL',
        id: 2432,
        name: 'Saint Barthélemy',
        states: []
    }, {
        code: 'SH',
        id: 2433,
        name: 'Saint Helena; Ascension and Tristan Da Cunha',
        states: []
    }, {
        code: 'KN',
        id: 2399,
        name: 'Saint Kitts and Nevis',
        states: []
    }, {
        code: 'LC',
        id: 2326,
        name: 'Saint Lucia',
        states: []
    }, {
        code: 'MF',
        id: 2434,
        name: 'Saint Martin',
        states: []
    }, {
        code: 'PM',
        id: 2435,
        name: 'Saint Pierre And Miquelon',
        states: []
    }, {
        code: 'VC',
        id: 2400,
        name: 'Saint Vincent and Grenadines',
        states: []
    }, {
        code: 'WS',
        id: 2401,
        name: 'Samoa',
        states: [{
                code: 'WS01',
                name: 'A\'ana'
            }, {
                code: 'WS02',
                name: 'Aiga-i-le-Tai'
            }, {
                code: 'WS03',
                name: 'Atua'
            }, {
                code: 'WS04',
                name: 'Fa\'asaleleaga'
            }, {
                code: 'WS05',
                name: 'Gaga\'emauga'
            }, {
                code: 'WS07',
                name: 'Gagaifomauga'
            }, {
                code: 'WS08',
                name: 'Palauli'
            }, {
                code: 'WS09',
                name: 'Satupa\'itea'
            }, {
                code: 'WS10',
                name: 'Tuamasaga'
            }, {
                code: 'WS06',
                name: 'Va\'a-o-Fonoti'
            }, {
                code: 'WS11',
                name: 'Vaisigano'
            }]
    }, {
        code: 'SM',
        id: 2327,
        name: 'San Marino',
        states: []
    }, {
        code: 'TP',
        id: 2403,
        name: 'Sao Tome and Principe',
        states: []
    }, {
        code: 'SA',
        id: 2328,
        name: 'Saudi Arabia',
        states: [{
                code: 'SA02',
                name: 'Al Bahah'
            }, {
                code: 'SA15',
                name: 'Al Hudud ash Shamaliyah'
            }, {
                code: 'SA20',
                name: 'Al Jawf'
            }, {
                code: 'SA05',
                name: 'Al Madinah'
            }, {
                code: 'SA08',
                name: 'Al Qasim'
            }, {
                code: 'SA10',
                name: 'Ar Riyad'
            }, {
                code: 'SA06',
                name: 'Ash Sharqiyah'
            }, {
                code: 'SA11',
                name: 'Asir'
            }, {
                code: 'SA13',
                name: 'Ha\'il'
            }, {
                code: 'SA17',
                name: 'Jizan'
            }, {
                code: 'SA14',
                name: 'Makkah'
            }, {
                code: 'SA16',
                name: 'Najran'
            }, {
                code: 'SA19',
                name: 'Tabuk'
            }]
    }, {
        code: 'SN',
        id: 2329,
        name: 'Senegal',
        states: [{
                code: 'SG01',
                name: 'Dakar'
            }, {
                code: 'SG03',
                name: 'Diourbel'
            }, {
                code: 'SG09',
                name: 'Fatick'
            }, {
                code: 'SG16',
                name: 'Kaffrine'
            }, {
                code: 'SG10',
                name: 'Kaolack'
            }, {
                code: 'SG17',
                name: 'Kédougou'
            }, {
                code: 'SG11',
                name: 'Kolda'
            }, {
                code: 'SG13',
                name: 'Louga'
            }, {
                code: 'SG15',
                name: 'Matam'
            }, {
                code: 'SG14',
                name: 'Saint-Louis'
            }, {
                code: 'SG18',
                name: 'Sédhiou'
            }, {
                code: 'SG05',
                name: 'Tambacounda'
            }, {
                code: 'SG07',
                name: 'Thiès'
            }, {
                code: 'SG12',
                name: 'Ziguinchor'
            }]
    }, {
        code: 'RI',
        id: 2402,
        name: 'Serbia',
        states: [{
                code: 'RS-00',
                name: 'Belgrade'
            }, {
                code: 'RS-14',
                name: 'Borski okrug'
            }, {
                code: 'RS-11',
                name: 'Branicevski okrug'
            }, {
                code: 'RS-23',
                name: 'Jablanicki okrug'
            }, {
                code: 'RS-06',
                name: 'Južnobanatski okrug'
            }, {
                code: 'RS-04',
                name: 'Južnobanatski okrug'
            }, {
                code: 'RS-09',
                name: 'Kolubarski okrug'
            }, {
                code: 'RS-25',
                name: 'Kosovski okrug'
            }, {
                code: 'RS-28',
                name: 'Kosovsko-Mitrovacki okrug'
            }, {
                code: 'RS-29',
                name: 'Kosovsko-Pomoravski okrug'
            }, {
                code: 'RS-08',
                name: 'Macvanski okrug'
            }, {
                code: 'RS-17',
                name: 'Moravicki okrug'
            }, {
                code: 'RS-20',
                name: 'Nišavski okrug'
            }, {
                code: 'RS-24',
                name: 'Pcinjski okrug'
            }, {
                code: 'RS-26',
                name: 'Pecki okrug'
            }, {
                code: 'RS-22',
                name: 'Pirotski okrug'
            }, {
                code: 'RS-10',
                name: 'Podunavski okrug'
            }, {
                code: 'RS-13',
                name: 'Pomoravski okrug'
            }, {
                code: 'RS-27',
                name: 'Prizrenski okrug'
            }, {
                code: 'RS-19',
                name: 'Rasinski okrug'
            }, {
                code: 'RS-18',
                name: 'Raška okrug'
            }, {
                code: 'RS-01',
                name: 'Severnobacki okrug'
            }, {
                code: 'RS-03',
                name: 'Severnobanatski okrug'
            }, {
                code: 'RS-02',
                name: 'Srednjebanatski okrug'
            }, {
                code: 'RS-07',
                name: 'Sremski okrug'
            }, {
                code: 'RS-12',
                name: 'Šumadijski okrug'
            }, {
                code: 'RS-21',
                name: 'Toplièki okrug'
            }, {
                code: 'RS-15',
                name: 'Zajeèarski okrug'
            }, {
                code: 'RS-05',
                name: 'Zapadnobaèki okrug'
            }, {
                code: 'RS-16',
                name: 'Zlatiborski okrug'
            }]
    }, {
        code: 'SC',
        id: 2331,
        name: 'Seychelles',
        states: []
    }, {
        code: 'SL',
        id: 2332,
        name: 'Sierra Leone',
        states: [{
                code: 'SL01',
                name: 'Eastern'
            }, {
                code: 'SL02',
                name: 'Northern'
            }, {
                code: 'SL03',
                name: 'Southern'
            }, {
                code: 'SL04',
                name: 'Western'
            }]
    }, {
        code: 'SG',
        id: 2333,
        name: 'Singapore',
        states: [{
                code: 'SG01',
                name: 'Central Singapore'
            }, {
                code: 'SG02',
                name: 'North East'
            }, {
                code: 'SG03',
                name: 'North West'
            }, {
                code: 'SG04',
                name: 'South East'
            }, {
                code: 'SG05',
                name: 'South West'
            }]
    }, {
        code: 'SK',
        id: 2334,
        name: 'Slovakia',
        states: [{
                code: 'SK-BC',
                name: 'Banskobystrický kraj'
            }, {
                code: 'SK-BL',
                name: 'Bratislavský kraj'
            }, {
                code: 'SK-KI',
                name: 'Košický kraj'
            }, {
                code: 'SK-NI',
                name: 'Nitriansky kraj'
            }, {
                code: 'SK-PV',
                name: 'Prešovský kraj'
            }, {
                code: 'SK-TC',
                name: 'Trenciansky kraj'
            }, {
                code: 'SK-TA',
                name: 'Trnavský kraj'
            }, {
                code: 'SK-ZI',
                name: 'Žilinský kraj'
            }]
    }, {
        code: 'SI',
        id: 2335,
        name: 'Slovenia',
        states: [{
                code: 'SI-001',
                name: 'Ajdovšcina'
            }, {
                code: 'SI-195',
                name: 'Apace'
            }, {
                code: 'SI-002',
                name: 'Beltinci'
            }, {
                code: 'SI-148',
                name: 'Benedikt'
            }, {
                code: 'SI-149',
                name: 'Bistrica ob Sotli'
            }, {
                code: 'SI-003',
                name: 'Bled'
            }, {
                code: 'SI-150',
                name: 'Bloke'
            }, {
                code: 'SI-004',
                name: 'Bohinj'
            }, {
                code: 'SI-005',
                name: 'Borovnica'
            }, {
                code: 'SI-006',
                name: 'Bovec'
            }, {
                code: 'SI-151',
                name: 'Braslovce'
            }, {
                code: 'SI-007',
                name: 'Brda'
            }, {
                code: 'SI-009',
                name: 'Brežice'
            }, {
                code: 'SI-008',
                name: 'Brezovica'
            }, {
                code: 'SI-152',
                name: 'Cankova'
            }, {
                code: 'SI-011',
                name: 'Celje'
            }, {
                code: 'SI-012',
                name: 'Cerklje na Gorenjskem'
            }, {
                code: 'SI-013',
                name: 'Cerknica'
            }, {
                code: 'SI-014',
                name: 'Cerkno'
            }, {
                code: 'SI-153',
                name: 'Cerkvenjak'
            }, {
                code: 'SI-197',
                name: 'Cirkulane'
            }, {
                code: 'SI-015',
                name: 'Crenšovci'
            }, {
                code: 'SI-016',
                name: 'Crna na Koroškem'
            }, {
                code: 'SI-017',
                name: 'Crnomelj'
            }, {
                code: 'SI-018',
                name: 'Destrnik'
            }, {
                code: 'SI-019',
                name: 'Divaca'
            }, {
                code: 'SI-154',
                name: 'Dobje'
            }, {
                code: 'SI-020',
                name: 'Dobrepolje'
            }, {
                code: 'SI-155',
                name: 'Dobrna'
            }, {
                code: 'SI-021',
                name: 'Dobrova-Polhov Gradec'
            }, {
                code: 'SI-156',
                name: 'Dobrovnik/Dobronak'
            }, {
                code: 'SI-022',
                name: 'Dol pri Ljubljani'
            }, {
                code: 'SI-157',
                name: 'Dolenjske Toplice'
            }, {
                code: 'SI-023',
                name: 'Domžale'
            }, {
                code: 'SI-024',
                name: 'Dornava'
            }, {
                code: 'SI-025',
                name: 'Dravograd'
            }, {
                code: 'SI-026',
                name: 'Duplek'
            }, {
                code: 'SI-027',
                name: 'Gorenja vas-Poljane'
            }, {
                code: 'SI-028',
                name: 'Gorišnica'
            }, {
                code: 'SI-207',
                name: 'Gorje'
            }, {
                code: 'SI-029',
                name: 'Gornja Radgona'
            }, {
                code: 'SI-030',
                name: 'Gornji Grad'
            }, {
                code: 'SI-031',
                name: 'Gornji Petrovci'
            }, {
                code: 'SI-158',
                name: 'Grad'
            }, {
                code: 'SI-032',
                name: 'Grosuplje'
            }, {
                code: 'SI-159',
                name: 'Hajdina'
            }, {
                code: 'SI-160',
                name: 'Hoce-Slivnica'
            }, {
                code: 'SI-161',
                name: 'Hodoš/Hodos'
            }, {
                code: 'SI-162',
                name: 'Horjul'
            }, {
                code: 'SI-034',
                name: 'Hrastnik'
            }, {
                code: 'SI-035',
                name: 'Hrpelje-Kozina'
            }, {
                code: 'SI-036',
                name: 'Idrija'
            }, {
                code: 'SI-037',
                name: 'Ig'
            }, {
                code: 'SI-038',
                name: 'Ilirska Bistrica'
            }, {
                code: 'SI-039',
                name: 'Ivancna Gorica'
            }, {
                code: 'SI-040',
                name: 'Izola/Isola'
            }, {
                code: 'SI-041',
                name: 'Jesenice'
            }, {
                code: 'SI-163',
                name: 'Jezersko'
            }, {
                code: 'SI-042',
                name: 'Juršinci'
            }, {
                code: 'SI-043',
                name: 'Kamnik'
            }, {
                code: 'SI-044',
                name: 'Kanal'
            }, {
                code: 'SI-045',
                name: 'Kidricevo'
            }, {
                code: 'SI-046',
                name: 'Kobarid'
            }, {
                code: 'SI-047',
                name: 'Kobilje'
            }, {
                code: 'SI-048',
                name: 'Kocevje'
            }, {
                code: 'SI-049',
                name: 'Komen'
            }, {
                code: 'SI-164',
                name: 'Komenda'
            }, {
                code: 'SI-050',
                name: 'Koper/Capodistria'
            }, {
                code: 'SI-196',
                name: 'Kosanjevica na Krki'
            }, {
                code: 'SI-165',
                name: 'Kostel'
            }, {
                code: 'SI-051',
                name: 'Kozje'
            }, {
                code: 'SI-052',
                name: 'Kranj'
            }, {
                code: 'SI-053',
                name: 'Kranjska Gora'
            }, {
                code: 'SI-166',
                name: 'Križevci'
            }, {
                code: 'SI-054',
                name: 'Krško'
            }, {
                code: 'SI-055',
                name: 'Kungota'
            }, {
                code: 'SI-056',
                name: 'Kuzma'
            }, {
                code: 'SI-057',
                name: 'Laško'
            }, {
                code: 'SI-058',
                name: 'Lenart'
            }, {
                code: 'SI-059',
                name: 'Lendava/Lendva'
            }, {
                code: 'SI-060',
                name: 'Litija'
            }, {
                code: 'SI-061',
                name: 'Ljubljana'
            }, {
                code: 'SI-062',
                name: 'Ljubno'
            }, {
                code: 'SI-063',
                name: 'Ljutomer'
            }, {
                code: 'SI-208',
                name: 'Log-Dragomer'
            }, {
                code: 'SI-064',
                name: 'Logatec'
            }, {
                code: 'SI-065',
                name: 'Loška dolina'
            }, {
                code: 'SI-066',
                name: 'Loški Potok'
            }, {
                code: 'SI-167',
                name: 'Lovrenc na Pohorju'
            }, {
                code: 'SI-067',
                name: 'Luce'
            }, {
                code: 'SI-068',
                name: 'Lukovica'
            }, {
                code: 'SI-069',
                name: 'Majšperk'
            }, {
                code: 'SI-198',
                name: 'Makole'
            }, {
                code: 'SI-070',
                name: 'Maribor'
            }, {
                code: 'SI-168',
                name: 'Markovci'
            }, {
                code: 'SI-071',
                name: 'Medvode'
            }, {
                code: 'SI-072',
                name: 'Mengeš'
            }, {
                code: 'SI-073',
                name: 'Metlika'
            }, {
                code: 'SI-074',
                name: 'Mežica'
            }, {
                code: 'SI-169',
                name: 'Miklavž na Dravskem polju'
            }, {
                code: 'SI-075',
                name: 'Miren-Kostanjevica'
            }, {
                code: 'SI-170',
                name: 'Mirna Pec'
            }, {
                code: 'SI-076',
                name: 'Mislinja'
            }, {
                code: 'SI-199',
                name: 'Mokronog-Trebelno'
            }, {
                code: 'SI-077',
                name: 'Moravce'
            }, {
                code: 'SI-078',
                name: 'Moravske Toplice'
            }, {
                code: 'SI-079',
                name: 'Mozirje'
            }, {
                code: 'SI-080',
                name: 'Murska Sobota'
            }, {
                code: 'SI-081',
                name: 'Muta'
            }, {
                code: 'SI-082',
                name: 'Naklo'
            }, {
                code: 'SI-083',
                name: 'Nazarje'
            }, {
                code: 'SI-084',
                name: 'Nova Gorica'
            }, {
                code: 'SI-085',
                name: 'Novo mesto'
            }, {
                code: 'SI-086',
                name: 'Odranci'
            }, {
                code: 'SI-171',
                name: 'Oplotnica'
            }, {
                code: 'SI-087',
                name: 'Ormož'
            }, {
                code: 'SI-088',
                name: 'Osilnica'
            }, {
                code: 'SI-089',
                name: 'Pesnica'
            }, {
                code: 'SI-090',
                name: 'Piran/Pirano'
            }, {
                code: 'SI-091',
                name: 'Pivka'
            }, {
                code: 'SI-092',
                name: 'Podcetrtek'
            }, {
                code: 'SI-172',
                name: 'Podlehnik'
            }, {
                code: 'SI-093',
                name: 'Podvelka'
            }, {
                code: 'SI-200',
                name: 'Poljcane'
            }, {
                code: 'SI-173',
                name: 'Polzela'
            }, {
                code: 'SI-094',
                name: 'Postojna'
            }, {
                code: 'SI-174',
                name: 'Prebold'
            }, {
                code: 'SI-095',
                name: 'Preddvor'
            }, {
                code: 'SI-175',
                name: 'Prevalje'
            }, {
                code: 'SI-096',
                name: 'Ptuj'
            }, {
                code: 'SI-097',
                name: 'Puconci'
            }, {
                code: 'SI-098',
                name: 'Race-Fram'
            }, {
                code: 'SI-099',
                name: 'Radece'
            }, {
                code: 'SI-100',
                name: 'Radenci'
            }, {
                code: 'SI-101',
                name: 'Radlje ob Dravi'
            }, {
                code: 'SI-102',
                name: 'Radovljica'
            }, {
                code: 'SI-103',
                name: 'Ravne na Koroškem'
            }, {
                code: 'SI-176',
                name: 'Razkrižje'
            }, {
                code: 'SI-209',
                name: 'Recica ob Savinji'
            }, {
                code: 'SI-201',
                name: 'Rence-Vogrsko'
            }, {
                code: 'SI-177',
                name: 'Ribnica na Pohorju'
            }, {
                code: 'SI-104',
                name: 'Ribnica'
            }, {
                code: 'SI-106',
                name: 'Rogaška Slatina'
            }, {
                code: 'SI-105',
                name: 'Rogašovci'
            }, {
                code: 'SI-107',
                name: 'Rogatec'
            }, {
                code: 'SI-108',
                name: 'Ruše'
            }, {
                code: 'SI-033',
                name: 'Šalovci'
            }, {
                code: 'SI-178',
                name: 'Selnica ob Dravi'
            }, {
                code: 'SI-109',
                name: 'Semic'
            }, {
                code: 'SI-183',
                name: 'Šempeter-Vrtojba'
            }, {
                code: 'SI-117',
                name: 'Šencur'
            }, {
                code: 'SI-118',
                name: 'Šentilj'
            }, {
                code: 'SI-119',
                name: 'Šentjernej'
            }, {
                code: 'SI-120',
                name: 'Šentjur pri Celju'
            }, {
                code: 'SI-211',
                name: 'Šentrupert'
            }, {
                code: 'SI-110',
                name: 'Sevnica'
            }, {
                code: 'SI-111',
                name: 'Sežana'
            }, {
                code: 'SI-121',
                name: 'Škocjan'
            }, {
                code: 'SI-122',
                name: 'Škofja Loka'
            }, {
                code: 'SI-123',
                name: 'Škofljica'
            }, {
                code: 'SI-112',
                name: 'Slovenj Gradec'
            }, {
                code: 'SI-113',
                name: 'Slovenska Bistrica'
            }, {
                code: 'SI-114',
                name: 'Slovenske Konjice'
            }, {
                code: 'SI-124',
                name: 'Šmarje pri Jelšah'
            }, {
                code: 'SI-206',
                name: 'Šmarješke Toplice'
            }, {
                code: 'SI-125',
                name: 'Šmartno ob Paki'
            }, {
                code: 'SI-194',
                name: 'Šmartno pri Litiji'
            }, {
                code: 'SI-194',
                name: 'Šmartno pri Litiji'
            }, {
                code: 'SI-179',
                name: 'Sodražica'
            }, {
                code: 'SI-180',
                name: 'Solcava'
            }, {
                code: 'SI-126',
                name: 'Šoštanj'
            }, {
                code: 'SI-202',
                name: 'Središce ob Dravi'
            }, {
                code: 'SI-115',
                name: 'Starše'
            }, {
                code: 'SI-127',
                name: 'Štore'
            }, {
                code: 'SI-203',
                name: 'Straža'
            }, {
                code: 'SI-181',
                name: 'Sveta Ana'
            }, {
                code: 'SI-204',
                name: 'Sveta Trojica v Slovenskih Goricah'
            }, {
                code: 'SI-182',
                name: 'Sveti Andraž v Slovenskih goricah'
            }, {
                code: 'SI-116',
                name: 'Sveti Jurij'
            }, {
                code: 'SI-210',
                name: 'Sveti Jurij v Slovenskih Goricah'
            }, {
                code: 'SI-205',
                name: 'Sveti Tomaž'
            }, {
                code: 'SI-184',
                name: 'Tabor'
            }, {
                code: 'SI-010',
                name: 'Tišina'
            }, {
                code: 'SI-128',
                name: 'Tolmin'
            }, {
                code: 'SI-129',
                name: 'Trbovlje'
            }, {
                code: 'SI-130',
                name: 'Trebnje'
            }, {
                code: 'SI-185',
                name: 'Trnovska vas'
            }, {
                code: 'SI-131',
                name: 'Tržic'
            }, {
                code: 'SI-186',
                name: 'Trzin'
            }, {
                code: 'SI-132',
                name: 'Turnišce'
            }, {
                code: 'SI-133',
                name: 'Velenje'
            }, {
                code: 'SI-187',
                name: 'Velika Polana'
            }, {
                code: 'SI-134',
                name: 'Velike Lašce'
            }, {
                code: 'SI-188',
                name: 'Veržej'
            }, {
                code: 'SI-135',
                name: 'Videm'
            }, {
                code: 'SI-136',
                name: 'Vipava'
            }, {
                code: 'SI-137',
                name: 'Vitanje'
            }, {
                code: 'SI-138',
                name: 'Vodice'
            }, {
                code: 'SI-139',
                name: 'Vojnik'
            }, {
                code: 'SI-189',
                name: 'Vransko'
            }, {
                code: 'SI-140',
                name: 'Vrhnika'
            }, {
                code: 'SI-141',
                name: 'Vuzenica'
            }, {
                code: 'SI-142',
                name: 'Zagorje ob Savi'
            }, {
                code: 'SI-190',
                name: 'Žalec'
            }, {
                code: 'SI-143',
                name: 'Zavrc'
            }, {
                code: 'SI-146',
                name: 'Železniki'
            }, {
                code: 'SI-191',
                name: 'Žetale'
            }, {
                code: 'SI-147',
                name: 'Žiri'
            }, {
                code: 'SI-192',
                name: 'Žirovnica'
            }, {
                code: 'SI-144',
                name: 'Zrece'
            }, {
                code: 'SI-193',
                name: 'Žužemberk'
            }]
    }, {
        code: 'SB',
        id: 2336,
        name: 'Solomon Islands',
        states: []
    }, {
        code: 'SO',
        id: 2337,
        name: 'Somalia',
        states: [{
                code: 'SO21',
                name: 'Awdal'
            }, {
                code: 'SO01',
                name: 'Bakool'
            }, {
                code: 'SO02',
                name: 'Banaadir'
            }, {
                code: 'SO03',
                name: 'Bari'
            }, {
                code: 'SO04',
                name: 'Bay'
            }, {
                code: 'SO05',
                name: 'Galguduud'
            }, {
                code: 'SO06',
                name: 'Gedo'
            }, {
                code: 'SO07',
                name: 'Hiiraan'
            }, {
                code: 'SO08',
                name: 'Jubbada Dhexe'
            }, {
                code: 'SO09',
                name: 'Jubbada Hoose'
            }, {
                code: 'SO10',
                name: 'Mudug'
            }, {
                code: 'SO18',
                name: 'Nugaal'
            }, {
                code: 'SO12',
                name: 'Sanaag'
            }, {
                code: 'SO13',
                name: 'Shabeellaha Dhexe'
            }, {
                code: 'SO14',
                name: 'Shabeellaha Hoose'
            }, {
                code: 'SO22',
                name: 'Sool'
            }, {
                code: 'SO19',
                name: 'Togdheer'
            }, {
                code: 'SO20',
                name: 'Woqooyi Galbeed'
            }]
    }, {
        code: 'ZA',
        id: 2338,
        name: 'South Africa',
        states: [{
                code: 'SF01',
                name: 'Cape Province'
            }, {
                code: 'SF05',
                name: 'Eastern Cape'
            }, {
                code: 'SF03',
                name: 'Free State'
            }, {
                code: 'SF06',
                name: 'Gauteng'
            }, {
                code: 'SF02',
                name: 'KwaZulu-Natal'
            }, {
                code: 'SF09',
                name: 'Limpopo'
            }, {
                code: 'SF07',
                name: 'Mpumalanga'
            }, {
                code: 'SF10',
                name: 'North-West'
            }, {
                code: 'SF08',
                name: 'Northern Cape'
            }, {
                code: 'SF04',
                name: 'Transvaal'
            }, {
                code: 'SF11',
                name: 'Western Cape'
            }]
    }, {
        code: 'GS',
        id: 2436,
        name: 'South Georgia and the South Sandwich Islands',
        states: []
    }, {
        code: 'SS',
        id: 2447,
        name: 'South Sudan',
        states: [{
                code: 'OD01',
                name: 'Central Equatoria'
            }, {
                code: 'OD02',
                name: 'East Equatoria'
            }, {
                code: 'OD03',
                name: 'Jungoli'
            }, {
                code: 'OD04',
                name: 'Lakes'
            }, {
                code: 'OD05',
                name: 'North Bahr-al-Ghazal'
            }, {
                code: 'OD06',
                name: 'Unity'
            }, {
                code: 'OD07',
                name: 'Upper Nile'
            }, {
                code: 'OD08',
                name: 'Warap'
            }, {
                code: 'OD09',
                name: 'West Bahr-al-Ghazal'
            }, {
                code: 'OD10',
                name: 'West Equatoria'
            }]
    }, {
        code: 'ES',
        id: 2339,
        name: 'Spain',
        states: [{
                code: 'SP23',
                name: 'A Coruña'
            }, {
                code: 'SP01',
                name: 'Alava'
            }, {
                code: 'SP02',
                name: 'Albacete'
            }, {
                code: 'SP03',
                name: 'Alicante'
            }, {
                code: 'SP04',
                name: 'Almeria'
            }, {
                code: 'SP51',
                name: 'Andalucia'
            }, {
                code: 'SP52',
                name: 'Aragon'
            }, {
                code: 'SP34',
                name: 'Asturias'
            }, {
                code: 'SP05',
                name: 'Avila'
            }, {
                code: 'SP06',
                name: 'Badajoz'
            }, {
                code: 'SP08',
                name: 'Barcelona'
            }, {
                code: 'SP09',
                name: 'Burgos'
            }, {
                code: 'SP10',
                name: 'Caceres'
            }, {
                code: 'SP11',
                name: 'Cadiz'
            }, {
                code: 'SP53',
                name: 'Canarias'
            }, {
                code: 'SP39',
                name: 'Cantabria'
            }, {
                code: 'SP12',
                name: 'Castellon'
            }, {
                code: 'SP55',
                name: 'Castilla y Leon'
            }, {
                code: 'SP54',
                name: 'Castilla-La Mancha'
            }, {
                code: 'SP56',
                name: 'Cataluna'
            }, {
                code: 'SP13',
                name: 'Ciudad Real'
            }, {
                code: 'SP14',
                name: 'Cordoba'
            }, {
                code: 'SP15',
                name: 'Cuenca'
            }, {
                code: 'SP57',
                name: 'Extremadura'
            }, {
                code: 'SP58',
                name: 'Galicia'
            }, {
                code: 'SP16',
                name: 'Gerona'
            }, {
                code: 'SP17',
                name: 'Granada'
            }, {
                code: 'SP18',
                name: 'Guadalajara'
            }, {
                code: 'SP19',
                name: 'Guipuzcoa'
            }, {
                code: 'SP20',
                name: 'Huelva'
            }, {
                code: 'SP21',
                name: 'Huesca'
            }, {
                code: 'SP07',
                name: 'Islas Baleares'
            }, {
                code: 'SP22',
                name: 'Jaen'
            }, {
                code: 'SP23',
                name: 'La Coruna'
            }, {
                code: 'SP27',
                name: 'La Rioja'
            }, {
                code: 'SP24',
                name: 'Las Palmas'
            }, {
                code: 'SP25',
                name: 'Leon'
            }, {
                code: 'SP26',
                name: 'Lerida'
            }, {
                code: 'SP28',
                name: 'Lugo'
            }, {
                code: 'SP29',
                name: 'Madrid'
            }, {
                code: 'SP30',
                name: 'Malaga'
            }, {
                code: 'SP31',
                name: 'Murcia'
            }, {
                code: 'SP32',
                name: 'Navarra'
            }, {
                code: 'SP33',
                name: 'Orense'
            }, {
                code: 'SP59',
                name: 'Pais Vasco'
            }, {
                code: 'SP35',
                name: 'Palencia'
            }, {
                code: 'SP36',
                name: 'Pontevedra'
            }, {
                code: 'SP37',
                name: 'Salamanca'
            }, {
                code: 'SP38',
                name: 'Santa Cruz de Tenerife'
            }, {
                code: 'SP40',
                name: 'Segovia'
            }, {
                code: 'SP41',
                name: 'Sevilla'
            }, {
                code: 'SP42',
                name: 'Soria'
            }, {
                code: 'SP43',
                name: 'Tarragona'
            }, {
                code: 'SP44',
                name: 'Teruel'
            }, {
                code: 'SP45',
                name: 'Toledo'
            }, {
                code: 'SP46',
                name: 'Valencia'
            }, {
                code: 'SP60',
                name: 'Valenciana'
            }, {
                code: 'SP47',
                name: 'Valladolid'
            }, {
                code: 'SP48',
                name: 'Vizcaya'
            }, {
                code: 'SP49',
                name: 'Zamora'
            }, {
                code: 'SP50',
                name: 'Zaragoza'
            }]
    }, {
        code: 'LK',
        id: 2340,
        name: 'Sri Lanka',
        states: []
    }, {
        code: 'SD',
        id: 2341,
        name: 'Sudan',
        states: [{
                code: 'SU42',
                name: 'Blue Nile'
            }, {
                code: 'SU61',
                name: 'Central Darfur'
            }, {
                code: 'SU60',
                name: 'East Darfur'
            }, {
                code: 'SU39',
                name: 'Gedarif'
            }, {
                code: 'SU38',
                name: 'Gezira'
            }, {
                code: 'SU52',
                name: 'Kassala'
            }, {
                code: 'SU29',
                name: 'Khartoum'
            }, {
                code: 'SU55',
                name: 'North Darfur'
            }, {
                code: 'SU56',
                name: 'North Kordofan'
            }, {
                code: 'SU43',
                name: 'Northern'
            }, {
                code: 'SU36',
                name: 'Red Sea'
            }, {
                code: 'SU53',
                name: 'River Nile'
            }, {
                code: 'SU58',
                name: 'Sennar'
            }, {
                code: 'SU49',
                name: 'South Darfur'
            }, {
                code: 'SU50',
                name: 'South Kordofan'
            }, {
                code: 'SU47',
                name: 'West Darfur'
            }, {
                code: 'SU62',
                name: 'West Kordofan'
            }, {
                code: 'SU41',
                name: 'White Nile'
            }]
    }, {
        code: 'SR',
        id: 2342,
        name: 'Suriname',
        states: [{
                code: 'NS10',
                name: 'Brokopondo'
            }, {
                code: 'NS11',
                name: 'Commewijne'
            }, {
                code: 'NS12',
                name: 'Coronie'
            }, {
                code: 'NS13',
                name: 'Marowijne'
            }, {
                code: 'NS14',
                name: 'Nickerie'
            }, {
                code: 'NS16',
                name: 'Paramaribo'
            }, {
                code: 'NS15',
                name: 'Para'
            }, {
                code: 'NS17',
                name: 'Saramacca'
            }, {
                code: 'NS18',
                name: 'Sipaliwini'
            }, {
                code: 'NS19',
                name: 'Wanica'
            }]
    }, {
        code: 'SJ',
        id: 2437,
        name: 'Svalbard And Jan Mayen',
        states: []
    }, {
        code: 'SZ',
        id: 2343,
        name: 'Swaziland',
        states: [{
                code: 'WZ01',
                name: 'Hhohho'
            }, {
                code: 'WZ02',
                name: 'Lubombo'
            }, {
                code: 'WZ03',
                name: 'Manzini'
            }, {
                code: 'WZ04',
                name: 'Shiselweni'
            }]
    }, {
        code: 'SE',
        id: 2344,
        name: 'Sweden',
        states: [{
                code: 'SE-K',
                name: 'Blekinge län'
            }, {
                code: 'SE-W',
                name: 'Dalarnas län'
            }, {
                code: 'SE-X',
                name: 'Gävleborgs län'
            }, {
                code: 'SE-I',
                name: 'Gotlands län'
            }, {
                code: 'SE-N',
                name: 'Hallands län'
            }, {
                code: 'SE-Z',
                name: 'Jämtlands län'
            }, {
                code: 'SE-F',
                name: 'Jönköpings län'
            }, {
                code: 'SE-H',
                name: 'Kalmar län'
            }, {
                code: 'SE-G',
                name: 'Kronobergs län'
            }, {
                code: 'SE-BD',
                name: 'Norrbottens län'
            }, {
                code: 'SE-M',
                name: 'Skåne län'
            }, {
                code: 'SE-D',
                name: 'Södermanlands län'
            }, {
                code: 'SE-AB',
                name: 'Stockholms län'
            }, {
                code: 'SE-C',
                name: 'Uppsala län'
            }, {
                code: 'SE-S',
                name: 'Värmlands län'
            }, {
                code: 'SE-AC',
                name: 'Västerbottens län'
            }, {
                code: 'SE-Y',
                name: 'Västernorrlands län'
            }, {
                code: 'SE-U',
                name: 'Västmanlands län'
            }, {
                code: 'SE-O',
                name: 'Västra Götalands län'
            }, {
                code: 'SE-T',
                name: 'Örebro län'
            }, {
                code: 'SE-E',
                name: 'Östergötlands län'
            }]
    }, {
        code: 'CH',
        id: 2345,
        name: 'Switzerland',
        states: [{
                code: 'AG',
                name: 'Aargau'
            }, {
                code: 'AR',
                name: 'Appenzell Ausserrhoden'
            }, {
                code: 'AI',
                name: 'Appenzell Innerrhoden'
            }, {
                code: 'BL',
                name: 'Basel-Landschaft'
            }, {
                code: 'BS',
                name: 'Basel-Stadt'
            }, {
                code: 'BE',
                name: 'Bern'
            }, {
                code: 'FR',
                name: 'Fribourg'
            }, {
                code: 'GE',
                name: 'Genève'
            }, {
                code: 'GL',
                name: 'Glarus'
            }, {
                code: 'GR',
                name: 'Graubünden'
            }, {
                code: 'JU',
                name: 'Jura'
            }, {
                code: 'LU',
                name: 'Luzern'
            }, {
                code: 'NE',
                name: 'Neuchâtel'
            }, {
                code: 'NW',
                name: 'Nidwalden'
            }, {
                code: 'OW',
                name: 'Obwalden'
            }, {
                code: 'SG',
                name: 'Sankt Gallen'
            }, {
                code: 'SH',
                name: 'Schaffhausen'
            }, {
                code: 'SZ',
                name: 'Schwyz'
            }, {
                code: 'SO',
                name: 'Solothurn'
            }, {
                code: 'TG',
                name: 'Thurgau'
            }, {
                code: 'TI',
                name: 'Ticino'
            }, {
                code: 'UR',
                name: 'Uri'
            }, {
                code: 'VS',
                name: 'Valais'
            }, {
                code: 'VD',
                name: 'Vaud'
            }, {
                code: 'ZG',
                name: 'Zug'
            }, {
                code: 'ZH',
                name: 'Zürich'
            }]
    }, {
        code: 'SY',
        id: 2381,
        name: 'Syrian Arab Republic',
        states: [{
                code: 'SY01',
                name: 'Al Hasakah'
            }, {
                code: 'SY09',
                name: 'Aleppo'
            }, {
                code: 'SY04',
                name: 'Ar Raqqah'
            }, {
                code: 'SY05',
                name: 'As Suwayda\''
            }, {
                code: 'SY13',
                name: 'Damascus'
            }, {
                code: 'SY06',
                name: 'Dar`a'
            }, {
                code: 'SY07',
                name: 'Dayr az Zawr'
            }, {
                code: 'SY10',
                name: 'Hama'
            }, {
                code: 'SY11',
                name: 'Hims'
            }, {
                code: 'SY12',
                name: 'Idlib'
            }, {
                code: 'SY02',
                name: 'Latakia'
            }, {
                code: 'SY03',
                name: 'Quneitra'
            }, {
                code: 'SY08',
                name: 'Rif Dimashq'
            }, {
                code: 'SY14',
                name: 'Tartus'
            }]
    }, {
        code: 'TW',
        id: 2375,
        name: 'Taiwan',
        states: [{
                code: 'TW02',
                name: 'Kaohsiung'
            }, {
                code: 'TW03',
                name: 'Taipei'
            }]
    }, {
        code: 'TJ',
        id: 2348,
        name: 'Tajikistan',
        states: [{
                code: 'TI01',
                name: 'Badakhshoni Kuni'
            }, {
                code: 'TI04',
                name: 'Dushanbe'
            }, {
                code: 'TI02',
                name: 'Khatlon'
            }, {
                code: 'TI05',
                name: 'Regions of Republican Subordination'
            }, {
                code: 'TI03',
                name: 'Sogd'
            }]
    }, {
        code: 'TZ',
        id: 2349,
        name: 'Tanzania',
        states: [{
                code: 'TZ26',
                name: 'Arusha'
            }, {
                code: 'TZ23',
                name: 'Dar es Salaam'
            }, {
                code: 'TZ03',
                name: 'Dodoma'
            }, {
                code: 'TZ28',
                name: 'Geita'
            }, {
                code: 'TZ04',
                name: 'Iringa'
            }, {
                code: 'TZ19',
                name: 'Kagera'
            }, {
                code: 'TZ29',
                name: 'Katavi'
            }, {
                code: 'TZ05',
                name: 'Kigoma'
            }, {
                code: 'TZ06',
                name: 'Kilimanjaro'
            }, {
                code: 'TZ07',
                name: 'Lindi'
            }, {
                code: 'TZ27',
                name: 'Manyara'
            }, {
                code: 'TZ08',
                name: 'Mara'
            }, {
                code: 'TZ09',
                name: 'Mbeya'
            }, {
                code: 'TZ10',
                name: 'Morogoro'
            }, {
                code: 'TZ11',
                name: 'Mtwara'
            }, {
                code: 'TZ12',
                name: 'Mwanza'
            }, {
                code: 'TZ30',
                name: 'Njombe'
            }, {
                code: 'TZ13',
                name: 'Pemba North'
            }, {
                code: 'TZ20',
                name: 'Pemba South'
            }, {
                code: 'TZ02',
                name: 'Pwani'
            }, {
                code: 'TZ24',
                name: 'Rukwa'
            }, {
                code: 'TZ14',
                name: 'Ruvuma'
            }, {
                code: 'TZ15',
                name: 'Shinyanga'
            }, {
                code: 'TZ31',
                name: 'Simiyu'
            }, {
                code: 'TZ16',
                name: 'Singida'
            }, {
                code: 'TZ17',
                name: 'Tabora'
            }, {
                code: 'TZ18',
                name: 'Tanga'
            }, {
                code: 'TZ22',
                name: 'Zanzibar North'
            }, {
                code: 'TZ21',
                name: 'Zanzibar South and Central'
            }, {
                code: 'TZ25',
                name: 'Zanzibar West'
            }]
    }, {
        code: 'TH',
        id: 2350,
        name: 'Thailand',
        states: [{
                code: 'TH77',
                name: 'Amnat Charoen'
            }, {
                code: 'TH35',
                name: 'Ang Thong'
            }, {
                code: 'TH40',
                name: 'Bangkok Metropolis'
            }, {
                code: 'TH81',
                name: 'Bueng Kan'
            }, {
                code: 'TH28',
                name: 'Buri Ram'
            }, {
                code: 'TH44',
                name: 'Chachoengsao'
            }, {
                code: 'TH32',
                name: 'Chai Nat'
            }, {
                code: 'TH26',
                name: 'Chaiyaphum'
            }, {
                code: 'TH48',
                name: 'Chanthaburi'
            }, {
                code: 'TH02',
                name: 'Chiang Mai'
            }, {
                code: 'TH03',
                name: 'Chiang Rai'
            }, {
                code: 'TH46',
                name: 'Chon Buri'
            }, {
                code: 'TH58',
                name: 'Chumphon'
            }, {
                code: 'TH23',
                name: 'Kalasin'
            }, {
                code: 'TH11',
                name: 'Kamphaeng Phet'
            }, {
                code: 'TH50',
                name: 'Kanchanaburi'
            }, {
                code: 'TH22',
                name: 'Khon Kaen'
            }, {
                code: 'TH63',
                name: 'Krabi'
            }, {
                code: 'TH06',
                name: 'Lampang'
            }, {
                code: 'TH05',
                name: 'Lamphun'
            }, {
                code: 'TH18',
                name: 'Loei'
            }, {
                code: 'TH34',
                name: 'Lop Buri'
            }, {
                code: 'TH01',
                name: 'Mae Hong Son'
            }, {
                code: 'TH24',
                name: 'Maha Sarakham'
            }, {
                code: 'TH78',
                name: 'Mukdahan'
            }, {
                code: 'TH43',
                name: 'Nakhon Nayok'
            }, {
                code: 'TH53',
                name: 'Nakhon Pathom'
            }, {
                code: 'TH73',
                name: 'Nakhon Phanom'
            }, {
                code: 'TH27',
                name: 'Nakhon Ratchasima'
            }, {
                code: 'TH16',
                name: 'Nakhon Sawan'
            }, {
                code: 'TH64',
                name: 'Nakhon Si Thammarat'
            }, {
                code: 'TH04',
                name: 'Nan'
            }, {
                code: 'TH31',
                name: 'Narathiwat'
            }, {
                code: 'TH79',
                name: 'Nong Bua Lam Phu'
            }, {
                code: 'TH17',
                name: 'Nong Khai'
            }, {
                code: 'TH38',
                name: 'Nonthaburi'
            }, {
                code: 'TH39',
                name: 'Pathum Thani'
            }, {
                code: 'TH69',
                name: 'Pattani'
            }, {
                code: 'TH61',
                name: 'Phangnga'
            }, {
                code: 'TH66',
                name: 'Phatthalung'
            }, {
                code: 'TH41',
                name: 'Phayao'
            }, {
                code: 'TH14',
                name: 'Phetchabun'
            }, {
                code: 'TH56',
                name: 'Phetchaburi'
            }, {
                code: 'TH13',
                name: 'Phichit'
            }, {
                code: 'TH12',
                name: 'Phitsanulok'
            }, {
                code: 'TH36',
                name: 'Phra Nakhon Si Ayutthaya'
            }, {
                code: 'TH07',
                name: 'Phrae'
            }, {
                code: 'TH62',
                name: 'Phuket'
            }, {
                code: 'TH74',
                name: 'Prachin Buri'
            }, {
                code: 'TH57',
                name: 'Prachuap Khiri Khan'
            }, {
                code: 'TH59',
                name: 'Ranong'
            }, {
                code: 'TH52',
                name: 'Ratchaburi'
            }, {
                code: 'TH47',
                name: 'Rayong'
            }, {
                code: 'TH25',
                name: 'Roi Et'
            }, {
                code: 'TH80',
                name: 'Sa Kaeo'
            }, {
                code: 'TH20',
                name: 'Sakon Nakhon'
            }, {
                code: 'TH42',
                name: 'Samut Prakan'
            }, {
                code: 'TH55',
                name: 'Samut Sakhon'
            }, {
                code: 'TH54',
                name: 'Samut Songkhram'
            }, {
                code: 'TH37',
                name: 'Saraburi'
            }, {
                code: 'TH67',
                name: 'Satun'
            }, {
                code: 'TH30',
                name: 'Si Sa Ket'
            }, {
                code: 'TH33',
                name: 'Sing Buri'
            }, {
                code: 'TH68',
                name: 'Songkhla'
            }, {
                code: 'TH09',
                name: 'Sukhothai'
            }, {
                code: 'TH51',
                name: 'Suphan Buri'
            }, {
                code: 'TH60',
                name: 'Surat Thani'
            }, {
                code: 'TH29',
                name: 'Surin'
            }, {
                code: 'TH08',
                name: 'Tak'
            }, {
                code: 'TH65',
                name: 'Trang'
            }, {
                code: 'TH49',
                name: 'Trat'
            }, {
                code: 'TH75',
                name: 'Ubon Ratchathani'
            }, {
                code: 'TH76',
                name: 'Udon Thani'
            }, {
                code: 'TH15',
                name: 'Uthai Thani'
            }, {
                code: 'TH10',
                name: 'Uttaradit'
            }, {
                code: 'TH70',
                name: 'Yala'
            }, {
                code: 'TH72',
                name: 'Yasothon'
            }]
    }, {
        code: 'TL',
        id: 2404,
        name: 'Timor-Leste',
        states: []
    }, {
        code: 'TG',
        id: 2351,
        name: 'Togo',
        states: [{
                code: 'TO22',
                name: 'Centrale'
            }, {
                code: 'TO23',
                name: 'Kara'
            }, {
                code: 'TO24',
                name: 'Maritime'
            }, {
                code: 'TO25',
                name: 'Plateaux'
            }, {
                code: 'TO26',
                name: 'Savanes'
            }]
    }, {
        code: 'TK',
        id: 2438,
        name: 'Tokelau',
        states: []
    }, {
        code: 'TO',
        id: 2405,
        name: 'Tonga',
        states: []
    }, {
        code: 'TT',
        id: 2352,
        name: 'Trinidad and Tobago',
        states: [{
                code: 'TD01',
                name: 'Arima'
            }, {
                code: 'TD13',
                name: 'Chaguanas'
            }, {
                code: 'TD14',
                name: 'Couva/Tabaquite/Talparo'
            }, {
                code: 'TD15',
                name: 'Diego Martin'
            }, {
                code: 'TD11',
                name: 'Eastern Tobago'
            }, {
                code: 'TD16',
                name: 'Mayaro/Rio Claro'
            }, {
                code: 'TD17',
                name: 'Penal/Debe'
            }, {
                code: 'TD18',
                name: 'Point Fortin'
            }, {
                code: 'TD05',
                name: 'Port of Spain'
            }, {
                code: 'TD19',
                name: 'Princes Town'
            }, {
                code: 'TD10',
                name: 'San Fernando'
            }, {
                code: 'TD20',
                name: 'San Juan/Laventille'
            }, {
                code: 'TD21',
                name: 'Sangre Grande'
            }, {
                code: 'TD22',
                name: 'Siparia'
            }, {
                code: 'TD23',
                name: 'Tunapuna/Piarco'
            }, {
                code: 'TD11',
                name: 'Western Tobago'
            }]
    }, {
        code: 'TN',
        id: 2353,
        name: 'Tunisia',
        states: [{
                code: 'TS38',
                name: 'Ariana'
            }, {
                code: 'TS17',
                name: 'Béja'
            }, {
                code: 'TS27',
                name: 'Ben Arous'
            }, {
                code: 'TS18',
                name: 'Bizerte'
            }, {
                code: 'TS29',
                name: 'Gabès'
            }, {
                code: 'TS30',
                name: 'Gafsa'
            }, {
                code: 'TS06',
                name: 'Jendouba'
            }, {
                code: 'TS03',
                name: 'Kairouan'
            }, {
                code: 'TS02',
                name: 'Kassérine'
            }, {
                code: 'TS31',
                name: 'Kebili'
            }, {
                code: 'TS14',
                name: 'Le Kef'
            }, {
                code: 'TS15',
                name: 'Mahdia'
            }, {
                code: 'TS39',
                name: 'Manouba'
            }, {
                code: 'TS28',
                name: 'Médenine'
            }, {
                code: 'TS16',
                name: 'Monastir'
            }, {
                code: 'TS19',
                name: 'Nabeul'
            }, {
                code: 'TS32',
                name: 'Sfax'
            }, {
                code: 'TS33',
                name: 'Sidi Bou Zid'
            }, {
                code: 'TS22',
                name: 'Siliana'
            }, {
                code: 'TS23',
                name: 'Sousse'
            }, {
                code: 'TS34',
                name: 'Tataouine'
            }, {
                code: 'TS35',
                name: 'Tozeur'
            }, {
                code: 'TS36',
                name: 'Tunis'
            }, {
                code: 'TS37',
                name: 'Zaghouan'
            }]
    }, {
        code: 'TR',
        id: 2354,
        name: 'Turkey',
        states: [{
                code: 'TU81',
                name: 'Adana'
            }, {
                code: 'TU02',
                name: 'Adiyaman'
            }, {
                code: 'TU03',
                name: 'Afyonkarahisar'
            }, {
                code: 'TU04',
                name: 'Agri'
            }, {
                code: 'TU75',
                name: 'Aksaray'
            }, {
                code: 'TU05',
                name: 'Amasya'
            }, {
                code: 'TU68',
                name: 'Ankara'
            }, {
                code: 'TU07',
                name: 'Antalya'
            }, {
                code: 'TU86',
                name: 'Ardahan'
            }, {
                code: 'TU08',
                name: 'Artvin'
            }, {
                code: 'TU09',
                name: 'Aydin'
            }, {
                code: 'TU10',
                name: 'Balikesir'
            }, {
                code: 'TU87',
                name: 'Bartin'
            }, {
                code: 'TU76',
                name: 'Batman'
            }, {
                code: 'TU77',
                name: 'Bayburt'
            }, {
                code: 'TU11',
                name: 'Bilecik'
            }, {
                code: 'TU12',
                name: 'Bingöl'
            }, {
                code: 'TU13',
                name: 'Bitlis'
            }, {
                code: 'TU14',
                name: 'Bolu'
            }, {
                code: 'TU15',
                name: 'Burdur'
            }, {
                code: 'TU16',
                name: 'Bursa'
            }, {
                code: 'TU17',
                name: 'Çanakkale'
            }, {
                code: 'TU82',
                name: 'Çankiri'
            }, {
                code: 'TU19',
                name: 'Çorum'
            }, {
                code: 'TU20',
                name: 'Denizli'
            }, {
                code: 'TU21',
                name: 'Diyarbakir'
            }, {
                code: 'TU93',
                name: 'Düzce'
            }, {
                code: 'TU22',
                name: 'Edirne'
            }, {
                code: 'TU23',
                name: 'Elazig'
            }, {
                code: 'TU24',
                name: 'Erzincan'
            }, {
                code: 'TU25',
                name: 'Erzurum'
            }, {
                code: 'TU26',
                name: 'Eskisehir'
            }, {
                code: 'TU83',
                name: 'Gaziantep'
            }, {
                code: 'TU28',
                name: 'Giresun'
            }, {
                code: 'TU69',
                name: 'Gümüshane'
            }, {
                code: 'TU70',
                name: 'Hakkari'
            }, {
                code: 'TU31',
                name: 'Hatay'
            }, {
                code: 'TU88',
                name: 'Igdir'
            }, {
                code: 'TU33',
                name: 'Isparta'
            }, {
                code: 'TU34',
                name: 'Istanbul'
            }, {
                code: 'TU35',
                name: 'Izmir'
            }, {
                code: 'TU46',
                name: 'Kahramanmaras'
            }, {
                code: 'TU89',
                name: 'Karabük'
            }, {
                code: 'TU78',
                name: 'Karaman'
            }, {
                code: 'TU84',
                name: 'Kars'
            }, {
                code: 'TU37',
                name: 'Kastamonu'
            }, {
                code: 'TU38',
                name: 'Kayseri'
            }, {
                code: 'TU90',
                name: 'Kilis'
            }, {
                code: 'TU79',
                name: 'Kirikkale'
            }, {
                code: 'TU39',
                name: 'Kirklareli'
            }, {
                code: 'TU40',
                name: 'Kirsehir'
            }, {
                code: 'TU41',
                name: 'Kocaeli'
            }, {
                code: 'TU71',
                name: 'Konya'
            }, {
                code: 'TU43',
                name: 'Kütahya'
            }, {
                code: 'TU44',
                name: 'Malatya'
            }, {
                code: 'TU45',
                name: 'Manisa'
            }, {
                code: 'TU72',
                name: 'Mardin'
            }, {
                code: 'TU32',
                name: 'Mersin'
            }, {
                code: 'TU48',
                name: 'Mugla'
            }, {
                code: 'TU49',
                name: 'Mus'
            }, {
                code: 'TU50',
                name: 'Nevsehir'
            }, {
                code: 'TU73',
                name: 'Nigde'
            }, {
                code: 'TU52',
                name: 'Ordu'
            }, {
                code: 'TU91',
                name: 'Osmaniye'
            }, {
                code: 'TU53',
                name: 'Rize'
            }, {
                code: 'TU54',
                name: 'Sakarya'
            }, {
                code: 'TU55',
                name: 'Samsun'
            }, {
                code: 'TU63',
                name: 'Sanliurfa'
            }, {
                code: 'TU74',
                name: 'Siirt'
            }, {
                code: 'TU57',
                name: 'Sinop'
            }, {
                code: 'TU80',
                name: 'Sirnak'
            }, {
                code: 'TU58',
                name: 'Sivas'
            }, {
                code: 'TU59',
                name: 'Tekirdag'
            }, {
                code: 'TU60',
                name: 'Tokat'
            }, {
                code: 'TU61',
                name: 'Trabzon'
            }, {
                code: 'TU62',
                name: 'Tunceli'
            }, {
                code: 'TU64',
                name: 'Usak'
            }, {
                code: 'TU65',
                name: 'Van'
            }, {
                code: 'TU92',
                name: 'Yalova'
            }, {
                code: 'TU66',
                name: 'Yozgat'
            }, {
                code: 'TU85',
                name: 'Zonguldak'
            }]
    }, {
        code: 'TM',
        id: 2355,
        name: 'Turkmenistan',
        states: [{
                code: 'TX01',
                name: 'Ahal'
            }, {
                code: 'TM.AB',
                name: 'Ashgabat'
            }, {
                code: 'TX02',
                name: 'Balkan'
            }, {
                code: 'TX03',
                name: 'Dashoguz'
            }, {
                code: 'TX04',
                name: 'Lebap'
            }, {
                code: 'TX05',
                name: 'Mary'
            }]
    }, {
        code: 'TC',
        id: 2439,
        name: 'Turks and Caicos Islands',
        states: []
    }, {
        code: 'TV',
        id: 2440,
        name: 'Tuvalu',
        states: []
    }, {
        code: 'UG',
        id: 2356,
        name: 'Uganda',
        states: [{
                code: 'UG.AI',
                name: 'Abim'
            }, {
                code: 'UG.AD',
                name: 'Adjumani'
            }, {
                code: 'UG.AG',
                name: 'Agago'
            }, {
                code: 'UG.AL',
                name: 'Alebtong'
            }, {
                code: 'UG.AT',
                name: 'Amolatar'
            }, {
                code: 'UG.AZ',
                name: 'Amudat'
            }, {
                code: 'UG.AM',
                name: 'Amuria'
            }, {
                code: 'UG.AY',
                name: 'Amuru'
            }, {
                code: 'UG.AQ',
                name: 'Apac'
            }, {
                code: 'UG.AX',
                name: 'Arua'
            }, {
                code: 'UG.BD',
                name: 'Budaka'
            }, {
                code: 'UG.BA',
                name: 'Bududa'
            }, {
                code: 'UG.BI',
                name: 'Bugiri'
            }, {
                code: 'UG.BH',
                name: 'Buhweju'
            }, {
                code: 'UG.BZ',
                name: 'Buikwe'
            }, {
                code: 'UG.BE',
                name: 'Bukedea'
            }, {
                code: 'UG.BM',
                name: 'Bukomansimbi'
            }, {
                code: 'UG.BW',
                name: 'Bukwo'
            }, {
                code: 'UG.BB',
                name: 'Bulambuli'
            }, {
                code: 'UG.BL',
                name: 'Buliisa'
            }, {
                code: 'UG.BX',
                name: 'Bundibugyo'
            }, {
                code: 'UG.BC',
                name: 'Bushenyi'
            }, {
                code: 'UG.BU',
                name: 'Busia'
            }, {
                code: 'UG.BJ',
                name: 'Butaleja'
            }, {
                code: 'UG.BT',
                name: 'Butambala'
            }, {
                code: 'UG.BV',
                name: 'Buvuma'
            }, {
                code: 'UG.BY',
                name: 'Buyende'
            }, {
                code: 'UG.DO',
                name: 'Dokolo'
            }, {
                code: 'UG.GM',
                name: 'Gomba'
            }, {
                code: 'UG.GL',
                name: 'Gulu'
            }, {
                code: 'UG.HO',
                name: 'Hoima'
            }, {
                code: 'UG.IB',
                name: 'Ibanda'
            }, {
                code: 'UG.IC',
                name: 'Iganga'
            }, {
                code: 'UG.NG',
                name: 'Isingiro'
            }, {
                code: 'UG.JI',
                name: 'Jinja'
            }, {
                code: 'UG.AB',
                name: 'Kaabong'
            }, {
                code: 'UG.KA',
                name: 'Kabale'
            }, {
                code: 'UG.BR',
                name: 'Kabarole'
            }, {
                code: 'UG.KD',
                name: 'Kaberamaido'
            }, {
                code: 'UG.KN',
                name: 'Kalangala'
            }, {
                code: 'UG.RO',
                name: 'Kaliro'
            }, {
                code: 'UG.QA',
                name: 'Kalungu'
            }, {
                code: 'UG.KM',
                name: 'Kampala'
            }, {
                code: 'UG.QU',
                name: 'Kamuli'
            }, {
                code: 'UG.KE',
                name: 'Kamwenge'
            }, {
                code: 'UG.UU',
                name: 'Kanungu'
            }, {
                code: 'UG.QP',
                name: 'Kapchorwa'
            }, {
                code: 'UG.KS',
                name: 'Kasese'
            }, {
                code: 'UG.KK',
                name: 'Katakwi'
            }, {
                code: 'UG.KY',
                name: 'Kayunga'
            }, {
                code: 'UG.KI',
                name: 'Kibaale'
            }, {
                code: 'UG.QO',
                name: 'Kiboga'
            }, {
                code: 'UG.QB',
                name: 'Kibuku'
            }, {
                code: 'UG.KH',
                name: 'Kiruhuura'
            }, {
                code: 'UG.QD',
                name: 'Kiryandongo'
            }, {
                code: 'UG.KR',
                name: 'Kisoro'
            }, {
                code: 'UG.QT',
                name: 'Kitgum'
            }, {
                code: 'UG.OK',
                name: 'Koboko'
            }, {
                code: 'UG.QL',
                name: 'Kole'
            }, {
                code: 'UG.KF',
                name: 'Kotido'
            }, {
                code: 'UG.QM',
                name: 'Kumi'
            }, {
                code: 'UG.QW',
                name: 'Kween'
            }, {
                code: 'UG.QZ',
                name: 'Kyankwanzi'
            }, {
                code: 'UG.QG',
                name: 'Kyegegwa'
            }, {
                code: 'UG.QJ',
                name: 'Kyenjojo'
            }, {
                code: 'UG.LM',
                name: 'Lamwo'
            }, {
                code: 'UG.LL',
                name: 'Lira'
            }, {
                code: 'UG.LK',
                name: 'Luuka'
            }, {
                code: 'UG.LW',
                name: 'Luwero'
            }, {
                code: 'UG.LE',
                name: 'Lwengo'
            }, {
                code: 'UG.LY',
                name: 'Lyantonde'
            }, {
                code: 'UG.MW',
                name: 'Manafwa'
            }, {
                code: 'UG.MQ',
                name: 'Masaka'
            }, {
                code: 'UG.MZ',
                name: 'Masindi'
            }, {
                code: 'UG.MG',
                name: 'Mayuge'
            }, {
                code: 'UG.ME',
                name: 'Mbale'
            }, {
                code: 'UG.RR',
                name: 'Mbarara'
            }, {
                code: 'UG.MM',
                name: 'Mitoma'
            }, {
                code: 'UG.TY',
                name: 'Mityana'
            }, {
                code: 'UG.MX',
                name: 'Moroto'
            }, {
                code: 'UG.MY',
                name: 'Moyo'
            }, {
                code: 'UG.MJ',
                name: 'Mpigi'
            }, {
                code: 'UG.MD',
                name: 'Mubende'
            }, {
                code: 'UG.MV',
                name: 'Mukono'
            }, {
                code: 'UG.NI',
                name: 'Nakapiripirit'
            }, {
                code: 'UG.NK',
                name: 'Nakaseke'
            }, {
                code: 'UG.NA',
                name: 'Nakasongola'
            }, {
                code: 'UG.NY',
                name: 'Namayingo'
            }, {
                code: 'UG.BK',
                name: 'Namutumba'
            }, {
                code: 'UG.NQ',
                name: 'Napak'
            }, {
                code: 'UG.NB',
                name: 'Nebbi'
            }, {
                code: 'UG.NR',
                name: 'Ngora'
            }, {
                code: 'UG.NO',
                name: 'Ntoroko'
            }, {
                code: 'UG.NT',
                name: 'Ntungamo'
            }, {
                code: 'UG.NW',
                name: 'Nwoya'
            }, {
                code: 'UG.MH',
                name: 'Nyadri'
            }, {
                code: 'UG.OT',
                name: 'Otuke'
            }, {
                code: 'UG.OY',
                name: 'Oyam'
            }, {
                code: 'UG.PR',
                name: 'Pader'
            }, {
                code: 'UG.PS',
                name: 'Pallisa'
            }, {
                code: 'UG.RI',
                name: 'Rakai'
            }, {
                code: 'UG.RZ',
                name: 'Rubirizi'
            }, {
                code: 'UG.RK',
                name: 'Rukungiri'
            }, {
                code: 'UG.SE',
                name: 'Sembabule'
            }, {
                code: 'UG.SX',
                name: 'Serere'
            }, {
                code: 'UG.SH',
                name: 'Sheema'
            }, {
                code: 'UG.SK',
                name: 'Sironko'
            }, {
                code: 'UG.ST',
                name: 'Soroti'
            }, {
                code: 'UG.TR',
                name: 'Tororo'
            }, {
                code: 'UG.WA',
                name: 'Wakiso'
            }, {
                code: 'UG.YU',
                name: 'Yumbe'
            }, {
                code: 'UG.ZO',
                name: 'Zombo'
            }]
    }, {
        code: 'UA',
        id: 2357,
        name: 'Ukraine',
        states: [{
                code: 'UP01',
                name: 'Cherkasy'
            }, {
                code: 'UP02',
                name: 'Chernihiv'
            }, {
                code: 'UP03',
                name: 'Chernivtsi'
            }, {
                code: 'UP11',
                name: 'Crimea'
            }, {
                code: 'UP04',
                name: 'Dnipropetrovs\'k'
            }, {
                code: 'UP05',
                name: 'Donets\'k'
            }, {
                code: 'UP06',
                name: 'Ivano-Frankivs\'k'
            }, {
                code: 'UP07',
                name: 'Kharkiv'
            }, {
                code: 'UP08',
                name: 'Kherson'
            }, {
                code: 'UP09',
                name: 'Khmel\'nyts\'kyy'
            }, {
                code: 'UP13',
                name: 'Kiev'
            }, {
                code: 'UP12',
                name: 'Kiev City'
            }, {
                code: 'UP10',
                name: 'Kirovohrad'
            }, {
                code: 'UP15',
                name: 'L\'viv'
            }, {
                code: 'UP14',
                name: 'Luhans\'k'
            }, {
                code: 'UP16',
                name: 'Mykolayiv'
            }, {
                code: 'UP17',
                name: 'Odessa'
            }, {
                code: 'UP18',
                name: 'Poltava'
            }, {
                code: 'UP19',
                name: 'Rivne'
            }, {
                code: 'UP20',
                name: 'Sevastopol\' City'
            }, {
                code: 'UP21',
                name: 'Sumy'
            }, {
                code: 'UP22',
                name: 'Ternopil\''
            }, {
                code: 'UP25',
                name: 'Transcarpathia'
            }, {
                code: 'UP23',
                name: 'Vinnytsya'
            }, {
                code: 'UP24',
                name: 'Volyn'
            }, {
                code: 'UP26',
                name: 'Zaporizhzhya'
            }, {
                code: 'UP27',
                name: 'Zhytomyr'
            }]
    }, {
        code: 'AE',
        id: 2358,
        name: 'United Arab Emirates',
        states: [{
                code: 'AE02',
                name: '\'Ajman'
            }, {
                code: 'AE01',
                name: 'Abu Dhabi'
            }, {
                code: 'AE04',
                name: 'Al Fujayrah'
            }, {
                code: 'AE03',
                name: 'Dubai'
            }, {
                code: 'AE05',
                name: 'Ra\'s al Khaymah'
            }, {
                code: 'AE06',
                name: 'Sharjah'
            }, {
                code: 'AE07',
                name: 'Umm al Qaywayn'
            }]
    }, {
        code: 'UM',
        id: 2441,
        name: 'United States Minor Outlying Islands',
        states: []
    }, {
        code: 'UY',
        id: 2360,
        name: 'Uruguay',
        states: []
    }, {
        code: 'UZ',
        id: 2361,
        name: 'Uzbekistan',
        states: [{
                code: 'UZ01',
                name: 'Andijon'
            }, {
                code: 'UZ02',
                name: 'Buxoro'
            }, {
                code: 'UZ03',
                name: 'Farg`ona'
            }, {
                code: 'UZ15',
                name: 'Jizzax'
            }, {
                code: 'UZ09',
                name: 'Karakalpakstan'
            }, {
                code: 'UZ08',
                name: 'Kashkadarya'
            }, {
                code: 'UZ06',
                name: 'Namangan'
            }, {
                code: 'UZ07',
                name: 'Navoi'
            }, {
                code: 'UZ10',
                name: 'Samarkand'
            }, {
                code: 'UZ16',
                name: 'Sirdaryo'
            }, {
                code: 'UZ12',
                name: 'Surxondaryo'
            }, {
                code: 'UZ13',
                name: 'Tashkent City'
            }, {
                code: 'UZ14',
                name: 'Tashkent'
            }, {
                code: 'UZ05',
                name: 'Xorazm'
            }]
    }, {
        code: 'NH',
        id: 2406,
        name: 'Vanuatu',
        states: []
    }, {
        code: 'VE',
        id: 2363,
        name: 'Venezuela; Bolivarian Republic of',
        states: [{
                code: 'VE01',
                name: 'Amazonas'
            }, {
                code: 'VE02',
                name: 'Anzoátegui'
            }, {
                code: 'VE03',
                name: 'Apure'
            }, {
                code: 'VE04',
                name: 'Aragua'
            }, {
                code: 'VE05',
                name: 'Barinas'
            }, {
                code: 'VE06',
                name: 'Bolívar'
            }, {
                code: 'VE07',
                name: 'Carabobo'
            }, {
                code: 'VE08',
                name: 'Cojedes'
            }, {
                code: 'VE09',
                name: 'Delta Amacuro'
            }, {
                code: 'VE24',
                name: 'Dependencias Federales'
            }, {
                code: 'VE25',
                name: 'Distrito Capital'
            }, {
                code: 'VE11',
                name: 'Falcón'
            }, {
                code: 'VE12',
                name: 'Guárico'
            }, {
                code: 'VE13',
                name: 'Lara'
            }, {
                code: 'VE14',
                name: 'Mérida'
            }, {
                code: 'VE15',
                name: 'Miranda'
            }, {
                code: 'VE16',
                name: 'Monagas'
            }, {
                code: 'VE17',
                name: 'Nueva Esparta'
            }, {
                code: 'VE18',
                name: 'Portuguesa'
            }, {
                code: 'VE19',
                name: 'Sucre'
            }, {
                code: 'VE20',
                name: 'Táchira'
            }, {
                code: 'VE21',
                name: 'Trujillo'
            }, {
                code: 'VE26',
                name: 'Vargas'
            }, {
                code: 'VE22',
                name: 'Yaracuy'
            }, {
                code: 'VE23',
                name: 'Zulia'
            }]
    }, {
        code: 'VN',
        id: 2364,
        name: 'Vietnam',
        states: [{
                code: 'VM01',
                name: 'An Giang'
            }, {
                code: 'VM45',
                name: 'Ba Ria-Vung Tau'
            }, {
                code: 'VM72',
                name: 'Bac Can'
            }, {
                code: 'VM71',
                name: 'Bac Giang'
            }, {
                code: 'VM73',
                name: 'Bac Lieu'
            }, {
                code: 'VM74',
                name: 'Bac Ninh'
            }, {
                code: 'VM03',
                name: 'Ben Tre'
            }, {
                code: 'VM46',
                name: 'Binh Dinh'
            }, {
                code: 'VM75',
                name: 'Binh Duong'
            }, {
                code: 'VM76',
                name: 'Binh Phuoc'
            }, {
                code: 'VM47',
                name: 'Binh Thuan'
            }, {
                code: 'VM77',
                name: 'Ca Mau'
            }, {
                code: 'VM87',
                name: 'Can Tho'
            }, {
                code: 'VM05',
                name: 'Cao Bang'
            }, {
                code: 'VM78',
                name: 'Da Nang'
            }, {
                code: 'VM88',
                name: 'Dac Lac'
            }, {
                code: 'VM91',
                name: 'Dac Nong'
            }, {
                code: 'VM92',
                name: 'Dien Bien'
            }, {
                code: 'VM43',
                name: 'Dong Nai'
            }, {
                code: 'VM09',
                name: 'Dong Thap'
            }, {
                code: 'VM49',
                name: 'Gia Lai'
            }, {
                code: 'VM50',
                name: 'Ha Giang'
            }, {
                code: 'VM80',
                name: 'Ha Nam'
            }, {
                code: 'VM52',
                name: 'Ha Tinh'
            }, {
                code: 'VM79',
                name: 'Hai Duong'
            }, {
                code: 'VM13',
                name: 'Haiphong'
            }, {
                code: 'VM44',
                name: 'Hanoi'
            }, {
                code: 'VM93',
                name: 'Hau Giang'
            }, {
                code: 'VM20',
                name: 'Ho Chi Minh'
            }, {
                code: 'VM53',
                name: 'Hoa Binh'
            }, {
                code: 'VM81',
                name: 'Hung Yen'
            }, {
                code: 'VM54',
                name: 'Khanh Hoa'
            }, {
                code: 'VM21',
                name: 'Kien Giang'
            }, {
                code: 'VM55',
                name: 'Kon Tum'
            }, {
                code: 'VM89',
                name: 'Lai Chau'
            }, {
                code: 'VM23',
                name: 'Lam Dong'
            }, {
                code: 'VM39',
                name: 'Lang Son'
            }, {
                code: 'VM90',
                name: 'Lao Cai'
            }, {
                code: 'VM24',
                name: 'Long An'
            }, {
                code: 'VM82',
                name: 'Nam Dinh'
            }, {
                code: 'VM58',
                name: 'Nghe An'
            }, {
                code: 'VM59',
                name: 'Ninh Binh'
            }, {
                code: 'VM60',
                name: 'Ninh Thuan'
            }, {
                code: 'VM83',
                name: 'Phu Tho'
            }, {
                code: 'VM61',
                name: 'Phu Yen'
            }, {
                code: 'VM62',
                name: 'Quang Binh'
            }, {
                code: 'VM84',
                name: 'Quang Nam'
            }, {
                code: 'VM63',
                name: 'Quang Ngai'
            }, {
                code: 'VM30',
                name: 'Quang Ninh'
            }, {
                code: 'VM64',
                name: 'Quang Tri'
            }, {
                code: 'VM65',
                name: 'Soc Trang'
            }, {
                code: 'VM32',
                name: 'Son La'
            }, {
                code: 'VM33',
                name: 'Tay Ninh'
            }, {
                code: 'VM35',
                name: 'Thai Binh'
            }, {
                code: 'VM85',
                name: 'Thai Nguyen'
            }, {
                code: 'VM34',
                name: 'Thanh Hoa'
            }, {
                code: 'VM66',
                name: 'Thua Thien-Hue'
            }, {
                code: 'VM37',
                name: 'Tien Giang'
            }, {
                code: 'VM67',
                name: 'Tra Vinh'
            }, {
                code: 'VM68',
                name: 'Tuyen Quang'
            }, {
                code: 'VM69',
                name: 'Vinh Long'
            }, {
                code: 'VM86',
                name: 'Vinh Phuc'
            }, {
                code: 'VM70',
                name: 'Yen Bai'
            }]
    }, {
        code: 'VG',
        id: 2446,
        name: 'Virgin Islands; British',
        states: []
    }, {
        code: 'VI',
        id: 2442,
        name: 'Virgin Islands; U.S.',
        states: [{
                code: '010',
                name: 'Saint Croix'
            }, {
                code: '020',
                name: 'Saint John'
            }, {
                code: '030',
                name: 'Saint Thomas'
            }]
    }, {
        code: 'WF',
        id: 2443,
        name: 'Wallis and Futuna',
        states: []
    }, {
        code: 'EH',
        id: 2444,
        name: 'Western Sahara',
        states: []
    }, {
        code: 'YE',
        id: 2382,
        name: 'Yemen',
        states: [{
                code: 'YM01',
                name: 'Abyan'
            }, {
                code: 'YM20',
                name: 'Al Bayda\''
            }, {
                code: 'YM18',
                name: 'Al Dali\''
            }, {
                code: 'YM08',
                name: 'Al Hudaydah'
            }, {
                code: 'YM21',
                name: 'Al Jawf'
            }, {
                code: 'YM03',
                name: 'Al Mahrah'
            }, {
                code: 'YM10',
                name: 'Al Mahwit'
            }, {
                code: 'YM19',
                name: 'Amran'
            }, {
                code: 'YM11',
                name: 'Dhamar'
            }, {
                code: 'YM04',
                name: 'Hadramawt'
            }, {
                code: 'YM22',
                name: 'Hajjah'
            }, {
                code: 'YM23',
                name: 'Ibb'
            }, {
                code: 'YM24',
                name: 'Lahij'
            }, {
                code: 'YM14',
                name: 'Ma\'rib'
            }, {
                code: 'YM27',
                name: 'Raymah'
            }, {
                code: 'YM15',
                name: 'Sa`dah'
            }, {
                code: 'YM16',
                name: 'San`a\''
            }, {
                code: 'YM26',
                name: 'San`a\' [City]'
            }, {
                code: 'YM05',
                name: 'Shabwah'
            }, {
                code: 'YM28',
                name: 'Socotra'
            }, {
                code: 'YM25',
                name: 'Ta`izz'
            }, {
                code: 'YM02',
                name: '`Adan'
            }]
    }, {
        code: 'ZM',
        id: 2369,
        name: 'Zambia',
        states: [{
                code: 'ZA02',
                name: 'Central'
            }, {
                code: 'ZA08',
                name: 'Copperbelt'
            }, {
                code: 'ZA03',
                name: 'Eastern'
            }, {
                code: 'ZA04',
                name: 'Luapula'
            }, {
                code: 'ZA09',
                name: 'Lusaka'
            }, {
                code: 'ZA10',
                name: 'Muchinga'
            }, {
                code: 'ZA06',
                name: 'North-Western'
            }, {
                code: 'ZA05',
                name: 'Northern'
            }, {
                code: 'ZA07',
                name: 'Southern'
            }, {
                code: 'ZA01',
                name: 'Western'
            }]
    }, {
        code: 'ZW',
        id: 2370,
        name: 'Zimbabwe',
        states: [{
                code: 'ZI09',
                name: 'Bulawayo'
            }, {
                code: 'ZI10',
                name: 'Harare'
            }, {
                code: 'ZI01',
                name: 'Manicaland'
            }, {
                code: 'ZI03',
                name: 'Mashonaland Central'
            }, {
                code: 'ZI04',
                name: 'Mashonaland East'
            }, {
                code: 'ZI05',
                name: 'Mashonaland West'
            }, {
                code: 'ZI08',
                name: 'Masvingo'
            }, {
                code: 'ZI06',
                name: 'Matabeleland North'
            }, {
                code: 'ZI07',
                name: 'Matabeleland South'
            }, {
                code: 'ZI02',
                name: 'Midlands'
            }]
    }, {
        code: 'NONE',
        id: 2378,
        name: '- None Specified -',
        states: []
    }];
/**
 * Gets all countries
 * @return {?}
 */
function getCountries() {
    return COUNTRIES.map(function (country) { return country.name; });
}
/**
 * Gets a country by country ID
 * @param {?} id
 * @return {?}
 */
function findByCountryId(id) {
    return COUNTRIES.find(function (country) { return country.id === id; });
}
/**
 * Gets a country by country name
 * @param {?} name
 * @return {?}
 */
function findByCountryName(name) {
    return COUNTRIES.find(function (country) { return country.name === name.trim(); });
}
/**
 * Gets a country by country code
 * @param {?} code
 * @return {?}
 */
function findByCountryCode(code) {
    return COUNTRIES.find(function (country) { return country.code === code.trim(); });
}
/**
 * Gets states by country name
 * @param {?} name
 * @return {?}
 */
function getStateObjects(name) {
    var /** @type {?} */ foundCountry = COUNTRIES.find(function (country) { return country.name === name.trim(); });
    return foundCountry && foundCountry.states || [];
}
/**
 * Gets state names by country name
 * @param {?} name
 * @return {?}
 */
function getStates(name) {
    return getStateObjects(name).map(function (state$$1) { return state$$1.name; });
}
// NG2
// APP
// Value accessor for the component (supports ngModel)
var ADDRESS_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoAddressElement; }),
    multi: true
};
var NovoAddressElement = /** @class */ (function () {
    /**
     * @param {?} labels
     */
    function NovoAddressElement(labels) {
        this.labels = labels;
        this.states = [];
        this.countries = getCountries();
        this.onModelChange = function () {
        };
        this.onModelTouched = function () {
        };
    }
    /**
     * @return {?}
     */
    NovoAddressElement.prototype.ngOnInit = function () {
        if (this.model) {
            this.writeValue(this.model);
            this.updateControl();
        }
        else if (!this.model) {
            this.model = {};
        }
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    NovoAddressElement.prototype.onCountryChange = function (evt) {
        var /** @type {?} */ country = findByCountryName(evt);
        if (country) {
            this.model.countryName = country.name;
            this.model.countryCode = country.code;
            this.model.countryID = country.id;
            this.updateStates();
        }
        // Update state
        this.model.state = undefined;
        this.updateControl();
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    NovoAddressElement.prototype.onStateChange = function (evt) {
        this.model.state = evt;
        this.updateControl();
    };
    /**
     * @return {?}
     */
    NovoAddressElement.prototype.updateStates = function () {
        if (this.model.countryName) {
            this.states = getStates(this.model.countryName);
        }
        else {
            this.states = [];
        }
    };
    /**
     * @return {?}
     */
    NovoAddressElement.prototype.updateControl = function () {
        this.onModelChange(this.model);
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoAddressElement.prototype.writeValue = function (model) {
        if (model) {
            var /** @type {?} */ countryName = void 0;
            if (model.countryName) {
                countryName = model.countryName;
            }
            else if (model.countryID) {
                var /** @type {?} */ country = findByCountryId(model.countryID);
                if (country) {
                    countryName = country.name;
                }
            }
            if (countryName) {
                countryName = countryName.trim();
                model.state = model.state || '';
                var /** @type {?} */ stateObj = getStateObjects(countryName).find(function (state$$1) {
                    return state$$1.code === model.state.replace(/\W+/g, '').toUpperCase() || state$$1.name === model.state;
                }) || {};
                this.model = Object.assign(model, { countryName: countryName, state: stateObj.name });
                this.updateStates();
            }
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoAddressElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoAddressElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    return NovoAddressElement;
}());
NovoAddressElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-address',
                providers: [ADDRESS_VALUE_ACCESSOR],
                template: "\n        <input type=\"text\" class=\"street-address\" id=\"address1\" name=\"address1\" [placeholder]=\"labels.address\" autocomplete=\"shipping street-address address-line-1\" [(ngModel)]=\"model.address1\" (ngModelChange)=\"updateControl()\"/>\n        <input type=\"text\" class=\"apt suite\" id=\"address2\" name=\"address2\" [placeholder]=\"labels.apt\" autocomplete=\"shipping address-line-2\" [(ngModel)]=\"model.address2\" (ngModelChange)=\"updateControl()\"/>\n        <input type=\"text\" class=\"city locality\" id=\"city\" name=\"city\" [placeholder]=\"labels.city\" autocomplete=\"shipping city locality\" [(ngModel)]=\"model.city\" (ngModelChange)=\"updateControl()\"/>\n        <novo-select class=\"state region\" id=\"state\" [options]=\"states\" [placeholder]=\"labels.state\" autocomplete=\"shipping region\" [(ngModel)]=\"model.state\" (ngModelChange)=\"onStateChange($event)\"></novo-select>\n        <input type=\"text\" class=\"zip postal-code\" id=\"zip\" name=\"zip\" [placeholder]=\"labels.zipCode\" autocomplete=\"shipping postal-code\" [(ngModel)]=\"model.zip\" (ngModelChange)=\"updateControl()\"/>\n        <novo-select class=\"country-name\" id=\"country\" [options]=\"countries\" [placeholder]=\"labels.country\" autocomplete=\"shipping country\" [(ngModel)]=\"model.countryName\" (ngModelChange)=\"onCountryChange($event)\"></novo-select>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoAddressElement.ctorParameters = function () { return [
    { type: NovoLabelService, },
]; };
// NG2
// Value accessor for the component (supports ngModel)
var CHECKBOX_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoCheckboxElement; }),
    multi: true
};
var LAYOUT_DEFAULTS = { iconStyle: 'box' };
var NovoCheckboxElement = /** @class */ (function () {
    /**
     * @param {?} ref
     */
    function NovoCheckboxElement(ref) {
        this.ref = ref;
        this.indeterminate = false;
        this.onSelect = new core.EventEmitter();
        this.boxIcon = true;
        this.onModelChange = function () {
        };
        this.onModelTouched = function () {
        };
    }
    /**
     * @return {?}
     */
    NovoCheckboxElement.prototype.ngOnInit = function () {
        this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS, this.layoutOptions);
        this.boxIcon = this.layoutOptions.iconStyle === 'box';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoCheckboxElement.prototype.select = function (event) {
        this.model = !this.model;
        this.onModelChange(this.model);
        this.onSelect.emit({ originalEvent: event, value: this.model });
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoCheckboxElement.prototype.writeValue = function (model) {
        this.model = model;
        this.ref.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoCheckboxElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoCheckboxElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    return NovoCheckboxElement;
}());
NovoCheckboxElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-checkbox',
                providers: [CHECKBOX_VALUE_ACCESSOR],
                template: "\n        <div class=\"check-box-group\" [class.checked]=\"model\" [class.disabled]=\"disabled\">\n            <input [name]=\"name\" type=\"checkbox\" [(ngModel)]=\"model\" [attr.id]=\"name\">\n            <label [attr.for]=\"name\" (click)=\"select($event)\">\n              <i [class.bhi-checkbox-empty]=\"!model && !indeterminate && boxIcon\"\n                 [class.bhi-checkbox-filled]=\"model && !indeterminate && boxIcon\"\n                 [class.bhi-checkbox-indeterminate]=\"indeterminate && boxIcon\"\n                 [class.bhi-circle-o]=\"!model && !indeterminate && !boxIcon\"\n                 [class.bhi-check]=\"model && !indeterminate && !boxIcon\"\n                 [class.bhi-circle]=\"indeterminate && !boxIcon\"></i>\n              <span *ngIf=\"label\">{{ label }}</span>\n            </label>\n        </div>\n    ",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
NovoCheckboxElement.ctorParameters = function () { return [
    { type: core.ChangeDetectorRef, },
]; };
NovoCheckboxElement.propDecorators = {
    'name': [{ type: core.Input },],
    'label': [{ type: core.Input },],
    'indeterminate': [{ type: core.Input },],
    'disabled': [{ type: core.Input },],
    'layoutOptions': [{ type: core.Input },],
    'onSelect': [{ type: core.Output },],
};
// NG2
// APP
// Value accessor for the component (supports ngModel)
var CHECKLIST_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoCheckListElement; }),
    multi: true
};
var NovoCheckListElement = /** @class */ (function () {
    function NovoCheckListElement() {
        this.onSelect = new core.EventEmitter();
        this.onModelChange = function () {
        };
        this.onModelTouched = function () {
        };
    }
    /**
     * @return {?}
     */
    NovoCheckListElement.prototype.ngOnInit = function () {
        this.setModel();
        this.setupOptions();
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoCheckListElement.prototype.select = function (event, item) {
        Helpers.swallowEvent(event);
        item.checked = !item.checked;
        this.model = this._options.filter(function (checkBox) { return checkBox.checked; }).map(function (x) { return x.value; });
        this.onModelChange(this.model.length > 0 ? this.model : '');
        this.onSelect.emit({ selected: this.model });
    };
    /**
     * @return {?}
     */
    NovoCheckListElement.prototype.setupOptions = function () {
        var _this = this;
        this.options = this.options || [];
        this._options = [];
        if (this.options.length && !this.options[0].value) {
            this.options.forEach(function (option) {
                var /** @type {?} */ formattedOption = {
                    value: option,
                    label: option,
                    checked: (_this.model && _this.model.length && (_this.model.indexOf(option.value) !== -1))
                };
                _this._options.push(formattedOption);
            });
        }
        else {
            this.options.forEach(function (option) {
                var /** @type {?} */ formattedOption = option;
                formattedOption.checked = (_this.model && _this.model.length && (_this.model.indexOf(option.value) !== -1));
                _this._options.push(formattedOption);
            });
        }
    };
    /**
     * @return {?}
     */
    NovoCheckListElement.prototype.setModel = function () {
        var /** @type {?} */ checkedOptions = this.options.filter(function (checkBox) { return checkBox.checked; }).map(function (x) { return x.value; });
        this.writeValue(checkedOptions);
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoCheckListElement.prototype.writeValue = function (model) {
        this.model = model || [];
        if (model) {
            this.setupOptions();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoCheckListElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoCheckListElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    return NovoCheckListElement;
}());
NovoCheckListElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-check-list',
                providers: [CHECKLIST_VALUE_ACCESSOR],
                template: "\n        <div class=\"check-box-group\" *ngFor=\"let option of _options; let i = index\" [ngClass]=\"{checked: option.checked}\" >\n            <input [name]=\"name\" type=\"checkbox\" [ngModel]=\"option.checked\" [attr.id]=\"name+i\" [value]=\"option.checked\" (change)=\"select($event, option)\">\n            <label [attr.for]=\"name+i\" (click)=\"select($event, option)\">\n              <i [ngClass]=\"{'bhi-checkbox-empty': !option.checked, 'bhi-checkbox-filled': option.checked }\"></i>\n              <span>{{option.label}}</span>\n            </label>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoCheckListElement.ctorParameters = function () { return []; };
NovoCheckListElement.propDecorators = {
    'name': [{ type: core.Input },],
    'options': [{ type: core.Input },],
    'onSelect': [{ type: core.Output },],
};
var NovoFile = /** @class */ (function () {
    /**
     * @param {?} file
     */
    function NovoFile(file) {
        var _this = this;
        this.name = '';
        this.contentType = '';
        this.lastModified = 0;
        this.size = 0;
        this.loaded = false;
        this.reader = new FileReader();
        this.name = "" + encodeURIComponent(file.name || '');
        this.contentType = file.type;
        this.lastModified = file.lastModified;
        this.size = file.size;
        this.file = file;
        this.reader.onload = function (event) {
            _this.fileContents = event.target.result.split(',')[1];
            _this.dataURL = event.target.result;
            _this.loaded = true;
        };
    }
    /**
     * @return {?}
     */
    NovoFile.prototype.read = function () {
        var _this = this;
        return new Promise(function (resolve) {
            resolve(_this);
            // when the file is read it triggers the onload event above.
            _this.reader.readAsDataURL(_this.file);
        });
    };
    /**
     * @return {?}
     */
    NovoFile.prototype.toJSON = function () {
        return {
            name: this.name,
            contentType: this.type,
            lastModified: this.lastModified,
            size: this.size,
            fileContents: this.fileContents
        };
    };
    return NovoFile;
}());
// NG2
// APP
// Value accessor for the component (supports ngModel)
var FILE_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoFileInputElement; }),
    multi: true
};
var LAYOUT_DEFAULTS$1 = { order: 'default', download: true, labelStyle: 'default', draggable: false };
var NovoFileInputElement = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} labels
     * @param {?} dragula
     */
    function NovoFileInputElement(element, labels, dragula) {
        this.element = element;
        this.labels = labels;
        this.dragula = dragula;
        this.multiple = false;
        this.disabled = false;
        this.value = [];
        this.edit = new core.EventEmitter();
        this.save = new core.EventEmitter();
        this.delete = new core.EventEmitter();
        this.upload = new core.EventEmitter();
        this.elements = [];
        this.files = [];
        this.active = false;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.commands = {
            dragenter: this.dragEnterHandler.bind(this),
            dragleave: this.dragLeaveHandler.bind(this),
            dragover: this.dragOverHandler.bind(this),
            drop: this.dropHandler.bind(this),
        };
    }
    /**
     * @return {?}
     */
    NovoFileInputElement.prototype.ngOnInit = function () {
        var _this = this;
        ['dragenter', 'dragleave', 'dragover', 'drop'].forEach(function (type) {
            _this.element.nativeElement.addEventListener(type, _this.commands[type]);
        });
        this.updateLayout();
        this.initializeDragula();
        this.setInitialFileList();
    };
    /**
     * @return {?}
     */
    NovoFileInputElement.prototype.ngOnDestroy = function () {
        var _this = this;
        ['dragenter', 'dragleave', 'dragover', 'drop'].forEach(function (type) {
            _this.element.nativeElement.removeEventListener(type, _this.commands[type]);
        });
        var /** @type {?} */ dragulaHasFileOutputBag = this.dragula.bags.length > 0 && this.dragula.bags.filter(function (x) { return x.name === _this.fileOutputBag; }).length > 0;
        if (dragulaHasFileOutputBag) {
            this.dragula.destroy(this.fileOutputBag);
        }
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoFileInputElement.prototype.ngOnChanges = function (changes) {
        this.onModelChange(this.model);
    };
    /**
     * @return {?}
     */
    NovoFileInputElement.prototype.updateLayout = function () {
        this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS$1, this.layoutOptions);
        this.insertTemplatesBasedOnLayout();
    };
    /**
     * @return {?}
     */
    NovoFileInputElement.prototype.insertTemplatesBasedOnLayout = function () {
        var _this = this;
        var /** @type {?} */ order;
        switch (this.layoutOptions['order']) {
            case 'displayFilesBelow':
                order = ['fileInput', 'fileOutput'];
                break;
            default:
                order = ['fileOutput', 'fileInput'];
        }
        order.forEach(function (template) {
            _this.container.createEmbeddedView(_this[template], 0);
        });
        return order;
    };
    /**
     * @return {?}
     */
    NovoFileInputElement.prototype.initializeDragula = function () {
        var _this = this;
        this.fileOutputBag = "file-output-" + this.dragula.bags.length;
        this.dragula.setOptions(this.fileOutputBag, {
            moves: function (el, container, handle) {
                return _this.layoutOptions.draggable;
            },
        });
    };
    /**
     * @return {?}
     */
    NovoFileInputElement.prototype.setInitialFileList = function () {
        if (this.value) {
            this.files = this.value;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoFileInputElement.prototype.dragEnterHandler = function (event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
        this.target = event.target;
        this.active = true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoFileInputElement.prototype.dragLeaveHandler = function (event) {
        event.preventDefault();
        if (this.target === event.target) {
            this.active = false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoFileInputElement.prototype.dragOverHandler = function (event) {
        event.preventDefault();
        // no-op
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoFileInputElement.prototype.dropHandler = function (event) {
        event.preventDefault();
        this.visible = false;
        if (event.dataTransfer.types[0] !== 'Files') {
            return;
        }
        var /** @type {?} */ options = this.layoutOptions;
        if (options.customActions) {
            this.upload.emit(event);
        }
        else {
            var /** @type {?} */ filelist = Array.from(event.dataTransfer.files);
            this.process(this.multiple ? filelist : [filelist[0]]);
        }
        this.active = false;
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoFileInputElement.prototype.writeValue = function (model) {
        this.model = model;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoFileInputElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoFileInputElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoFileInputElement.prototype.check = function (event) {
        this.process(Array.from(event.target.files));
    };
    /**
     * @param {?} filelist
     * @return {?}
     */
    NovoFileInputElement.prototype.process = function (filelist) {
        var _this = this;
        Promise.all(filelist.map(function (file) { return _this.readFile(file); })).then(function (files) {
            if (_this.multiple) {
                (_d = _this.files).push.apply(_d, files);
            }
            else {
                _this.files = files;
            }
            _this.model = _this.files;
            _this.onModelChange(_this.model);
            var _d;
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NovoFileInputElement.prototype.download = function (file) {
        window.open(file.dataURL, '_blank');
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NovoFileInputElement.prototype.remove = function (file) {
        this.files.splice(this.files.findIndex(function (f) { return f.name === file.name && f.size === file.size; }), 1);
        this.model = this.files;
        this.onModelChange(this.model);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NovoFileInputElement.prototype.readFile = function (file) {
        return new NovoFile(file).read();
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NovoFileInputElement.prototype.customEdit = function (file) {
        this.edit.emit(file);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NovoFileInputElement.prototype.customSave = function (file) {
        this.save.emit(file);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NovoFileInputElement.prototype.customDelete = function (file) {
        this.delete.emit(file);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoFileInputElement.prototype.customCheck = function (event) {
        this.upload.emit(event);
    };
    return NovoFileInputElement;
}());
NovoFileInputElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-file-input',
                providers: [FILE_VALUE_ACCESSOR],
                template: "\n        <div #container></div>\n        <ng-template #fileInput>\n            <div class=\"file-input-group\" [class.disabled]=\"disabled\" [class.active]=\"active\">\n                <input *ngIf=\"!layoutOptions.customActions\" type=\"file\" [name]=\"name\" [attr.id]=\"name\" (change)=\"check($event)\" [attr.multiple]=\"multiple\" tabindex=\"-1\"/>\n                <input *ngIf=\"layoutOptions.customActions\" type=\"file\" [name]=\"name\" [attr.id]=\"name\" (change)=\"customCheck($event)\" [attr.multiple]=\"multiple\" tabindex=\"-1\"/>\n                <section [ngSwitch]=\"layoutOptions.labelStyle\">\n                    <label *ngSwitchCase=\"'no-box'\" [attr.for]=\"name\" class=\"no-box\">\n                        <div><i class=\"bhi-dropzone\"></i>{{ placeholder || labels.chooseAFile }} {{ labels.or }} <strong class=\"link\">{{ labels.clickToBrowse }}</strong></div>\n                    </label>\n                    <label *ngSwitchDefault [attr.for]=\"name\" class=\"boxed\">\n                        <span>{{ placeholder || labels.chooseAFile }}</span>\n                        <small>{{ labels.or }} <strong class=\"link\">{{ labels.clickToBrowse }}</strong></small>\n                    </label>\n                </section>\n            </div>\n        </ng-template>\n        <ng-template #fileOutput>\n            <div class=\"file-output-group\" [dragula]=\"fileOutputBag\" [dragulaModel]=\"files\">\n                <div class=\"file-item\" *ngFor=\"let file of files\">\n                  <i *ngIf=\"layoutOptions.draggable\" class=\"bhi-move\"></i>\n                  <label *ngIf=\"file.link\"><span><a href=\"{{ file.link }}\" target=\"_blank\">{{ file.name | decodeURI }}</a></span><span  *ngIf=\"file.description\">||</span><span>{{ file.description }}</span></label> \n                  <label *ngIf=\"!file.link\">{{ file.name | decodeURI }}</label> \n                  <div class=\"actions\" [attr.data-automation-id]=\"'file-actions'\" *ngIf=\"file.loaded\">\n                    <div *ngIf=\"!layoutOptions.customActions\">\n                      <button *ngIf=\"layoutOptions.download\" type=\"button\" theme=\"icon\" icon=\"save\" (click)=\"download(file)\" [attr.data-automation-id]=\"'file-download'\" tabindex=\"-1\"></button>\n                      <button type=\"button\" theme=\"icon\" icon=\"close\" (click)=\"remove(file)\" [attr.data-automation-id]=\"'file-remove'\" tabindex=\"-1\"></button>\n                    </div>\n                    <div *ngIf=\"layoutOptions.customActions\">\n                      <button *ngIf=\"layoutOptions.edit\" type=\"button\" theme=\"icon\" icon=\"edit\" (click)=\"customEdit(file)\" [attr.data-automation-id]=\"'file-edit'\" tabindex=\"-1\"></button>\n                      <button *ngIf=\"layoutOptions.download\" type=\"button\" theme=\"icon\" icon=\"save\" (click)=\"customSave(file)\" [attr.data-automation-id]=\"'file-download'\" tabindex=\"-1\"></button>\n                      <button type=\"button\" theme=\"icon\" icon=\"close\" (click)=\"customDelete(file)\" [attr.data-automation-id]=\"'file-remove'\" tabindex=\"-1\"></button>\n                    </div> \n                  </div>\n                    <novo-loading *ngIf=\"!file.loaded\"></novo-loading>\n                </div>\n            </div>\n        </ng-template>",
            },] },
];
/**
 * @nocollapse
 */
NovoFileInputElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
    { type: NovoDragulaService, },
]; };
NovoFileInputElement.propDecorators = {
    'fileInput': [{ type: core.ViewChild, args: ['fileInput',] },],
    'fileOutput': [{ type: core.ViewChild, args: ['fileOutput',] },],
    'container': [{ type: core.ViewChild, args: ['container', { read: core.ViewContainerRef },] },],
    'name': [{ type: core.Input },],
    'multiple': [{ type: core.Input },],
    'disabled': [{ type: core.Input },],
    'placeholder': [{ type: core.Input },],
    'layoutOptions': [{ type: core.Input },],
    'value': [{ type: core.Input },],
    'edit': [{ type: core.Output },],
    'save': [{ type: core.Output },],
    'delete': [{ type: core.Output },],
    'upload': [{ type: core.Output },],
};
// NG2
// APP
var NovoFormExtrasModule = /** @class */ (function () {
    function NovoFormExtrasModule() {
    }
    return NovoFormExtrasModule;
}());
NovoFormExtrasModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule, NovoPipesModule, NovoButtonModule, NovoSelectModule, NovoLoadingModule, NovoDragulaModule],
                declarations: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement],
                exports: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement]
            },] },
];
/**
 * @nocollapse
 */
NovoFormExtrasModule.ctorParameters = function () { return []; };
var NovoControlGroup = /** @class */ (function () {
    /**
     * @param {?} formUtils
     * @param {?} fb
     * @param {?} ref
     * @param {?} labels
     */
    function NovoControlGroup(formUtils, fb, ref, labels) {
        this.formUtils = formUtils;
        this.fb = fb;
        this.ref = ref;
        this.labels = labels;
        this._vertical = false;
        this._remove = false;
        this._edit = false;
        this._collapsible = false;
        this.onRemove = new core.EventEmitter();
        this.onEdit = new core.EventEmitter();
        this.onAdd = new core.EventEmitter();
        this.controlLabels = [];
        this.toggled = false;
        this.disabledArray = [];
        this.currentIndex = 0;
    }
    Object.defineProperty(NovoControlGroup.prototype, "vertical", {
        /**
         * @return {?}
         */
        get: function () {
            return this._vertical;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._vertical = coercion.coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlGroup.prototype, "remove", {
        /**
         * @return {?}
         */
        get: function () {
            return this._remove;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._remove = coercion.coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlGroup.prototype, "edit", {
        /**
         * @return {?}
         */
        get: function () {
            return this._edit;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._edit = coercion.coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlGroup.prototype, "collapsible", {
        /**
         * @return {?}
         */
        get: function () {
            return this._collapsible;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._collapsible = coercion.coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlGroup.prototype, "icon", {
        /**
         * @return {?}
         */
        get: function () {
            return this._icon;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._icon = v && v.indexOf('bhi') !== -1 ? v : "bhi-" + v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoControlGroup.prototype.ngAfterContentInit = function () {
        if (!this.key) {
            throw new Error('novo-control-group must have the [key] attribute provided!');
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NovoControlGroup.prototype.ngOnChanges = function (changes) {
        var _this = this;
        var /** @type {?} */ initialValueChange = changes['initialValue'];
        // If initial value changes, clear the controls
        if (initialValueChange && initialValueChange.currentValue !== initialValueChange.previousValue && !initialValueChange.firstChange) {
            this.clearControls();
        }
        // Check for array, add a control for each value
        if (this.initialValue && Array.isArray(this.initialValue)) {
            if (this.initialValue.length !== 0) {
                this.currentIndex = 0;
                this.initialValue.forEach(function (value) { return _this.addNewControl(value); });
            }
        }
        else if (this.initialValue) {
            // If value is an object, just add one control
            this.addNewControl(this.initialValue);
        }
        // If we are horizontal, grab the labels to help with layout
        if (!this.vertical) {
            this.controlLabels = (this.controls || []).map(function (control) {
                return {
                    value: control.label,
                    width: control.width
                };
            });
            this.ref.markForCheck();
        }
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    NovoControlGroup.prototype.addNewControl = function (value) {
        var /** @type {?} */ control = (this.form.controls[this.key]);
        var /** @type {?} */ newCtrl = this.buildControl(value);
        if (control) {
            control.push(newCtrl);
        }
        else {
            this.form.addControl(this.key, this.fb.array([newCtrl]));
        }
        this.disabledArray.push({
            edit: this.checkCanEdit(this.currentIndex),
            remove: this.checkCanRemove(this.currentIndex),
        });
        if (!value) {
            this.onAdd.emit();
        }
        this.currentIndex++;
        this.ref.markForCheck();
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    NovoControlGroup.prototype.buildControl = function (value) {
        var /** @type {?} */ newControls = this.getNewControls(this.controls);
        if (value) {
            this.formUtils.setInitialValues(newControls, value);
        }
        var /** @type {?} */ ctrl = this.formUtils.toFormGroup(newControls);
        return ctrl;
    };
    /**
     * @param {?} index
     * @param {?=} emitEvent
     * @return {?}
     */
    NovoControlGroup.prototype.removeControl = function (index$$1, emitEvent) {
        if (emitEvent === void 0) { emitEvent = true; }
        var /** @type {?} */ control = (this.form.controls[this.key]);
        if (emitEvent) {
            this.onRemove.emit({ value: control.at(index$$1).value, index: index$$1 });
        }
        control.removeAt(index$$1);
        this.ref.markForCheck();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NovoControlGroup.prototype.editControl = function (index$$1) {
        var /** @type {?} */ control = (this.form.controls[this.key]);
        this.onEdit.emit({ value: control.at(index$$1).value, index: index$$1 });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlGroup.prototype.toggle = function (event) {
        Helpers.swallowEvent(event);
        if (this.collapsible) {
            this.toggled = !this.toggled;
            this.ref.markForCheck();
        }
    };
    /**
     * @return {?}
     */
    NovoControlGroup.prototype.clearControls = function () {
        var /** @type {?} */ control = (this.form.controls[this.key]);
        if (control) {
            for (var /** @type {?} */ i = control.controls.length; i >= 0; i--) {
                this.removeControl(i, false);
            }
            this.currentIndex = 0;
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NovoControlGroup.prototype.checkCanEdit = function (index$$1) {
        if (this.canEdit) {
            var /** @type {?} */ control = (this.form.controls[this.key]);
            return this.canEdit(control.at(index$$1).value, index$$1);
        }
        return true;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NovoControlGroup.prototype.checkCanRemove = function (index$$1) {
        if (this.canRemove) {
            var /** @type {?} */ control = (this.form.controls[this.key]);
            return this.canRemove(control.at(index$$1).value, index$$1);
        }
        return true;
    };
    /**
     * @param {?} controls
     * @return {?}
     */
    NovoControlGroup.prototype.getNewControls = function (controls) {
        var /** @type {?} */ ret = [];
        (this.controls || []).forEach(function (control) {
            ret.push(new BaseControl(control.__type, control));
        });
        return ret;
    };
    return NovoControlGroup;
}());
NovoControlGroup.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-control-group',
                template: "\n        <h6 class=\"novo-section-header\" *ngIf=\"label\">\n            <span (click)=\"toggle($event)\" [class.clickable]=\"collapsible\">\n                <i *ngIf=\"icon && !collapsible\" [ngClass]=\"icon\" [attr.data-automation-id]=\"'novo-control-group-icon-' + key\"></i>\n                <i *ngIf=\"collapsible\" class=\"bhi-next\" [class.toggled]=\"toggled\" [attr.data-automation-id]=\"'novo-control-group-collapse-' + key\"></i>\n                <span [attr.data-automation-id]=\"'novo-control-group-label-' + key\">{{ label }}</span>\n            </span>\n            <label class=\"novo-control-group-description\" *ngIf=\"description\" [attr.data-automation-id]=\"'novo-control-group-description-' + key\">{{ description }}</label>\n        </h6>\n        <div class=\"novo-control-group-controls\" [class.vertical]=\"vertical\" [class.horizontal]=\"!vertical\" [class.hidden]=\"collapsible && !toggled\">\n            <ng-template #defaultTemplate let-index=\"index\" let-form=\"form\" let-key=\"key\">\n                <div class=\"novo-control-group-control\">\n                    <div *ngFor=\"let c of controls\" class=\"novo-control-container\" [class.is-label]=\"c.controlType === 'read-only'\" [style.max-width.px]=\"c.width\">\n                        <novo-control [form]=\"form?.controls[key]['controls'][index]\" [control]=\"c\" [condensed]=\"!vertical || c.controlType === 'read-only'\"></novo-control>\n                    </div>\n                    <div class=\"novo-control-container last\" *ngIf=\"edit && !vertical\">\n                        <button [disabled]=\"!disabledArray[index].edit\" type=\"button\" *ngIf=\"edit && !vertical\" theme=\"icon\" icon=\"edit\" (click)=\"editControl(index)\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\" index=\"-1\"></button>\n                    </div>\n                    <div class=\"novo-control-container last\" *ngIf=\"remove && !vertical\">\n                        <button [disabled]=\"!disabledArray[index].remove\" type=\"button\" *ngIf=\"remove && !vertical\" theme=\"icon\" icon=\"delete-o\" (click)=\"removeControl(index)\" [attr.data-automation-id]=\"'novo-control-group-delete-' + key\" index=\"-1\"></button>\n                    </div>\n                </div>\n                <button [disabled]=\"!disabledArray[index].edit\" type=\"button\" *ngIf=\"edit && vertical\" theme=\"icon\" icon=\"edit\" (click)=\"editControl(index)\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\" index=\"-1\"></button>\n                <button [disabled]=\"!disabledArray[index].remove\" type=\"button\" *ngIf=\"remove && vertical\" theme=\"icon\" icon=\"delete-o\" (click)=\"removeControl(index)\" [attr.data-automation-id]=\"'novo-control-group-delete-' + key\" index=\"-1\"></button>\n            </ng-template>\n            <div class=\"novo-control-group-labels\" *ngIf=\"!vertical && form?.controls[key] && form?.controls[key]['controls'].length !== 0\">\n                <div class=\"novo-control-group-control-label\" *ngFor=\"let label of controlLabels\" [style.max-width.px]=\"label.width\">\n                    <span [attr.data-automation-id]=\"'novo-control-group-label-' + label.value\">{{ label.value }}</span>\n                </div>\n                <div class=\"novo-control-group-control-label last\" *ngIf=\"edit\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\"></div>\n                <div class=\"novo-control-group-control-label last\" *ngIf=\"remove\" [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"></div>\n            </div>\n            <ng-container *ngIf=\"form?.controls[key]\">\n                <div class=\"novo-control-group-row\" *ngFor=\"let control of form?.controls[key]['controls']; let index = index;\">\n                    <ng-template\n                        [ngTemplateOutlet]=\"rowTemplate || defaultTemplate\"\n                        [ngTemplateOutletContext]=\"{form: form, index: index, key: key, controls: controls}\">\n                    </ng-template>\n                </div>\n            </ng-container>\n            <div class=\"novo-control-group-empty\" *ngIf=\"form?.controls[key] && form?.controls[key]['controls'].length === 0\" [attr.data-automation-id]=\"'novo-control-group-empty-' + key\">\n                {{ emptyMessage }}\n            </div>\n            <p *ngIf=\"add\">\n                <button type=\"button\" theme=\"dialogue\" icon=\"add-thin\" (click)=\"addNewControl()\" [attr.data-automation-id]=\"'novo-control-group-bottom-add-' + key\" index=\"-1\">{{ add?.label }}</button>\n            </p>\n        </div>\n   ",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
NovoControlGroup.ctorParameters = function () { return [
    { type: FormUtils, },
    { type: forms.FormBuilder, },
    { type: core.ChangeDetectorRef, },
    { type: NovoLabelService, },
]; };
NovoControlGroup.propDecorators = {
    'vertical': [{ type: core.Input },],
    'add': [{ type: core.Input },],
    'remove': [{ type: core.Input },],
    'edit': [{ type: core.Input },],
    'collapsible': [{ type: core.Input },],
    'form': [{ type: core.Input },],
    'controls': [{ type: core.Input },],
    'key': [{ type: core.Input },],
    'label': [{ type: core.Input },],
    'description': [{ type: core.Input },],
    'emptyMessage': [{ type: core.Input },],
    'icon': [{ type: core.Input },],
    'initialValue': [{ type: core.Input },],
    'canEdit': [{ type: core.Input },],
    'canRemove': [{ type: core.Input },],
    'rowTemplate': [{ type: core.Input },],
    'onRemove': [{ type: core.Output },],
    'onEdit': [{ type: core.Output },],
    'onAdd': [{ type: core.Output },],
};
// NG2
// Vendor
// APP
var NovoFormModule = /** @class */ (function () {
    function NovoFormModule() {
    }
    return NovoFormModule;
}());
NovoFormModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    common.CommonModule,
                    forms.ReactiveFormsModule,
                    NovoRadioModule,
                    NovoTilesModule,
                    NovoSelectModule,
                    NovoPickerModule,
                    NovoChipsModule,
                    NovoDatePickerModule,
                    NovoTimePickerModule,
                    NovoNovoCKEditorModule,
                    NovoFormExtrasModule,
                    NovoQuickNoteModule,
                    NovoDateTimePickerModule,
                    NovoHeaderModule,
                    NovoTooltipModule,
                    NovoDragulaModule,
                    angular2TextMask.TextMaskModule,
                    NovoTipWellModule,
                    NovoModalModule,
                    NovoButtonModule,
                    NovoAceEditorModule
                ],
                declarations: [
                    NovoAutoSize, NovoControlElement, NovoDynamicFormElement, NovoFormElement,
                    NovoFieldsetElement, NovoFieldsetHeaderElement, NovoControlCustom,
                    NovoCustomControlContainerElement, ControlConfirmModal, ControlPromptModal, NovoControlGroup
                ],
                exports: [
                    NovoAutoSize, NovoDynamicFormElement, NovoControlElement, NovoFormElement,
                    NovoFieldsetHeaderElement, NovoControlCustom, NovoCustomControlContainerElement,
                    NovoControlGroup
                ],
                entryComponents: [ControlConfirmModal, ControlPromptModal]
            },] },
];
/**
 * @nocollapse
 */
NovoFormModule.ctorParameters = function () { return []; };
// NG2
// APP
var Pagination = /** @class */ (function () {
    /**
     * @param {?} labels
     */
    function Pagination(labels) {
        this.labels = labels;
        this.itemsPerPage = 10;
        this.pageChange = new core.EventEmitter();
        this.itemsPerPageChange = new core.EventEmitter();
        this.onPageChange = new core.EventEmitter();
        this.maxPagesDisplayed = 5;
    }
    Object.defineProperty(Pagination.prototype, "disablePageSelection", {
        /**
         * @return {?}
         */
        get: function () { return this.pageSelectDisabled; },
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            this.pageSelectDisabled = coercion.coerceBooleanProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Pagination.prototype.ngOnInit = function () {
        this.label = this.label || this.labels.itemsPerPage;
        this.rowOptions = this.rowOptions || this.getDefaultRowOptions();
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    Pagination.prototype.ngOnChanges = function (changes) {
        this.page = this.page || 1;
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
    };
    /**
     * @return {?}
     */
    Pagination.prototype.getDefaultRowOptions = function () {
        return [
            { value: 10, label: '10' },
            { value: 25, label: '25' },
            { value: 50, label: '50' },
            { value: 100, label: '100' }
        ];
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Pagination.prototype.onPageSizeChanged = function (event) {
        this.page = 1;
        this.itemsPerPage = event.selected;
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.pageChange.emit(this.page);
        this.itemsPerPageChange.emit(this.itemsPerPage);
        this.onPageChange.emit({
            page: this.page,
            itemsPerPage: this.itemsPerPage
        });
    };
    /**
     * @param {?} page
     * @param {?=} event
     * @return {?}
     */
    Pagination.prototype.selectPage = function (page, event) {
        if (event) {
            event.preventDefault();
        }
        this.page = page;
        this.pages = this.getPages(this.page, this.totalPages);
        this.pageChange.emit(this.page);
        this.onPageChange.emit({
            page: this.page,
            itemsPerPage: this.itemsPerPage
        });
    };
    /**
     * @return {?}
     */
    Pagination.prototype.noPrevious = function () {
        return this.page === 1;
    };
    /**
     * @return {?}
     */
    Pagination.prototype.noNext = function () {
        return this.page === this.totalPages;
    };
    /**
     * @param {?} number
     * @param {?} text
     * @param {?} isActive
     * @return {?}
     */
    Pagination.prototype.makePage = function (number, text, isActive) {
        return {
            number: number,
            text: text,
            active: isActive
        };
    };
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    Pagination.prototype.getPages = function (currentPage, totalPages) {
        var /** @type {?} */ pages = [];
        // Default page limits
        var /** @type {?} */ startPage = 1;
        var /** @type {?} */ endPage = totalPages;
        var /** @type {?} */ isMaxSized = this.maxPagesDisplayed < totalPages;
        // recompute if maxPagesDisplayed
        if (isMaxSized) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(this.maxPagesDisplayed / 2), 1);
            endPage = startPage + this.maxPagesDisplayed - 1;
            // Adjust if limit is exceeded
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = endPage - this.maxPagesDisplayed + 1;
            }
        }
        // Add page number links
        for (var /** @type {?} */ number = startPage; number <= endPage; number++) {
            var /** @type {?} */ page = this.makePage(number, number.toString(), number === currentPage);
            pages.push(page);
        }
        return pages;
    };
    /**
     * @return {?}
     */
    Pagination.prototype.calculateTotalPages = function () {
        var /** @type {?} */ totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);
        return Math.max(totalPages || 0, 1);
    };
    return Pagination;
}());
Pagination.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-pagination',
                template: "\n        <h5 class=\"rows\">{{label}}</h5>\n        <novo-select [options]=\"rowOptions\" [placeholder]=\"labels.select\" [(ngModel)]=\"itemsPerPage\" (onSelect)=\"onPageSizeChanged($event)\" data-automation-id=\"pager-select\"></novo-select>\n        <span class=\"spacer\"></span>\n        <ul class=\"pager\" data-automation-id=\"pager\">\n            <li class=\"page\" (click)=\"selectPage(page-1)\" [ngClass]=\"{'disabled': noPrevious()}\"><i class=\"bhi-previous\" data-automation-id=\"pager-previous\"></i></li>\n            <li class=\"page\" [ngClass]=\"{active: p.number==page}\" [class.disabled]=\"disablePageSelection\" *ngFor=\"let p of pages\" (click)=\"selectPage(p.number)\">{{p.text}}</li>\n            <li class=\"page\" (click)=\"selectPage(page+1)\" [ngClass]=\"{'disabled': noNext()}\"><i class=\"bhi-next\" data-automation-id=\"pager-next\"></i></li>\n        </ul>\n  "
            },] },
];
/**
 * @nocollapse
 */
Pagination.ctorParameters = function () { return [
    { type: NovoLabelService, },
]; };
Pagination.propDecorators = {
    'page': [{ type: core.Input },],
    'totalItems': [{ type: core.Input },],
    'itemsPerPage': [{ type: core.Input },],
    'rowOptions': [{ type: core.Input },],
    'label': [{ type: core.Input },],
    'disablePageSelection': [{ type: core.Input },],
    'pageChange': [{ type: core.Output },],
    'itemsPerPageChange': [{ type: core.Output },],
    'onPageChange': [{ type: core.Output },],
};
var BaseRenderer = /** @class */ (function () {
    function BaseRenderer() {
        this.data = {};
        this.value = '';
        this.meta = {};
    }
    return BaseRenderer;
}());
// NG2
// APP
var RowDetails = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} componentUtils
     */
    function RowDetails(element, componentUtils) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.value = '';
    }
    /**
     * @return {?}
     */
    RowDetails.prototype.ngOnInit = function () {
        if (this.renderer) {
            if (this.renderer.prototype instanceof BaseRenderer) {
                var /** @type {?} */ componentRef = this.componentUtils.appendNextToLocation(this.renderer, this.container);
                componentRef.instance.data = this.data;
            }
            else {
                this.value = this.renderer(this.data);
            }
        }
        else {
            // this.value = this.row[this.column.name];
        }
    };
    return RowDetails;
}());
RowDetails.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-row-details',
                template: "\n        <span #container></span>\n        <span>{{value}}</span>\n    "
            },] },
];
/**
 * @nocollapse
 */
RowDetails.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: ComponentUtils, },
]; };
RowDetails.propDecorators = {
    'container': [{ type: core.ViewChild, args: ['container', { read: core.ViewContainerRef },] },],
    'data': [{ type: core.Input },],
    'renderer': [{ type: core.Input },],
};
// NG2
// Vendor
// APP
var TableCell = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} componentUtils
     */
    function TableCell(element, componentUtils) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.value = '';
        this.element = element;
        this.componentUtils = componentUtils;
    }
    /**
     * @return {?}
     */
    TableCell.prototype.ngOnInit = function () {
        var _this = this;
        this.column._type = this.column.type || 'text';
        if (this.column.renderer) {
            if (this.column.renderer.prototype instanceof BaseRenderer) {
                this.column._type = 'custom';
                var /** @type {?} */ componentRef = this.componentUtils.appendNextToLocation(this.column.renderer, this.container);
                componentRef.instance.meta = this.column;
                componentRef.instance.data = this.row;
                componentRef.instance.value = this.form && this.hasEditor ? this.form.value[this.column.name] : this.row[this.column.name];
                // TODO - save ref to this and update in the valueChanges below!!
            }
            else {
                // TODO - wtf to do here?
                this.value = this.column.renderer(this.row);
            }
        }
        else {
            this.value = this.form && this.hasEditor ? this.form.value[this.column.name] : this.row[this.column.name];
        }
        if (this.form && this.hasEditor) {
            this.valueChangeSubscription = this.form.valueChanges
                .debounceTime(300)
                .distinctUntilChanged()
                .subscribe(function (value) {
                _this.value = value[_this.column.name];
            });
        }
    };
    /**
     * @return {?}
     */
    TableCell.prototype.ngOnDestroy = function () {
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TableCell.prototype.onClick = function (event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (this.column.onClick) {
            this.column.onClick(this.row);
        }
    };
    return TableCell;
}());
TableCell.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-table-cell',
                template: "\n        <div [ngSwitch]=\"column._type\">\n            <span #container></span>\n            <date-cell *ngSwitchCase=\"'date'\" [value]=\"value\"></date-cell>\n            <a *ngSwitchCase=\"'link'\" (click)=\"onClick($event);\">{{ value }}</a>\n            <span *ngSwitchDefault>{{ value }}</span>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
TableCell.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: ComponentUtils, },
]; };
TableCell.propDecorators = {
    'container': [{ type: core.ViewChild, args: ['container', { read: core.ViewContainerRef },] },],
    'column': [{ type: core.Input },],
    'row': [{ type: core.Input },],
    'form': [{ type: core.Input },],
    'hasEditor': [{ type: core.Input },],
};
// NG2
// APP
var TableFilter = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} renderer
     */
    function TableFilter(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.onFilterChange = new core.EventEmitter();
        this.element = element;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    TableFilter.prototype.ngOnInit = function () {
        this.ngOnChanges();
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    TableFilter.prototype.ngOnChanges = function (changes) {
        var /** @type {?} */ label = '';
        if (this.config.freetextFilter) {
            label = this.config.freetextFilter;
        }
        else if (this.config.filter) {
            label = this.config.filter;
        }
        this.renderer.setProperty(this.element, 'value', label);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TableFilter.prototype.onChangeFilter = function (event) {
        var _this = this;
        clearTimeout(this.filterThrottle);
        if (KeyCodes.ENTER === event.keyCode) {
            this.config.filter = ((event.target)).value;
            this.onFilterChange.emit({ filtering: this.config });
        }
        else {
            this.filterThrottle = setTimeout(function () {
                _this.config.filter = ((event.target)).value;
                _this.onFilterChange.emit({ filtering: _this.config });
            }, 300);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TableFilter.prototype.onClick = function (event) {
        Helpers.swallowEvent(event);
    };
    return TableFilter;
}());
TableFilter.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoTableFilter]',
            },] },
];
/**
 * @nocollapse
 */
TableFilter.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
]; };
TableFilter.propDecorators = {
    'config': [{ type: core.Input, args: ['novoTableFilter',] },],
    'onFilterChange': [{ type: core.Output },],
    'onChangeFilter': [{ type: core.HostListener, args: ['keydown', ['$event'],] },],
    'onClick': [{ type: core.HostListener, args: ['click', ['$event'],] },],
};
// NG2
// App
var ThOrderable = /** @class */ (function () {
    /**
     * @param {?} element
     */
    function ThOrderable(element) {
        this.element = element;
        this.onOrderChange = new core.EventEmitter();
        this.element = element;
    }
    Object.defineProperty(ThOrderable.prototype, "index", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ index$$1 = null;
            if (this.element.nativeElement && this.element.nativeElement.parentNode) {
                var /** @type {?} */ children = Array.prototype.slice.call(this.element.nativeElement.parentNode.children);
                index$$1 = children.indexOf(this.element.nativeElement);
            }
            return index$$1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThOrderable.prototype.ngOnInit = function () {
        if (this.column.ordering) {
            this.element.nativeElement.setAttribute('draggable', true);
            this.table = this.findTable(this.element.nativeElement);
        }
    };
    /**
     * \@name onDragStart
     * @param {?=} event
     * @return {?}
     */
    ThOrderable.prototype.onDragStart = function (event) {
        if (this.column.ordering) {
            this.element.nativeElement.classList.add('dragging');
            event.dataTransfer.effectAllowed = 'move';
            event.dataTransfer.setData('text/plain', JSON.stringify(this.column));
            this.clone = this.table.cloneNode(true);
            this.clone.style.position = 'absolute';
            this.clone.style.left = '100%';
            this.clone.style.width = '150px';
            this.deleteColumns(this.clone);
            document.body.appendChild(this.clone);
            event.dataTransfer.setDragImage(this.clone, 75, 30);
        }
    };
    /**
     * \@name deleteColumns
     * @param {?} table
     * @return {?}
     */
    ThOrderable.prototype.deleteColumns = function (table$$1) {
        // TODO: `table` should be immutable and this method should return the modified data to its caller
        if (table$$1.rows.length > 0) {
            var /** @type {?} */ allRows = table$$1.rows;
            for (var /** @type {?} */ i = 0; i < allRows.length; i++) {
                if (i > 10) {
                    table$$1.deleteRow(-1);
                }
                else {
                    var /** @type {?} */ cellLength = allRows[i].cells.length;
                    for (var /** @type {?} */ c = 0; c < cellLength; c++) {
                        if (c < this.index) {
                            allRows[i].deleteCell(0);
                        }
                        else if (c > this.index) {
                            allRows[i].deleteCell(-1);
                        }
                    }
                }
            }
        }
    };
    /**
     * @param {?} start
     * @return {?}
     */
    ThOrderable.prototype.findTable = function (start) {
        var /** @type {?} */ htmlElementNode = start;
        while (htmlElementNode) {
            htmlElementNode = htmlElementNode.parentNode;
            if (htmlElementNode && htmlElementNode.tagName.toLowerCase() === 'table') {
                return htmlElementNode;
            }
        }
        return undefined;
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThOrderable.prototype.onDrag = function (event) {
        Helpers.swallowEvent(event);
        return false;
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThOrderable.prototype.onDragEnd = function (event) {
        Helpers.swallowEvent(event);
        this.element.nativeElement.classList.remove('over');
        this.element.nativeElement.classList.remove('dragging');
        document.body.removeChild(this.clone);
        return false;
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThOrderable.prototype.onDrop = function (event) {
        Helpers.swallowEvent(event);
        this.element.nativeElement.classList.remove('over');
        var /** @type {?} */ data = JSON.parse(event.dataTransfer.getData('text/plain'));
        this.onOrderChange.emit({
            first: data,
            second: this.column
        });
        return false;
    };
    /**
     * \@name onDragOver
     * @param {?} event
     * @return {?}
     */
    ThOrderable.prototype.onDragOver = function (event) {
        Helpers.swallowEvent(event);
        event.dataTransfer.dropEffect = 'move';
        return false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThOrderable.prototype.onDragEnter = function (event) {
        this.element.nativeElement.classList.add('over');
        this.target = event.target;
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThOrderable.prototype.onDragLeave = function (event) {
        this.element.nativeElement.classList.remove('over');
    };
    return ThOrderable;
}());
ThOrderable.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoThOrderable]',
                host: {
                    '(dragstart)': 'onDragStart($event)',
                    '(dragover)': 'onDragOver($event)',
                    '(dragenter)': 'onDragEnter($event)',
                    '(dragleave)': 'onDragLeave($event)',
                    '(dragend)': 'onDragEnd($event)',
                    '(drop)': 'onDrop($event)'
                }
            },] },
];
/**
 * @nocollapse
 */
ThOrderable.ctorParameters = function () { return [
    { type: core.ElementRef, },
]; };
ThOrderable.propDecorators = {
    'column': [{ type: core.Input, args: ['novoThOrderable',] },],
    'onOrderChange': [{ type: core.Output },],
};
// NG2
var ThSortable = /** @class */ (function () {
    function ThSortable() {
        this.onSortChange = new core.EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ThSortable.prototype.onToggleSort = function (event) {
        if (event) {
            event.preventDefault();
        }
        if (this.config && this.column && this.config.sorting !== false && this.column.sorting !== false) {
            switch (this.column.sort) {
                case 'asc':
                    this.column.sort = 'desc';
                    break;
                default:
                    this.column.sort = 'asc';
                    break;
            }
            this.onSortChange.emit(this.column);
        }
    };
    return ThSortable;
}());
ThSortable.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoThSortable]',
                host: {
                    '(click)': 'onToggleSort($event)'
                }
            },] },
];
/**
 * @nocollapse
 */
ThSortable.ctorParameters = function () { return []; };
ThSortable.propDecorators = {
    'config': [{ type: core.Input, args: ['novoThSortable',] },],
    'column': [{ type: core.Input },],
    'onSortChange': [{ type: core.Output },],
};
// NG2
// APP
var DateCell = /** @class */ (function (_super) {
    __extends(DateCell, _super);
    function DateCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DateCell;
}(BaseRenderer));
DateCell.decorators = [
    { type: core.Component, args: [{
                selector: 'date-cell',
                template: "\n        <div class=\"date-cell\">\n            <label>{{ value | date }}</label>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
DateCell.ctorParameters = function () { return []; };
DateCell.propDecorators = {
    'value': [{ type: core.Input },],
};
// NG2
// APP
var PercentageCell = /** @class */ (function (_super) {
    __extends(PercentageCell, _super);
    function PercentageCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return PercentageCell;
}(BaseRenderer));
PercentageCell.decorators = [
    { type: core.Component, args: [{
                selector: 'percentage-cell',
                template: "\n        <div class=\"percentage\" *ngIf=\"value || value === 0\">{{ value | percent:'1.0-2' }}</div>\n    "
            },] },
];
/**
 * @nocollapse
 */
PercentageCell.ctorParameters = function () { return []; };
// NG2
// APP
var NovoDropdownCell = /** @class */ (function (_super) {
    __extends(NovoDropdownCell, _super);
    function NovoDropdownCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    NovoDropdownCell.prototype.ngOnInit = function () {
        // Check for and fix bad config
        if (!this.meta.dropdownCellConfig) {
            throw new Error('Missing "dropdownCellConfig" on the column setup');
        }
    };
    /**
     * @param {?} config
     * @param {?} option
     * @param {?} value
     * @return {?}
     */
    NovoDropdownCell.prototype.onClick = function (config, option, value) {
        var /** @type {?} */ callback = option.callback || config.callback;
        callback(this.data, value || option);
    };
    return NovoDropdownCell;
}(BaseRenderer));
NovoDropdownCell.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-dropdown-cell',
                template: "\n        <novo-dropdown appendToBody=\"true\" parentScrollSelector=\".table-container\" containerClass=\"novo-table-dropdown-cell\">\n            <button type=\"button\" theme=\"secondary\" icon=\"collapse\" inverse>\n                <span data-automation-id=\"novo-dropdown-cell-value\">{{ value }}</span>\n            </button>\n            <list>\n                <ng-container *ngFor=\"let config of meta.dropdownCellConfig; let i = index\">\n                    <dropdown-item-header *ngIf=\"config.category\">{{ config.category }}</dropdown-item-header>\n                    <item *ngFor=\"let option of config.options\" (action)=\"onClick(config, option, option.value)\" [class.active]=\"(option || option.value) === value\">\n                        <span [attr.data-automation-id]=\"option.label || option\">{{ option.label || option }}</span> <i *ngIf=\"(option || option.value) === value\" class=\"bhi-check\"></i>\n                    </item>\n                    <hr *ngIf=\"i < meta.dropdownCellConfig.length - 1\"/>\n                </ng-container>\n            </list>\n        </novo-dropdown>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoDropdownCell.ctorParameters = function () { return []; };
NovoDropdownCell.propDecorators = {
    'meta': [{ type: core.Input },],
    'value': [{ type: core.Input },],
};
// NG2
var NovoTableKeepFilterFocus = /** @class */ (function () {
    /**
     * @param {?} element
     */
    function NovoTableKeepFilterFocus(element) {
        this.element = element;
    }
    /**
     * @return {?}
     */
    NovoTableKeepFilterFocus.prototype.ngAfterViewInit = function () {
        this.element.nativeElement.focus();
    };
    return NovoTableKeepFilterFocus;
}());
NovoTableKeepFilterFocus.decorators = [
    { type: core.Directive, args: [{
                selector: '[keepFilterFocused]'
            },] },
];
/**
 * @nocollapse
 */
NovoTableKeepFilterFocus.ctorParameters = function () { return [
    { type: core.ElementRef, },
]; };
// NG2
var NovoTableActionsElement = /** @class */ (function () {
    function NovoTableActionsElement() {
    }
    return NovoTableActionsElement;
}());
NovoTableActionsElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-table-actions',
                template: '<ng-content></ng-content>'
            },] },
];
/**
 * @nocollapse
 */
NovoTableActionsElement.ctorParameters = function () { return []; };
// NG2
var NovoTableFooterElement = /** @class */ (function () {
    function NovoTableFooterElement() {
    }
    return NovoTableFooterElement;
}());
NovoTableFooterElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-table-footer',
                template: '<ng-content></ng-content>'
            },] },
];
/**
 * @nocollapse
 */
NovoTableFooterElement.ctorParameters = function () { return []; };
// NG2
var NovoTableHeaderElement = /** @class */ (function () {
    function NovoTableHeaderElement() {
    }
    return NovoTableHeaderElement;
}());
NovoTableHeaderElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-table-header',
                template: '<ng-content></ng-content>'
            },] },
];
/**
 * @nocollapse
 */
NovoTableHeaderElement.ctorParameters = function () { return []; };
// NG2
// APP
var NovoTableExtrasModule = /** @class */ (function () {
    function NovoTableExtrasModule() {
    }
    return NovoTableExtrasModule;
}());
NovoTableExtrasModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    NovoSelectModule,
                    NovoDropdownModule,
                    NovoButtonModule
                ],
                declarations: [
                    NovoTableHeaderElement,
                    NovoTableFooterElement,
                    NovoTableActionsElement,
                    NovoTableKeepFilterFocus,
                    Pagination,
                    RowDetails,
                    TableCell,
                    TableFilter,
                    ThOrderable,
                    ThSortable,
                    DateCell,
                    PercentageCell,
                    NovoDropdownCell
                ],
                exports: [
                    NovoTableHeaderElement,
                    NovoTableFooterElement,
                    NovoTableActionsElement,
                    NovoTableKeepFilterFocus,
                    Pagination,
                    RowDetails,
                    TableCell,
                    TableFilter,
                    ThOrderable,
                    ThSortable,
                    DateCell,
                    PercentageCell,
                    NovoDropdownCell
                ],
                entryComponents: [
                    DateCell,
                    PercentageCell,
                    NovoDropdownCell
                ]
            },] },
];
/**
 * @nocollapse
 */
NovoTableExtrasModule.ctorParameters = function () { return []; };
var CollectionEvent = /** @class */ (function () {
    /**
     * @param {?=} type
     * @param {?=} data
     */
    function CollectionEvent(type, data) {
        if (type === void 0) { type = 'Collection.REFRESH'; }
        if (data === void 0) { data = []; }
        this.type = '';
        this.data = [];
        this.type = type;
        this.data = data;
    }
    return CollectionEvent;
}());
CollectionEvent.REFRESH = 'Collection.REFRESH';
CollectionEvent.ADD = 'Collection.ADD';
CollectionEvent.REMOVE = 'Collection.REMOVE';
CollectionEvent.REMOVE_ALL = 'Collection.REMOVE_ALL';
CollectionEvent.REPLACE = 'Collection.REPLACE';
CollectionEvent.INVALIDATE_ALL = 'Collection.INVALIDATE_ALL';
CollectionEvent.SORT = 'Collection.SORT';
CollectionEvent.FILTER = 'Collection.FILTER';
CollectionEvent.CHANGE = 'Collection.CHANGE';
CollectionEvent.CURRENTPAGE_CHANGE = 'Collection.CURRENTPAGE_CHANGE';
CollectionEvent.PAGESIZE_CHANGE = 'Collection.PAGESIZE_CHANGE';
CollectionEvent.NUMBEROFPAGES_CHANGE = 'Collection.NUMBEROFPAGES_CHANGE';
// Ng
/**
 * Base Class for all Collection based data providers
 *
 * @export
 * \@class DataProvider
 * \@example
 *  var dp:DataProvider = new DataProvider();
 *  dp.addItem({label:"Item 1"});
 *  dp.addItem({label:"Item 2"});
 *  dp.addItem({label:"Item 3"});
 *  dp.addItem({label:"Item 4"});
 *  var myList:List = new List();
 *  myList.dataProvider = dp;
 */
var ArrayCollection = /** @class */ (function () {
    /**
     * @param {?=} source
     */
    function ArrayCollection(source) {
        if (source === void 0) { source = []; }
        this.dataChange = new core.EventEmitter();
        this.source = [];
        this.editData = [];
        this.isEditing = false;
        this.filterData = [];
        this._filter = {};
        this._sort = [];
        this.source = source;
        this.editData = this.copy(this.source);
        this.filterData = this.source.slice();
    }
    Object.defineProperty(ArrayCollection.prototype, "length", {
        /**
         * @return {?}
         */
        get: function () {
            return this.filterData.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayCollection.prototype, "total", {
        /**
         * @return {?}
         */
        get: function () {
            return this.filterData.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayCollection.prototype, "list", {
        /**
         * @return {?}
         */
        get: function () {
            return this.filterData;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ArrayCollection.prototype.isEmpty = function () {
        return this.length <= 0 && !this.isLoading() && !this.hasErrors();
    };
    /**
     * @return {?}
     */
    ArrayCollection.prototype.hasErrors = function () {
        return false;
    };
    /**
     * @return {?}
     */
    ArrayCollection.prototype.isLoading = function () {
        return false;
    };
    /**
     * @return {?}
     */
    ArrayCollection.prototype.isFiltered = function () {
        return (Object.keys(this._filter).length > 0);
    };
    /**
     * Method to switch the isEditingflag for the data source
     * @return {?}
     */
    ArrayCollection.prototype.edit = function () {
        this.isEditing = true;
        this.editData = this.copy(this.source);
    };
    /**
     * Method to leave edit mode and reset source
     * @return {?}
     */
    ArrayCollection.prototype.undo = function () {
        this.isEditing = false;
        this.source = this.copy(this.editData);
        this.refresh();
    };
    /**
     * Method to leave edit mode and save editData
     * @return {?}
     */
    ArrayCollection.prototype.commit = function () {
        this.isEditing = false;
        this.source = this.filterData.slice();
        this.refresh();
    };
    /**
     * Appends an item to the end of the data provider.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     * @return {?}
     */
    ArrayCollection.prototype.addItem = function (item) {
        this.isEditing ? this.editData.push(item) : this.source.push(item);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
        this.refresh();
    };
    /**
     * Adds a new item to the data provider at the specified index.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    ArrayCollection.prototype.addItemAt = function (item, index$$1) {
        this.isEditing ? this.editData.splice(index$$1, 0, item) : this.source.splice(index$$1, 0, item);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
        this.refresh();
    };
    /**
     *  Appends multiple items to the end of the DataProvider and dispatches a CollectionEvent.ADD event.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} items
     * @return {?}
     */
    ArrayCollection.prototype.addItems = function (items) {
        this.isEditing ? (_d = this.editData).push.apply(_d, items) : (_e = this.source).push.apply(_e, items);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, items));
        this.refresh();
        var _d, _e;
    };
    /**
     * Adds several items to the data provider at the specified index and dispatches a CollectionEvent.ADD event.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} items
     * @param {?} index
     * @return {?}
     */
    ArrayCollection.prototype.addItemsAt = function (items, index$$1) {
        this.isEditing ? (_d = this.editData).splice.apply(_d, [index$$1, 0].concat(items)) : (_e = this.source).splice.apply(_e, [index$$1, 0].concat(items));
        var _d, _e;
    };
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    ArrayCollection.prototype.clone = function () {
        return new ArrayCollection(this.isEditing ? this.copy(this.editData) : this.copy(this.source));
    };
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} array
     * @return {?}
     */
    ArrayCollection.prototype.copy = function (array) {
        return Helpers.deepClone(array);
    };
    /**
     * Concatenates the specified items to the end of the current data provider.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} items
     * @return {?}
     */
    ArrayCollection.prototype.concat = function (items) {
        this.addItems(items);
    };
    /**
     * Returns the item at the specified index.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} index
     * @return {?}
     */
    ArrayCollection.prototype.getItemAt = function (index$$1) {
        return this.isEditing ? this.editData[index$$1] : this.source[index$$1];
    };
    /**
     *  Returns the index of the specified item.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     * @return {?}
     */
    ArrayCollection.prototype.getItemIndex = function (item) {
        return this.isEditing ? this.editData.indexOf(item) : this.source.indexOf(item);
    };
    /**
     * Invalidates all the data items that the DataProvider contains and dispatches a CollectionEvent.INVALIDATE_ALL event.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    ArrayCollection.prototype.invalidate = function () {
        this.onDataChange(new CollectionEvent(CollectionEvent.INVALIDATE_ALL));
    };
    /**
     * Appends the specified data into the data that the data provider contains and removes any duplicate items.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} newData
     * @return {?}
     */
    ArrayCollection.prototype.merge = function (newData) {
        for (var _d = 0, newData_1 = newData; _d < newData_1.length; _d++) {
            var obj = newData_1[_d];
            var /** @type {?} */ existing = ~this.getItemIndex(obj);
            if (existing) {
                this.replaceItem(obj, existing);
            }
            else {
                this.addItem(obj);
            }
        }
    };
    /**
     * Removes all items from the data provider and dispatches a CollectionEvent.REMOVE_ALL event.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    ArrayCollection.prototype.removeAll = function () {
        this.source = [];
        this.editData = [];
        this.filterData = [];
        this.onDataChange(new CollectionEvent(CollectionEvent.REMOVE_ALL, []));
        this.refresh();
    };
    /**
     * Removes the specified item from the data provider and dispatches a CollectionEvent.REMOVE event.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     * @return {?}
     */
    ArrayCollection.prototype.removeItem = function (item) {
        var /** @type {?} */ index$$1 = this.getItemIndex(item);
        return this.removeItemAt(index$$1);
    };
    /**
     * Removes the item at the specified index and dispatches a CollectionEvent.REMOVE event.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} index
     * @return {?}
     */
    ArrayCollection.prototype.removeItemAt = function (index$$1) {
        var /** @type {?} */ success = !!(this.source.splice(index$$1, 1));
        this.refresh();
        return success;
    };
    /**
     * Replaces an existing item with a new item and dispatches a CollectionEvent.REPLACE event.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} newItem
     * @param {?} oldItem
     * @return {?}
     */
    ArrayCollection.prototype.replaceItem = function (newItem, oldItem) {
        var /** @type {?} */ index$$1 = this.getItemIndex(oldItem);
        if (index$$1 >= 0) {
            this.replaceItemAt(newItem, index$$1);
        }
    };
    /**
     * Replaces the item at the specified index and dispatches a CollectionEvent.REPLACE event.
     *
     *
     * \@memberOf ArrayCollection
     * @param {?} newItem
     * @param {?} index
     * @return {?}
     */
    ArrayCollection.prototype.replaceItemAt = function (newItem, index$$1) {
        this.filterData.splice(index$$1, 1, newItem);
    };
    Object.defineProperty(ArrayCollection.prototype, "sort", {
        /**
         * Sorts the items that the data provider contains and dispatches a CollectionEvent.SORT event.
         *
         * \@memberOf ArrayCollection
         * @return {?} null
         *
         */
        get: function () {
            return this._sort;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._sort = value;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sorts the items that the data provider contains by the specified field and dispatches a CollectionEvent.SORT event.
     *
     * \@memberOf ArrayCollection
     * @param {?} fieldName
     * @param {?=} reverse
     * @return {?} null
     *
     */
    ArrayCollection.prototype.sortOn = function (fieldName, reverse) {
        if (reverse === void 0) { reverse = false; }
        this.filterData = this.filterData.sort(Helpers.sortByField(fieldName, reverse));
        this.onDataChange(new CollectionEvent(CollectionEvent.SORT));
        return this.filterData;
    };
    Object.defineProperty(ArrayCollection.prototype, "filter", {
        /**
         * @return {?}
         */
        get: function () {
            return this._filter;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._filter = value;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fieldName
     * @param {?=} value
     * @return {?}
     */
    ArrayCollection.prototype.filterOn = function (fieldName, value) {
        if (value === void 0) { value = null; }
        this.filterData = this.filterData.filter(Helpers.filterByField(fieldName, value));
        return this.filterData;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ArrayCollection.prototype.onDataChange = function (event) {
        this.dataChange.emit(event);
    };
    /**
     * @return {?}
     */
    ArrayCollection.prototype.refresh = function () {
        this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
        for (var _d = 0, _e = this._sort.reverse(); _d < _e.length; _d++) {
            var item = _e[_d];
            this.sortOn(item.field, item.reverse);
        }
        for (var /** @type {?} */ key in this._filter) {
            if (key) {
                this.filterOn(key, this._filter[key]);
            }
        }
        this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
    };
    /**
     * Creates an Array any representation of the data that the data provider contains.
     *
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    ArrayCollection.prototype.toArray = function () {
        return this.isEditing ? this.editData : this.source;
    };
    /**
     * @return {?}
     */
    ArrayCollection.prototype.toJSON = function () {
        return this.isEditing ? this.editData : this.source;
    };
    return ArrayCollection;
}());
var PagedArrayCollection = /** @class */ (function (_super) {
    __extends(PagedArrayCollection, _super);
    /**
     * @param {?=} source
     */
    function PagedArrayCollection(source) {
        if (source === void 0) { source = []; }
        var _this = _super.call(this, source) || this;
        _this._page = 1;
        _this._numberOfPages = 1;
        _this._pageSize = 10;
        return _this;
    }
    Object.defineProperty(PagedArrayCollection.prototype, "numberOfPages", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ result = this.source.length / this.pageSize;
            result = Math.ceil(result);
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagedArrayCollection.prototype, "page", {
        /**
         * @return {?}
         */
        get: function () {
            return this._page;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._page = value;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagedArrayCollection.prototype, "pageSize", {
        /**
         * @return {?}
         */
        get: function () {
            return this._pageSize;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._pageSize = value;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PagedArrayCollection.prototype.next = function () {
        if (this.page === this.numberOfPages) {
            return this.page;
        }
        this.page++;
        return this.page;
    };
    /**
     * @return {?}
     */
    PagedArrayCollection.prototype.prev = function () {
        if (this._page === 1) {
            return this.page;
        }
        this.page--;
        return this.page;
    };
    /**
     * @return {?}
     */
    PagedArrayCollection.prototype.first = function () {
        if (this.page === 1) {
            return this.page;
        }
        this.page = 1;
        return this.page;
    };
    /**
     * @return {?}
     */
    PagedArrayCollection.prototype.last = function () {
        if (this.page === this.numberOfPages) {
            return this.page;
        }
        this.page = this.numberOfPages;
        return this.page;
    };
    /**
     * @return {?}
     */
    PagedArrayCollection.prototype.refresh = function () {
        this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
        for (var _d = 0, _e = this._sort.reverse(); _d < _e.length; _d++) {
            var item = _e[_d];
            this.sortOn(item.field, item.reverse);
        }
        for (var /** @type {?} */ key in this._filter) {
            if (key) {
                this.filterOn(key, this._filter[key]);
            }
        }
        if (this.page >= 0) {
            var /** @type {?} */ start = (this.page - 1) * this.pageSize;
            var /** @type {?} */ end = start + this.pageSize;
            var /** @type {?} */ result = this.filterData.slice(start, end);
            this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, result));
        }
        else {
            this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
        }
    };
    return PagedArrayCollection;
}(ArrayCollection));
// NG2
// Vendor
// APP
var NovoTableMode = {};
NovoTableMode.VIEW = 1;
NovoTableMode.EDIT = 2;
NovoTableMode[NovoTableMode.VIEW] = "VIEW";
NovoTableMode[NovoTableMode.EDIT] = "EDIT";
var NovoTableElement = /** @class */ (function () {
    /**
     * @param {?} labels
     * @param {?} formUtils
     * @param {?} builder
     */
    function NovoTableElement(labels, formUtils, builder) {
        this.labels = labels;
        this.formUtils = formUtils;
        this.builder = builder;
        this.config = {};
        this.skipSortAndFilterClear = false;
        this.mode = NovoTableMode.VIEW;
        this.editable = false;
        this.rowIdentifier = 'id';
        this.name = 'table';
        this.onRowClick = new core.EventEmitter();
        this.onRowSelect = new core.EventEmitter();
        this.onTableChange = new core.EventEmitter();
        this._rows = [];
        this.selected = [];
        this.activeId = 0;
        this.master = false;
        this.expandAll = false;
        this.indeterminate = false;
        this.lastPage = 0;
        this.selectedPageCount = 0;
        this.showSelectAllMessage = false;
        this.pagedData = [];
        // Map to keep track of what dropdowns are toggled
        // Used to properly *ngIf the <list> so that the keepFilterFocused Directive
        // will properly fire the ngAfterViewInit event
        this.toggledDropdownMap = {};
        this.NovoTableMode = NovoTableMode;
        this.tableForm = new forms.FormGroup({});
        this.footers = [];
        this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
        this.loading = false;
    }
    Object.defineProperty(NovoTableElement.prototype, "rows", {
        /**
         * @return {?}
         */
        get: function () {
            return this._rows;
        },
        /**
         * @param {?} rows
         * @return {?}
         */
        set: function (rows) {
            this.dataProvider = rows;
            if (rows && rows.length > 0) {
                this.setupColumnDefaults();
            }
            // this is a temporary/hacky fix until async dataloading is handled within the table
            if (!this.skipSortAndFilterClear) {
                this.clearAllSortAndFilters();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoTableElement.prototype, "dataProvider", {
        /**
         * @return {?}
         */
        get: function () {
            return this._dataProvider;
        },
        /**
         * @param {?} dp
         * @return {?}
         */
        set: function (dp) {
            var _this = this;
            this._dataProvider = Array.isArray(dp) ? new PagedArrayCollection(dp) : dp;
            this._dataProvider.dataChange.debounceTime(100).subscribe(function (event) {
                switch (event.type) {
                    case CollectionEvent.CHANGE:
                        _this._rows = event.data;
                        // Setup form
                        _this.tableForm = _this.builder.group({
                            rows: _this.builder.array([]),
                        });
                        // Remove all selection on sort change if selection is on
                        if (_this.config.rowSelectionStyle === 'checkbox') {
                            _this.pagedData = event.data;
                            _this.pageSelected = _this.pagedData.filter(function (r) { return r._selected; });
                            _this.rowSelectHandler();
                        }
                        // Find that columns we might need to sum up via the footer
                        var /** @type {?} */ columnsToSum_1 = [];
                        var /** @type {?} */ columnSums_1 = {};
                        if (_this.config.footers) {
                            _this.config.footers.forEach(function (config) {
                                columnsToSum_1.push.apply(columnsToSum_1, config.columns);
                            });
                            // Only have unique columns, filter out duplicates
                            columnsToSum_1 = columnsToSum_1.filter(function (item, index$$1, array) { return array.indexOf(item) === index$$1; });
                        }
                        // Make a form for each row
                        var /** @type {?} */ tableFormRows_1 = (_this.tableForm.controls['rows']);
                        _this._rows.forEach(function (row, index$$1) {
                            var /** @type {?} */ rowControls = [];
                            row.controls = {};
                            row._editing = {};
                            row._expanded = _this.config.expandAll;
                            row.rowId = _this._rows.length;
                            _this.columns.forEach(function (column) {
                                // Use the control passed or use a ReadOnlyControl so that the form has the values
                                var /** @type {?} */ control = column.editorConfig ? ControlFactory.create(column.editorType, column.editorConfig) : new ReadOnlyControl({ key: column.name });
                                row.controls[column.name] = control;
                                rowControls.push(control);
                            });
                            _this.formUtils.setInitialValues(rowControls, row, false);
                            tableFormRows_1.push(_this.formUtils.toFormGroup(rowControls));
                            // Setup the total footer if configured
                            // Array of keys to total
                            if (columnsToSum_1.length !== 0) {
                                columnsToSum_1.forEach(function (column) {
                                    if (Helpers.isBlank(columnSums_1[column])) {
                                        columnSums_1[column] = 0;
                                    }
                                    columnSums_1[column] += row[column];
                                });
                            }
                        });
                        if (_this.mode === NovoTableMode.EDIT) {
                            _this.setTableEdit();
                        }
                        // Setup the footers (if any)
                        if (_this.config.footers) {
                            _this.footers = [];
                            _this.config.footers.forEach(function (footerConfig, footerConfigIndex) {
                                var /** @type {?} */ footer = {};
                                footer[footerConfig.labelColumn] = footerConfig.label;
                                footerConfig.columns.forEach(function (column) {
                                    if (footerConfig.method === 'AVG' && _this._rows.length !== 0) {
                                        footer[column] = columnSums_1[column] / _this._rows.length;
                                    }
                                    else {
                                        footer[column] = columnSums_1[column];
                                    }
                                });
                                _this.footers.push(footer);
                            });
                        }
                        break;
                    default:
                        break;
                }
            });
            if (this.config.paging) {
                this._dataProvider.page = this.config.paging.current;
                this._dataProvider.pageSize = this.config.paging.itemsPerPage;
            }
            else {
                // Paging turned off, return basically all of the data
                this._dataProvider.page = 1;
                this._dataProvider.pageSize = 500;
            }
            if (dp && dp.length > 0) {
                this.setupColumnDefaults();
            }
            this._dataProvider.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoTableElement.prototype, "editing", {
        /**
         * @return {?}
         */
        get: function () {
            return this.mode === NovoTableMode.EDIT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoTableElement.prototype, "formValue", {
        /**
         * @return {?}
         */
        get: function () {
            return this.tableForm.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @param {?} column
     * @return {?}
     */
    NovoTableElement.prototype.onDropdownToggled = function (event, column) {
        this.toggledDropdownMap[column] = event;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoTableElement.prototype.onPageChange = function (event) {
        //this.dataProvider.page = event.page;
        //this.dataProvider.pageSize = event.itemsPerPage;
    };
    /**
     * @param {?} option
     * @return {?}
     */
    NovoTableElement.prototype.getOptionDataAutomationId = function (option) {
        if (!Helpers.isBlank(option.value)) {
            return option.value;
        }
        return option;
    };
    /**
     * \@name setupColumnDefaults
     * @return {?}
     */
    NovoTableElement.prototype.setupColumnDefaults = function () {
        var _this = this;
        // Check columns for cell option types
        this.columns.forEach(function (column) {
            if (column && column.type) {
                switch (column.type) {
                    case 'date':
                        // Set options based on dates if there are none
                        column.options = column.options || _this.getDefaultOptions(column);
                        break;
                    default:
                        break;
                }
            }
        });
    };
    /**
     * \@name ngDoCheck
     * @return {?}
     */
    NovoTableElement.prototype.ngDoCheck = function () {
        if (this.config.paging && this.config.paging.current !== this.lastPage) {
            this.rowSelectHandler();
            this.showSelectAllMessage = false;
        }
        this.lastPage = this.config.paging ? this.config.paging.current : 1;
    };
    /**
     * \@name getPageStart
     * @return {?}
     */
    NovoTableElement.prototype.getPageStart = function () {
        return this.config.paging ? (this.dataProvider.page - 1) * this.dataProvider.pageSize : 0;
    };
    /**
     * \@name getPageEnd
     * @return {?}
     */
    NovoTableElement.prototype.getPageEnd = function () {
        return this.config.paging && this.dataProvider.pageSize > -1 ? this.getPageStart() + this.dataProvider.pageSize : this.rows.length;
    };
    /**
     * \@name onFilterClick
     * @param {?} column
     * @param {?} filter
     * @return {?}
     */
    NovoTableElement.prototype.onFilterClick = function (column, filter$$1) {
        if (filter$$1.range && !column.calendarShow) {
            column.calenderShow = true;
            return;
        }
        if (Array.isArray(column.filter) && column.multiple) {
            if (~column.filter.indexOf(filter$$1)) {
                // Remove filter
                column.filter.splice(column.filter.indexOf(filter$$1), 1);
                if (filter$$1.range) {
                    column.calenderShow = false;
                }
                if (column.filter.length === 0) {
                    column.filter = null;
                }
            }
            else {
                // Add filter
                column.filter.push(filter$$1);
            }
        }
        else if (column.multiple) {
            column.filter = new Array();
            column.filter.push(Helpers.isBlank(filter$$1.value) ? filter$$1 : filter$$1.value);
        }
        else {
            column.filter = Helpers.isBlank(filter$$1.value) ? filter$$1 : filter$$1.value;
        }
        this.onFilterChange();
    };
    /**
     * \@name onFilterClear
     * @param {?} column
     * @return {?}
     */
    NovoTableElement.prototype.onFilterClear = function (column) {
        var _this = this;
        setTimeout(function () {
            column.filter = null;
            column.freetextFilter = null;
            _this.onFilterChange();
            if (column.originalOptions) {
                column.options = column.originalOptions;
            }
        });
    };
    /**
     * @return {?}
     */
    NovoTableElement.prototype.clearAllSortAndFilters = function () {
        if (this.config.filtering) {
            this.columns.forEach(function (column) {
                column.filter = null;
                column.sort = null;
            });
        }
    };
    /**
     * \@name onFilterChange
     *
     * \@description This method updates the row data to reflect the active filters.
     * @return {?}
     */
    NovoTableElement.prototype.onFilterChange = function () {
        if (this.config.filtering) {
            // Array of filters
            var /** @type {?} */ filters = this.columns.filter(function (col) { return !Helpers.isEmpty(col.filter); });
            if (filters.length) {
                var /** @type {?} */ query = {};
                var _loop_6 = function (column) {
                    if (Helpers.isFunction(column.match)) {
                        query[column.name] = function (value, record) {
                            return column.match(record, column.filter);
                        };
                    }
                    else if (column.preFilter && Helpers.isFunction(column.preFilter)) {
                        query = Object.assign({}, query, column.preFilter(this_2.escapeCharacters(column.filter)));
                    }
                    else if (Array.isArray(column.filter)) {
                        // The filters are an array (multi-select), check value
                        var /** @type {?} */ options = column.filter;
                        // We have an array of {value: '', labels: ''}
                        if (options[0].value || options[0].label) {
                            options = column.filter.map(function (opt) { return opt.value; });
                        }
                        query[column.name] = { any: options };
                    }
                    else if (column.type && column.type === 'date') {
                        if (column.filter.startDate && column.filter.endDate) {
                            query[column.name] = {
                                min: dateFns.startOfDay(column.filter.startDate),
                                max: dateFns.startOfDay(dateFns.addDays(dateFns.startOfDay(column.filter.endDate), 1)),
                            };
                        }
                        else {
                            query[column.name] = {
                                min: column.filter.min ? dateFns.addDays(dateFns.startOfToday(), column.filter.min) : dateFns.startOfToday(),
                                max: column.filter.max ? dateFns.addDays(dateFns.startOfTomorrow(), column.filter.max) : dateFns.startOfTomorrow(),
                            };
                        }
                    }
                    else {
                        query[column.name] = column.filter;
                    }
                };
                var this_2 = this;
                for (var _d = 0, filters_1 = filters; _d < filters_1.length; _d++) {
                    var column = filters_1[_d];
                    _loop_6(/** @type {?} */ column);
                }
                if (Helpers.isFunction(this.config.filtering)) {
                    this.config.filtering(query);
                }
                else {
                    this._dataProvider.filter = query;
                }
            }
            else {
                this._dataProvider.filter = {};
            }
            // Trickle down to keep sort
            // this.onSortChange(this.currentSortColumn);
            this.fireTableChangeEvent();
            // If paging, reset page
            if (this.config.paging) {
                this.config.paging.current = 1;
            }
            // Remove all selection on sort change if selection is on
            if (this.config.rowSelectionStyle === 'checkbox') {
                this.selectAll(false);
            }
        }
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    NovoTableElement.prototype.escapeCharacters = function (filter$$1) {
        if (typeof filter$$1 === 'string') {
            return filter$$1.replace(/'/g, "''");
        }
        return filter$$1;
    };
    /**
     * \@name isFilterActive
     * \@description
     * @param {?} column
     * @param {?} filter
     *
     * @return {?}
     */
    NovoTableElement.prototype.isFilterActive = function (column, filter$$1) {
        //TODO: This needs to be refactored
        var /** @type {?} */ isActive = false;
        if (column && !Helpers.isBlank(column.filter) && !Helpers.isBlank(filter$$1)) {
            if (Array.isArray(column.filter)) {
                if (typeof filter$$1 !== 'string') {
                    isActive = column.filter.some(function (item) {
                        return item.label === filter$$1.label;
                    });
                }
                else {
                    isActive = column.filter.includes(filter$$1);
                }
            }
            else {
                if (typeof column.filter === typeof filter$$1) {
                    isActive = column.filter === filter$$1;
                }
                else {
                    isActive = column.filter === filter$$1.value;
                }
            }
        }
        return isActive;
    };
    /**
     * \@name onSortChange
     * @param {?} column
     * @return {?}
     */
    NovoTableElement.prototype.onSortChange = function (column) {
        var _this = this;
        this.currentSortColumn = column;
        var /** @type {?} */ sortedColumns = this.columns.filter(function (thisColumn) {
            return thisColumn.sort && thisColumn !== _this.currentSortColumn;
        });
        for (var _d = 0, sortedColumns_1 = sortedColumns; _d < sortedColumns_1.length; _d++) {
            var sortedColumn = sortedColumns_1[_d];
            sortedColumn.sort = null;
        }
        if (column) {
            if (Helpers.isFunction(this.config.sorting)) {
                this.config.sorting();
            }
            else if (Helpers.isFunction(column.preSort)) {
                this._dataProvider.sort = [].concat(column.preSort(column));
            }
            else {
                this._dataProvider.sort = [{ field: column.compare || column.name, reverse: column.sort === 'desc' }];
            }
        }
        // Fire table change event
        // this.fireTableChangeEvent();
        // If paging, reset page
        if (this.config.paging) {
            this.config.paging.current = 1;
        }
        // Remove all selection on sort change if selection is on
        if (this.config.rowSelectionStyle === 'checkbox') {
            this.selectAll(false);
        }
    };
    /**
     * \@name fireTableChangeEvent
     * @return {?}
     */
    NovoTableElement.prototype.fireTableChangeEvent = function () {
        // Construct a table change object
        var /** @type {?} */ onTableChange = {};
        var /** @type {?} */ filters = this.columns.filter(function (col) { return col.filter && col.filter.length; });
        onTableChange.filter = filters.length ? filters : false;
        onTableChange.sort = this.currentSortColumn ? this.currentSortColumn : false;
        onTableChange.rows = this.rows;
        // Emit event
        this.onTableChange.emit(onTableChange);
    };
    /**
     * \@name findColumnIndex
     * @param {?} value
     * @return {?}
     */
    NovoTableElement.prototype.findColumnIndex = function (value) {
        for (var /** @type {?} */ i = 0; i < this.columns.length; i += 1) {
            if (this.columns[i].name === value) {
                return i;
            }
        }
        return null;
    };
    /**
     * \@name onOrderChange
     * @param {?} event
     * @return {?}
     */
    NovoTableElement.prototype.onOrderChange = function (event) {
        var /** @type {?} */ oldIndex = this.findColumnIndex(event.first.name);
        var /** @type {?} */ newIndex = this.findColumnIndex(event.second.name);
        this.columns.splice(newIndex, 0, this.columns.splice(oldIndex, 1)[0]);
        this.onSortChange(this.currentSortColumn);
    };
    /**
     * \@name selectPage
     * @param {?} expanded
     * @return {?}
     */
    NovoTableElement.prototype.expandAllOnPage = function (expanded) {
        this.config.expandAll = !expanded;
        for (var _d = 0, _e = this.dataProvider.list; _d < _e.length; _d++) {
            var row = _e[_d];
            row._expanded = this.config.expandAll;
        }
    };
    /**
     * \@name selectPage
     * @return {?}
     */
    NovoTableElement.prototype.selectPage = function () {
        if (!this.master) {
            this.selectAll(false);
            // Only show the select all message when there is only one new page selected at a time
            this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
            this.showSelectAllMessage = false;
        }
        else {
            this.indeterminate = false;
            //this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
            for (var _d = 0, _e = this.pagedData; _d < _e.length; _d++) {
                var row = _e[_d];
                row._selected = this.master;
            }
            this.selected = this.dataProvider.list.filter(function (r) { return r._selected; });
            this.pageSelected = this.pagedData.filter(function (r) { return r._selected; });
            this.emitSelected(this.selected);
            // Only show the select all message when there is only one new page selected at a time
            this.selectedPageCount++;
            this.showSelectAllMessage = this.selectedPageCount === 1 && this.selected.length !== this.dataProvider.total;
        }
    };
    /**
     * \@name selectAll
     * @param {?} value
     * @return {?}
     */
    NovoTableElement.prototype.selectAll = function (value) {
        this.master = value;
        this.indeterminate = false;
        for (var _d = 0, _e = this.dataProvider.list; _d < _e.length; _d++) {
            var row = _e[_d];
            row._selected = value;
        }
        this.selected = value ? this.dataProvider.list : [];
        this.showSelectAllMessage = false;
        this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
        this.rowSelectHandler();
    };
    /**
     * \@name rowSelectHandler
     * @return {?}
     */
    NovoTableElement.prototype.rowSelectHandler = function () {
        // this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
        this.pageSelected = this.pagedData.filter(function (r) { return r._selected; });
        this.selected = this.dataProvider.list.filter(function (r) { return r._selected; });
        if (this.pageSelected.length === 0) {
            this.master = false;
            this.indeterminate = false;
        }
        else if (this.pageSelected.length === this.pagedData.length) {
            this.master = true;
            this.indeterminate = false;
        }
        else {
            this.master = false;
            this.indeterminate = true;
            // Breaking the selected page count
            this.showSelectAllMessage = false;
            this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
        }
        this.emitSelected(this.selected);
    };
    /**
     * \@name emitSelected
     * @param {?} selected
     * @return {?}
     */
    NovoTableElement.prototype.emitSelected = function (selected) {
        this.onRowSelect.emit({ length: selected.length, selected: selected });
    };
    /**
     * \@name rowClickHandler
     * @param {?} row
     * @return {?}
     */
    NovoTableElement.prototype.rowClickHandler = function (row) {
        if (this.config.rowSelect) {
            this.activeId = row.id || 0;
            this.onRowClick.emit(row);
        }
    };
    /**
     * \@name setDateOptions
     * @param {?} column
     * @return {?}
     */
    NovoTableElement.prototype.getDefaultOptions = function (column) {
        // TODO - needs to come from label service - https://github.com/bullhorn/novo-elements/issues/116
        var /** @type {?} */ opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        if (column && column.range) {
            opts.push({
                label: this.labels.customDateRange,
                range: true,
            });
        }
        return opts;
    };
    /**
     * @param {?} column
     * @param {?} event
     * @return {?}
     */
    NovoTableElement.prototype.onCalenderSelect = function (column, event) {
        var _this = this;
        setTimeout(function () {
            if (event.startDate && event.endDate) {
                _this.onFilterChange();
            }
        }, 10);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NovoTableElement.prototype.onFilterKeywords = function (config) {
        if (config && config.filtering && config.filtering.freetextFilter) {
            var /** @type {?} */ filterKeywords_1 = config.filtering.freetextFilter.toLowerCase();
            if (!config.filtering.originalOptions) {
                config.filtering.originalOptions = config.filtering.options;
            }
            var /** @type {?} */ newOptions = config.filtering.originalOptions.filter(function (option) {
                var /** @type {?} */ value = option && option.label ? option.label : option;
                value = value.toLowerCase() ? value.toLowerCase() : value;
                if (value === filterKeywords_1) {
                    return true;
                }
                else if (~value.indexOf(filterKeywords_1) || ~value.indexOf(filterKeywords_1)) {
                    return true;
                }
                return false;
            });
            config.filtering.options = newOptions;
            config.filtering.filter = config.filtering.freetextFilter;
        }
        else {
            config.filtering.options = config.filtering.originalOptions;
        }
        this.onFilterChange();
    };
    /**
     * \@name setTableEdit
     * \@description Sets the Table into EDIT mode, based on the row/column passed you can enter in a few states
     * (1) setTableEdit() - don't pass any to put the FULL table into edit mode
     * (2) setTableEdit(1) - pass only row to put that FULL row of the table into edit mode
     * (3) setTableEdit(1, 1) - pass row and column to put that column of the row of the table into edit mode
     * \@memberOf NovoTableElement
     * @param {?=} rowNumber
     * @param {?=} columnNumber
     * @return {?}
     */
    NovoTableElement.prototype.setTableEdit = function (rowNumber, columnNumber) {
        var _this = this;
        this.mode = NovoTableMode.EDIT;
        this._dataProvider.edit();
        this._rows.forEach(function (row, rowIndex) {
            row._editing = row._editing || {};
            _this.columns.forEach(function (column, columnIndex) {
                if (column.viewOnly) {
                    row._editing[column.name] = false;
                }
                else if (Helpers.isEmpty(rowNumber) && Helpers.isEmpty(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else if (!Helpers.isEmpty(rowNumber) && rowIndex === Number(rowNumber) && Helpers.isEmpty(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else if (!Helpers.isEmpty(rowNumber) && !Helpers.isEmpty(columnNumber) && rowIndex === Number(rowNumber) && columnIndex === Number(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else {
                    row._editing[column.name] = false;
                }
            });
        });
    };
    /**
     * \@name leaveEditMode
     * \@description Leaves edit mode for the Table and puts everything back to VIEW only
     * \@memberOf NovoTableElement
     * @param {?} cancel
     * @return {?}
     */
    NovoTableElement.prototype.leaveEditMode = function (cancel) {
        var _this = this;
        this.mode = NovoTableMode.VIEW;
        this._rows.forEach(function (row) {
            row._editing = row._editing || {};
            _this.columns.forEach(function (column) {
                row._editing[column.name] = false;
            });
        });
        if (cancel) {
            this._dataProvider.undo();
        }
        else {
            this._dataProvider.commit();
        }
        this.hideToastMessage();
    };
    /**
     * \@name addEditableRow
     * \@description Adds a new row into the table to be edited, can be called from a local reference of the table in your template
     * \@memberOf NovoTableElement
     * @param {?=} defaultValue
     * @return {?}
     */
    NovoTableElement.prototype.addEditableRow = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = {}; }
        var /** @type {?} */ tableFormRows = (this.tableForm.controls['rows']);
        var /** @type {?} */ row = {};
        var /** @type {?} */ rowControls = [];
        row.controls = {};
        row._editing = {};
        row.rowId = this._rows.length + 1;
        this.columns.forEach(function (column) {
            // Use the control passed or use a ReadOnlyControl so that the form has the values
            var /** @type {?} */ control = column.editorConfig ? ControlFactory.create(column.editorType, column.editorConfig) : new ReadOnlyControl({ key: column.name });
            control.value = null; // remove copied column value
            row.controls[column.name] = control;
            row._editing[column.name] = !column.viewOnly;
            rowControls.push(control);
        });
        this.formUtils.setInitialValues(rowControls, defaultValue, false);
        tableFormRows.push(this.formUtils.toFormGroup(rowControls));
        this._rows.push(row);
    };
    /**
     * \@name validateAndGetUpdatedData
     * \@description Validates the Form inside of the Table, if there are errors it will display/return the errors for each row.
     * If there are no errors, then it will return ONLY the changed data for each row, the data returned will be in the form:
     * { id: ID_OF_RECORD, key: value } -- data that was updated
     * { id: undefined, key: value } -- data that was added
     * \@memberOf NovoTableElement
     * @return {?}
     */
    NovoTableElement.prototype.validateAndGetUpdatedData = function () {
        var _this = this;
        if (this.tableForm && this.tableForm.controls && this.tableForm.controls['rows']) {
            var /** @type {?} */ changedRows_1 = [];
            var /** @type {?} */ errors_1 = [];
            // Go over the FormArray's controls
            ((this.tableForm.controls['rows'])).controls.forEach(function (formGroup, index$$1) {
                var /** @type {?} */ changedRow = null;
                var /** @type {?} */ error = null;
                // Go over the form group controls
                Object.keys(formGroup.controls).forEach(function (key) {
                    var /** @type {?} */ control = formGroup.controls[key];
                    // Handle value changing
                    if (control && control.dirty && !control.errors) {
                        if (!changedRow) {
                            // Append the ID, so we have some key to save against
                            changedRow = {};
                            if (_this._rows[index$$1].id) {
                                changedRow.id = _this._rows[index$$1].id;
                            }
                        }
                        // If dirty, grab value off the form
                        changedRow[key] = _this.tableForm.value['rows'][index$$1][key];
                        // Set value back to row (should be already done via the server call, but do it anyway)
                        _this._rows[index$$1][key] = changedRow[key];
                    }
                    else if (control && control.errors) {
                        // Handle errors
                        if (!error) {
                            error = {};
                        }
                        error[key] = control.errors;
                        control.markAsDirty();
                        control.markAsTouched();
                    }
                });
                if (changedRow) {
                    changedRows_1.push(changedRow);
                }
                if (error) {
                    errors_1.push({ errors: error, row: _this._rows[index$$1], index: index$$1 });
                }
            });
            if (errors_1.length === 0) {
                return { changed: changedRows_1 };
            }
            return { errors: errors_1 };
        }
    };
    /**
     * \@name cancelEditing
     * \@description Refresh the data provider and leave edit mode
     * \@memberOf NovoTableElement
     * @return {?}
     */
    NovoTableElement.prototype.cancelEditing = function () {
        this.leaveEditMode(true);
    };
    /**
     * \@name saveChanges
     * \@description Refresh the data provider and leave edit mode
     * \@memberOf NovoTableElement
     * @return {?}
     */
    NovoTableElement.prototype.saveChanges = function () {
        this.leaveEditMode(false);
    };
    /**
     * \@name displayToastMessage
     * \@description Displays a toast message inside of the table
     * \@memberOf NovoTableElement
     * @param {?} toast
     * @param {?=} hideDelay
     * @return {?}
     */
    NovoTableElement.prototype.displayToastMessage = function (toast, hideDelay) {
        var _this = this;
        this.loading = false;
        this.toast = toast;
        if (hideDelay) {
            setTimeout(function () { return _this.hideToastMessage(); }, hideDelay);
        }
    };
    /**
     * \@name hideToastMessage
     * \@description Force hide the toast message
     * \@memberOf NovoTableElement
     * @return {?}
     */
    NovoTableElement.prototype.hideToastMessage = function () {
        var _this = this;
        this.toast = null;
        // Hack to make the table display properly after hiding the toast
        this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = true;
        setTimeout(function () {
            _this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
        });
    };
    /**
     * \@name toggleLoading
     * \@description display the loading overlay on the table
     * \@memberOf NovoTableElement
     * @param {?} show
     * @return {?}
     */
    NovoTableElement.prototype.toggleLoading = function (show) {
        this.loading = show;
    };
    /**
     * \@name isColumnHidden
     * \@description hide a column in edit or view mode
     * \@memberOf NovoTableElement
     * @param {?} column
     * @return {?}
     */
    NovoTableElement.prototype.isColumnHidden = function (column) {
        return this.editing ? !!column.hideColumnOnEdit : !!column.hideColumnOnView;
    };
    return NovoTableElement;
}());
NovoTableElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-table',
                host: {
                    '[attr.theme]': 'theme',
                    '[class.editing]': 'mode === NovoTableMode.EDIT',
                    '[class.novo-table-loading]': 'loading',
                },
                // directives: [],
                template: "\n        <header *ngIf=\"columns.length\">\n            <ng-content select=\"novo-table-header\"></ng-content>\n            <div class=\"header-actions\">\n                <novo-pagination *ngIf=\"config.paging && !(dataProvider.isEmpty() && !dataProvider.isFiltered())\"\n                                 [rowOptions]=\"config.paging.rowOptions\"\n                                 [disablePageSelection]=\"config.paging.disablePageSelection\"\n                                 [(page)]=\"dataProvider.page\"\n                                 [(itemsPerPage)]=\"dataProvider.pageSize\"\n                                 [totalItems]=\"dataProvider.total\"\n                                 (onPageChange)=\"onPageChange($event)\">\n                </novo-pagination>\n                <ng-content select=\"novo-table-actions\"></ng-content>\n            </div>\n        </header>\n        <div class=\"novo-table-loading-overlay\" *ngIf=\"loading || dataProvider.isLoading()\">\n            <novo-loading></novo-loading>\n        </div>\n        <novo-toast *ngIf=\"toast\" [theme]=\"toast?.theme\" [icon]=\"toast?.icon\" [message]=\"toast?.message\"></novo-toast>\n        <div class=\"table-container\" *ngIf=\"!grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast\">\n            <novo-form hideHeader=\"true\" [form]=\"tableForm\">\n                <table class=\"table table-striped dataTable\" [class.table-details]=\"config.hasDetails\" role=\"grid\">\n                <!-- skipSortAndFilterClear is a hack right now, will be removed once Canvas is refactored -->\n                <thead *ngIf=\"columns.length && (!dataProvider.isEmpty() || dataProvider.isFiltered() || skipSortAndFilterClear || editing)\">\n                    <tr role=\"row\">\n                        <!-- DETAILS -->\n                        <th class=\"row-actions\" *ngIf=\"config.hasDetails\">\n                            <button theme=\"icon\" icon=\"next\" (click)=\"expandAllOnPage(config.expandAll)\" *ngIf=\"!config.expandAll\" data-automation-id=\"expand-all\"></button>\n                            <button theme=\"icon\" icon=\"sort-desc\" (click)=\"expandAllOnPage(config.expandAll)\" *ngIf=\"config.expandAll\" data-automation-id=\"collapse-all\"></button>\n                        </th>\n                        <!-- CHECKBOX -->\n                        <th class=\"row-actions checkbox mass-action\" *ngIf=\"config.rowSelectionStyle === 'checkbox'\">\n                            <novo-checkbox [(ngModel)]=\"master\" [indeterminate]=\"pageSelected.length > 0 && pageSelected.length < pagedData.length\" (ngModelChange)=\"selectPage($event)\" data-automation-id=\"select-all-checkbox\" [tooltip]=\"master ? labels.deselectAll : labels.selectAllOnPage\" tooltipPosition=\"right\"></novo-checkbox>\n                        </th>\n                        <!-- TABLE HEADERS -->\n                        <th *ngFor=\"let column of columns\" [ngClass]=\"{ 'mass-action': config?.rowSelectionStyle === 'checkbox', 'actions': column?.actions?.items?.length > 0, 'preview': column?.name === 'preview' }\" [novoThOrderable]=\"column\" (onOrderChange)=\"onOrderChange($event)\" [hidden]=\"isColumnHidden(column)\">\n                            <div class=\"th-group\" [attr.data-automation-id]=\"column.id || column.name\" *ngIf=\"!column.hideHeader\">\n                                <!-- LABEL & SORT ARROWS -->\n                                <div class=\"th-title\" [ngClass]=\"(config.sorting !== false && column.sorting !== false) ? 'sortable' : ''\" [novoThSortable]=\"config\" [column]=\"column\" (onSortChange)=\"onSortChange($event)\">\n                                    <label>{{ column.title || column.label }}</label>\n                                    <div class=\"table-sort-icons\" tooltipPosition=\"bottom\" [tooltip]=\"labels.sort\" [ngClass]=\"column.sort || ''\" *ngIf=\"config.sorting !== false && column.sorting !== false\">\n                                        <i class=\"bhi-arrow-up\"></i>\n                                        <i class=\"bhi-arrow-down\"></i>\n                                    </div>\n                                </div>\n                                <!-- FILTER DROP-DOWN -->\n                                <novo-dropdown side=\"right\" *ngIf=\"config.filtering !== false && column.filtering !== false\" class=\"column-filters\" (toggled)=\"onDropdownToggled($event, column.name)\" appendToBody=\"true\" parentScrollSelector=\".table-container\" containerClass=\"table-dropdown\">\n                                    <button type=\"button\" theme=\"icon\" icon=\"filter\" tooltipPosition=\"bottom\" [tooltip]=\"labels.filters\" [class.filtered]=\"column.filter || column.filter===false\"></button>\n                                    <!-- FILTER OPTIONS LIST -->\n                                    <list *ngIf=\"(column?.options?.length || column?.originalOptions?.length) && column?.type !== 'date' && toggledDropdownMap[column.name]\">\n                                        <item class=\"filter-search\">\n                                            <div class=\"header\">\n                                                <span>{{ labels.filters }}</span>\n                                                <button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"onFilterClear(column)\" *ngIf=\"column.filter || column.filter===false\">{{ labels.clear }}</button>\n                                            </div>\n                                            <input type=\"text\" *ngIf=\"!!column.allowCustomTextOption\" [attr.id]=\"column.name + '-input'\" [novoTableFilter]=\"column\" (onFilterChange)=\"onFilterKeywords($event)\" [(ngModel)]=\"column.freetextFilter\" keepFilterFocused/>\n                                        </item>\n                                        <item [ngClass]=\"{ active: isFilterActive(column, option) }\" *ngFor=\"let option of column.options\" (click)=\"onFilterClick(column, option)\" [attr.data-automation-id]=\"getOptionDataAutomationId(option)\">\n                                            <span>{{ option?.label || option }}</span> <i class=\"bhi-check\" *ngIf=\"isFilterActive(column, option)\"></i>\n                                        </item>\n                                    </list>\n                                    <!-- FILTER SEARCH INPUT -->\n                                    <list *ngIf=\"!(column?.options?.length || column?.originalOptions?.length) && toggledDropdownMap[column.name]\">\n                                        <item class=\"filter-search\">\n                                            <div class=\"header\">\n                                                <span>{{ labels.filters }}</span>\n                                                <button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"onFilterClear(column)\" *ngIf=\"column.filter\">{{ labels.clear }}</button>\n                                            </div>\n                                            <input type=\"text\" [attr.id]=\"column.name + '-input'\" [novoTableFilter]=\"column\" (onFilterChange)=\"onFilterChange($event)\" [(ngModel)]=\"column.filter\" keepFilterFocused/>\n                                        </item>\n                                    </list>\n                                    <!-- FILTER DATE OPTIONS -->\n                                    <list *ngIf=\"column?.options?.length && column?.type === 'date' && toggledDropdownMap[column.name]\">\n                                        <item class=\"filter-search\" *ngIf=\"!column.calenderShow\">\n                                            <div class=\"header\">\n                                                <span>{{ labels.filters }}</span>\n                                                <button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"onFilterClear(column)\" *ngIf=\"column.filter\">{{ labels.clear }}</button>\n                                            </div>\n                                        </item>\n                                        <item [ngClass]=\"{ active: isFilterActive(column, option) }\" *ngFor=\"let option of column.options\" (click)=\"onFilterClick(column, option)\" [keepOpen]=\"option.range\" [hidden]=\"column.calenderShow\" [attr.data-automation-id]=\"(option?.label || option)\">\n                                            {{ option?.label || option }} <i class=\"bhi-check\" *ngIf=\"isFilterActive(column, option)\"></i>\n                                        </item>\n                                        <div class=\"calender-container\" [hidden]=\"!column.calenderShow\">\n                                            <div (click)=\"column.calenderShow=false\"><i class=\"bhi-previous\"></i>{{ labels.backToPresetFilters }}</div>\n                                            <novo-date-picker #rangePicker (onSelect)=\"onCalenderSelect(column, $event)\" [(ngModel)]=\"column.filter\" range=\"true\"></novo-date-picker>\n                                        </div>\n                                    </list>\n                                </novo-dropdown>\n                            </div>\n                        </th>\n                    </tr>\n                </thead>\n                <!-- TABLE DATA -->\n                <tbody *ngIf=\"!dataProvider.isEmpty() || editing\">\n                    <tr class=\"table-selection-row\" *ngIf=\"config.rowSelectionStyle === 'checkbox' && showSelectAllMessage && config.selectAllEnabled\" data-automation-id=\"table-selection-row\">\n                        <td colspan=\"100%\">\n                            {{labels.selectedRecords(selected.length)}} <a (click)=\"selectAll(true)\" data-automation-id=\"all-matching-records\">{{labels.totalRecords(dataProvider.total)}}</a>\n                        </td>\n                    </tr>\n                    <ng-template ngFor let-row=\"$implicit\" let-i=\"index\" [ngForOf]=\"rows\">\n                        <tr class=\"table-row\" [ngClass]=\"row.customClass || ''\" [id]=\"name + '-' + row[rowIdentifier]\" [attr.data-automation-id]=\"row.id\" (click)=\"rowClickHandler(row)\" [class.active]=\"row.id === activeId\">\n                            <td class=\"row-actions\" *ngIf=\"config.hasDetails\">\n                                <button theme=\"icon\" icon=\"next\" (click)=\"row._expanded=!row._expanded\" *ngIf=\"!row._expanded\"></button>\n                                <button theme=\"icon\" icon=\"sort-desc\" (click)=\"row._expanded=!row._expanded\" *ngIf=\"row._expanded\"></button>\n                            </td>\n                            <td class=\"row-actions checkbox\" *ngIf=\"config.rowSelectionStyle === 'checkbox'\">\n                                <novo-checkbox [(ngModel)]=\"row._selected\" (ngModelChange)=\"rowSelectHandler(row)\" data-automation-id=\"select-row-checkbox\"></novo-checkbox>\n                            </td>\n                            <td *ngFor=\"let column of columns\" [attr.data-automation-id]=\"column.id || column.name\" [class.novo-form-row]=\"editable\" [hidden]=\"isColumnHidden(column)\">\n                                <novo-table-cell *ngIf=\"row._editing && !row._editing[column.name]\" [hasEditor]=\"editable\" [column]=\"column\" [row]=\"row\" [form]=\"tableForm.controls.rows.controls[i]\"></novo-table-cell>\n                                <novo-control *ngIf=\"row._editing && row._editing[column.name]\" condensed=\"true\" [form]=\"tableForm.controls.rows.controls[i]\" [control]=\"row.controls[column.name]\"></novo-control>\n                            </td>\n                        </tr>\n                        <tr class=\"details-row\" *ngIf=\"config.hasDetails\" [hidden]=\"!row._expanded\" [attr.data-automation-id]=\"'details-row-'+row.id\">\n                            <td class=\"row-actions\"></td>\n                            <td [attr.colspan]=\"config.rowSelectionStyle === 'checkbox' ? (columns.length + 1) : columns.length\">\n                                <novo-row-details [data]=\"row\" [renderer]=\"config.detailsRenderer\"></novo-row-details>\n                            </td>\n                        </tr>\n                    </ng-template>\n                </tbody>\n                <!-- NO TABLE DATA PLACEHOLDER -->\n                <tbody class=\"table-message\" *ngIf=\"dataProvider.isEmpty() && !dataProvider.isFiltered() && !editing\" data-automation-id=\"empty-table\">\n                    <tr>\n                        <td colspan=\"100%\">\n                            <div #emptymessage><ng-content select=\"[table-empty-message]\"></ng-content></div>\n                            <div class=\"table-empty-message\" *ngIf=\"emptymessage.childNodes.length == 0\">\n                                <h4><i class=\"bhi-search-question\"></i> {{ labels.emptyTableMessage }}</h4>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n                <!-- NO MATCHING RECORDS -->\n                <tbody class=\"table-message\" *ngIf=\"dataProvider.isEmpty() && dataProvider.isFiltered()\" data-automation-id=\"empty-table\">\n                    <tr>\n                        <td colspan=\"100%\">\n                            <div #nomatchmessage><ng-content select=\"[table-no-matching-records-message]\"></ng-content></div>\n                            <div class=\"no-matching-records\" *ngIf=\"nomatchmessage.childNodes.length == 0\">\n                                <h4><i class=\"bhi-search-question\"></i> {{ labels.noMatchingRecordsMessage }}</h4>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n                <!-- TABLE DATA ERROR PLACEHOLDER -->\n                <tbody class=\"table-message\" *ngIf=\"dataProvider.hasErrors()\" data-automation-id=\"table-errors\">\n                    <tr>\n                        <td colspan=\"100%\">\n                            <div #errormessage><ng-content select=\"[table-error-message]\"></ng-content></div>\n                            <div class=\"table-error-message\" *ngIf=\"errormessage.childNodes.length == 0\">\n                                <h4><i class=\"bhi-caution\"></i> {{ labels.erroredTableMessage }}</h4>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n                <tfoot *ngIf=\"!config.footers\" [ngClass]=\"dataProvider.length % 2 == 0 ? 'odd' : 'even'\">\n                    <tr>\n                        <td colspan=\"100%\">\n                            <ng-content select=\"novo-table-footer\"></ng-content>\n                        </td>\n                    </tr>\n                </tfoot>\n                <tfoot *ngFor=\"let footer of footers;let i = index;\" class=\"novo-table-total-footer\">\n                    <tr>\n                        <td *ngFor=\"let column of columns\" [attr.data-automation-id]=\"(column.id || column.name) + '-total-' + i\">{{ footer[column.name] }}</td>\n                    </tr>\n                </tfoot>\n            </table>\n        </novo-form>\n    </div>\n    ",
            },] },
];
/**
 * @nocollapse
 */
NovoTableElement.ctorParameters = function () { return [
    { type: NovoLabelService, },
    { type: FormUtils, },
    { type: forms.FormBuilder, },
]; };
NovoTableElement.propDecorators = {
    'config': [{ type: core.Input },],
    'columns': [{ type: core.Input },],
    'theme': [{ type: core.Input },],
    'skipSortAndFilterClear': [{ type: core.Input },],
    'mode': [{ type: core.Input },],
    'editable': [{ type: core.Input },],
    'rowIdentifier': [{ type: core.Input },],
    'name': [{ type: core.Input },],
    'onRowClick': [{ type: core.Output },],
    'onRowSelect': [{ type: core.Output },],
    'onTableChange': [{ type: core.Output },],
    'rows': [{ type: core.Input },],
    'dataProvider': [{ type: core.Input },],
};
// NG2
// Vendor
// APP
var NovoTableModule = /** @class */ (function () {
    function NovoTableModule() {
    }
    return NovoTableModule;
}());
NovoTableModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    NovoFormModule,
                    NovoTableExtrasModule,
                    NovoToastModule,
                    NovoButtonModule,
                    NovoTooltipModule,
                    NovoDropdownModule,
                    NovoLoadingModule,
                    NovoDatePickerModule,
                    NovoFormExtrasModule,
                    angular2TextMask.TextMaskModule
                ],
                declarations: [NovoTableElement],
                exports: [NovoTableElement]
            },] },
];
/**
 * @nocollapse
 */
NovoTableModule.ctorParameters = function () { return []; };
// NG2
//APP
var NOVO_VALUE_TYPE = {};
NOVO_VALUE_TYPE.DEFAULT = 0;
NOVO_VALUE_TYPE.ENTITY_LIST = 1;
NOVO_VALUE_TYPE.LINK = 2;
NOVO_VALUE_TYPE.INTERNAL_LINK = 3;
NOVO_VALUE_TYPE[NOVO_VALUE_TYPE.DEFAULT] = "DEFAULT";
NOVO_VALUE_TYPE[NOVO_VALUE_TYPE.ENTITY_LIST] = "ENTITY_LIST";
NOVO_VALUE_TYPE[NOVO_VALUE_TYPE.LINK] = "LINK";
NOVO_VALUE_TYPE[NOVO_VALUE_TYPE.INTERNAL_LINK] = "INTERNAL_LINK";
var NOVO_VALUE_THEME = {};
NOVO_VALUE_THEME.DEFAULT = 0;
NOVO_VALUE_THEME.MOBILE = 1;
NOVO_VALUE_THEME[NOVO_VALUE_THEME.DEFAULT] = "DEFAULT";
NOVO_VALUE_THEME[NOVO_VALUE_THEME.MOBILE] = "MOBILE";
var NovoValueElement = /** @class */ (function () {
    function NovoValueElement() {
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.NOVO_VALUE_TYPE = NOVO_VALUE_TYPE;
        this.NOVO_VALUE_THEME = NOVO_VALUE_THEME;
        this.customClass = '';
    }
    /**
     * @return {?}
     */
    NovoValueElement.prototype.ngOnInit = function () {
        if (Helpers.isEmpty(this.meta)) {
            this.meta = {
                label: ''
            };
        }
    };
    Object.defineProperty(NovoValueElement.prototype, "isMobile", {
        /**
         * @return {?}
         */
        get: function () {
            return this.theme === NOVO_VALUE_THEME.MOBILE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} icon
     * @return {?}
     */
    NovoValueElement.prototype.iconClass = function (icon) {
        var /** @type {?} */ iconClass = '';
        if (icon && icon.iconCls) {
            iconClass = "bhi-" + icon.iconCls + " actions";
            if (icon.onIconClick) {
                iconClass = iconClass + " clickable";
            }
            return iconClass;
        }
        return iconClass;
    };
    Object.defineProperty(NovoValueElement.prototype, "isDefault", {
        /**
         * @return {?}
         */
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoValueElement.prototype, "showLabel", {
        /**
         * @return {?}
         */
        get: function () {
            return this.type === NOVO_VALUE_TYPE.INTERNAL_LINK || this.type === NOVO_VALUE_TYPE.LINK || this.type === NOVO_VALUE_TYPE.ENTITY_LIST;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoValueElement.prototype, "showIcon", {
        /**
         * @return {?}
         */
        get: function () {
            return this.meta && this.meta.icons && this.meta.icons.length && !Helpers.isEmpty(this.data);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} icon
     * @return {?}
     */
    NovoValueElement.prototype.onValueClick = function (icon) {
        if (icon.onIconClick && typeof icon.onIconClick === 'function') {
            icon.onIconClick(this.data, this.meta);
        }
    };
    /**
     * @return {?}
     */
    NovoValueElement.prototype.openLink = function () {
        if (this.meta && this.meta.openLink && typeof this.meta.openLink === 'function') {
            this.meta.openLink(this.data, this.meta);
        }
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoValueElement.prototype.ngOnChanges = function (changes) {
        if (this.meta && this.isLinkField(this.meta, this.data)) {
            this.type = NOVO_VALUE_TYPE.LINK;
            // Make sure the value has a protocol, otherwise the URL will be relative
            var /** @type {?} */ hasProtocol = new RegExp('^(http|https)://', 'i');
            if (!hasProtocol.test(this.data)) {
                this.url = "http://" + this.data;
            }
            else {
                this.url = this.data;
            }
        }
        else if (this.isEntityList(this.meta.type)) {
            this.type = NOVO_VALUE_TYPE.ENTITY_LIST;
        }
        else if (this.isHTMLField(this.meta)) {
            this.customClass = this.meta.customClass ? this.meta.customClass : '';
            if (this.meta.stripHTML && this.data) {
                this.data = this.data.replace(/<(.|\n)+?>/gi, '');
            }
        }
        else if (this.meta && this.meta.associatedEntity) {
            switch (this.meta.associatedEntity.entity) {
                case 'ClientCorporation':
                case 'ClientContact':
                case 'Candidate':
                case 'JobOrder':
                case 'Placement':
                    this.type = NOVO_VALUE_TYPE.INTERNAL_LINK;
                    break;
                default:
                    break;
            }
        }
    };
    /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    NovoValueElement.prototype.isLinkField = function (field, data) {
        var /** @type {?} */ linkFields = ['companyURL', 'clientCorporationCompanyURL'];
        var /** @type {?} */ regex = new RegExp('^(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})$', 'gi');
        var /** @type {?} */ isURL = Helpers.isString(data) && regex.exec(data.trim());
        return (linkFields.indexOf(field.name) > -1) || !!isURL || field.type === NOVO_VALUE_TYPE.LINK;
    };
    /**
     * @param {?} type
     * @return {?}
     */
    NovoValueElement.prototype.isEntityList = function (type) {
        return type === 'TO_MANY';
    };
    /**
     * @param {?} meta
     * @return {?}
     */
    NovoValueElement.prototype.isHTMLField = function (meta) {
        return meta.dataSpecialization === 'HTML' || meta.inputType === 'TEXTAREA';
    };
    return NovoValueElement;
}());
NovoValueElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-value',
                template: "\n        <ng-container [ngSwitch]=\"type\">\n            <div class=\"value-outer\" *ngIf=\"showLabel\">\n                <label>{{ meta.label }}</label>\n                <a *ngSwitchCase=\"NOVO_VALUE_TYPE.INTERNAL_LINK\" class=\"value\" (click)=\"openLink()\" [innerHTML]=\"data | render : meta\"></a>\n                <a *ngSwitchCase=\"NOVO_VALUE_TYPE.LINK\" class=\"value\" [href]=\"url\" target=\"_blank\" [innerHTML]=\"data | render : meta\"></a>\n                <novo-entity-list *ngSwitchCase=\"NOVO_VALUE_TYPE.ENTITY_LIST\" [data]='data' [meta]=\"meta\"></novo-entity-list>\n            </div>\n            <div *ngSwitchDefault class=\"value-outer\" [ngClass]=\"customClass\">\n                <label>{{ meta.label }}</label>\n                <div *ngIf=\"isDefault\" class=\"value\" [innerHTML]=\"data | render : meta\"></div>\n            </div>\n            <div class=\"actions\" *ngIf=\"showIcon\">\n                <i *ngFor=\"let icon of meta.icons\" [class]=\"iconClass(icon)\" (click)=\"onValueClick(icon)\"></i>\n            </div>\n        </ng-container>\n    "
            },] },
];
/**
 * @nocollapse
 */
NovoValueElement.ctorParameters = function () { return []; };
NovoValueElement.propDecorators = {
    'data': [{ type: core.Input },],
    'meta': [{ type: core.Input },],
    'theme': [{ type: core.Input },],
    'isMobile': [{ type: core.HostBinding, args: ['class.mobile',] },],
};
// NG2
// APP
/**
 * \@class RenderPipe
 * \@classdesc
 * Renders data appropriately based on the data type found in Meta
 * All data types defined by bullhorn should be supported:
 *
 * - **String**: trims value and returns
 * - **Integer**: return value
 * - **Double**: return value fixed to 2 decimals
 * - **BigDecimal**: return value fixed to 2 decimals
 * - **Address**: only city and/or state returned
 * - **Address1**: only city and/or state returned
 * - **AddressWithoutCountry**: only city and/or state returned
 * - **Currency**: put a $ in front
 * - **Percentage**: divide by 100 fix to 2 decimals place and return
 * - **Options**: returns the appropriate 'label' for the 'value' from 'options'
 * - **Array**: returns list comma separated
 * - **DateTime**: formats the date
 * - **TimeStamp**: formats the date
 * - **ToOne**: return the entity specific name (ie. name, firstName lastName, title, ...)
 * - **ToMany**: return an array of the entity specific names (ie. name, firstName lastName, title, ...)
 *
 * \@example
 * ```
 * {{ expression | render:field }}
 * ```
 */
var RenderPipe = /** @class */ (function () {
    /**
     * @param {?} changeDetector
     * @param {?} sanitizationService
     * @param {?} labels
     */
    function RenderPipe(changeDetector, sanitizationService, labels) {
        this.changeDetector = changeDetector;
        this.sanitizationService = sanitizationService;
        this.labels = labels;
    }
    /**
     * @param {?} objectOne
     * @param {?} objectTwo
     * @return {?}
     */
    RenderPipe.prototype.equals = function (objectOne, objectTwo) {
        if (objectOne === objectTwo) {
            return true;
        }
        if (objectOne === null || objectTwo === null) {
            return false;
        }
        if (objectOne !== objectOne && objectTwo !== objectTwo) {
            return true;
        }
        var /** @type {?} */ t1 = typeof objectOne;
        var /** @type {?} */ t2 = typeof objectTwo;
        var /** @type {?} */ length;
        var /** @type {?} */ key;
        var /** @type {?} */ keySet;
        if (t1 === t2 && t1 === 'object') {
            if (Array.isArray(objectOne)) {
                if (!Array.isArray(objectTwo)) {
                    return false;
                }
                length = objectOne.length;
                if (length === objectTwo.length) {
                    for (key = 0; key < length; key++) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            else {
                if (Array.isArray(objectTwo)) {
                    return false;
                }
                keySet = Object.create(null);
                for (key in objectOne) {
                    if (objectOne[key]) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                        keySet[key] = true;
                    }
                }
                for (key in objectTwo) {
                    if (!(key in keySet) && typeof objectTwo[key] !== 'undefined') {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    /**
     * @param {?} item
     * @param {?} entity
     * @return {?}
     */
    RenderPipe.prototype.getEntityLabel = function (item, entity) {
        switch (entity) {
            case 'CorporateUser':
            case 'ClientContact':
            case 'ClientContact1':
            case 'ClientContact2':
            case 'ClientContact3':
            case 'ClientContact4':
            case 'ClientContact5':
            case 'Lead':
            case 'Candidate':
            case 'Person':
                return ((item.firstName || '') + " " + (item.lastName || '')).trim();
            case 'ClientCorporation':
            case 'ClientCorporation1':
            case 'ClientCorporation2':
            case 'ClientCorporation3':
            case 'ClientCorporation4':
            case 'ClientCorporation5':
                return ("" + (item.name || '')).trim();
            case 'JobOrder':
            case 'JobOrder1':
            case 'JobOrder2':
            case 'JobOrder3':
            case 'JobOrder4':
            case 'JobOrder5':
            case 'Opportunity':
                return ("" + (item.title || '')).trim();
            case 'Placement':
                var /** @type {?} */ label = '';
                if (item.candidate) {
                    label = (item.candidate.firstName + " " + item.candidate.lastName).trim();
                }
                if (item.jobOrder) {
                    label = (label + " - " + item.jobOrder.title).trim();
                }
                return label;
            default:
                return '';
        }
    };
    /**
     * Define the fields to set or retrieve for the given entity. Getter and Setter methods will automagically
     * be set up on the entity once the fields are defined.
     * \@name fields
     * \@memberOf Entity#
     * @param {?} value
     * @param {?} args
     * @return {?} text
     */
    RenderPipe.prototype.render = function (value, args) {
        var /** @type {?} */ type = null;
        var /** @type {?} */ text = value;
        if (value && value._subtype && !args) {
            return this.getEntityLabel(value, value._subtype);
        }
        // Stop logic for nulls
        if (value === undefined || value === null || !args) {
            return text;
        }
        if (args.formatter && (typeof args.formatter === 'function')) {
            return args.formatter(value, args);
        }
        // TODO move this to a service
        // Determine TYPE because its not just 1 value that determines this.
        if (args.type === 'TO_MANY') {
            type = 'ToMany';
        }
        else if (args.type === 'TO_ONE') {
            type = args.associatedEntity.entity;
        }
        else if (args.dataSpecialization === 'DATETIME') {
            type = 'DateTime';
        }
        else if (args.dataSpecialization === 'YEAR') {
            type = 'Year';
        }
        else if (args.dataType === 'Timestamp') {
            type = 'Timestamp';
        }
        else if (['mobile', 'phone', 'phone1', 'phone2', 'phone3', 'workPhone'].indexOf(args.name) > -1) {
            type = 'Phone';
        }
        else if (args.name && args.name.substring(0, 5) === 'email') {
            type = 'Email';
        }
        else if (args.name && args.name === 'address.countryID' || args.optionsType === 'Country') {
            type = 'Country';
        }
        else if (args.optionsType === 'SkillText') {
            type = 'SkillText';
        }
        else if (args.options || args.inputType === 'SELECT') {
            type = 'Options';
        }
        else if (['MONEY', 'PERCENTAGE', 'HTML', 'SSN'].indexOf(args.dataSpecialization) > -1) {
            type = this.capitalize(args.dataSpecialization.toLowerCase());
        }
        else {
            type = args.dataType || 'default';
        }
        // Transform data here
        switch (type) {
            case 'Address':
            case 'Address1':
            case 'AddressWithoutCountry':
                var /** @type {?} */ country = findByCountryId(Number(value.countryName));
                text = ("\n                    " + (value.address1 || '') + "\n                    " + (value.address2 || '') + "<br />\n                ").trim();
                text += "\n                    " + (value.city || '') + " " + (value.state || '') + " " + (value.zip || '') + (value.city || value.state || value.zip ? '<br />' : '') + "\n                    " + (country ? country.name : (value.countryName || '')) + (country || value.countryName ? '<br />' : '') + "\n                ";
                text = this.sanitizationService.bypassSecurityTrustHtml(text.trim());
                break;
            case 'DateTime':
            case 'Timestamp':
                text = this.labels.formatDateShort(value);
                break;
            case 'Year':
                text = new Date(value).getFullYear();
                break;
            case 'Phone':
            case 'Email':
                text = value;
                break;
            case 'Money':
                text = this.labels.formatCurrency(value);
                break;
            case 'Percentage':
                text = this.labels.formatNumber((parseFloat(value)).toString(), { style: 'percent', minimumFractionDigits: 2 });
                break;
            case 'Double':
            case 'BigDecimal':
                text = this.labels.formatNumber(value, { minimumFractionDigits: this.getNumberDecimalPlaces(value) });
                break;
            case 'Integer':
                text = value;
                break;
            case 'BusinessSector':
            case 'Category':
            case 'Certification':
            case 'ClientCorporation':
            case 'CorporationDepartment':
            case 'DistributionList':
            case 'Skill':
            case 'Tearsheet':
            case 'Specialty':
                text = value.label || value.name || '';
                break;
            case 'SkillText':
                text = Array.isArray(value) ? value.join(', ') : value;
                break;
            case 'Lead':
            case 'Candidate':
            case 'ClientContact':
            case 'CorporateUser':
            case 'Person':
                text = value.label || (value.firstName || '') + " " + (value.lastName || '');
                break;
            case 'Opportunity':
            case 'JobOrder':
                text = value.label || value.title || '';
                break;
            case 'Placement':
                if (value.candidate) {
                    text = (value.candidate.firstName || '') + " " + (value.candidate.lastName || '');
                }
                if (value.jobOrder) {
                    text = value.candidate ? text + " - " + (value.jobOrder.title || '') : "" + (value.jobOrder.title || '');
                }
                break;
            case 'JobSubmission':
                text = value.label || (value.jobOrder ? value.jobOrder.title + " - " : '') + " " + (value.candidate ? value.candidate.firstName : '') + " " + (value.candidate ? value.candidate.lastName : '');
                break;
            case 'WorkersCompensationRate':
                text = (value.compensation ? value.compensation.code + " - " : '') + " " + (value.compensation ? value.compensation.name : '');
                break;
            case 'Options':
                text = this.options(value, args.options);
                break;
            case 'ToMany':
                if (['Candidate', 'CorporateUser', 'Person'].indexOf(args.associatedEntity.entity) > -1) {
                    text = this.concat(value.data, 'firstName', 'lastName');
                    if (value.data.length < value.total) {
                        text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                    }
                }
                else if (['Category', 'BusinessSector', 'Skill', 'Specialty', 'ClientCorporation', 'CorporationDepartment'].indexOf(args.associatedEntity.entity) > -1) {
                    text = this.concat(value.data, 'name');
                    if (value.data.length < value.total) {
                        text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                    }
                }
                else if (args.associatedEntity.entity === 'MailListPushHistoryDetail') {
                    text = this.concat(value.data, 'externalListName');
                }
                else {
                    text = "" + (value.total || '');
                }
                break;
            case 'Country':
                var /** @type {?} */ countryObj = findByCountryId(Number(value));
                text = countryObj ? countryObj.name : value;
                break;
            case 'Html':
                if (Array.isArray(value)) {
                    value = value.join(' ');
                }
                if (typeof text === 'string') {
                    text = this.sanitizationService.bypassSecurityTrustHtml(value.replace(/\<a/gi, '<a target="_blank"'));
                }
                break;
            case 'CandidateComment':
                text = value.comments ? this.labels.formatDateShort(value.dateLastModified) + " (" + value.name + ") - " + value.comments : '';
                break;
            default:
                text = value.trim ? value.trim() : value;
                break;
        }
        return text;
    };
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    RenderPipe.prototype.updateValue = function (value, args) {
        this.value = this.render(value, args);
        this.changeDetector.markForCheck();
    };
    /**
     * @param {?=} value
     * @param {?=} args
     * @return {?}
     */
    RenderPipe.prototype.transform = function (value, args) {
        if (value === undefined || value === null) {
            return '';
        }
        if (this.equals(value, this.lastValue) && this.equals(args, this.lastArgs)) {
            return this.value;
        }
        this.lastValue = value;
        this.lastArgs = args;
        this.updateValue(this.lastValue, this.lastArgs);
        return this.value;
    };
    /**
     * Simple function concat a list of fields from a list of objects
     * \@name options
     * @param {?} list
     * @param {...?} fields
     * @return {?}
     */
    RenderPipe.prototype.concat = function (list) {
        var fields = [];
        for (var _d = 1; _d < arguments.length; _d++) {
            fields[_d - 1] = arguments[_d];
        }
        var /** @type {?} */ data = [];
        for (var _e = 0, list_1 = list; _e < list_1.length; _e++) {
            var item = list_1[_e];
            var /** @type {?} */ label = [];
            for (var _f = 0, fields_1 = fields; _f < fields_1.length; _f++) {
                var field = fields_1[_f];
                label.push("" + item[field]);
            }
            data.push(label.join(' '));
        }
        return data.join(', ');
    };
    /**
     * Simple function to look up the **label** to display from options
     * \@name options
     * @param {?} value
     * @param {?} list
     * @return {?}
     */
    RenderPipe.prototype.options = function (value, list) {
        try {
            for (var _d = 0, list_2 = list; _d < list_2.length; _d++) {
                var item = list_2[_d];
                if (item.value === value) {
                    return item.label;
                }
            }
        }
        catch (e) {
            // do nothing
        }
        return value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    RenderPipe.prototype.getNumberDecimalPlaces = function (value) {
        var /** @type {?} */ decimalPlaces;
        if (value) {
            var /** @type {?} */ numberString = parseFloat(value).toString();
            var /** @type {?} */ decimalPlace = (numberString || '').split('.')[1] || '';
            decimalPlaces = decimalPlace.length;
        }
        return decimalPlaces || 1;
    };
    /**
     * Capitalizes the first letter
     * @param {?} value
     * @return {?}
     */
    RenderPipe.prototype.capitalize = function (value) {
        return value.charAt(0).toUpperCase() + value.slice(1);
    };
    return RenderPipe;
}());
RenderPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'render',
                pure: false,
            },] },
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
RenderPipe.ctorParameters = function () { return [
    { type: core.ChangeDetectorRef, },
    { type: platformBrowser.DomSanitizer, },
    { type: NovoLabelService, },
]; };
// NG2
var EntityList = /** @class */ (function () {
    function EntityList() {
        this.baseEntity = '';
        this.ENTITY_SHORT_NAMES = {
            Lead: 'lead',
            ClientContact: 'contact',
            ClientContact1: 'contact',
            ClientContact2: 'contact',
            ClientContact3: 'contact',
            ClientContact4: 'contact',
            ClientContact5: 'contact',
            ClientCorporation: 'company',
            ClientCorporation1: 'company',
            ClientCorporation2: 'company',
            ClientCorporation3: 'company',
            ClientCorporation4: 'company',
            ClientCorporation5: 'company',
            Opportunity: 'opportunity',
            Task: 'task',
            Note: 'note',
            CorporateUser: 'user',
            Candidate: 'candidate',
            JobOrder: 'job',
            JobOrder1: 'job',
            JobOrder2: 'job',
            JobOrder3: 'job',
            JobOrder4: 'job',
            JobOrder5: 'job',
            Placement: 'placement',
            JobSubmission: 'submission',
            CandidateReference: 'references',
            DistributionList: 'distributionList',
            Appointment: 'appointment',
        };
    }
    /**
     * @return {?}
     */
    EntityList.prototype.ngOnInit = function () {
        this.meta.type = 'TO_ONE';
        this.baseEntity = this.meta.associatedEntity.entity;
        for (var _d = 0, _e = this.data.data; _d < _e.length; _d++) {
            var entity = _e[_d];
            entity.isLinkable = this.isLinkable(entity);
            entity.class = this.getClass(entity);
        }
    };
    /**
     * @param {?} entity
     * @return {?}
     */
    EntityList.prototype.getClass = function (entity) {
        return this.ENTITY_SHORT_NAMES[entity.personSubtype];
    };
    /**
     * @param {?} entity
     * @return {?}
     */
    EntityList.prototype.openLink = function (entity) {
        entity.openLink(entity);
    };
    /**
     * @param {?} entity
     * @return {?}
     */
    EntityList.prototype.isLinkable = function (entity) {
        return entity.openLink;
    };
    return EntityList;
}());
EntityList.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-entity-list',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                template: "\n        <div *ngFor=\"let entity of data.data\" class=\"entity\">\n            <a *ngIf=\"entity.isLinkable\" (click)=\"openLink(entity)\">\n                <i class=\"bhi-circle {{ entity.class }}\"></i>{{ entity | render : meta }}\n            </a>\n            <span *ngIf=\"!entity.isLinkable\">\n                {{ entity | render : meta }}\n            </span>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
EntityList.ctorParameters = function () { return []; };
EntityList.propDecorators = {
    'data': [{ type: core.Input },],
    'meta': [{ type: core.Input },],
};
// NG2
// APP
var NovoValueModule = /** @class */ (function () {
    function NovoValueModule() {
    }
    return NovoValueModule;
}());
NovoValueModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule],
                declarations: [NovoValueElement, RenderPipe, EntityList],
                exports: [NovoValueElement, RenderPipe, EntityList]
            },] },
];
/**
 * @nocollapse
 */
NovoValueModule.ctorParameters = function () { return []; };
var NovoIconComponent = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} cdr
     */
    function NovoIconComponent(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this.raised = false;
        this.size = 'medium';
        this.role = 'img';
    }
    Object.defineProperty(NovoIconComponent.prototype, "alt", {
        /**
         * @return {?}
         */
        get: function () {
            return this.ariaLabel;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.ariaLabel = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoIconComponent.prototype, "name", {
        /**
         * @return {?}
         */
        get: function () {
            return this.iconName;
        },
        /**
         * @param {?} iconName
         * @return {?}
         */
        set: function (iconName) {
            this.iconName = "bhi-" + iconName;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoIconComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.element.nativeElement.textContent.trim()) {
            Promise.resolve().then(function () {
                _this.name = _this.element.nativeElement.textContent.trim();
                _this.cdr.markForCheck();
            });
        }
    };
    return NovoIconComponent;
}());
NovoIconComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-icon',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                template: "\n        <i [class]=\"iconName\"><span><ng-content></ng-content></span></i>\n    ",
            },] },
];
/**
 * @nocollapse
 */
NovoIconComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.ChangeDetectorRef, },
]; };
NovoIconComponent.propDecorators = {
    'raised': [{ type: core.HostBinding, args: ['attr.raised',] }, { type: core.Input },],
    'size': [{ type: core.HostBinding, args: ['attr.size',] }, { type: core.Input },],
    'theme': [{ type: core.HostBinding, args: ['attr.theme',] }, { type: core.Input },],
    'color': [{ type: core.HostBinding, args: ['attr.color',] }, { type: core.Input },],
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
    'ariaLabel': [{ type: core.HostBinding, args: ['attr.aria-label',] },],
    'alt': [{ type: core.Input },],
    'name': [{ type: core.Input },],
};
var NovoIconModule = /** @class */ (function () {
    function NovoIconModule() {
    }
    return NovoIconModule;
}());
NovoIconModule.decorators = [
    { type: core.NgModule, args: [{
                exports: [NovoIconComponent],
                declarations: [NovoIconComponent],
            },] },
];
/**
 * @nocollapse
 */
NovoIconModule.ctorParameters = function () { return []; };
// NG2
// APP
var NovoCategoryDropdownElement = /** @class */ (function (_super) {
    __extends(NovoCategoryDropdownElement, _super);
    /**
     * @param {?} element
     * @param {?} labels
     */
    function NovoCategoryDropdownElement(element, labels) {
        var _this = _super.call(this, element) || this;
        _this.labels = labels;
        _this._query = '';
        _this._categoryMap = {};
        _this._categories = [];
        // Boolean to keep the selection persist when closing the dropdown
        _this.persistSelection = false;
        // Boolean to close the dropdown on selection
        _this.closeOnSelect = false;
        // Event that is emitted whenever an item is selected
        _this._select = new core.EventEmitter();
        // Event that is emitted whenever a category is selected
        _this.categorySelected = new core.EventEmitter();
        _this.clickHandler = _this.toggleActive.bind(_this);
        return _this;
    }
    Object.defineProperty(NovoCategoryDropdownElement.prototype, "categories", {
        /**
         * @param {?} categories
         * @return {?}
         */
        set: function (categories) {
            this._masterCategoryMap = Object.assign({}, categories);
            this._categoryMap = Object.assign({}, categories);
            this._categories = Object.keys(categories);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.ngOnInit = function () {
        var /** @type {?} */ button = this.element.nativeElement.querySelector('button');
        button.addEventListener('click', this.clickHandler);
    };
    /**
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.ngOnDestroy = function () {
        var /** @type {?} */ button = this.element.nativeElement.querySelector('button');
        if (button) {
            button.removeEventListener('click', this.clickHandler);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.onKeyDown = function (event) {
        if (this.active && (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.ENTER)) {
            this.toggleActive();
        }
    };
    /**
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.clearSelection = function () {
        var _this = this;
        this._categories.forEach(function (category) {
            _this._categoryMap[category].forEach(function (item) {
                item.selected = false;
            });
        });
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.select = function (event, item) {
        Helpers.swallowEvent(event);
        // If we persist the selection, clear and show a check
        if (this.persistSelection) {
            this.clearSelection();
            item.selected = true;
        }
        // Emit the item
        this._select.emit(item);
        // Close, if input is set
        if (this.closeOnSelect) {
            this.toggleActive();
        }
    };
    /**
     * @param {?} category
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.onCategorySelected = function (category) {
        this.categorySelected.emit(category);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.clearQuery = function (event) {
        var _this = this;
        Helpers.swallowEvent(event);
        this._query = '';
        // Reset the categories
        this._categories.forEach(function (category) {
            _this._categoryMap[category] = _this._masterCategoryMap[category];
        });
    };
    /**
     * @param {?} query
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.queryCategories = function (query) {
        var _this = this;
        // Save the query
        this._query = query;
        // Check timeout
        if (this._queryTimeout) {
            clearTimeout(this._queryTimeout);
        }
        // Store a timeout, to debounce user input
        this._queryTimeout = setTimeout(function () {
            _this._categories.forEach(function (category) {
                if (_this.search.compare) {
                    _this._categoryMap[category] = _this._masterCategoryMap[category].filter(function (item) { return _this.search.compare(query, item); });
                }
                else {
                    _this._categoryMap[category] = _this._masterCategoryMap[category].filter(function (item) { return ~item.label.toLowerCase().indexOf(query.toLowerCase()); });
                }
            });
        }, this.search.debounce || 300);
    };
    /**
     * @param {?} event
     * @param {?} link
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.executeClickCallback = function (event, link) {
        link.callback(event);
        // Close, if input is set
        if (this.closeOnSelect) {
            this.toggleActive();
        }
    };
    return NovoCategoryDropdownElement;
}(OutsideClick));
NovoCategoryDropdownElement.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-category-dropdown',
                template: "\n        <ng-content select=\"button\"></ng-content>\n        <div class=\"dropdown-container\" *ngIf=\"active\">\n            <div class=\"novo-category-dropdown-search\" *ngIf=\"search\" data-automation-id=\"novo-category-dropdown-search\">\n                <input type=\"text\" [placeholder]=\"search.placeholder || labels.search\" [value]=\"_query\" (input)=\"queryCategories($event.target.value)\"/>\n                <i class=\"bhi-search\" *ngIf=\"!_query\"></i>\n                <i class=\"bhi-times\" *ngIf=\"_query\" (click)=\"clearQuery($event)\"></i>\n            </div>\n            <novo-nav theme=\"white\" [outlet]=\"novoCategoryDropdownOutlet\" direction=\"vertical\">\n                <novo-tab *ngFor=\"let category of _categories\" [attr.data-automation-id]=\"category\" (activeChange)=\"onCategorySelected(category)\">\n                    <span>{{ category }} ({{ _categoryMap[category].length }})</span>\n                </novo-tab>\n            </novo-nav>\n            <novo-nav-outlet #novoCategoryDropdownOutlet>\n                <novo-nav-content *ngFor=\"let category of _categories\">\n                    <novo-list direction=\"vertical\">\n                        <novo-list-item *ngFor=\"let item of _categoryMap[category]\" (click)=\"select($event, item)\" [attr.data-automation-id]=\"item.label\">\n                            <item-content>{{ item.label }}</item-content>\n                            <item-end class=\"novo-category-dropdown-hover\" *ngIf=\"item.hoverText && !item.selected\">{{ item.hoverText }}</item-end>\n                            <item-end class=\"novo-category-dropdown-hover\" *ngIf=\"item.hoverIcon && !item.selected\"><i class=\"bhi-{{ item.hoverIcon }}\"></i></item-end>\n                            <item-end *ngIf=\"item.selected\"><i class=\"bhi-check\"></i></item-end>\n                        </novo-list-item>\n                        <novo-list-item *ngIf=\"_categoryMap[category].length === 0 && search\" class=\"novo-category-dropdown-empty-item\">\n                            <item-content>{{ search.emptyMessage || labels.noItems }}</item-content>\n                        </novo-list-item>\n                    </novo-list>\n                </novo-nav-content>\n            </novo-nav-outlet>\n            <footer *ngIf=\"footer\" class=\"novo-category-dropdown-footer-align-{{ footer.align || 'right' }}\">\n                <a *ngFor=\"let link of footer.links\" (click)=\"executeClickCallback($event, link)\">{{ link.label }}</a>\n            </footer>\n        </div>\n    ",
                host: {
                    '(keydown)': 'onKeyDown($event)',
                    '[class.active]': 'active'
                }
            },] },
];
/**
 * @nocollapse
 */
NovoCategoryDropdownElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
]; };
NovoCategoryDropdownElement.propDecorators = {
    'persistSelection': [{ type: core.Input },],
    'closeOnSelect': [{ type: core.Input },],
    'search': [{ type: core.Input },],
    'footer': [{ type: core.Input },],
    '_select': [{ type: core.Output, args: ['itemSelected',] },],
    'categorySelected': [{ type: core.Output },],
    'categories': [{ type: core.Input },],
};
// NG2
// APP
var NovoCategoryDropdownModule = /** @class */ (function () {
    function NovoCategoryDropdownModule() {
    }
    return NovoCategoryDropdownModule;
}());
NovoCategoryDropdownModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, NovoTabModule, NovoListModule],
                declarations: [NovoCategoryDropdownElement],
                exports: [NovoCategoryDropdownElement]
            },] },
];
/**
 * @nocollapse
 */
NovoCategoryDropdownModule.ctorParameters = function () { return []; };
// NG2
// Vendor
// Value accessor for the component (supports ngModel)
var CHIPS_VALUE_ACCESSOR$1 = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NovoMultiPickerElement; }),
    multi: true
};
var NovoMultiPickerElement = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} labels
     */
    function NovoMultiPickerElement(element, labels) {
        this.element = element;
        this.labels = labels;
        this.placeholder = '';
        this.changed = new core.EventEmitter();
        this.focus = new core.EventEmitter();
        this.blur = new core.EventEmitter();
        this.items = [];
        this._items = new ReplaySubject.ReplaySubject(1);
        this.selected = null;
        this.config = {};
        // private data model
        this._value = {};
        this.notShown = {};
        this.onModelChange = function () {
        };
        this.onModelTouched = function () {
        };
        this.chipsCount = 4;
    }
    Object.defineProperty(NovoMultiPickerElement.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this._value;
        },
        /**
         * @param {?} selectedItems
         * @return {?}
         */
        set: function (selectedItems) {
            var _this = this;
            if (selectedItems) {
                this.types.forEach(function (x) { return _this._value[x.value] = selectedItems[x.value]; });
            }
            else {
                this._value = {};
                this.types.forEach(function (x) { return _this._value[x.value] = []; });
            }
            this.changed.emit(selectedItems);
            this.onModelChange(selectedItems);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoMultiPickerElement.prototype.ngOnInit = function () {
        this.selectAllOption = this.source.selectAllOption || false;
        this.chipsCount = this.source.chipsCount || 4;
        this.strictRelationship = this.source.strictRelationship || false;
        this.setupOptions();
    };
    /**
     * @return {?}
     */
    NovoMultiPickerElement.prototype.clearValue = function () {
        var _this = this;
        this.types.forEach(function (type) { return _this.modifyAllOfType(type.value, 'unselect'); });
        this.items = [];
        this._items.next(this.items);
        this.value = this.setInitialValue(null);
        this.onModelChange(this.value);
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoMultiPickerElement.prototype.removeFromDisplay = function (event, item) {
        this.remove(true, item);
        this.modifyAffectedParentsOrChildren(false, item);
    };
    /**
     * @return {?}
     */
    NovoMultiPickerElement.prototype.setupOptions = function () {
        var _this = this;
        this.options = this.source.options || [];
        this._options = [];
        if (this.options) {
            this.options.forEach(function (option) {
                var /** @type {?} */ formattedOption = _this.setupOptionsByType(option);
                _this._options.push(formattedOption);
            });
        }
        this.source.options = this._options;
    };
    /**
     * @param {?} section
     * @return {?}
     */
    NovoMultiPickerElement.prototype.setupOptionsByType = function (section) {
        var _this = this;
        var /** @type {?} */ formattedSection = {
            type: section.type,
            label: section.label || section.type
        };
        formattedSection.data = section.data.map(function (item) {
            return _this.formatOption(section, item);
        });
        if (this.selectAllOption) {
            var /** @type {?} */ selectAll = this.createSelectAllOption(section);
            formattedSection.data.splice(0, 0, selectAll);
        }
        formattedSection.originalData = formattedSection.data.slice();
        return formattedSection;
    };
    /**
     * @param {?} section
     * @param {?} item
     * @return {?}
     */
    NovoMultiPickerElement.prototype.formatOption = function (section, item) {
        var /** @type {?} */ obj = {
            value: section.field ? item[section.field] : (item.value || item),
            label: section.format ? Helpers.interpolate(section.format, item) : item.label || String(item.value || item),
            type: section.type,
            checked: undefined,
            isParentOf: section.isParentOf,
            isChildOf: section.isChildOf
        };
        if (obj.isChildOf) {
            obj[section.isChildOf] = item[section.isChildOf];
        }
        return obj;
    };
    /**
     * @param {?} section
     * @return {?}
     */
    NovoMultiPickerElement.prototype.createSelectAllOption = function (section) {
        var /** @type {?} */ selectAll = {
            value: 'ALL',
            label: "All " + section.type,
            type: section.type,
            checked: (this.model && this.model.length && (this.model.indexOf('ALL') !== -1)),
            isParentOf: section.isParentOf,
            isChildOf: section.isChildOf
        };
        if (section.isChildOf) {
            var /** @type {?} */ allParents = section.data.reduce(function (accum, next) {
                return accum.concat(next[section.isChildOf]);
            }, []);
            selectAll[section.isChildOf] = allParents;
        }
        return selectAll;
    };
    /**
     * @return {?}
     */
    NovoMultiPickerElement.prototype.deselectAll = function () {
        this.selected = null;
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoMultiPickerElement.prototype.select = function (event, item) {
        this.blur.emit(event);
        this.deselectAll();
        this.selected = item;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NovoMultiPickerElement.prototype.onFocus = function (e) {
        this.element.nativeElement.classList.add('selected');
        this.focus.emit(e);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoMultiPickerElement.prototype.clickOption = function (event) {
        if (event && !(event instanceof Event)) {
            if (event.checked === false) {
                this.remove(null, event);
            }
            else {
                this.add(event);
            }
            this.modifyAffectedParentsOrChildren(event.checked, event);
            // Set focus on the picker
            var /** @type {?} */ input = this.element.nativeElement.querySelector('novo-picker > input');
            if (input) {
                input.focus();
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoMultiPickerElement.prototype.add = function (event) {
        if (event.value === 'ALL') {
            this.modifyAllOfType(event.type, 'select');
        }
        else {
            this.updateDisplayItems(event, 'add');
            this.value[event.type].push(event.value);
            this.updateAllItemState(event.type);
            this.triggerValueUpdate();
        }
        this.updateParentOrChildren(event, 'select');
        this.select(null, event);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateAllItemState = function (type) {
        var /** @type {?} */ allOfType = this.getAllOfType(type);
        var /** @type {?} */ allOfTypeSelected = this.allItemsSelected(allOfType, type);
        if (allOfTypeSelected) {
            this.selectAll(allOfType, type);
        }
        return { allOfType: allOfType, allOfTypeSelected: allOfTypeSelected };
    };
    /**
     * @param {?} allOfType
     * @param {?} status
     * @return {?}
     */
    NovoMultiPickerElement.prototype.setIndeterminateState = function (allOfType, status) {
        if (!this.selectAllOption) {
            return;
        }
        var /** @type {?} */ allItem = allOfType[0];
        allItem.indeterminate = status;
    };
    /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateDisplayItems = function (item, action) {
        var /** @type {?} */ adding = action === 'add';
        if (adding) {
            this.items.push(item);
        }
        else {
            if (this.items.indexOf(item) > -1) {
                this.items.splice(this.items.indexOf(item), 1);
            }
        }
        this.updateDisplayText(this.items);
        this._items.next(this.items);
    };
    /**
     * @param {?} items
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateDisplayText = function (items) {
        var _this = this;
        this.notShown = [];
        var /** @type {?} */ notShown = items.slice(this.chipsCount);
        if (notShown.length > 0) {
            this.types.forEach(function (type) {
                var /** @type {?} */ count;
                var /** @type {?} */ selectedOfType = notShown.filter(function (x) { return x.type === type.value; });
                if (selectedOfType.length === 1 && selectedOfType[0].value === 'ALL') {
                    count = _this.getAllOfType(type.value).length - 1;
                }
                else {
                    count = selectedOfType.length;
                }
                var /** @type {?} */ displayType = count === 1 ? type.singular : type.plural || type.value;
                if (count > 0) {
                    _this.notShown.push({ type: displayType, count: count });
                }
            });
        }
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoMultiPickerElement.prototype.remove = function (event, item) {
        var /** @type {?} */ triggeredByEvent;
        if (event) {
            triggeredByEvent = true;
        }
        var /** @type {?} */ itemToRemove = item;
        if (itemToRemove.value === 'ALL') {
            triggeredByEvent = false;
            this.modifyAllOfType(itemToRemove.type, 'unselect');
        }
        else if (this.allOfTypeSelected(itemToRemove.type)) {
            this.handleRemoveItemIfAllSelected(itemToRemove);
        }
        this.removeItem(item, triggeredByEvent);
    };
    /**
     * @param {?} item
     * @param {?=} triggeredByEvent
     * @return {?}
     */
    NovoMultiPickerElement.prototype.removeItem = function (item, triggeredByEvent) {
        item.checked = false;
        this.deselectAll();
        this.removeValue(item);
        if (item.value !== 'ALL') {
            this.updateParentOrChildren(item, 'unselect');
        }
        if (triggeredByEvent) {
            this.modifyAffectedParentsOrChildren(false, item);
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    NovoMultiPickerElement.prototype.removeValue = function (item) {
        var /** @type {?} */ updatedValues = this.value[item.type].filter(function (x) { return x !== item.value; });
        this.value[item.type] = updatedValues;
        this.triggerValueUpdate();
        this.updateDisplayItems(item, 'remove');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoMultiPickerElement.prototype.onKeyDown = function (event) {
        if (event.keyCode === KeyCodes.BACKSPACE) {
            if (event.target && event.target.value.length === 0 && this.items.length) {
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                if (this.selected) {
                    this.remove(null, this.selected);
                }
                else {
                    this.select(event, this.items[this.items.length - 1]);
                }
            }
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    NovoMultiPickerElement.prototype.allOfTypeSelected = function (type) {
        return this.items.filter(function (x) { return x.type === type && x.value === 'ALL'; }).length > 0;
    };
    /**
     * @param {?} type
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.modifyAllOfType = function (type, action) {
        var /** @type {?} */ selecting = action === 'select';
        var /** @type {?} */ allOfType = this.getAllOfType(type);
        allOfType.forEach(function (item) {
            item.checked = selecting;
            item.indeterminate = false;
        });
        if (selecting) {
            this.selectAll(allOfType, type);
        }
        else {
            this.items = this.items.filter(function (x) { return x.type !== type; }).slice();
            this._items.next(this.items);
            this.value[type] = [];
        }
        if (this.selectAllOption) {
            this.updateAllParentsOrChildren(allOfType[0], action);
        }
        this.triggerValueUpdate();
    };
    /**
     * @return {?}
     */
    NovoMultiPickerElement.prototype.triggerValueUpdate = function () {
        var _this = this;
        var /** @type {?} */ updatedObject = {};
        this.types.forEach(function (x) { return updatedObject[x.value] = _this.value[x.value]; });
        this.value = updatedObject;
    };
    /**
     * @param {?} allOfType
     * @param {?} type
     * @return {?}
     */
    NovoMultiPickerElement.prototype.selectAll = function (allOfType, type) {
        if (!this.selectAllOption) {
            return;
        }
        allOfType[0].checked = true;
        var /** @type {?} */ values = allOfType.map(function (i) {
            return i.value;
        });
        //remove 'ALL' value
        values.splice(0, 1);
        this.value[type] = values;
        var /** @type {?} */ updatedItems = this.items.filter(function (x) { return x.type !== type; });
        this.items = updatedItems;
        this.updateDisplayItems(allOfType[0], 'add');
    };
    /**
     * @param {?} item
     * @return {?}
     */
    NovoMultiPickerElement.prototype.handleRemoveItemIfAllSelected = function (item) {
        if (!this.selectAllOption) {
            return;
        }
        var /** @type {?} */ type = item.type;
        var /** @type {?} */ allOfType = this.getAllOfType(type);
        var /** @type {?} */ allItem = allOfType[0];
        this.removeItem(allItem);
        allItem.indeterminate = true;
        var /** @type {?} */ selectedItems = allOfType.filter(function (i) { return i.checked === true; });
        this.items = this.items.concat(selectedItems);
        var /** @type {?} */ values = selectedItems.map(function (i) {
            return i.value;
        });
        this.value[type] = values.slice();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoMultiPickerElement.prototype.handleOutsideClick = function (event) {
        // If the elements doesn't contain the target element, it is an outside click
        if (!this.element.nativeElement.contains(event.target)) {
            this.blur.emit(event);
            this.deselectAll();
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    NovoMultiPickerElement.prototype.getAllOfType = function (type) {
        return this._options.filter(function (x) { return x.type === type; })[0].originalData;
    };
    /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateParentOrChildren = function (item, action) {
        if (this.strictRelationship && item.isParentOf) {
            this.updateChildrenValue(item, action);
        }
        else if (item.isChildOf && this.selectAllOption) {
            this.updateParentValue(item, action);
        }
    };
    /**
     * @param {?} selecting
     * @param {?} itemChanged
     * @return {?}
     */
    NovoMultiPickerElement.prototype.modifyAffectedParentsOrChildren = function (selecting, itemChanged) {
        var _this = this;
        if (!itemChanged.isChildOf && !itemChanged.isParentOf) {
            return;
        }
        var /** @type {?} */ parent = this.types.filter(function (x) { return !!x.isParentOf; })[0];
        var /** @type {?} */ parentType = parent.value;
        var /** @type {?} */ allParentType = this.getAllOfType(parentType);
        var /** @type {?} */ childType = allParentType[0].isParentOf;
        var /** @type {?} */ allChildren = this.getAllOfType(childType);
        var /** @type {?} */ allCheckedChildren = allChildren.filter(function (x) { return !!x.checked; });
        allParentType.forEach(function (obj) {
            if (obj.value === 'ALL') {
                return;
            }
            var /** @type {?} */ selectedChildrenOfParent = allCheckedChildren.filter(function (x) {
                return x[parentType].filter(function (y) { return y === obj.value; }).length > 0;
            });
            if (selecting) {
                if (obj.checked) {
                    return;
                }
                obj.indeterminate = selectedChildrenOfParent.length > 0;
            }
            else {
                var /** @type {?} */ allChildrenOfParent = allChildren.filter(function (x) {
                    return x.value !== 'ALL' && x[parentType].filter(function (y) { return y === obj.value; }).length > 0;
                });
                if (selectedChildrenOfParent.length > 0) {
                    if (obj.checked) {
                        if (_this.strictRelationship && (allChildrenOfParent.length !== selectedChildrenOfParent.length)) {
                            obj.indeterminate = true;
                            obj.checked = false;
                            _this.removeValue(obj);
                            _this.addIndividualChildren(selectedChildrenOfParent);
                        }
                    }
                    else {
                        obj.indeterminate = true;
                    }
                    if (_this.strictRelationship && itemChanged.type !== parentType) {
                        if (obj.checked) {
                            obj.checked = false;
                            _this.removeValue(obj);
                            _this.addIndividualChildren(selectedChildrenOfParent);
                        }
                    }
                }
                else {
                    obj.indeterminate = false;
                    if (allChildrenOfParent.length === 0) {
                        //if it has no children and is checked, it should stay checked
                        return;
                    }
                    else if (_this.strictRelationship && itemChanged.type !== parentType) {
                        _this.remove(null, obj);
                    }
                }
            }
        });
        if (this.selectAllOption) {
            this.updateIndeterminateStates(allParentType, allChildren, allCheckedChildren);
        }
    };
    /**
     * @param {?} allItem
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateAllParentsOrChildren = function (allItem, action) {
        if (allItem.isParentOf) {
            this.updateAllChildrenValue(allItem, action);
        }
        else if (allItem.isChildOf) {
            this.updateAllParentValue(allItem, action);
        }
    };
    /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateAllChildrenValue = function (item, action) {
        var _this = this;
        var /** @type {?} */ selecting = action === 'select';
        var /** @type {?} */ childType = item.isParentOf;
        var /** @type {?} */ potentialChildren = this.getAllOfType(childType);
        if (this.selectAllOption && this.allOfTypeSelected(childType) && !selecting) {
            this.remove(null, potentialChildren[0]);
            return;
        }
        potentialChildren.forEach(function (x) {
            if (x.value === 'ALL' && !x.checked) {
                if (selecting) {
                    x.checked = true;
                }
                x.indeterminate = selecting;
            }
            else {
                if (x.checked && !selecting) {
                    _this.remove(null, x);
                }
                x.checked = selecting;
            }
        });
    };
    /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateAllParentValue = function (item, action) {
        var /** @type {?} */ selecting = action === 'select';
        var /** @type {?} */ parentType = item.isChildOf;
        var /** @type {?} */ potentialParents = this.getAllOfType(parentType);
        potentialParents.forEach(function (x) {
            if (!x.checked) {
                x.indeterminate = selecting;
            }
        });
    };
    /**
     * @param {?} allParentType
     * @param {?} allChildren
     * @param {?} allCheckedChildren
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateIndeterminateStates = function (allParentType, allChildren, allCheckedChildren) {
        var /** @type {?} */ allCheckedOrIndeterminateParents = allParentType.filter(function (x) { return (!!x.checked || !!x.indeterminate) && x.value !== 'ALL'; });
        var /** @type {?} */ isParentIndeterminate = !!allParentType[0].checked ? false : allCheckedOrIndeterminateParents.length > 0;
        var /** @type {?} */ isChildIndeterminate = !!allChildren[0].checked ? false : allCheckedChildren.length > 0;
        this.setIndeterminateState(allParentType, isParentIndeterminate);
        this.setIndeterminateState(allChildren, isChildIndeterminate);
    };
    /**
     * @param {?} parent
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateChildrenValue = function (parent, action) {
        var _this = this;
        var /** @type {?} */ selecting = action === 'select';
        var /** @type {?} */ childType = parent.isParentOf;
        var /** @type {?} */ potentialChildren = this.getAllOfType(childType);
        potentialChildren.forEach(function (x) {
            if (x.value === 'ALL') {
                return;
            }
            if (x[parent.type].filter(function (y) { return y === parent.value; }).length > 0) {
                if (x.checked && !selecting) {
                    x.checked = false;
                    if (_this.allOfTypeSelected(childType)) {
                        _this.handleRemoveItemIfAllSelected(x);
                    }
                    else {
                        _this.removeValue(x);
                    }
                }
                x.checked = selecting;
            }
        });
    };
    /**
     * @param {?} child
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateParentValue = function (child, action) {
        var /** @type {?} */ allParentType = this.getAllOfType(child.isChildOf);
        if (allParentType[0].checked && action !== 'select') {
            this.handleRemoveItemIfAllSelected(allParentType[0]);
        }
    };
    /**
     * @param {?} children
     * @return {?}
     */
    NovoMultiPickerElement.prototype.addIndividualChildren = function (children) {
        var _this = this;
        var /** @type {?} */ parentAlreadySelected = false;
        children.forEach(function (x) {
            if (x.isChildOf) {
                x[x.isChildOf].forEach(function (parent) {
                    if (_this.value[x.isChildOf].filter(function (p) { return p === parent; }).length > 0) {
                        parentAlreadySelected = true;
                    }
                });
            }
            if (_this.value[x.type].filter(function (item) { return item === x.value; }).length === 0 && !parentAlreadySelected) {
                _this.add(x);
            }
        });
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoMultiPickerElement.prototype.setInitialValue = function (model) {
        var _this = this;
        this.items = [];
        this.value = model || {};
        if (!this.types) {
            return;
        }
        this.types.forEach(function (typeObj) {
            var /** @type {?} */ type = typeObj.value;
            if (_this.value[type]) {
                var /** @type {?} */ indeterminateIsSet_1 = false;
                var /** @type {?} */ options = _this.updateAllItemState(type);
                var /** @type {?} */ optionsByType_1 = options.allOfType;
                var /** @type {?} */ allSelected_1 = options.allOfTypeSelected;
                _this.value[type].forEach(function (item) {
                    if (!allSelected_1 && !indeterminateIsSet_1) {
                        indeterminateIsSet_1 = true;
                        _this.setIndeterminateState(optionsByType_1, true);
                    }
                    var /** @type {?} */ value = optionsByType_1.filter(function (x) { return x.value === item; })[0];
                    value.checked = true;
                    if (!allSelected_1) {
                        _this.updateDisplayItems(value, 'add');
                    }
                    if (_this.strictRelationship && value.isParentOf) {
                        _this.updateChildrenValue(value, 'select');
                    }
                });
                if (typeObj.isChildOf) {
                    _this.modifyAffectedParentsOrChildren(true, { value: type, isChildOf: true });
                }
            }
            else {
                _this.value[type] = [];
            }
        });
    };
    /**
     * @param {?} optionsByType
     * @param {?} type
     * @return {?}
     */
    NovoMultiPickerElement.prototype.allItemsSelected = function (optionsByType, type) {
        return this.value[type].length === optionsByType.length - 1;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NovoMultiPickerElement.prototype.onTouched = function (e) {
        this.element.nativeElement.classList.remove('selected');
        this.onModelTouched();
        this.blur.emit(e);
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoMultiPickerElement.prototype.writeValue = function (model) {
        this.model = model;
        this.setInitialValue(model);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoMultiPickerElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoMultiPickerElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    return NovoMultiPickerElement;
}());
NovoMultiPickerElement.decorators = [
    { type: core.Component, args: [{
                selector: 'multi-picker',
                providers: [CHIPS_VALUE_ACCESSOR$1],
                template: "\n        <chip\n            *ngFor=\"let item of _items | async | slice:0:chipsCount\"\n            [type]=\"type\"\n            [class.selected]=\"item == selected\"\n            (remove)=\"removeFromDisplay($event, item)\"\n            (select)=\"select($event, item)\">\n            {{ item.label }}\n        </chip>\n        <div *ngIf=\"items.length > chipsCount\">\n            <ul class=\"summary\">\n                <li *ngFor=\"let type of notShown\">+ {{type.count}} {{ labels.more }} {{type.type}}</li>\n            </ul>\n        </div>\n        <div class=\"chip-input-container\">\n            <novo-picker\n                clearValueOnSelect=\"true\"\n                [config]=\"source\"\n                [placeholder]=\"placeholder\"\n                (select)=\"clickOption($event)\"\n                (keydown)=\"onKeyDown($event)\"\n                (focus)=\"onFocus($event)\"\n                (blur)=\"onTouched($event)\"\n                [overrideElement]=\"element\">\n            </novo-picker>\n        </div>\n        <i class=\"bhi-search\" [class.has-value]=\"items.length\"></i>\n        <label class=\"clear-all\" *ngIf=\"items.length\" (click)=\"clearValue()\">{{ labels.clearAll }} <i class=\"bhi-times\"></i></label>\n   ",
                host: {
                    '[class.with-value]': 'items.length > 0'
                }
            },] },
];
/**
 * @nocollapse
 */
NovoMultiPickerElement.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: NovoLabelService, },
]; };
NovoMultiPickerElement.propDecorators = {
    'source': [{ type: core.Input },],
    'placeholder': [{ type: core.Input },],
    'types': [{ type: core.Input },],
    'changed': [{ type: core.Output },],
    'focus': [{ type: core.Output },],
    'blur': [{ type: core.Output },],
    'value': [{ type: core.Input },],
};
// NG2
// APP
var NovoMultiPickerModule = /** @class */ (function () {
    function NovoMultiPickerModule() {
    }
    return NovoMultiPickerModule;
}());
NovoMultiPickerModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule, forms.FormsModule, NovoPickerModule, NovoChipsModule],
                declarations: [NovoMultiPickerElement],
                exports: [NovoMultiPickerElement]
            },] },
];
/**
 * @nocollapse
 */
NovoMultiPickerModule.ctorParameters = function () { return []; };
// NG2
var Security = /** @class */ (function () {
    function Security() {
        this.credentials = [];
        this.change = new core.EventEmitter();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    Security.prototype.grant = function (data) {
        var /** @type {?} */ parsed = [];
        if (data instanceof Array) {
            for (var _d = 0, data_1 = data; _d < data_1.length; _d++) {
                var permission = data_1[_d];
                parsed.push(permission.replace(/\s/gi, ''));
            }
        }
        else if (typeof data === 'object') {
            for (var /** @type {?} */ key in data) {
                if (data[key] instanceof Array) {
                    for (var _e = 0, _f = data[key]; _e < _f.length; _e++) {
                        var permission = _f[_e];
                        parsed.push(key + "." + permission);
                    }
                }
            }
        }
        this.credentials = [].concat(this.credentials, parsed);
        this.change.emit(this.credentials);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Security.prototype.has = function (value) {
        return this.credentials.indexOf(value) > -1;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Security.prototype.revoke = function (value) {
        var /** @type {?} */ i = this.credentials.indexOf(value);
        this.credentials.splice(i, 1);
        this.change.emit(this.credentials);
    };
    /**
     * @return {?}
     */
    Security.prototype.clear = function () {
        this.credentials = [];
        this.change.emit(this.credentials);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    Security.prototype.subscribe = function (fn) {
        this.change.subscribe(fn);
    };
    /**
     * @param {?} routes
     * @param {?} options
     * @return {?}
     */
    Security.prototype.checkRoutes = function (routes, options) {
        var _this = this;
        var /** @type {?} */ filtered = [];
        for (var _d = 0, routes_1 = routes; _d < routes_1.length; _d++) {
            var route = routes_1[_d];
            if (route.entities && ~route.entities.indexOf(options.entityType)) {
                if (route.permissions instanceof Function) {
                    if (route.permissions(options, this)) {
                        filtered.push(route);
                    }
                }
                else if (route.permissions && route.permissions.length) {
                    if (route.permissions.every(function (perm) { return _this.has(perm); })) {
                        filtered.push(route);
                    }
                }
                else {
                    filtered.push(route);
                }
            }
        }
        return filtered;
    };
    return Security;
}());
Security.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
Security.ctorParameters = function () { return []; };
// NG2
// App
var Unless = /** @class */ (function () {
    /**
     * @param {?} templateRef
     * @param {?} viewContainer
     * @param {?} security
     */
    function Unless(templateRef, viewContainer, security) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.security = security;
        this.permissions = '';
        this.isDisplayed = false;
        this.security.subscribe(this.check.bind(this));
    }
    Object.defineProperty(Unless.prototype, "bhUnless", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.permissions = value || '';
            this.check();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Unless.prototype.check = function () {
        var _this = this;
        var /** @type {?} */ display = false;
        if (~this.permissions.indexOf('||')) {
            var /** @type {?} */ ps = this.permissions.split('||');
            for (var _d = 0, ps_1 = ps; _d < ps_1.length; _d++) {
                var p = ps_1[_d];
                if (this.security.has(p.trim())) {
                    display = true;
                }
            }
        }
        else {
            display = this.permissions.split('&&').every(function (p) { return _this.security.has(p.trim()); });
        }
        if (display) {
            if (!this.isDisplayed) {
                this.isDisplayed = true;
                this.viewContainer.createEmbeddedView(this.templateRef);
            }
        }
        else {
            this.isDisplayed = false;
            this.viewContainer.clear();
        }
    };
    return Unless;
}());
Unless.decorators = [
    { type: core.Directive, args: [{
                selector: '[bhUnless]',
            },] },
];
/**
 * @nocollapse
 */
Unless.ctorParameters = function () { return [
    { type: core.TemplateRef, },
    { type: core.ViewContainerRef, },
    { type: Security, },
]; };
Unless.propDecorators = {
    'bhUnless': [{ type: core.Input },],
};
// NG2
// APP
var UnlessModule = /** @class */ (function () {
    function UnlessModule() {
    }
    return UnlessModule;
}());
UnlessModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule],
                declarations: [Unless],
                exports: [Unless]
            },] },
];
/**
 * @nocollapse
 */
UnlessModule.ctorParameters = function () { return []; };
var NovoTemplate = /** @class */ (function () {
    /**
     * @param {?} template
     */
    function NovoTemplate(template) {
        this.template = template;
    }
    /**
     * @return {?}
     */
    NovoTemplate.prototype.getType = function () {
        return this.name;
    };
    return NovoTemplate;
}());
NovoTemplate.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoTemplate]',
            },] },
];
/**
 * @nocollapse
 */
NovoTemplate.ctorParameters = function () { return [
    { type: core.TemplateRef, },
]; };
NovoTemplate.propDecorators = {
    'type': [{ type: core.Input },],
    'name': [{ type: core.Input, args: ['novoTemplate',] },],
};
var NovoCommonModule = /** @class */ (function () {
    function NovoCommonModule() {
    }
    return NovoCommonModule;
}());
NovoCommonModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [common.CommonModule],
                exports: [NovoTemplate],
                declarations: [NovoTemplate],
            },] },
];
/**
 * @nocollapse
 */
NovoCommonModule.ctorParameters = function () { return []; };
var __extends$7 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AuditSubscriber = (function (_super) {
    __extends$7(AuditSubscriber, _super);
    function AuditSubscriber(destination, durationSelector) {
        _super.call(this, destination);
        this.durationSelector = durationSelector;
        this.hasValue = false;
    }
    AuditSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
        if (!this.throttled) {
            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);
            if (duration === errorObject.errorObject) {
                this.destination.error(errorObject.errorObject.e);
            }
            else {
                var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);
                if (innerSubscription.closed) {
                    this.clearThrottle();
                }
                else {
                    this.add(this.throttled = innerSubscription);
                }
            }
        }
    };
    AuditSubscriber.prototype.clearThrottle = function () {
        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
        if (throttled) {
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
        }
        if (hasValue) {
            this.value = null;
            this.hasValue = false;
            this.destination.next(value);
        }
    };
    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
        this.clearThrottle();
    };
    AuditSubscriber.prototype.notifyComplete = function () {
        this.clearThrottle();
    };
    return AuditSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$9 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * A unit of work to be executed in a {@link Scheduler}. An action is typically
 * created from within a Scheduler and an RxJS user does not need to concern
 * themselves about creating and manipulating an Action.
 *
 * ```ts
 * class Action<T> extends Subscription {
 *   new (scheduler: Scheduler, work: (state?: T) => void);
 *   schedule(state?: T, delay: number = 0): Subscription;
 * }
 * ```
 *
 * @class Action<T>
 */
var Action = (function (_super) {
    __extends$9(Action, _super);
    function Action(scheduler, work) {
        _super.call(this);
    }
    /**
     * Schedules this action on its parent Scheduler for execution. May be passed
     * some context object, `state`. May happen at some point in the future,
     * according to the `delay` parameter, if specified.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler.
     * @return {void}
     */
    Action.prototype.schedule = function (state$$1, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this;
    };
    return Action;
}(Subscription_1.Subscription));
var Action_2 = Action;
var Action_1 = {
    Action: Action_2
};
var __extends$8 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsyncAction = (function (_super) {
    __extends$8(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
        this.pending = false;
    }
    AsyncAction.prototype.schedule = function (state$$1, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (this.closed) {
            return this;
        }
        // Always replace the current state with the new state.
        this.state = state$$1;
        // Set the pending flag indicating that this action has been scheduled, or
        // has recursively rescheduled itself.
        this.pending = true;
        var id = this.id;
        var scheduler = this.scheduler;
        //
        // Important implementation note:
        //
        // Actions only execute once by default, unless rescheduled from within the
        // scheduled callback. This allows us to implement single and repeat
        // actions via the same code path, without adding API surface area, as well
        // as mimic traditional recursion but across asynchronous boundaries.
        //
        // However, JS runtimes and timers distinguish between intervals achieved by
        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
        // serial `setTimeout` calls can be individually delayed, which delays
        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
        // guarantee the interval callback will be invoked more precisely to the
        // interval period, regardless of load.
        //
        // Therefore, we use `setInterval` to schedule single and repeat actions.
        // If the action reschedules itself with the same delay, the interval is not
        // canceled. If the action doesn't reschedule, or reschedules with a
        // different delay, the interval will be canceled after scheduled callback
        // execution.
        //
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.delay = delay;
        // If this action has already an async Id, don't request a new one.
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return root.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If this action is rescheduled with the same delay time, don't clear the interval id.
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        // Otherwise, if the action's delay time is different from the current delay,
        // or the action has been rescheduled before it's executed, clear the interval id
        return root.root.clearInterval(id) && undefined || undefined;
    };
    /**
     * Immediately executes this action and the `work` it contains.
     * @return {any}
     */
    AsyncAction.prototype.execute = function (state$$1, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state$$1, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            // Dequeue if the action didn't reschedule itself. Don't call
            // unsubscribe(), because the action could reschedule later.
            // For example:
            // ```
            // scheduler.schedule(function doWork(counter) {
            //   /* ... I'm a busy worker bee ... */
            //   var originalAction = this;
            //   /* wait 100ms before rescheduling the action */
            //   setTimeout(function () {
            //     originalAction.schedule(counter + 1);
            //   }, 100);
            // }, 1000);
            // ```
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state$$1, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state$$1);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index$$1 = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index$$1 !== -1) {
            actions.splice(index$$1, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(Action_1.Action));
var AsyncAction_2 = AsyncAction;
var AsyncAction_1 = {
    AsyncAction: AsyncAction_2
};
/**
 * An execution context and a data structure to order tasks and schedule their
 * execution. Provides a notion of (potentially virtual) time, through the
 * `now()` getter method.
 *
 * Each unit of work in a Scheduler is called an {@link Action}.
 *
 * ```ts
 * class Scheduler {
 *   now(): number;
 *   schedule(work, delay?, state?): Subscription;
 * }
 * ```
 *
 * @class Scheduler
 */
var Scheduler = (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    /**
     * Schedules a function, `work`, for execution. May happen at some point in
     * the future, according to the `delay` parameter, if specified. May be passed
     * some context object, `state`, which will be passed to the `work` function.
     *
     * The given arguments will be processed an stored as an Action object in a
     * queue of actions.
     *
     * @param {function(state: ?T): ?Subscription} work A function representing a
     * task, or some unit of work to be executed by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler itself.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @return {Subscription} A subscription in order to be able to unsubscribe
     * the scheduled work.
     */
    Scheduler.prototype.schedule = function (work, delay, state$$1) {
        if (delay === void 0) {
            delay = 0;
        }
        return new this.SchedulerAction(this, work).schedule(state$$1, delay);
    };
    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
    return Scheduler;
}());
var Scheduler_2 = Scheduler;
var Scheduler_1 = {
    Scheduler: Scheduler_2
};
var __extends$10 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler = (function (_super) {
    __extends$10(AsyncScheduler, _super);
    function AsyncScheduler() {
        _super.apply(this, arguments);
        this.actions = [];
        /**
         * A flag to indicate whether the Scheduler is currently executing a batch of
         * queued actions.
         * @type {boolean}
         */
        this.active = false;
        /**
         * An internal ID used to track the latest asynchronous task such as those
         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
         * others.
         * @type {any}
         */
        this.scheduled = undefined;
    }
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift()); // exhaust the scheduler queue
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler_1.Scheduler));
var AsyncScheduler_2 = AsyncScheduler;
var AsyncScheduler_1 = {
    AsyncScheduler: AsyncScheduler_2
};
/**
 *
 * Async Scheduler
 *
 * <span class="informal">Schedule task as if you used setTimeout(task, duration)</span>
 *
 * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript
 * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating
 * in intervals.
 *
 * If you just want to "defer" task, that is to perform it right after currently
 * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),
 * better choice will be the {@link asap} scheduler.
 *
 * @example <caption>Use async scheduler to delay task</caption>
 * const task = () => console.log('it works!');
 *
 * Rx.Scheduler.async.schedule(task, 2000);
 *
 * // After 2 seconds logs:
 * // "it works!"
 *
 *
 * @example <caption>Use async scheduler to repeat task in intervals</caption>
 * function task(state) {
 *   console.log(state);
 *   this.schedule(state + 1, 1000); // `this` references currently executing Action,
 *                                   // which we reschedule with new state and delay
 * }
 *
 * Rx.Scheduler.async.schedule(task, 3000, 0);
 *
 * // Logs:
 * // 0 after 3s
 * // 1 after 4s
 * // 2 after 5s
 * // 3 after 6s
 *
 * @static true
 * @name async
 * @owner Scheduler
 */
var async_1 = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
var async = {
    async: async_1
};
function isNumeric(val) {
    // parseFloat NaNs numeric-cast false positives (null|true|false|"")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    // adding 1 corrects loss of precision from parseFloat (#15100)
    return !isArray.isArray(val) && (val - parseFloat(val) + 1) >= 0;
}
var isNumeric_2 = isNumeric;
var isNumeric_1 = {
    isNumeric: isNumeric_2
};
function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
var isScheduler_2 = isScheduler;
var isScheduler_1 = {
    isScheduler: isScheduler_2
};
function isDate$1(value) {
    return value instanceof Date && !isNaN(+value);
}
var isDate_2 = isDate$1;
var isDate_1 = {
    isDate: isDate_2
};
var __extends$11 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var TimerObservable = (function (_super) {
    __extends$11(TimerObservable, _super);
    function TimerObservable(dueTime, period, scheduler) {
        if (dueTime === void 0) {
            dueTime = 0;
        }
        _super.call(this);
        this.period = -1;
        this.dueTime = 0;
        if (isNumeric_1.isNumeric(period)) {
            this.period = Number(period) < 1 && 1 || Number(period);
        }
        else if (isScheduler_1.isScheduler(period)) {
            scheduler = period;
        }
        if (!isScheduler_1.isScheduler(scheduler)) {
            scheduler = async.async;
        }
        this.scheduler = scheduler;
        this.dueTime = isDate_1.isDate(dueTime) ?
            (+dueTime - this.scheduler.now()) :
            dueTime;
    }
    /**
     * Creates an Observable that starts emitting after an `initialDelay` and
     * emits ever increasing numbers after each `period` of time thereafter.
     *
     * <span class="informal">Its like {@link interval}, but you can specify when
     * should the emissions start.</span>
     *
     * <img src="./img/timer.png" width="100%">
     *
     * `timer` returns an Observable that emits an infinite sequence of ascending
     * integers, with a constant interval of time, `period` of your choosing
     * between those emissions. The first emission happens after the specified
     * `initialDelay`. The initial delay may be a {@link Date}. By default, this
     * operator uses the `async` IScheduler to provide a notion of time, but you
     * may pass any IScheduler to it. If `period` is not specified, the output
     * Observable emits only one value, `0`. Otherwise, it emits an infinite
     * sequence.
     *
     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>
     * var numbers = Rx.Observable.timer(3000, 1000);
     * numbers.subscribe(x => console.log(x));
     *
     * @example <caption>Emits one number after five seconds</caption>
     * var numbers = Rx.Observable.timer(5000);
     * numbers.subscribe(x => console.log(x));
     *
     * @see {@link interval}
     * @see {@link delay}
     *
     * @param {number|Date} initialDelay The initial delay time to wait before
     * emitting the first value of `0`.
     * @param {number} [period] The period of time between emissions of the
     * subsequent numbers.
     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling
     * the emission of values, and providing a notion of "time".
     * @return {Observable} An Observable that emits a `0` after the
     * `initialDelay` and ever increasing numbers after each `period` of time
     * thereafter.
     * @static true
     * @name timer
     * @owner Observable
     */
    TimerObservable.create = function (initialDelay, period, scheduler) {
        if (initialDelay === void 0) {
            initialDelay = 0;
        }
        return new TimerObservable(initialDelay, period, scheduler);
    };
    TimerObservable.dispatch = function (state$$1) {
        var index$$1 = state$$1.index, period = state$$1.period, subscriber = state$$1.subscriber;
        var action = this;
        subscriber.next(index$$1);
        if (subscriber.closed) {
            return;
        }
        else if (period === -1) {
            return subscriber.complete();
        }
        state$$1.index = index$$1 + 1;
        action.schedule(state$$1, period);
    };
    TimerObservable.prototype._subscribe = function (subscriber) {
        var index$$1 = 0;
        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;
        return scheduler.schedule(TimerObservable.dispatch, dueTime, {
            index: index$$1, period: period, subscriber: subscriber
        });
    };
    return TimerObservable;
}(Observable_1.Observable));
var __extends$12 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferSubscriber = (function (_super) {
    __extends$12(BufferSubscriber, _super);
    function BufferSubscriber(destination, closingNotifier) {
        _super.call(this, destination);
        this.buffer = [];
        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
    }
    BufferSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var buffer = this.buffer;
        this.buffer = [];
        this.destination.next(buffer);
    };
    return BufferSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$13 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferCountSubscriber = (function (_super) {
    __extends$13(BufferCountSubscriber, _super);
    function BufferCountSubscriber(destination, bufferSize) {
        _super.call(this, destination);
        this.bufferSize = bufferSize;
        this.buffer = [];
    }
    BufferCountSubscriber.prototype._next = function (value) {
        var buffer = this.buffer;
        buffer.push(value);
        if (buffer.length == this.bufferSize) {
            this.destination.next(buffer);
            this.buffer = [];
        }
    };
    BufferCountSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer.length > 0) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    return BufferCountSubscriber;
}(Subscriber_1.Subscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferSkipCountSubscriber = (function (_super) {
    __extends$13(BufferSkipCountSubscriber, _super);
    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
        _super.call(this, destination);
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
        this.buffers = [];
        this.count = 0;
    }
    BufferSkipCountSubscriber.prototype._next = function (value) {
        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
        this.count++;
        if (count % startBufferEvery === 0) {
            buffers.push([]);
        }
        for (var i = buffers.length; i--;) {
            var buffer = buffers[i];
            buffer.push(value);
            if (buffer.length === bufferSize) {
                buffers.splice(i, 1);
                this.destination.next(buffer);
            }
        }
    };
    BufferSkipCountSubscriber.prototype._complete = function () {
        var _a = this, buffers = _a.buffers, destination = _a.destination;
        while (buffers.length > 0) {
            var buffer = buffers.shift();
            if (buffer.length > 0) {
                destination.next(buffer);
            }
        }
        _super.prototype._complete.call(this);
    };
    return BufferSkipCountSubscriber;
}(Subscriber_1.Subscriber));
var __extends$14 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Context = (function () {
    function Context() {
        this.buffer = [];
    }
    return Context;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferTimeSubscriber = (function (_super) {
    __extends$14(BufferTimeSubscriber, _super);
    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        _super.call(this, destination);
        this.bufferTimeSpan = bufferTimeSpan;
        this.bufferCreationInterval = bufferCreationInterval;
        this.maxBufferSize = maxBufferSize;
        this.scheduler = scheduler;
        this.contexts = [];
        var context = this.openContext();
        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
        if (this.timespanOnly) {
            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
        else {
            var closeState = { subscriber: this, context: context };
            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };
            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
        }
    }
    BufferTimeSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        var filledBufferContext;
        for (var i = 0; i < len; i++) {
            var context = contexts[i];
            var buffer = context.buffer;
            buffer.push(value);
            if (buffer.length == this.maxBufferSize) {
                filledBufferContext = context;
            }
        }
        if (filledBufferContext) {
            this.onBufferFull(filledBufferContext);
        }
    };
    BufferTimeSubscriber.prototype._error = function (err) {
        this.contexts.length = 0;
        _super.prototype._error.call(this, err);
    };
    BufferTimeSubscriber.prototype._complete = function () {
        var _a = this, contexts = _a.contexts, destination = _a.destination;
        while (contexts.length > 0) {
            var context = contexts.shift();
            destination.next(context.buffer);
        }
        _super.prototype._complete.call(this);
    };
    BufferTimeSubscriber.prototype._unsubscribe = function () {
        this.contexts = null;
    };
    BufferTimeSubscriber.prototype.onBufferFull = function (context) {
        this.closeContext(context);
        var closeAction = context.closeAction;
        closeAction.unsubscribe();
        this.remove(closeAction);
        if (!this.closed && this.timespanOnly) {
            context = this.openContext();
            var bufferTimeSpan = this.bufferTimeSpan;
            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
    };
    BufferTimeSubscriber.prototype.openContext = function () {
        var context = new Context();
        this.contexts.push(context);
        return context;
    };
    BufferTimeSubscriber.prototype.closeContext = function (context) {
        this.destination.next(context.buffer);
        var contexts = this.contexts;
        var spliceIndex = contexts ? contexts.indexOf(context) : -1;
        if (spliceIndex >= 0) {
            contexts.splice(contexts.indexOf(context), 1);
        }
    };
    return BufferTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchBufferTimeSpanOnly(state$$1) {
    var subscriber = state$$1.subscriber;
    var prevContext = state$$1.context;
    if (prevContext) {
        subscriber.closeContext(prevContext);
    }
    if (!subscriber.closed) {
        state$$1.context = subscriber.openContext();
        state$$1.context.closeAction = this.schedule(state$$1, state$$1.bufferTimeSpan);
    }
}
function dispatchBufferCreation(state$$1) {
    var bufferCreationInterval = state$$1.bufferCreationInterval, bufferTimeSpan = state$$1.bufferTimeSpan, subscriber = state$$1.subscriber, scheduler = state$$1.scheduler;
    var context = subscriber.openContext();
    var action = this;
    if (!subscriber.closed) {
        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
        action.schedule(state$$1, bufferCreationInterval);
    }
}
function dispatchBufferClose(arg) {
    var subscriber = arg.subscriber, context = arg.context;
    subscriber.closeContext(context);
}
var __extends$15 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferToggleSubscriber = (function (_super) {
    __extends$15(BufferToggleSubscriber, _super);
    function BufferToggleSubscriber(destination, openings, closingSelector) {
        _super.call(this, destination);
        this.openings = openings;
        this.closingSelector = closingSelector;
        this.contexts = [];
        this.add(subscribeToResult_1.subscribeToResult(this, openings));
    }
    BufferToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        for (var i = 0; i < len; i++) {
            contexts[i].buffer.push(value);
        }
    };
    BufferToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context = contexts.shift();
            context.subscription.unsubscribe();
            context.buffer = null;
            context.subscription = null;
        }
        this.contexts = null;
        _super.prototype._error.call(this, err);
    };
    BufferToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context = contexts.shift();
            this.destination.next(context.buffer);
            context.subscription.unsubscribe();
            context.buffer = null;
            context.subscription = null;
        }
        this.contexts = null;
        _super.prototype._complete.call(this);
    };
    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
    };
    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
        this.closeBuffer(innerSub.context);
    };
    BufferToggleSubscriber.prototype.openBuffer = function (value) {
        try {
            var closingSelector = this.closingSelector;
            var closingNotifier = closingSelector.call(this, value);
            if (closingNotifier) {
                this.trySubscribe(closingNotifier);
            }
        }
        catch (err) {
            this._error(err);
        }
    };
    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
        var contexts = this.contexts;
        if (contexts && context) {
            var buffer = context.buffer, subscription = context.subscription;
            this.destination.next(buffer);
            contexts.splice(contexts.indexOf(context), 1);
            this.remove(subscription);
            subscription.unsubscribe();
        }
    };
    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
        var contexts = this.contexts;
        var buffer = [];
        var subscription = new Subscription_1.Subscription();
        var context = { buffer: buffer, subscription: subscription };
        contexts.push(context);
        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
        if (!innerSubscription || innerSubscription.closed) {
            this.closeBuffer(context);
        }
        else {
            innerSubscription.context = context;
            this.add(innerSubscription);
            subscription.add(innerSubscription);
        }
    };
    return BufferToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$16 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferWhenSubscriber = (function (_super) {
    __extends$16(BufferWhenSubscriber, _super);
    function BufferWhenSubscriber(destination, closingSelector) {
        _super.call(this, destination);
        this.closingSelector = closingSelector;
        this.subscribing = false;
        this.openBuffer();
    }
    BufferWhenSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferWhenSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    BufferWhenSubscriber.prototype._unsubscribe = function () {
        this.buffer = null;
        this.subscribing = false;
    };
    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openBuffer();
    };
    BufferWhenSubscriber.prototype.notifyComplete = function () {
        if (this.subscribing) {
            this.complete();
        }
        else {
            this.openBuffer();
        }
    };
    BufferWhenSubscriber.prototype.openBuffer = function () {
        var closingSubscription = this.closingSubscription;
        if (closingSubscription) {
            this.remove(closingSubscription);
            closingSubscription.unsubscribe();
        }
        var buffer = this.buffer;
        if (this.buffer) {
            this.destination.next(buffer);
        }
        this.buffer = [];
        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
        if (closingNotifier === errorObject.errorObject) {
            this.error(errorObject.errorObject.e);
        }
        else {
            closingSubscription = new Subscription_1.Subscription();
            this.closingSubscription = closingSubscription;
            this.add(closingSubscription);
            this.subscribing = true;
            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
            this.subscribing = false;
        }
    };
    return BufferWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$17 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * Catches errors on the observable to be handled by returning a new observable or throwing an error.
 *
 * <img src="./img/catch.png" width="100%">
 *
 * @example <caption>Continues with a different Observable when there's an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n == 4) {
 * 	     throw 'four!';
 *     }
 *	   return n;
 *   })
 *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))
 *   .subscribe(x => console.log(x));
 *   // 1, 2, 3, I, II, III, IV, V
 *
 * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n === 4) {
 * 	     throw 'four!';
 *     }
 * 	   return n;
 *   })
 *   .catch((err, caught) => caught)
 *   .take(30)
 *   .subscribe(x => console.log(x));
 *   // 1, 2, 3, 1, 2, 3, ...
 *
 * @example <caption>Throws a new error when the source Observable throws an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 *     if (n == 4) {
 *       throw 'four!';
 *     }
 *     return n;
 *   })
 *   .catch(err => {
 *     throw 'error in source. Details: ' + err;
 *   })
 *   .subscribe(
 *     x => console.log(x),
 *     err => console.log(err)
 *   );
 *   // 1, 2, 3, error in source. Details: four!
 *
 * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
 *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
 *  is returned by the `selector` will be used to continue the observable chain.
 * @return {Observable} An observable that originates from either the source or the observable returned by the
 *  catch `selector` function.
 * @name catchError
 */
function catchError$1(selector) {
    return function catchErrorOperatorFunction(source) {
        var operator = new CatchOperator(selector);
        var caught = source.lift(operator);
        return (operator.caught = caught);
    };
}
var catchError_2 = catchError$1;
var CatchOperator = (function () {
    function CatchOperator(selector) {
        this.selector = selector;
    }
    CatchOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    };
    return CatchOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CatchSubscriber = (function (_super) {
    __extends$17(CatchSubscriber, _super);
    function CatchSubscriber(destination, selector, caught) {
        _super.call(this, destination);
        this.selector = selector;
        this.caught = caught;
    }
    // NOTE: overriding `error` instead of `_error` because we don't want
    // to have this flag this subscriber as `isStopped`. We can mimic the
    // behavior of the RetrySubscriber (from the `retry` operator), where
    // we unsubscribe from our source chain, reset our Subscriber flags,
    // then subscribe to the selector result.
    CatchSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var result = void 0;
            try {
                result = this.selector(err, this.caught);
            }
            catch (err2) {
                _super.prototype.error.call(this, err2);
                return;
            }
            this._unsubscribeAndRecycle();
            this.add(subscribeToResult_1.subscribeToResult(this, result));
        }
    };
    return CatchSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var catchError_1 = {
    catchError: catchError_2
};
var __extends$20 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ScalarObservable = (function (_super) {
    __extends$20(ScalarObservable, _super);
    function ScalarObservable(value, scheduler) {
        _super.call(this);
        this.value = value;
        this.scheduler = scheduler;
        this._isScalar = true;
        if (scheduler) {
            this._isScalar = false;
        }
    }
    ScalarObservable.create = function (value, scheduler) {
        return new ScalarObservable(value, scheduler);
    };
    ScalarObservable.dispatch = function (state$$1) {
        var done = state$$1.done, value = state$$1.value, subscriber = state$$1.subscriber;
        if (done) {
            subscriber.complete();
            return;
        }
        subscriber.next(value);
        if (subscriber.closed) {
            return;
        }
        state$$1.done = true;
        this.schedule(state$$1);
    };
    ScalarObservable.prototype._subscribe = function (subscriber) {
        var value = this.value;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ScalarObservable.dispatch, 0, {
                done: false, value: value, subscriber: subscriber
            });
        }
        else {
            subscriber.next(value);
            if (!subscriber.closed) {
                subscriber.complete();
            }
        }
    };
    return ScalarObservable;
}(Observable_1.Observable));
var ScalarObservable_2 = ScalarObservable;
var ScalarObservable_1 = {
    ScalarObservable: ScalarObservable_2
};
var __extends$21 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var EmptyObservable = (function (_super) {
    __extends$21(EmptyObservable, _super);
    function EmptyObservable(scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable that emits no items to the Observer and immediately
     * emits a complete notification.
     *
     * <span class="informal">Just emits 'complete', and nothing else.
     * </span>
     *
     * <img src="./img/empty.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the complete notification. It can be used for composing with other
     * Observables, such as in a {@link mergeMap}.
     *
     * @example <caption>Emit the number 7, then complete.</caption>
     * var result = Rx.Observable.empty().startWith(7);
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
     * var interval = Rx.Observable.interval(1000);
     * var result = interval.mergeMap(x =>
     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
     * );
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following to the console:
     * // x is equal to the count on the interval eg(0,1,2,3,...)
     * // x will occur every 1000ms
     * // if x % 2 is equal to 1 print abc
     * // if x % 2 is not equal to 1 nothing will be output
     *
     * @see {@link create}
     * @see {@link never}
     * @see {@link of}
     * @see {@link throw}
     *
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emission of the complete notification.
     * @return {Observable} An "empty" Observable: emits only the complete
     * notification.
     * @static true
     * @name empty
     * @owner Observable
     */
    EmptyObservable.create = function (scheduler) {
        return new EmptyObservable(scheduler);
    };
    EmptyObservable.dispatch = function (arg) {
        var subscriber = arg.subscriber;
        subscriber.complete();
    };
    EmptyObservable.prototype._subscribe = function (subscriber) {
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
        }
        else {
            subscriber.complete();
        }
    };
    return EmptyObservable;
}(Observable_1.Observable));
var EmptyObservable_2 = EmptyObservable;
var EmptyObservable_1 = {
    EmptyObservable: EmptyObservable_2
};
var __extends$19 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayObservable = (function (_super) {
    __extends$19(ArrayObservable, _super);
    function ArrayObservable(array, scheduler) {
        _super.call(this);
        this.array = array;
        this.scheduler = scheduler;
        if (!scheduler && array.length === 1) {
            this._isScalar = true;
            this.value = array[0];
        }
    }
    ArrayObservable.create = function (array, scheduler) {
        return new ArrayObservable(array, scheduler);
    };
    /**
     * Creates an Observable that emits some values you specify as arguments,
     * immediately one after the other, and then emits a complete notification.
     *
     * <span class="informal">Emits the arguments you provide, then completes.
     * </span>
     *
     * <img src="./img/of.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the arguments given, and the complete notification thereafter. It can
     * be used for composing with other Observables, such as with {@link concat}.
     * By default, it uses a `null` IScheduler, which means the `next`
     * notifications are sent synchronously, although with a different IScheduler
     * it is possible to determine when those notifications will be delivered.
     *
     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
     * var numbers = Rx.Observable.of(10, 20, 30);
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var interval = Rx.Observable.interval(1000);
     * var result = numbers.concat(letters).concat(interval);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link create}
     * @see {@link empty}
     * @see {@link never}
     * @see {@link throw}
     *
     * @param {...T} values Arguments that represent `next` values to be emitted.
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emissions of the `next` notifications.
     * @return {Observable<T>} An Observable that emits each given input value.
     * @static true
     * @name of
     * @owner Observable
     */
    ArrayObservable.of = function () {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i - 0] = arguments[_i];
        }
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len > 1) {
            return new ArrayObservable(array, scheduler);
        }
        else if (len === 1) {
            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
        }
        else {
            return new EmptyObservable_1.EmptyObservable(scheduler);
        }
    };
    ArrayObservable.dispatch = function (state$$1) {
        var array = state$$1.array, index$$1 = state$$1.index, count = state$$1.count, subscriber = state$$1.subscriber;
        if (index$$1 >= count) {
            subscriber.complete();
            return;
        }
        subscriber.next(array[index$$1]);
        if (subscriber.closed) {
            return;
        }
        state$$1.index = index$$1 + 1;
        this.schedule(state$$1);
    };
    ArrayObservable.prototype._subscribe = function (subscriber) {
        var index$$1 = 0;
        var array = this.array;
        var count = array.length;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ArrayObservable.dispatch, 0, {
                array: array, index: index$$1, count: count, subscriber: subscriber
            });
        }
        else {
            for (var i = 0; i < count && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayObservable;
}(Observable_1.Observable));
var ArrayObservable_2 = ArrayObservable;
var ArrayObservable_1 = {
    ArrayObservable: ArrayObservable_2
};
var __extends$18 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var none = {};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CombineLatestSubscriber = (function (_super) {
    __extends$18(CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, project) {
        _super.call(this, destination);
        this.project = project;
        this.active = 0;
        this.values = [];
        this.observables = [];
    }
    CombineLatestSubscriber.prototype._next = function (observable) {
        this.values.push(none);
        this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
            }
        }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    };
    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var values = this.values;
        var oldVal = values[outerIndex];
        var toRespond = !this.toRespond
            ? 0
            : oldVal === none ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.project) {
                this._tryProject(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    };
    CombineLatestSubscriber.prototype._tryProject = function (values) {
        var result;
        try {
            result = this.project.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return CombineLatestSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var of_1 = ArrayObservable_1.ArrayObservable.of;
var of$3 = {
    of: of_1
};
var __extends$23 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var PromiseObservable = (function (_super) {
    __extends$23(PromiseObservable, _super);
    function PromiseObservable(promise, scheduler) {
        _super.call(this);
        this.promise = promise;
        this.scheduler = scheduler;
    }
    /**
     * Converts a Promise to an Observable.
     *
     * <span class="informal">Returns an Observable that just emits the Promise's
     * resolved value, then completes.</span>
     *
     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
     * Observable. If the Promise resolves with a value, the output Observable
     * emits that resolved value as a `next`, and then completes. If the Promise
     * is rejected, then the output Observable emits the corresponding Error.
     *
     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     * @see {@link bindCallback}
     * @see {@link from}
     *
     * @param {PromiseLike<T>} promise The promise to be converted.
     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling
     * the delivery of the resolved value (or the rejection).
     * @return {Observable<T>} An Observable which wraps the Promise.
     * @static true
     * @name fromPromise
     * @owner Observable
     */
    PromiseObservable.create = function (promise, scheduler) {
        return new PromiseObservable(promise, scheduler);
    };
    PromiseObservable.prototype._subscribe = function (subscriber) {
        var _this = this;
        var promise = this.promise;
        var scheduler = this.scheduler;
        if (scheduler == null) {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    subscriber.next(this.value);
                    subscriber.complete();
                }
            }
            else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.next(value);
                        subscriber.complete();
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.error(err);
                    }
                })
                    .then(null, function (err) {
                    // escape the promise trap, throw unhandled errors
                    root.root.setTimeout(function () { throw err; });
                });
            }
        }
        else {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                }
            }
            else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                    }
                })
                    .then(null, function (err) {
                    // escape the promise trap, throw unhandled errors
                    root.root.setTimeout(function () { throw err; });
                });
            }
        }
    };
    return PromiseObservable;
}(Observable_1.Observable));
var PromiseObservable_2 = PromiseObservable;
function dispatchNext(arg) {
    var value = arg.value, subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
    }
}
function dispatchError(arg) {
    var err = arg.err, subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.error(err);
    }
}
var PromiseObservable_1 = {
    PromiseObservable: PromiseObservable_2
};
var __extends$24 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var IteratorObservable = (function (_super) {
    __extends$24(IteratorObservable, _super);
    function IteratorObservable(iterator$$2, scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
        if (iterator$$2 == null) {
            throw new Error('iterator cannot be null.');
        }
        this.iterator = getIterator(iterator$$2);
    }
    IteratorObservable.create = function (iterator$$2, scheduler) {
        return new IteratorObservable(iterator$$2, scheduler);
    };
    IteratorObservable.dispatch = function (state$$1) {
        var index$$1 = state$$1.index, hasError = state$$1.hasError, iterator$$2 = state$$1.iterator, subscriber = state$$1.subscriber;
        if (hasError) {
            subscriber.error(state$$1.error);
            return;
        }
        var result = iterator$$2.next();
        if (result.done) {
            subscriber.complete();
            return;
        }
        subscriber.next(result.value);
        state$$1.index = index$$1 + 1;
        if (subscriber.closed) {
            if (typeof iterator$$2.return === 'function') {
                iterator$$2.return();
            }
            return;
        }
        this.schedule(state$$1);
    };
    IteratorObservable.prototype._subscribe = function (subscriber) {
        var index$$1 = 0;
        var _a = this, iterator$$2 = _a.iterator, scheduler = _a.scheduler;
        if (scheduler) {
            return scheduler.schedule(IteratorObservable.dispatch, 0, {
                index: index$$1, iterator: iterator$$2, subscriber: subscriber
            });
        }
        else {
            do {
                var result = iterator$$2.next();
                if (result.done) {
                    subscriber.complete();
                    break;
                }
                else {
                    subscriber.next(result.value);
                }
                if (subscriber.closed) {
                    if (typeof iterator$$2.return === 'function') {
                        iterator$$2.return();
                    }
                    break;
                }
            } while (true);
        }
    };
    return IteratorObservable;
}(Observable_1.Observable));
var IteratorObservable_2 = IteratorObservable;
var StringIterator = (function () {
    function StringIterator(str, idx, len) {
        if (idx === void 0) {
            idx = 0;
        }
        if (len === void 0) {
            len = str.length;
        }
        this.str = str;
        this.idx = idx;
        this.len = len;
    }
    StringIterator.prototype[iterator.iterator] = function () { return (this); };
    StringIterator.prototype.next = function () {
        return this.idx < this.len ? {
            done: false,
            value: this.str.charAt(this.idx++)
        } : {
            done: true,
            value: undefined
        };
    };
    return StringIterator;
}());
var ArrayIterator = (function () {
    function ArrayIterator(arr, idx, len) {
        if (idx === void 0) {
            idx = 0;
        }
        if (len === void 0) {
            len = toLength(arr);
        }
        this.arr = arr;
        this.idx = idx;
        this.len = len;
    }
    ArrayIterator.prototype[iterator.iterator] = function () { return this; };
    ArrayIterator.prototype.next = function () {
        return this.idx < this.len ? {
            done: false,
            value: this.arr[this.idx++]
        } : {
            done: true,
            value: undefined
        };
    };
    return ArrayIterator;
}());
function getIterator(obj) {
    var i = obj[iterator.iterator];
    if (!i && typeof obj === 'string') {
        return new StringIterator(obj);
    }
    if (!i && obj.length !== undefined) {
        return new ArrayIterator(obj);
    }
    if (!i) {
        throw new TypeError('object is not iterable');
    }
    return obj[iterator.iterator]();
}
var maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(o) {
    var len = +o.length;
    if (isNaN(len)) {
        return 0;
    }
    if (len === 0 || !numberIsFinite(len)) {
        return len;
    }
    len = sign(len) * Math.floor(Math.abs(len));
    if (len <= 0) {
        return 0;
    }
    if (len > maxSafeInteger) {
        return maxSafeInteger;
    }
    return len;
}
function numberIsFinite(value) {
    return typeof value === 'number' && root.root.isFinite(value);
}
function sign(value) {
    var valueAsNumber = +value;
    if (valueAsNumber === 0) {
        return valueAsNumber;
    }
    if (isNaN(valueAsNumber)) {
        return valueAsNumber;
    }
    return valueAsNumber < 0 ? -1 : 1;
}
var IteratorObservable_1 = {
    IteratorObservable: IteratorObservable_2
};
var __extends$25 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayLikeObservable = (function (_super) {
    __extends$25(ArrayLikeObservable, _super);
    function ArrayLikeObservable(arrayLike, scheduler) {
        _super.call(this);
        this.arrayLike = arrayLike;
        this.scheduler = scheduler;
        if (!scheduler && arrayLike.length === 1) {
            this._isScalar = true;
            this.value = arrayLike[0];
        }
    }
    ArrayLikeObservable.create = function (arrayLike, scheduler) {
        var length = arrayLike.length;
        if (length === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        else if (length === 1) {
            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
        }
        else {
            return new ArrayLikeObservable(arrayLike, scheduler);
        }
    };
    ArrayLikeObservable.dispatch = function (state$$1) {
        var arrayLike = state$$1.arrayLike, index$$1 = state$$1.index, length = state$$1.length, subscriber = state$$1.subscriber;
        if (subscriber.closed) {
            return;
        }
        if (index$$1 >= length) {
            subscriber.complete();
            return;
        }
        subscriber.next(arrayLike[index$$1]);
        state$$1.index = index$$1 + 1;
        this.schedule(state$$1);
    };
    ArrayLikeObservable.prototype._subscribe = function (subscriber) {
        var index$$1 = 0;
        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;
        var length = arrayLike.length;
        if (scheduler) {
            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                arrayLike: arrayLike, index: index$$1, length: length, subscriber: subscriber
            });
        }
        else {
            for (var i = 0; i < length && !subscriber.closed; i++) {
                subscriber.next(arrayLike[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayLikeObservable;
}(Observable_1.Observable));
var ArrayLikeObservable_2 = ArrayLikeObservable;
var ArrayLikeObservable_1 = {
    ArrayLikeObservable: ArrayLikeObservable_2
};
/**
 * Represents a push-based event or value that an {@link Observable} can emit.
 * This class is particularly useful for operators that manage notifications,
 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see {@link materialize}
 * @see {@link dematerialize}
 * @see {@link observeOn}
 *
 * @class Notification<T>
 */
var Notification = (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    /**
     * Delivers to the given `observer` the value wrapped by this Notification.
     * @param {Observer} observer
     * @return
     */
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    /**
     * Given some {@link Observer} callbacks, deliver the value represented by the
     * current Notification to the correctly corresponding callback.
     * @param {function(value: T): void} next An Observer `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    /**
     * Takes an Observer or its individual callback functions, and calls `observe`
     * or `do` methods accordingly.
     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
     * the `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    /**
     * Returns a simple Observable that just delivers the notification represented
     * by this Notification instance.
     * @return {any}
     */
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return Observable_1.Observable.of(this.value);
            case 'E':
                return Observable_1.Observable.throw(this.error);
            case 'C':
                return Observable_1.Observable.empty();
        }
        throw new Error('unexpected notification kind value');
    };
    /**
     * A shortcut to create a Notification instance of the type `next` from a
     * given value.
     * @param {T} value The `next` value.
     * @return {Notification<T>} The "next" Notification representing the
     * argument.
     */
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    /**
     * A shortcut to create a Notification instance of the type `error` from a
     * given error.
     * @param {any} [err] The `error` error.
     * @return {Notification<T>} The "error" Notification representing the
     * argument.
     */
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    /**
     * A shortcut to create a Notification instance of the type `complete`.
     * @return {Notification<any>} The valueless "complete" Notification.
     */
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());
var Notification_2 = Notification;
var Notification_1 = {
    Notification: Notification_2
};
var __extends$26 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *
 * Re-emits all notifications from source Observable with specified scheduler.
 *
 * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
 *
 * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
 * notifications emitted by the source Observable. It might be useful, if you do not have control over
 * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
 *
 * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
 * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
 * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
 * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
 * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
 * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
 * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
 * little bit more, to ensure that they are emitted at expected moments.
 *
 * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
 * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
 * will delay all notifications - including error notifications - while `delay` will pass through error
 * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
 * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
 * for notification emissions in general.
 *
 * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
 * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
 *                                               // with async scheduler by default...
 *
 * intervals
 * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
 * .subscribe(val => {                           // scheduler to ensure smooth animation.
 *   someDiv.style.height = val + 'px';
 * });
 *
 * @see {@link delay}
 *
 * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.
 * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
 * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
 * but with provided scheduler.
 *
 * @method observeOn
 * @owner Observable
 */
function observeOn$1(scheduler, delay) {
    if (delay === void 0) {
        delay = 0;
    }
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
var observeOn_2 = observeOn$1;
var ObserveOnOperator = (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());
var ObserveOnOperator_1 = ObserveOnOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ObserveOnSubscriber = (function (_super) {
    __extends$26(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        _super.call(this, destination);
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification_1.Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification_1.Notification.createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification_1.Notification.createComplete());
    };
    return ObserveOnSubscriber;
}(Subscriber_1.Subscriber));
var ObserveOnSubscriber_1 = ObserveOnSubscriber;
var ObserveOnMessage = (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());
var ObserveOnMessage_1 = ObserveOnMessage;
var observeOn_1 = {
    observeOn: observeOn_2,
    ObserveOnOperator: ObserveOnOperator_1,
    ObserveOnSubscriber: ObserveOnSubscriber_1,
    ObserveOnMessage: ObserveOnMessage_1
};
var __extends$22 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var FromObservable = (function (_super) {
    __extends$22(FromObservable, _super);
    function FromObservable(ish, scheduler) {
        _super.call(this, null);
        this.ish = ish;
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable from an Array, an array-like object, a Promise, an
     * iterable object, or an Observable-like object.
     *
     * <span class="informal">Converts almost anything to an Observable.</span>
     *
     * <img src="./img/from.png" width="100%">
     *
     * Convert various other objects and data types into Observables. `from`
     * converts a Promise or an array-like or an
     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
     * object into an Observable that emits the items in that promise or array or
     * iterable. A String, in this context, is treated as an array of characters.
     * Observable-like objects (contains a function named with the ES2015 Symbol
     * for Observable) can also be converted through this operator.
     *
     * @example <caption>Converts an array to an Observable</caption>
     * var array = [10, 20, 30];
     * var result = Rx.Observable.from(array);
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // 10 20 30
     *
     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
     * function* generateDoubles(seed) {
     *   var i = seed;
     *   while (true) {
     *     yield i;
     *     i = 2 * i; // double it
     *   }
     * }
     *
     * var iterator = generateDoubles(3);
     * var result = Rx.Observable.from(iterator).take(10);
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // 3 6 12 24 48 96 192 384 768 1536
     *
     * @see {@link create}
     * @see {@link fromEvent}
     * @see {@link fromEventPattern}
     * @see {@link fromPromise}
     *
     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
     * Observable-like, an Array, an iterable or an array-like object to be
     * converted.
     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
     * emissions of values.
     * @return {Observable<T>} The Observable whose values are originally from the
     * input object that was converted.
     * @static true
     * @name from
     * @owner Observable
     */
    FromObservable.create = function (ish, scheduler) {
        if (ish != null) {
            if (typeof ish[observable.observable] === 'function') {
                if (ish instanceof Observable_1.Observable && !scheduler) {
                    return ish;
                }
                return new FromObservable(ish, scheduler);
            }
            else if (isArray.isArray(ish)) {
                return new ArrayObservable_1.ArrayObservable(ish, scheduler);
            }
            else if (isPromise_1.isPromise(ish)) {
                return new PromiseObservable_1.PromiseObservable(ish, scheduler);
            }
            else if (typeof ish[iterator.iterator] === 'function' || typeof ish === 'string') {
                return new IteratorObservable_1.IteratorObservable(ish, scheduler);
            }
            else if (isArrayLike.isArrayLike(ish)) {
                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
            }
        }
        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
    };
    FromObservable.prototype._subscribe = function (subscriber) {
        var ish = this.ish;
        var scheduler = this.scheduler;
        if (scheduler == null) {
            return ish[observable.observable]().subscribe(subscriber);
        }
        else {
            return ish[observable.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
        }
    };
    return FromObservable;
}(Observable_1.Observable));
var FromObservable_2 = FromObservable;
var FromObservable_1 = {
    FromObservable: FromObservable_2
};
var from_1 = FromObservable_1.FromObservable.create;
var from = {
    from: from_1
};
var __extends$27 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap$1(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    return function mergeMapOperatorFunction(source) {
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
            resultSelector = null;
        }
        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));
    };
}
var mergeMap_2$1 = mergeMap$1;
var MergeMapOperator = (function () {
    function MergeMapOperator(project, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
    };
    return MergeMapOperator;
}());
var MergeMapOperator_1 = MergeMapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapSubscriber = (function (_super) {
    __extends$27(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        _super.call(this, destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index$$1 = this.index++;
        try {
            result = this.project(value, index$$1);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index$$1);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index$$1) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index$$1));
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (this.resultSelector) {
            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            this.destination.next(innerValue);
        }
    };
    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
        var result;
        try {
            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var MergeMapSubscriber_1 = MergeMapSubscriber;
var mergeMap_1 = {
    mergeMap: mergeMap_2$1,
    MergeMapOperator: MergeMapOperator_1,
    MergeMapSubscriber: MergeMapSubscriber_1
};
function identity(x) {
    return x;
}
var identity_2 = identity;
var identity_1 = {
    identity: identity_2
};
/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
function mergeAll$1(concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);
}
var mergeAll_2 = mergeAll$1;
var mergeAll_1 = {
    mergeAll: mergeAll_2
};
/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */
function concatAll$1() {
    return mergeAll_1.mergeAll(1);
}
var concatAll_2 = concatAll$1;
var concatAll_1 = {
    concatAll: concatAll_2
};
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from given
 * Observable and then moves on to the next.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * `concat` joins multiple Observables together, by subscribing to them one at a time and
 * merging their results into the output Observable. You can pass either an array of
 * Observables, or put them directly as arguments. Passing an empty array will result
 * in Observable that completes immediately.
 *
 * `concat` will subscribe to first input Observable and emit all its values, without
 * changing or affecting them in any way. When that Observable completes, it will
 * subscribe to then next Observable passed and, again, emit its values. This will be
 * repeated, until the operator runs out of Observables. When last input Observable completes,
 * `concat` will complete as well. At any given moment only one Observable passed to operator
 * emits values. If you would like to emit values from passed Observables concurrently, check out
 * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,
 * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.
 *
 * Note that if some input Observable never completes, `concat` will also never complete
 * and Observables following the one that did not complete will never be subscribed. On the other
 * hand, if some Observable simply completes immediately after it is subscribed, it will be
 * invisible for `concat`, which will just move on to the next Observable.
 *
 * If any Observable in chain errors, instead of passing control to the next Observable,
 * `concat` will error immediately as well. Observables that would be subscribed after
 * the one that emitted error, never will.
 *
 * If you pass to `concat` the same Observable many times, its stream of values
 * will be "replayed" on every subscription, which means you can repeat given Observable
 * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,
 * you can always use {@link repeat}.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = Rx.Observable.concat(timer, sequence);
 * result.subscribe(x => console.log(x));
 *
 * // results in:
 * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 *
 * @example <caption>Concatenate an array of 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed
 * result.subscribe(x => console.log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 *
 * @example <caption>Concatenate the same Observable to repeat it</caption>
 * const timer = Rx.Observable.interval(1000).take(2);
 *
 * Rx.Observable.concat(timer, timer) // concating the same Observable!
 * .subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('...and it is done!')
 * );
 *
 * // Logs:
 * // 0 after 1s
 * // 1 after 2s
 * // 0 after 3s
 * // 1 after 4s
 * // "...and it is done!" also after 4s
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {ObservableInput} input1 An input Observable to concatenate with others.
 * @param {ObservableInput} input2 An input Observable to concatenate with others.
 * More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @static true
 * @name concat
 * @owner Observable
 */
function concat$2() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {
        return from.from(observables[0]);
    }
    return concatAll_1.concatAll()(of$3.of.apply(void 0, observables));
}
var concat_2$1 = concat$2;
var concat_1 = {
    concat: concat_2$1
};
var __extends$28 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CountSubscriber = (function (_super) {
    __extends$28(CountSubscriber, _super);
    function CountSubscriber(destination, predicate, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.source = source;
        this.count = 0;
        this.index = 0;
    }
    CountSubscriber.prototype._next = function (value) {
        if (this.predicate) {
            this._tryPredicate(value);
        }
        else {
            this.count++;
        }
    };
    CountSubscriber.prototype._tryPredicate = function (value) {
        var result;
        try {
            result = this.predicate(value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.count++;
        }
    };
    CountSubscriber.prototype._complete = function () {
        this.destination.next(this.count);
        this.destination.complete();
    };
    return CountSubscriber;
}(Subscriber_1.Subscriber));
var __extends$29 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceSubscriber = (function (_super) {
    __extends$29(DebounceSubscriber, _super);
    function DebounceSubscriber(destination, durationSelector) {
        _super.call(this, destination);
        this.durationSelector = durationSelector;
        this.hasValue = false;
        this.durationSubscription = null;
    }
    DebounceSubscriber.prototype._next = function (value) {
        try {
            var result = this.durationSelector.call(this, value);
            if (result) {
                this._tryNext(value, result);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DebounceSubscriber.prototype._complete = function () {
        this.emitValue();
        this.destination.complete();
    };
    DebounceSubscriber.prototype._tryNext = function (value, duration) {
        var subscription = this.durationSubscription;
        this.value = value;
        this.hasValue = true;
        if (subscription) {
            subscription.unsubscribe();
            this.remove(subscription);
        }
        subscription = subscribeToResult_1.subscribeToResult(this, duration);
        if (!subscription.closed) {
            this.add(this.durationSubscription = subscription);
        }
    };
    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    DebounceSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    DebounceSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            var value = this.value;
            var subscription = this.durationSubscription;
            if (subscription) {
                this.durationSubscription = null;
                subscription.unsubscribe();
                this.remove(subscription);
            }
            this.value = null;
            this.hasValue = false;
            _super.prototype._next.call(this, value);
        }
    };
    return DebounceSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$30 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceTimeSubscriber = (function (_super) {
    __extends$30(DebounceTimeSubscriber, _super);
    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
        _super.call(this, destination);
        this.dueTime = dueTime;
        this.scheduler = scheduler;
        this.debouncedSubscription = null;
        this.lastValue = null;
        this.hasValue = false;
    }
    DebounceTimeSubscriber.prototype._next = function (value) {
        this.clearDebounce();
        this.lastValue = value;
        this.hasValue = true;
        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$1, this.dueTime, this));
    };
    DebounceTimeSubscriber.prototype._complete = function () {
        this.debouncedNext();
        this.destination.complete();
    };
    DebounceTimeSubscriber.prototype.debouncedNext = function () {
        this.clearDebounce();
        if (this.hasValue) {
            this.destination.next(this.lastValue);
            this.lastValue = null;
            this.hasValue = false;
        }
    };
    DebounceTimeSubscriber.prototype.clearDebounce = function () {
        var debouncedSubscription = this.debouncedSubscription;
        if (debouncedSubscription !== null) {
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
        }
    };
    return DebounceTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNext$1(subscriber) {
    subscriber.debouncedNext();
}
var __extends$31 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DefaultIfEmptySubscriber = (function (_super) {
    __extends$31(DefaultIfEmptySubscriber, _super);
    function DefaultIfEmptySubscriber(destination, defaultValue) {
        _super.call(this, destination);
        this.defaultValue = defaultValue;
        this.isEmpty = true;
    }
    DefaultIfEmptySubscriber.prototype._next = function (value) {
        this.isEmpty = false;
        this.destination.next(value);
    };
    DefaultIfEmptySubscriber.prototype._complete = function () {
        if (this.isEmpty) {
            this.destination.next(this.defaultValue);
        }
        this.destination.complete();
    };
    return DefaultIfEmptySubscriber;
}(Subscriber_1.Subscriber));
var __extends$32 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelaySubscriber = (function (_super) {
    __extends$32(DelaySubscriber, _super);
    function DelaySubscriber(destination, delay, scheduler) {
        _super.call(this, destination);
        this.delay = delay;
        this.scheduler = scheduler;
        this.queue = [];
        this.active = false;
        this.errored = false;
    }
    DelaySubscriber.dispatch = function (state$$1) {
        var source = state$$1.source;
        var queue = source.queue;
        var scheduler = state$$1.scheduler;
        var destination = state$$1.destination;
        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
            queue.shift().notification.observe(destination);
        }
        if (queue.length > 0) {
            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
            this.schedule(state$$1, delay_1);
        }
        else {
            source.active = false;
        }
    };
    DelaySubscriber.prototype._schedule = function (scheduler) {
        this.active = true;
        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
            source: this, destination: this.destination, scheduler: scheduler
        }));
    };
    DelaySubscriber.prototype.scheduleNotification = function (notification) {
        if (this.errored === true) {
            return;
        }
        var scheduler = this.scheduler;
        var message = new DelayMessage(scheduler.now() + this.delay, notification);
        this.queue.push(message);
        if (this.active === false) {
            this._schedule(scheduler);
        }
    };
    DelaySubscriber.prototype._next = function (value) {
        this.scheduleNotification(Notification_1.Notification.createNext(value));
    };
    DelaySubscriber.prototype._error = function (err) {
        this.errored = true;
        this.queue = [];
        this.destination.error(err);
    };
    DelaySubscriber.prototype._complete = function () {
        this.scheduleNotification(Notification_1.Notification.createComplete());
    };
    return DelaySubscriber;
}(Subscriber_1.Subscriber));
var DelayMessage = (function () {
    function DelayMessage(time, notification) {
        this.time = time;
        this.notification = notification;
    }
    return DelayMessage;
}());
var __extends$33 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelayWhenSubscriber = (function (_super) {
    __extends$33(DelayWhenSubscriber, _super);
    function DelayWhenSubscriber(destination, delayDurationSelector) {
        _super.call(this, destination);
        this.delayDurationSelector = delayDurationSelector;
        this.completed = false;
        this.delayNotifierSubscriptions = [];
        this.values = [];
    }
    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(outerValue);
        this.removeSubscription(innerSub);
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        var value = this.removeSubscription(innerSub);
        if (value) {
            this.destination.next(value);
        }
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype._next = function (value) {
        try {
            var delayNotifier = this.delayDurationSelector(value);
            if (delayNotifier) {
                this.tryDelay(delayNotifier, value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DelayWhenSubscriber.prototype._complete = function () {
        this.completed = true;
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
        subscription.unsubscribe();
        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
        var value = null;
        if (subscriptionIdx !== -1) {
            value = this.values[subscriptionIdx];
            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
            this.values.splice(subscriptionIdx, 1);
        }
        return value;
    };
    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);
        if (notifierSubscription && !notifierSubscription.closed) {
            this.add(notifierSubscription);
            this.delayNotifierSubscriptions.push(notifierSubscription);
        }
        this.values.push(value);
    };
    DelayWhenSubscriber.prototype.tryComplete = function () {
        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
            this.destination.complete();
        }
    };
    return DelayWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelayObservable = (function (_super) {
    __extends$33(SubscriptionDelayObservable, _super);
    function SubscriptionDelayObservable(source, subscriptionDelay) {
        _super.call(this);
        this.source = source;
        this.subscriptionDelay = subscriptionDelay;
    }
    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
    };
    return SubscriptionDelayObservable;
}(Observable_1.Observable));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelaySubscriber = (function (_super) {
    __extends$33(SubscriptionDelaySubscriber, _super);
    function SubscriptionDelaySubscriber(parent, source) {
        _super.call(this);
        this.parent = parent;
        this.source = source;
        this.sourceSubscribed = false;
    }
    SubscriptionDelaySubscriber.prototype._next = function (unused) {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype._error = function (err) {
        this.unsubscribe();
        this.parent.error(err);
    };
    SubscriptionDelaySubscriber.prototype._complete = function () {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
        if (!this.sourceSubscribed) {
            this.sourceSubscribed = true;
            this.unsubscribe();
            this.source.subscribe(this.parent);
        }
    };
    return SubscriptionDelaySubscriber;
}(Subscriber_1.Subscriber));
var __extends$34 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DeMaterializeSubscriber = (function (_super) {
    __extends$34(DeMaterializeSubscriber, _super);
    function DeMaterializeSubscriber(destination) {
        _super.call(this, destination);
    }
    DeMaterializeSubscriber.prototype._next = function (value) {
        value.observe(this.destination);
    };
    return DeMaterializeSubscriber;
}(Subscriber_1.Subscriber));
function minimalSetImpl() {
    // THIS IS NOT a full impl of Set, this is just the minimum
    // bits of functionality we need for this library.
    return (function () {
        function MinimalSet() {
            this._values = [];
        }
        MinimalSet.prototype.add = function (value) {
            if (!this.has(value)) {
                this._values.push(value);
            }
        };
        MinimalSet.prototype.has = function (value) {
            return this._values.indexOf(value) !== -1;
        };
        Object.defineProperty(MinimalSet.prototype, "size", {
            get: function () {
                return this._values.length;
            },
            enumerable: true,
            configurable: true
        });
        MinimalSet.prototype.clear = function () {
            this._values.length = 0;
        };
        return MinimalSet;
    }());
}
var minimalSetImpl_1 = minimalSetImpl;
var Set$1 = root.root.Set || minimalSetImpl();
var _Set = {
    minimalSetImpl: minimalSetImpl_1,
    Set: Set$1
};
var __extends$35 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctSubscriber = (function (_super) {
    __extends$35(DistinctSubscriber, _super);
    function DistinctSubscriber(destination, keySelector, flushes) {
        _super.call(this, destination);
        this.keySelector = keySelector;
        this.values = new _Set.Set();
        if (flushes) {
            this.add(subscribeToResult_1.subscribeToResult(this, flushes));
        }
    }
    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values.clear();
    };
    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DistinctSubscriber.prototype._next = function (value) {
        if (this.keySelector) {
            this._useKeySelector(value);
        }
        else {
            this._finalizeNext(value, value);
        }
    };
    DistinctSubscriber.prototype._useKeySelector = function (value) {
        var key;
        var destination = this.destination;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this._finalizeNext(key, value);
    };
    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
        var values = this.values;
        if (!values.has(key)) {
            values.add(key);
            this.destination.next(value);
        }
    };
    return DistinctSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$36 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctUntilChangedSubscriber = (function (_super) {
    __extends$36(DistinctUntilChangedSubscriber, _super);
    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
        _super.call(this, destination);
        this.keySelector = keySelector;
        this.hasKey = false;
        if (typeof compare === 'function') {
            this.compare = compare;
        }
    }
    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
        return x === y;
    };
    DistinctUntilChangedSubscriber.prototype._next = function (value) {
        var keySelector = this.keySelector;
        var key = value;
        if (keySelector) {
            key = tryCatch_1.tryCatch(this.keySelector)(value);
            if (key === errorObject.errorObject) {
                return this.destination.error(errorObject.errorObject.e);
            }
        }
        var result = false;
        if (this.hasKey) {
            result = tryCatch_1.tryCatch(this.compare)(this.key, key);
            if (result === errorObject.errorObject) {
                return this.destination.error(errorObject.errorObject.e);
            }
        }
        else {
            this.hasKey = true;
        }
        if (Boolean(result) === false) {
            this.key = key;
            this.destination.next(value);
        }
    };
    return DistinctUntilChangedSubscriber;
}(Subscriber_1.Subscriber));
var __extends$38 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an element was queried at a certain index of an
 * Observable, but no such index or position exists in that sequence.
 *
 * @see {@link elementAt}
 * @see {@link take}
 * @see {@link takeLast}
 *
 * @class ArgumentOutOfRangeError
 */
var ArgumentOutOfRangeError = (function (_super) {
    __extends$38(ArgumentOutOfRangeError, _super);
    function ArgumentOutOfRangeError() {
        var err = _super.call(this, 'argument out of range');
        this.name = err.name = 'ArgumentOutOfRangeError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return ArgumentOutOfRangeError;
}(Error));
var ArgumentOutOfRangeError_2 = ArgumentOutOfRangeError;
var ArgumentOutOfRangeError_1 = {
    ArgumentOutOfRangeError: ArgumentOutOfRangeError_2
};
var __extends$37 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ElementAtSubscriber = (function (_super) {
    __extends$37(ElementAtSubscriber, _super);
    function ElementAtSubscriber(destination, index$$1, defaultValue) {
        _super.call(this, destination);
        this.index = index$$1;
        this.defaultValue = defaultValue;
    }
    ElementAtSubscriber.prototype._next = function (x) {
        if (this.index-- === 0) {
            this.destination.next(x);
            this.destination.complete();
        }
    };
    ElementAtSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.index >= 0) {
            if (typeof this.defaultValue !== 'undefined') {
                destination.next(this.defaultValue);
            }
            else {
                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);
            }
        }
        destination.complete();
    };
    return ElementAtSubscriber;
}(Subscriber_1.Subscriber));
var __extends$39 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var EverySubscriber = (function (_super) {
    __extends$39(EverySubscriber, _super);
    function EverySubscriber(destination, predicate, thisArg, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
        this.index = 0;
        this.thisArg = thisArg || this;
    }
    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
        this.destination.next(everyValueMatch);
        this.destination.complete();
    };
    EverySubscriber.prototype._next = function (value) {
        var result = false;
        try {
            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (!result) {
            this.notifyComplete(false);
        }
    };
    EverySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return EverySubscriber;
}(Subscriber_1.Subscriber));
var __extends$40 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchFirstSubscriber = (function (_super) {
    __extends$40(SwitchFirstSubscriber, _super);
    function SwitchFirstSubscriber(destination) {
        _super.call(this, destination);
        this.hasCompleted = false;
        this.hasSubscription = false;
    }
    SwitchFirstSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.hasSubscription = true;
            this.add(subscribeToResult_1.subscribeToResult(this, value));
        }
    };
    SwitchFirstSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return SwitchFirstSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$41 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchFirstMapSubscriber = (function (_super) {
    __extends$41(SwitchFirstMapSubscriber, _super);
    function SwitchFirstMapSubscriber(destination, project, resultSelector) {
        _super.call(this, destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.hasSubscription = false;
        this.hasCompleted = false;
        this.index = 0;
    }
    SwitchFirstMapSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.tryNext(value);
        }
    };
    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {
        var index$$1 = this.index++;
        var destination = this.destination;
        try {
            var result = this.project(value, index$$1);
            this.hasSubscription = true;
            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index$$1));
        }
        catch (err) {
            destination.error(err);
        }
    };
    SwitchFirstMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        if (resultSelector) {
            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            destination.next(innerValue);
        }
    };
    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        try {
            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            destination.next(result);
        }
        catch (err) {
            destination.error(err);
        }
    };
    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return SwitchFirstMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$42 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ExpandSubscriber = (function (_super) {
    __extends$42(ExpandSubscriber, _super);
    function ExpandSubscriber(destination, project, concurrent, scheduler) {
        _super.call(this, destination);
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
        this.index = 0;
        this.active = 0;
        this.hasCompleted = false;
        if (concurrent < Number.POSITIVE_INFINITY) {
            this.buffer = [];
        }
    }
    ExpandSubscriber.dispatch = function (arg) {
        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index$$1 = arg.index;
        subscriber.subscribeToProjection(result, value, index$$1);
    };
    ExpandSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (destination.closed) {
            this._complete();
            return;
        }
        var index$$1 = this.index++;
        if (this.active < this.concurrent) {
            destination.next(value);
            var result = tryCatch_1.tryCatch(this.project)(value, index$$1);
            if (result === errorObject.errorObject) {
                destination.error(errorObject.errorObject.e);
            }
            else if (!this.scheduler) {
                this.subscribeToProjection(result, value, index$$1);
            }
            else {
                var state$$1 = { subscriber: this, result: result, value: value, index: index$$1 };
                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state$$1));
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index$$1) {
        this.active++;
        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index$$1));
    };
    ExpandSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this._next(innerValue);
    };
    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer && buffer.length > 0) {
            this._next(buffer.shift());
        }
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    return ExpandSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$43 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FilterSubscriber = (function (_super) {
    __extends$43(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.count = 0;
    }
    // the try catch block below is left specifically for
    // optimization and perf reasons. a tryCatcher is not necessary here.
    FilterSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(Subscriber_1.Subscriber));
var __extends$44 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FinallySubscriber = (function (_super) {
    __extends$44(FinallySubscriber, _super);
    function FinallySubscriber(destination, callback) {
        _super.call(this, destination);
        this.add(new Subscription_1.Subscription(callback));
    }
    return FinallySubscriber;
}(Subscriber_1.Subscriber));
var __extends$45 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FindValueSubscriber = (function (_super) {
    __extends$45(FindValueSubscriber, _super);
    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.source = source;
        this.yieldIndex = yieldIndex;
        this.thisArg = thisArg;
        this.index = 0;
    }
    FindValueSubscriber.prototype.notifyComplete = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    FindValueSubscriber.prototype._next = function (value) {
        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
        var index$$1 = this.index++;
        try {
            var result = predicate.call(thisArg || this, value, index$$1, this.source);
            if (result) {
                this.notifyComplete(this.yieldIndex ? index$$1 : value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    FindValueSubscriber.prototype._complete = function () {
        this.notifyComplete(this.yieldIndex ? -1 : undefined);
    };
    return FindValueSubscriber;
}(Subscriber_1.Subscriber));
var __extends$48 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = (function (_super) {
    __extends$48(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var err = _super.call(this, 'object unsubscribed');
        this.name = err.name = 'ObjectUnsubscribedError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return ObjectUnsubscribedError;
}(Error));
var ObjectUnsubscribedError_2 = ObjectUnsubscribedError;
var ObjectUnsubscribedError_1 = {
    ObjectUnsubscribedError: ObjectUnsubscribedError_2
};
var __extends$49 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = (function (_super) {
    __extends$49(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        _super.call(this);
        this.subject = subject;
        this.subscriber = subscriber;
        this.closed = false;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription_1.Subscription));
var SubjectSubscription_2 = SubjectSubscription;
var SubjectSubscription_1 = {
    SubjectSubscription: SubjectSubscription_2
};
var __extends$47 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = (function (_super) {
    __extends$47(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        _super.call(this, destination);
        this.destination = destination;
    }
    return SubjectSubscriber;
}(Subscriber_1.Subscriber));
var SubjectSubscriber_1 = SubjectSubscriber;
/**
 * @class Subject<T>
 */
var Subject$2 = (function (_super) {
    __extends$47(Subject$$1, _super);
    function Subject$$1() {
        _super.call(this);
        this.observers = [];
        this.closed = false;
        this.isStopped = false;
        this.hasError = false;
        this.thrownError = null;
    }
    Subject$$1.prototype[rxSubscriber.rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject$$1.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject$$1.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject$$1.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject$$1.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject$$1.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject$$1.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    Subject$$1.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
    };
    Subject$$1.prototype.asObservable = function () {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    };
    Subject$$1.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject$$1;
}(Observable_1.Observable));
var Subject_2 = Subject$2;
/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = (function (_super) {
    __extends$47(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        _super.call(this);
        this.destination = destination;
        this.source = source;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription_1.Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject$2));
var AnonymousSubject_1 = AnonymousSubject;
var Subject_1 = {
    SubjectSubscriber: SubjectSubscriber_1,
    Subject: Subject_2,
    AnonymousSubject: AnonymousSubject_1
};
var MapPolyfill = (function () {
    function MapPolyfill() {
        this.size = 0;
        this._values = [];
        this._keys = [];
    }
    MapPolyfill.prototype.get = function (key) {
        var i = this._keys.indexOf(key);
        return i === -1 ? undefined : this._values[i];
    };
    MapPolyfill.prototype.set = function (key, value) {
        var i = this._keys.indexOf(key);
        if (i === -1) {
            this._keys.push(key);
            this._values.push(value);
            this.size++;
        }
        else {
            this._values[i] = value;
        }
        return this;
    };
    MapPolyfill.prototype.delete = function (key) {
        var i = this._keys.indexOf(key);
        if (i === -1) {
            return false;
        }
        this._values.splice(i, 1);
        this._keys.splice(i, 1);
        this.size--;
        return true;
    };
    MapPolyfill.prototype.clear = function () {
        this._keys.length = 0;
        this._values.length = 0;
        this.size = 0;
    };
    MapPolyfill.prototype.forEach = function (cb, thisArg) {
        for (var i = 0; i < this.size; i++) {
            cb.call(thisArg, this._values[i], this._keys[i]);
        }
    };
    return MapPolyfill;
}());
var MapPolyfill_2 = MapPolyfill;
var MapPolyfill_1 = {
    MapPolyfill: MapPolyfill_2
};
var Map$1 = root.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();
var _Map = {
    Map: Map$1
};
var FastMap = (function () {
    function FastMap() {
        this.values = {};
    }
    FastMap.prototype.delete = function (key) {
        this.values[key] = null;
        return true;
    };
    FastMap.prototype.set = function (key, value) {
        this.values[key] = value;
        return this;
    };
    FastMap.prototype.get = function (key) {
        return this.values[key];
    };
    FastMap.prototype.forEach = function (cb, thisArg) {
        var values = this.values;
        for (var key in values) {
            if (values.hasOwnProperty(key) && values[key] !== null) {
                cb.call(thisArg, values[key], key);
            }
        }
    };
    FastMap.prototype.clear = function () {
        this.values = {};
    };
    return FastMap;
}());
var FastMap_2 = FastMap;
var FastMap_1 = {
    FastMap: FastMap_2
};
var __extends$46 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupBySubscriber = (function (_super) {
    __extends$46(GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        _super.call(this, destination);
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
        this.groups = null;
        this.attemptedToUnsubscribe = false;
        this.count = 0;
    }
    GroupBySubscriber.prototype._next = function (value) {
        var key;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            this.error(err);
            return;
        }
        this._group(value, key);
    };
    GroupBySubscriber.prototype._group = function (value, key) {
        var groups = this.groups;
        if (!groups) {
            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new _Map.Map();
        }
        var group = groups.get(key);
        var element;
        if (this.elementSelector) {
            try {
                element = this.elementSelector(value);
            }
            catch (err) {
                this.error(err);
            }
        }
        else {
            element = value;
        }
        if (!group) {
            group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
                var duration = void 0;
                try {
                    duration = this.durationSelector(new GroupedObservable(key, group));
                }
                catch (err) {
                    this.error(err);
                    return;
                }
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            }
        }
        if (!group.closed) {
            group.next(element);
        }
    };
    GroupBySubscriber.prototype._error = function (err) {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.error(err);
            });
            groups.clear();
        }
        this.destination.error(err);
    };
    GroupBySubscriber.prototype._complete = function () {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.complete();
            });
            groups.clear();
        }
        this.destination.complete();
    };
    GroupBySubscriber.prototype.removeGroup = function (key) {
        this.groups.delete(key);
    };
    GroupBySubscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
                _super.prototype.unsubscribe.call(this);
            }
        }
    };
    return GroupBySubscriber;
}(Subscriber_1.Subscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupDurationSubscriber = (function (_super) {
    __extends$46(GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) {
        _super.call(this, group);
        this.key = key;
        this.group = group;
        this.parent = parent;
    }
    GroupDurationSubscriber.prototype._next = function (value) {
        this.complete();
    };
    GroupDurationSubscriber.prototype._unsubscribe = function () {
        var _a = this, parent = _a.parent, key = _a.key;
        this.key = this.parent = null;
        if (parent) {
            parent.removeGroup(key);
        }
    };
    return GroupDurationSubscriber;
}(Subscriber_1.Subscriber));
/**
 * An Observable representing values belonging to the same group represented by
 * a common key. The values emitted by a GroupedObservable come from the source
 * Observable. The common key is available as the field `key` on a
 * GroupedObservable instance.
 *
 * @class GroupedObservable<K, T>
 */
var GroupedObservable = (function (_super) {
    __extends$46(GroupedObservable, _super);
    function GroupedObservable(key, groupSubject, refCountSubscription) {
        _super.call(this);
        this.key = key;
        this.groupSubject = groupSubject;
        this.refCountSubscription = refCountSubscription;
    }
    GroupedObservable.prototype._subscribe = function (subscriber) {
        var subscription = new Subscription_1.Subscription();
        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
        if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        }
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    };
    return GroupedObservable;
}(Observable_1.Observable));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerRefCountSubscription = (function (_super) {
    __extends$46(InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) {
        _super.call(this);
        this.parent = parent;
        parent.count++;
    }
    InnerRefCountSubscription.prototype.unsubscribe = function () {
        var parent = this.parent;
        if (!parent.closed && !this.closed) {
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
            }
        }
    };
    return InnerRefCountSubscription;
}(Subscription_1.Subscription));
var __extends$50 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IgnoreElementsSubscriber = (function (_super) {
    __extends$50(IgnoreElementsSubscriber, _super);
    function IgnoreElementsSubscriber() {
        _super.apply(this, arguments);
    }
    IgnoreElementsSubscriber.prototype._next = function (unused) {
        noop_1.noop();
    };
    return IgnoreElementsSubscriber;
}(Subscriber_1.Subscriber));
var __extends$51 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IsEmptySubscriber = (function (_super) {
    __extends$51(IsEmptySubscriber, _super);
    function IsEmptySubscriber(destination) {
        _super.call(this, destination);
    }
    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
        var destination = this.destination;
        destination.next(isEmpty);
        destination.complete();
    };
    IsEmptySubscriber.prototype._next = function (value) {
        this.notifyComplete(false);
    };
    IsEmptySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return IsEmptySubscriber;
}(Subscriber_1.Subscriber));
var __extends$52 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var LastSubscriber = (function (_super) {
    __extends$52(LastSubscriber, _super);
    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
        this.hasValue = false;
        this.index = 0;
        if (typeof defaultValue !== 'undefined') {
            this.lastValue = defaultValue;
            this.hasValue = true;
        }
    }
    LastSubscriber.prototype._next = function (value) {
        var index$$1 = this.index++;
        if (this.predicate) {
            this._tryPredicate(value, index$$1);
        }
        else {
            if (this.resultSelector) {
                this._tryResultSelector(value, index$$1);
                return;
            }
            this.lastValue = value;
            this.hasValue = true;
        }
    };
    LastSubscriber.prototype._tryPredicate = function (value, index$$1) {
        var result;
        try {
            result = this.predicate(value, index$$1, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            if (this.resultSelector) {
                this._tryResultSelector(value, index$$1);
                return;
            }
            this.lastValue = value;
            this.hasValue = true;
        }
    };
    LastSubscriber.prototype._tryResultSelector = function (value, index$$1) {
        var result;
        try {
            result = this.resultSelector(value, index$$1);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.lastValue = result;
        this.hasValue = true;
    };
    LastSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.hasValue) {
            destination.next(this.lastValue);
            destination.complete();
        }
        else {
            destination.error(new EmptyError_1.EmptyError);
        }
    };
    return LastSubscriber;
}(Subscriber_1.Subscriber));
var __extends$53 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map$2(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
var map_2 = map$2;
var MapOperator = (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());
var MapOperator_1 = MapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapSubscriber = (function (_super) {
    __extends$53(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        _super.call(this, destination);
        this.project = project;
        this.count = 0;
        this.thisArg = thisArg || this;
    }
    // NOTE: This looks unoptimized, but it's actually purposefully NOT
    // using try/catch optimizations.
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber_1.Subscriber));
var map_1 = {
    map: map_2,
    MapOperator: MapOperator_1
};
var __extends$54 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapToSubscriber = (function (_super) {
    __extends$54(MapToSubscriber, _super);
    function MapToSubscriber(destination, value) {
        _super.call(this, destination);
        this.value = value;
    }
    MapToSubscriber.prototype._next = function (x) {
        this.destination.next(this.value);
    };
    return MapToSubscriber;
}(Subscriber_1.Subscriber));
var __extends$55 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MaterializeSubscriber = (function (_super) {
    __extends$55(MaterializeSubscriber, _super);
    function MaterializeSubscriber(destination) {
        _super.call(this, destination);
    }
    MaterializeSubscriber.prototype._next = function (value) {
        this.destination.next(Notification_1.Notification.createNext(value));
    };
    MaterializeSubscriber.prototype._error = function (err) {
        var destination = this.destination;
        destination.next(Notification_1.Notification.createError(err));
        destination.complete();
    };
    MaterializeSubscriber.prototype._complete = function () {
        var destination = this.destination;
        destination.next(Notification_1.Notification.createComplete());
        destination.complete();
    };
    return MaterializeSubscriber;
}(Subscriber_1.Subscriber));
var __extends$56 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ScanSubscriber = (function (_super) {
    __extends$56(ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
        _super.call(this, destination);
        this.accumulator = accumulator;
        this._seed = _seed;
        this.hasSeed = hasSeed;
        this.index = 0;
    }
    Object.defineProperty(ScanSubscriber.prototype, "seed", {
        get: function () {
            return this._seed;
        },
        set: function (value) {
            this.hasSeed = true;
            this._seed = value;
        },
        enumerable: true,
        configurable: true
    });
    ScanSubscriber.prototype._next = function (value) {
        if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
        }
        else {
            return this._tryNext(value);
        }
    };
    ScanSubscriber.prototype._tryNext = function (value) {
        var index$$1 = this.index++;
        var result;
        try {
            result = this.accumulator(this.seed, value, index$$1);
        }
        catch (err) {
            this.destination.error(err);
        }
        this.seed = result;
        this.destination.next(result);
    };
    return ScanSubscriber;
}(Subscriber_1.Subscriber));
var __extends$57 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeLastSubscriber = (function (_super) {
    __extends$57(TakeLastSubscriber, _super);
    function TakeLastSubscriber(destination, total) {
        _super.call(this, destination);
        this.total = total;
        this.ring = new Array();
        this.count = 0;
    }
    TakeLastSubscriber.prototype._next = function (value) {
        var ring = this.ring;
        var total = this.total;
        var count = this.count++;
        if (ring.length < total) {
            ring.push(value);
        }
        else {
            var index$$1 = count % total;
            ring[index$$1] = value;
        }
    };
    TakeLastSubscriber.prototype._complete = function () {
        var destination = this.destination;
        var count = this.count;
        if (count > 0) {
            var total = this.count >= this.total ? this.total : this.count;
            var ring = this.ring;
            for (var i = 0; i < total; i++) {
                var idx = (count++) % total;
                destination.next(ring[idx]);
            }
        }
        destination.complete();
    };
    return TakeLastSubscriber;
}(Subscriber_1.Subscriber));
var __extends$58 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapToSubscriber = (function (_super) {
    __extends$58(MergeMapToSubscriber, _super);
    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        _super.call(this, destination);
        this.ish = ish;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    MergeMapToSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            var resultSelector = this.resultSelector;
            var index$$1 = this.index++;
            var ish = this.ish;
            var destination = this.destination;
            this.active++;
            this._innerSub(ish, destination, resultSelector, value, index$$1);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index$$1) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index$$1));
    };
    MergeMapToSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        if (resultSelector) {
            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            destination.next(innerValue);
        }
    };
    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        var result;
        try {
            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        destination.next(result);
    };
    MergeMapToSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapToSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$59 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeScanSubscriber = (function (_super) {
    __extends$59(MergeScanSubscriber, _super);
    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
        _super.call(this, destination);
        this.accumulator = accumulator;
        this.acc = acc;
        this.concurrent = concurrent;
        this.hasValue = false;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    MergeScanSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            var index$$1 = this.index++;
            var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);
            var destination = this.destination;
            if (ish === errorObject.errorObject) {
                destination.error(errorObject.errorObject.e);
            }
            else {
                this.active++;
                this._innerSub(ish, value, index$$1);
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeScanSubscriber.prototype._innerSub = function (ish, value, index$$1) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index$$1));
    };
    MergeScanSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var destination = this.destination;
        this.acc = innerValue;
        this.hasValue = true;
        destination.next(innerValue);
    };
    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    return MergeScanSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$61 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function refCount$1() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator$1(source));
    };
}
var refCount_2 = refCount$1;
var RefCountOperator$1 = (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber$1(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber$1 = (function (_super) {
    __extends$61(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));
var refCount_1 = {
    refCount: refCount_2
};
var __extends$60 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @class ConnectableObservable<T>
 */
var ConnectableObservable = (function (_super) {
    __extends$60(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        _super.call(this);
        this.source = source;
        this.subjectFactory = subjectFactory;
        this._refCount = 0;
        this._isComplete = false;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new Subscription_1.Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription_1.Subscription.EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return refCount_1.refCount()(this);
    };
    return ConnectableObservable;
}(Observable_1.Observable));
var ConnectableSubscriber = (function (_super) {
    __extends$60(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber));
var RefCountSubscriber = (function (_super) {
    __extends$60(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));
var __extends$62 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OnErrorResumeNextSubscriber = (function (_super) {
    __extends$62(OnErrorResumeNextSubscriber, _super);
    function OnErrorResumeNextSubscriber(destination, nextSources) {
        _super.call(this, destination);
        this.destination = destination;
        this.nextSources = nextSources;
    }
    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._error = function (err) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._complete = function () {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
        var next = this.nextSources.shift();
        if (next) {
            this.add(subscribeToResult_1.subscribeToResult(this, next));
        }
        else {
            this.destination.complete();
        }
    };
    return OnErrorResumeNextSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$63 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var PairwiseSubscriber = (function (_super) {
    __extends$63(PairwiseSubscriber, _super);
    function PairwiseSubscriber(destination) {
        _super.call(this, destination);
        this.hasPrev = false;
    }
    PairwiseSubscriber.prototype._next = function (value) {
        if (this.hasPrev) {
            this.destination.next([this.prev, value]);
        }
        else {
            this.hasPrev = true;
        }
        this.prev = value;
    };
    return PairwiseSubscriber;
}(Subscriber_1.Subscriber));
var __extends$64 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @class BehaviorSubject<T>
 */
var BehaviorSubject = (function (_super) {
    __extends$64(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        _super.call(this);
        this._value = _value;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(Subject_1.Subject));
var __extends$65 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @class AsyncSubject<T>
 */
var AsyncSubject = (function (_super) {
    __extends$65(AsyncSubject, _super);
    function AsyncSubject() {
        _super.apply(this, arguments);
        this.value = null;
        this.hasNext = false;
        this.hasCompleted = false;
    }
    AsyncSubject.prototype._subscribe = function (subscriber) {
        if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        return _super.prototype._subscribe.call(this, subscriber);
    };
    AsyncSubject.prototype.next = function (value) {
        if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
        }
    };
    AsyncSubject.prototype.error = function (error) {
        if (!this.hasCompleted) {
            _super.prototype.error.call(this, error);
        }
    };
    AsyncSubject.prototype.complete = function () {
        this.hasCompleted = true;
        if (this.hasNext) {
            _super.prototype.next.call(this, this.value);
        }
        _super.prototype.complete.call(this);
    };
    return AsyncSubject;
}(Subject_1.Subject));
var __extends$67 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var QueueAction = (function (_super) {
    __extends$67(QueueAction, _super);
    function QueueAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
    }
    QueueAction.prototype.schedule = function (state$$1, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state$$1, delay);
        }
        this.delay = delay;
        this.state = state$$1;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state$$1, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state$$1, delay) :
            this._execute(state$$1, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Otherwise flush the scheduler starting with this action.
        return scheduler.flush(this);
    };
    return QueueAction;
}(AsyncAction_1.AsyncAction));
var QueueAction_2 = QueueAction;
var QueueAction_1 = {
    QueueAction: QueueAction_2
};
var __extends$68 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var QueueScheduler = (function (_super) {
    __extends$68(QueueScheduler, _super);
    function QueueScheduler() {
        _super.apply(this, arguments);
    }
    return QueueScheduler;
}(AsyncScheduler_1.AsyncScheduler));
var QueueScheduler_2 = QueueScheduler;
var QueueScheduler_1 = {
    QueueScheduler: QueueScheduler_2
};
/**
 *
 * Queue Scheduler
 *
 * <span class="informal">Put every next task on a queue, instead of executing it immediately</span>
 *
 * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.
 *
 * When used without delay, it schedules given task synchronously - executes it right when
 * it is scheduled. However when called recursively, that is when inside the scheduled task,
 * another task is scheduled with queue scheduler, instead of executing immediately as well,
 * that task will be put on a queue and wait for current one to finish.
 *
 * This means that when you execute task with `queue` scheduler, you are sure it will end
 * before any other task scheduled with that scheduler will start.
 *
 * @examples <caption>Schedule recursively first, then do something</caption>
 *
 * Rx.Scheduler.queue.schedule(() => {
 *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue
 *
 *   console.log('first');
 * });
 *
 * // Logs:
 * // "first"
 * // "second"
 *
 *
 * @example <caption>Reschedule itself recursively</caption>
 *
 * Rx.Scheduler.queue.schedule(function(state) {
 *   if (state !== 0) {
 *     console.log('before', state);
 *     this.schedule(state - 1); // `this` references currently executing Action,
 *                               // which we reschedule with new state
 *     console.log('after', state);
 *   }
 * }, 0, 3);
 *
 * // In scheduler that runs recursively, you would expect:
 * // "before", 3
 * // "before", 2
 * // "before", 1
 * // "after", 1
 * // "after", 2
 * // "after", 3
 *
 * // But with queue it logs:
 * // "before", 3
 * // "after", 3
 * // "before", 2
 * // "after", 2
 * // "before", 1
 * // "after", 1
 *
 *
 * @static true
 * @name queue
 * @owner Scheduler
 */
var queue_1 = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
var queue = {
    queue: queue_1
};
var __extends$66 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @class ReplaySubject<T>
 */
var ReplaySubject$2 = (function (_super) {
    __extends$66(ReplaySubject$$1, _super);
    function ReplaySubject$$1(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) {
            bufferSize = Number.POSITIVE_INFINITY;
        }
        if (windowTime === void 0) {
            windowTime = Number.POSITIVE_INFINITY;
        }
        _super.call(this);
        this.scheduler = scheduler;
        this._events = [];
        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        this._windowTime = windowTime < 1 ? 1 : windowTime;
    }
    ReplaySubject$$1.prototype.next = function (value) {
        var now = this._getNow();
        this._events.push(new ReplayEvent(now, value));
        this._trimBufferThenGetEvents();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject$$1.prototype._subscribe = function (subscriber) {
        var _events = this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var subscription;
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscription = Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscription = Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
        }
        var len = _events.length;
        for (var i = 0; i < len && !subscriber.closed; i++) {
            subscriber.next(_events[i].value);
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject$$1.prototype._getNow = function () {
        return (this.scheduler || queue.queue).now();
    };
    ReplaySubject$$1.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        // Trim events that fall out of the time window.
        // Start at the front of the list. Break early once
        // we encounter an event that falls within the window.
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject$$1;
}(Subject_1.Subject));
var ReplayEvent = (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());
var __extends$69 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RaceSubscriber = (function (_super) {
    __extends$69(RaceSubscriber, _super);
    function RaceSubscriber(destination) {
        _super.call(this, destination);
        this.hasFirst = false;
        this.observables = [];
        this.subscriptions = [];
    }
    RaceSubscriber.prototype._next = function (observable) {
        this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    };
    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    };
    return RaceSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$70 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatSubscriber = (function (_super) {
    __extends$70(RepeatSubscriber, _super);
    function RepeatSubscriber(destination, count, source) {
        _super.call(this, destination);
        this.count = count;
        this.source = source;
    }
    RepeatSubscriber.prototype.complete = function () {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.complete.call(this);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RepeatSubscriber;
}(Subscriber_1.Subscriber));
var __extends$71 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatWhenSubscriber = (function (_super) {
    __extends$71(RepeatWhenSubscriber, _super);
    function RepeatWhenSubscriber(destination, notifier, source) {
        _super.call(this, destination);
        this.notifier = notifier;
        this.source = source;
        this.sourceIsBeingSubscribedTo = true;
    }
    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.sourceIsBeingSubscribedTo = true;
        this.source.subscribe(this);
    };
    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        if (this.sourceIsBeingSubscribedTo === false) {
            return _super.prototype.complete.call(this);
        }
    };
    RepeatWhenSubscriber.prototype.complete = function () {
        this.sourceIsBeingSubscribedTo = false;
        if (!this.isStopped) {
            if (!this.retries) {
                this.subscribeToRetries();
            }
            if (!this.retriesSubscription || this.retriesSubscription.closed) {
                return _super.prototype.complete.call(this);
            }
            this._unsubscribeAndRecycle();
            this.notifications.next();
        }
    };
    RepeatWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
        if (notifications) {
            notifications.unsubscribe();
            this.notifications = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
        this.notifications = null;
        this.retries = null;
        this.retriesSubscription = null;
        _super.prototype._unsubscribeAndRecycle.call(this);
        this.notifications = notifications;
        this.retries = retries;
        this.retriesSubscription = retriesSubscription;
        return this;
    };
    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
        this.notifications = new Subject_1.Subject();
        var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);
        if (retries === errorObject.errorObject) {
            return _super.prototype.complete.call(this);
        }
        this.retries = retries;
        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
    };
    return RepeatWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$72 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetrySubscriber = (function (_super) {
    __extends$72(RetrySubscriber, _super);
    function RetrySubscriber(destination, count, source) {
        _super.call(this, destination);
        this.count = count;
        this.source = source;
    }
    RetrySubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.error.call(this, err);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RetrySubscriber;
}(Subscriber_1.Subscriber));
var __extends$73 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetryWhenSubscriber = (function (_super) {
    __extends$73(RetryWhenSubscriber, _super);
    function RetryWhenSubscriber(destination, notifier, source) {
        _super.call(this, destination);
        this.notifier = notifier;
        this.source = source;
    }
    RetryWhenSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var errors = this.errors;
            var retries = this.retries;
            var retriesSubscription = this.retriesSubscription;
            if (!retries) {
                errors = new Subject_1.Subject();
                retries = tryCatch_1.tryCatch(this.notifier)(errors);
                if (retries === errorObject.errorObject) {
                    return _super.prototype.error.call(this, errorObject.errorObject.e);
                }
                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
            }
            else {
                this.errors = null;
                this.retriesSubscription = null;
            }
            this._unsubscribeAndRecycle();
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            errors.next(err);
        }
    };
    RetryWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
        if (errors) {
            errors.unsubscribe();
            this.errors = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
        this.errors = null;
        this.retries = null;
        this.retriesSubscription = null;
        this._unsubscribeAndRecycle();
        this.errors = errors;
        this.retries = retries;
        this.retriesSubscription = retriesSubscription;
        this.source.subscribe(this);
    };
    return RetryWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$74 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleSubscriber = (function (_super) {
    __extends$74(SampleSubscriber, _super);
    function SampleSubscriber() {
        _super.apply(this, arguments);
        this.hasValue = false;
    }
    SampleSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
    };
    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    SampleSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    SampleSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.value);
        }
    };
    return SampleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$75 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleTimeSubscriber = (function (_super) {
    __extends$75(SampleTimeSubscriber, _super);
    function SampleTimeSubscriber(destination, period, scheduler) {
        _super.call(this, destination);
        this.period = period;
        this.scheduler = scheduler;
        this.hasValue = false;
        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));
    }
    SampleTimeSubscriber.prototype._next = function (value) {
        this.lastValue = value;
        this.hasValue = true;
    };
    SampleTimeSubscriber.prototype.notifyNext = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.lastValue);
        }
    };
    return SampleTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNotification(state$$1) {
    var subscriber = state$$1.subscriber, period = state$$1.period;
    subscriber.notifyNext();
    this.schedule(state$$1, period);
}
var __extends$76 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SequenceEqualSubscriber = (function (_super) {
    __extends$76(SequenceEqualSubscriber, _super);
    function SequenceEqualSubscriber(destination, compareTo, comparor) {
        _super.call(this, destination);
        this.compareTo = compareTo;
        this.comparor = comparor;
        this._a = [];
        this._b = [];
        this._oneComplete = false;
        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));
    }
    SequenceEqualSubscriber.prototype._next = function (value) {
        if (this._oneComplete && this._b.length === 0) {
            this.emit(false);
        }
        else {
            this._a.push(value);
            this.checkValues();
        }
    };
    SequenceEqualSubscriber.prototype._complete = function () {
        if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
        }
        else {
            this._oneComplete = true;
        }
    };
    SequenceEqualSubscriber.prototype.checkValues = function () {
        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
        while (_a.length > 0 && _b.length > 0) {
            var a = _a.shift();
            var b = _b.shift();
            var areEqual = false;
            if (comparor) {
                areEqual = tryCatch_1.tryCatch(comparor)(a, b);
                if (areEqual === errorObject.errorObject) {
                    this.destination.error(errorObject.errorObject.e);
                }
            }
            else {
                areEqual = a === b;
            }
            if (!areEqual) {
                this.emit(false);
            }
        }
    };
    SequenceEqualSubscriber.prototype.emit = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    SequenceEqualSubscriber.prototype.nextB = function (value) {
        if (this._oneComplete && this._a.length === 0) {
            this.emit(false);
        }
        else {
            this._b.push(value);
            this.checkValues();
        }
    };
    return SequenceEqualSubscriber;
}(Subscriber_1.Subscriber));
var SequenceEqualCompareToSubscriber = (function (_super) {
    __extends$76(SequenceEqualCompareToSubscriber, _super);
    function SequenceEqualCompareToSubscriber(destination, parent) {
        _super.call(this, destination);
        this.parent = parent;
    }
    SequenceEqualCompareToSubscriber.prototype._next = function (value) {
        this.parent.nextB(value);
    };
    SequenceEqualCompareToSubscriber.prototype._error = function (err) {
        this.parent.error(err);
    };
    SequenceEqualCompareToSubscriber.prototype._complete = function () {
        this.parent._complete();
    };
    return SequenceEqualCompareToSubscriber;
}(Subscriber_1.Subscriber));
var __extends$77 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SingleSubscriber = (function (_super) {
    __extends$77(SingleSubscriber, _super);
    function SingleSubscriber(destination, predicate, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.source = source;
        this.seenValue = false;
        this.index = 0;
    }
    SingleSubscriber.prototype.applySingleValue = function (value) {
        if (this.seenValue) {
            this.destination.error('Sequence contains more than one element');
        }
        else {
            this.seenValue = true;
            this.singleValue = value;
        }
    };
    SingleSubscriber.prototype._next = function (value) {
        var index$$1 = this.index++;
        if (this.predicate) {
            this.tryNext(value, index$$1);
        }
        else {
            this.applySingleValue(value);
        }
    };
    SingleSubscriber.prototype.tryNext = function (value, index$$1) {
        try {
            if (this.predicate(value, index$$1, this.source)) {
                this.applySingleValue(value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    SingleSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.index > 0) {
            destination.next(this.seenValue ? this.singleValue : undefined);
            destination.complete();
        }
        else {
            destination.error(new EmptyError_1.EmptyError);
        }
    };
    return SingleSubscriber;
}(Subscriber_1.Subscriber));
var __extends$78 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipSubscriber = (function (_super) {
    __extends$78(SkipSubscriber, _super);
    function SkipSubscriber(destination, total) {
        _super.call(this, destination);
        this.total = total;
        this.count = 0;
    }
    SkipSubscriber.prototype._next = function (x) {
        if (++this.count > this.total) {
            this.destination.next(x);
        }
    };
    return SkipSubscriber;
}(Subscriber_1.Subscriber));
var __extends$79 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipLastSubscriber = (function (_super) {
    __extends$79(SkipLastSubscriber, _super);
    function SkipLastSubscriber(destination, _skipCount) {
        _super.call(this, destination);
        this._skipCount = _skipCount;
        this._count = 0;
        this._ring = new Array(_skipCount);
    }
    SkipLastSubscriber.prototype._next = function (value) {
        var skipCount = this._skipCount;
        var count = this._count++;
        if (count < skipCount) {
            this._ring[count] = value;
        }
        else {
            var currentIndex = count % skipCount;
            var ring = this._ring;
            var oldValue = ring[currentIndex];
            ring[currentIndex] = value;
            this.destination.next(oldValue);
        }
    };
    return SkipLastSubscriber;
}(Subscriber_1.Subscriber));
var __extends$80 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipUntilSubscriber = (function (_super) {
    __extends$80(SkipUntilSubscriber, _super);
    function SkipUntilSubscriber(destination, notifier) {
        _super.call(this, destination);
        this.hasValue = false;
        this.isInnerStopped = false;
        this.add(subscribeToResult_1.subscribeToResult(this, notifier));
    }
    SkipUntilSubscriber.prototype._next = function (value) {
        if (this.hasValue) {
            _super.prototype._next.call(this, value);
        }
    };
    SkipUntilSubscriber.prototype._complete = function () {
        if (this.isInnerStopped) {
            _super.prototype._complete.call(this);
        }
        else {
            this.unsubscribe();
        }
    };
    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.hasValue = true;
    };
    SkipUntilSubscriber.prototype.notifyComplete = function () {
        this.isInnerStopped = true;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    return SkipUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$81 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipWhileSubscriber = (function (_super) {
    __extends$81(SkipWhileSubscriber, _super);
    function SkipWhileSubscriber(destination, predicate) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.skipping = true;
        this.index = 0;
    }
    SkipWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (this.skipping) {
            this.tryCallPredicate(value);
        }
        if (!this.skipping) {
            destination.next(value);
        }
    };
    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
        try {
            var result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    return SkipWhileSubscriber;
}(Subscriber_1.Subscriber));
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments before it begins to emit
 * items emitted by the source Observable.
 *
 * <img src="./img/startWith.png" width="100%">
 *
 * @param {...T} values - Items you want the modified Observable to emit first.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */
function startWith$2() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i - 0] = arguments[_i];
    }
    return function (source) {
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len === 1) {
            return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);
        }
        else if (len > 1) {
            return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);
        }
        else {
            return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);
        }
    };
}
var startWith_2 = startWith$2;
var startWith_1 = {
    startWith: startWith_2
};
var __extends$82 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchMapToSubscriber = (function (_super) {
    __extends$82(SwitchMapToSubscriber, _super);
    function SwitchMapToSubscriber(destination, inner, resultSelector) {
        _super.call(this, destination);
        this.inner = inner;
        this.resultSelector = resultSelector;
        this.index = 0;
    }
    SwitchMapToSubscriber.prototype._next = function (value) {
        var innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
        }
        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));
    };
    SwitchMapToSubscriber.prototype._complete = function () {
        var innerSubscription = this.innerSubscription;
        if (!innerSubscription || innerSubscription.closed) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapToSubscriber.prototype._unsubscribe = function () {
        this.innerSubscription = null;
    };
    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.innerSubscription = null;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        if (resultSelector) {
            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            destination.next(innerValue);
        }
    };
    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        var result;
        try {
            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        destination.next(result);
    };
    return SwitchMapToSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$83 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeSubscriber = (function (_super) {
    __extends$83(TakeSubscriber, _super);
    function TakeSubscriber(destination, total) {
        _super.call(this, destination);
        this.total = total;
        this.count = 0;
    }
    TakeSubscriber.prototype._next = function (value) {
        var total = this.total;
        var count = ++this.count;
        if (count <= total) {
            this.destination.next(value);
            if (count === total) {
                this.destination.complete();
                this.unsubscribe();
            }
        }
    };
    return TakeSubscriber;
}(Subscriber_1.Subscriber));
var __extends$84 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeUntilSubscriber = (function (_super) {
    __extends$84(TakeUntilSubscriber, _super);
    function TakeUntilSubscriber(destination, notifier) {
        _super.call(this, destination);
        this.notifier = notifier;
        this.add(subscribeToResult_1.subscribeToResult(this, notifier));
    }
    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.complete();
    };
    TakeUntilSubscriber.prototype.notifyComplete = function () {
        // noop
    };
    return TakeUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$85 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeWhileSubscriber = (function (_super) {
    __extends$85(TakeWhileSubscriber, _super);
    function TakeWhileSubscriber(destination, predicate) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.index = 0;
    }
    TakeWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        var result;
        try {
            result = this.predicate(value, this.index++);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this.nextOrComplete(value, result);
    };
    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
        var destination = this.destination;
        if (Boolean(predicateResult)) {
            destination.next(value);
        }
        else {
            destination.complete();
        }
    };
    return TakeWhileSubscriber;
}(Subscriber_1.Subscriber));
var __extends$86 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DoSubscriber = (function (_super) {
    __extends$86(DoSubscriber, _super);
    function DoSubscriber(destination, nextOrObserver, error, complete) {
        _super.call(this, destination);
        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
        safeSubscriber.syncErrorThrowable = true;
        this.add(safeSubscriber);
        this.safeSubscriber = safeSubscriber;
    }
    DoSubscriber.prototype._next = function (value) {
        var safeSubscriber = this.safeSubscriber;
        safeSubscriber.next(value);
        if (safeSubscriber.syncErrorThrown) {
            this.destination.error(safeSubscriber.syncErrorValue);
        }
        else {
            this.destination.next(value);
        }
    };
    DoSubscriber.prototype._error = function (err) {
        var safeSubscriber = this.safeSubscriber;
        safeSubscriber.error(err);
        if (safeSubscriber.syncErrorThrown) {
            this.destination.error(safeSubscriber.syncErrorValue);
        }
        else {
            this.destination.error(err);
        }
    };
    DoSubscriber.prototype._complete = function () {
        var safeSubscriber = this.safeSubscriber;
        safeSubscriber.complete();
        if (safeSubscriber.syncErrorThrown) {
            this.destination.error(safeSubscriber.syncErrorValue);
        }
        else {
            this.destination.complete();
        }
    };
    return DoSubscriber;
}(Subscriber_1.Subscriber));
var throttle_1 = createCommonjsModule(function (module, exports) {
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    exports.defaultThrottleConfig = {
        leading: true,
        trailing: false
    };
    /**
     * Emits a value from the source Observable, then ignores subsequent source
     * values for a duration determined by another Observable, then repeats this
     * process.
     *
     * <span class="informal">It's like {@link throttleTime}, but the silencing
     * duration is determined by a second Observable.</span>
     *
     * <img src="./img/throttle.png" width="100%">
     *
     * `throttle` emits the source Observable values on the output Observable
     * when its internal timer is disabled, and ignores source values when the timer
     * is enabled. Initially, the timer is disabled. As soon as the first source
     * value arrives, it is forwarded to the output Observable, and then the timer
     * is enabled by calling the `durationSelector` function with the source value,
     * which returns the "duration" Observable. When the duration Observable emits a
     * value or completes, the timer is disabled, and this process repeats for the
     * next source value.
     *
     * @example <caption>Emit clicks at a rate of at most one click per second</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.throttle(ev => Rx.Observable.interval(1000));
     * result.subscribe(x => console.log(x));
     *
     * @see {@link audit}
     * @see {@link debounce}
     * @see {@link delayWhen}
     * @see {@link sample}
     * @see {@link throttleTime}
     *
     * @param {function(value: T): SubscribableOrPromise} durationSelector A function
     * that receives a value from the source Observable, for computing the silencing
     * duration for each source value, returned as an Observable or a Promise.
     * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults
     * to `{ leading: true, trailing: false }`.
     * @return {Observable<T>} An Observable that performs the throttle operation to
     * limit the rate of emissions from the source.
     * @method throttle
     * @owner Observable
     */
    function throttle(durationSelector, config) {
        if (config === void 0) {
            config = exports.defaultThrottleConfig;
        }
        return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };
    }
    exports.throttle = throttle;
    var ThrottleOperator = (function () {
        function ThrottleOperator(durationSelector, leading, trailing) {
            this.durationSelector = durationSelector;
            this.leading = leading;
            this.trailing = trailing;
        }
        ThrottleOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
        };
        return ThrottleOperator;
    }());
    /**
     * We need this JSDoc comment for affecting ESDoc
     * @ignore
     * @extends {Ignored}
     */
    var ThrottleSubscriber = (function (_super) {
        __extends(ThrottleSubscriber, _super);
        function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
            _super.call(this, destination);
            this.destination = destination;
            this.durationSelector = durationSelector;
            this._leading = _leading;
            this._trailing = _trailing;
            this._hasTrailingValue = false;
        }
        ThrottleSubscriber.prototype._next = function (value) {
            if (this.throttled) {
                if (this._trailing) {
                    this._hasTrailingValue = true;
                    this._trailingValue = value;
                }
            }
            else {
                var duration = this.tryDurationSelector(value);
                if (duration) {
                    this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
                }
                if (this._leading) {
                    this.destination.next(value);
                    if (this._trailing) {
                        this._hasTrailingValue = true;
                        this._trailingValue = value;
                    }
                }
            }
        };
        ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
            try {
                return this.durationSelector(value);
            }
            catch (err) {
                this.destination.error(err);
                return null;
            }
        };
        ThrottleSubscriber.prototype._unsubscribe = function () {
            var _a = this, throttled = _a.throttled, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue, _trailing = _a._trailing;
            this._trailingValue = null;
            this._hasTrailingValue = false;
            if (throttled) {
                this.remove(throttled);
                this.throttled = null;
                throttled.unsubscribe();
            }
        };
        ThrottleSubscriber.prototype._sendTrailing = function () {
            var _a = this, destination = _a.destination, throttled = _a.throttled, _trailing = _a._trailing, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue;
            if (throttled && _trailing && _hasTrailingValue) {
                destination.next(_trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            }
        };
        ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this._sendTrailing();
            this._unsubscribe();
        };
        ThrottleSubscriber.prototype.notifyComplete = function () {
            this._sendTrailing();
            this._unsubscribe();
        };
        return ThrottleSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));
});
var throttle_2 = throttle_1.defaultThrottleConfig;
var throttle_3 = throttle_1.throttle;
var __extends$87 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ThrottleTimeSubscriber = (function (_super) {
    __extends$87(ThrottleTimeSubscriber, _super);
    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
        _super.call(this, destination);
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
        this._hasTrailingValue = false;
        this._trailingValue = null;
    }
    ThrottleTimeSubscriber.prototype._next = function (value) {
        if (this.throttled) {
            if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
        else {
            this.add(this.throttled = this.scheduler.schedule(dispatchNext$2, this.duration, { subscriber: this }));
            if (this.leading) {
                this.destination.next(value);
            }
        }
    };
    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
        var throttled = this.throttled;
        if (throttled) {
            if (this.trailing && this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            }
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        }
    };
    return ThrottleTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNext$2(arg) {
    var subscriber = arg.subscriber;
    subscriber.clearThrottle();
}
var __extends$88 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var TimeInterval = (function () {
    function TimeInterval(value, interval) {
        this.value = value;
        this.interval = interval;
    }
    return TimeInterval;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeIntervalSubscriber = (function (_super) {
    __extends$88(TimeIntervalSubscriber, _super);
    function TimeIntervalSubscriber(destination, scheduler) {
        _super.call(this, destination);
        this.scheduler = scheduler;
        this.lastTime = 0;
        this.lastTime = scheduler.now();
    }
    TimeIntervalSubscriber.prototype._next = function (value) {
        var now = this.scheduler.now();
        var span = now - this.lastTime;
        this.lastTime = now;
        this.destination.next(new TimeInterval(value, span));
    };
    return TimeIntervalSubscriber;
}(Subscriber_1.Subscriber));
var __extends$90 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when duetime elapses.
 *
 * @see {@link timeout}
 *
 * @class TimeoutError
 */
var TimeoutError = (function (_super) {
    __extends$90(TimeoutError, _super);
    function TimeoutError() {
        var err = _super.call(this, 'Timeout has occurred');
        this.name = err.name = 'TimeoutError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return TimeoutError;
}(Error));
var __extends$89 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeoutSubscriber = (function (_super) {
    __extends$89(TimeoutSubscriber, _super);
    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {
        _super.call(this, destination);
        this.absoluteTimeout = absoluteTimeout;
        this.waitFor = waitFor;
        this.scheduler = scheduler;
        this.errorInstance = errorInstance;
        this.action = null;
        this.scheduleTimeout();
    }
    TimeoutSubscriber.dispatchTimeout = function (subscriber) {
        subscriber.error(subscriber.errorInstance);
    };
    TimeoutSubscriber.prototype.scheduleTimeout = function () {
        var action = this.action;
        if (action) {
            // Recycle the action if we've already scheduled one. All the production
            // Scheduler Actions mutate their state/delay time and return themeselves.
            // VirtualActions are immutable, so they create and return a clone. In this
            // case, we need to set the action reference to the most recent VirtualAction,
            // to ensure that's the one we clone from next time.
            this.action = action.schedule(this, this.waitFor);
        }
        else {
            this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));
        }
    };
    TimeoutSubscriber.prototype._next = function (value) {
        if (!this.absoluteTimeout) {
            this.scheduleTimeout();
        }
        _super.prototype._next.call(this, value);
    };
    TimeoutSubscriber.prototype._unsubscribe = function () {
        this.action = null;
        this.scheduler = null;
        this.errorInstance = null;
    };
    return TimeoutSubscriber;
}(Subscriber_1.Subscriber));
var __extends$91 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeoutWithSubscriber = (function (_super) {
    __extends$91(TimeoutWithSubscriber, _super);
    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
        _super.call(this, destination);
        this.absoluteTimeout = absoluteTimeout;
        this.waitFor = waitFor;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
        this.action = null;
        this.scheduleTimeout();
    }
    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
        var withObservable = subscriber.withObservable;
        subscriber._unsubscribeAndRecycle();
        subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));
    };
    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
        var action = this.action;
        if (action) {
            // Recycle the action if we've already scheduled one. All the production
            // Scheduler Actions mutate their state/delay time and return themeselves.
            // VirtualActions are immutable, so they create and return a clone. In this
            // case, we need to set the action reference to the most recent VirtualAction,
            // to ensure that's the one we clone from next time.
            this.action = action.schedule(this, this.waitFor);
        }
        else {
            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
        }
    };
    TimeoutWithSubscriber.prototype._next = function (value) {
        if (!this.absoluteTimeout) {
            this.scheduleTimeout();
        }
        _super.prototype._next.call(this, value);
    };
    TimeoutWithSubscriber.prototype._unsubscribe = function () {
        this.action = null;
        this.scheduler = null;
        this.withObservable = null;
    };
    return TimeoutWithSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$92 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber = (function (_super) {
    __extends$92(WindowSubscriber, _super);
    function WindowSubscriber(destination) {
        _super.call(this, destination);
        this.window = new Subject_1.Subject();
        destination.next(this.window);
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow();
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this._complete();
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
    };
    WindowSubscriber.prototype._unsubscribe = function () {
        this.window = null;
    };
    WindowSubscriber.prototype.openWindow = function () {
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var destination = this.destination;
        var newWindow = this.window = new Subject_1.Subject();
        destination.next(newWindow);
    };
    return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$93 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowCountSubscriber = (function (_super) {
    __extends$93(WindowCountSubscriber, _super);
    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
        _super.call(this, destination);
        this.destination = destination;
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
        this.windows = [new Subject_1.Subject()];
        this.count = 0;
        destination.next(this.windows[0]);
    }
    WindowCountSubscriber.prototype._next = function (value) {
        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
        var destination = this.destination;
        var windowSize = this.windowSize;
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len && !this.closed; i++) {
            windows[i].next(value);
        }
        var c = this.count - windowSize + 1;
        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
            windows.shift().complete();
        }
        if (++this.count % startWindowEvery === 0 && !this.closed) {
            var window_1 = new Subject_1.Subject();
            windows.push(window_1);
            destination.next(window_1);
        }
    };
    WindowCountSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().error(err);
            }
        }
        this.destination.error(err);
    };
    WindowCountSubscriber.prototype._complete = function () {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().complete();
            }
        }
        this.destination.complete();
    };
    WindowCountSubscriber.prototype._unsubscribe = function () {
        this.count = 0;
        this.windows = null;
    };
    return WindowCountSubscriber;
}(Subscriber_1.Subscriber));
var __extends$94 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var CountedSubject = (function (_super) {
    __extends$94(CountedSubject, _super);
    function CountedSubject() {
        _super.apply(this, arguments);
        this._numberOfNextedValues = 0;
    }
    CountedSubject.prototype.next = function (value) {
        this._numberOfNextedValues++;
        _super.prototype.next.call(this, value);
    };
    Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
        get: function () {
            return this._numberOfNextedValues;
        },
        enumerable: true,
        configurable: true
    });
    return CountedSubject;
}(Subject_1.Subject));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowTimeSubscriber = (function (_super) {
    __extends$94(WindowTimeSubscriber, _super);
    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        _super.call(this, destination);
        this.destination = destination;
        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.maxWindowSize = maxWindowSize;
        this.scheduler = scheduler;
        this.windows = [];
        var window = this.openWindow();
        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
            var closeState = { subscriber: this, window: window, context: null };
            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };
            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
        }
        else {
            var timeSpanOnlyState = { subscriber: this, window: window, windowTimeSpan: windowTimeSpan };
            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
        }
    }
    WindowTimeSubscriber.prototype._next = function (value) {
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len; i++) {
            var window_1 = windows[i];
            if (!window_1.closed) {
                window_1.next(value);
                if (window_1.numberOfNextedValues >= this.maxWindowSize) {
                    this.closeWindow(window_1);
                }
            }
        }
    };
    WindowTimeSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        while (windows.length > 0) {
            windows.shift().error(err);
        }
        this.destination.error(err);
    };
    WindowTimeSubscriber.prototype._complete = function () {
        var windows = this.windows;
        while (windows.length > 0) {
            var window_2 = windows.shift();
            if (!window_2.closed) {
                window_2.complete();
            }
        }
        this.destination.complete();
    };
    WindowTimeSubscriber.prototype.openWindow = function () {
        var window = new CountedSubject();
        this.windows.push(window);
        var destination = this.destination;
        destination.next(window);
        return window;
    };
    WindowTimeSubscriber.prototype.closeWindow = function (window) {
        window.complete();
        var windows = this.windows;
        windows.splice(windows.indexOf(window), 1);
    };
    return WindowTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchWindowTimeSpanOnly(state$$1) {
    var subscriber = state$$1.subscriber, windowTimeSpan = state$$1.windowTimeSpan, window = state$$1.window;
    if (window) {
        subscriber.closeWindow(window);
    }
    state$$1.window = subscriber.openWindow();
    this.schedule(state$$1, windowTimeSpan);
}
function dispatchWindowCreation(state$$1) {
    var windowTimeSpan = state$$1.windowTimeSpan, subscriber = state$$1.subscriber, scheduler = state$$1.scheduler, windowCreationInterval = state$$1.windowCreationInterval;
    var window = subscriber.openWindow();
    var action = this;
    var context = { action: action, subscription: null };
    var timeSpanState = { subscriber: subscriber, window: window, context: context };
    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
    action.add(context.subscription);
    action.schedule(state$$1, windowCreationInterval);
}
function dispatchWindowClose(state$$1) {
    var subscriber = state$$1.subscriber, window = state$$1.window, context = state$$1.context;
    if (context && context.action && context.subscription) {
        context.action.remove(context.subscription);
    }
    subscriber.closeWindow(window);
}
var __extends$95 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowToggleSubscriber = (function (_super) {
    __extends$95(WindowToggleSubscriber, _super);
    function WindowToggleSubscriber(destination, openings, closingSelector) {
        _super.call(this, destination);
        this.openings = openings;
        this.closingSelector = closingSelector;
        this.contexts = [];
        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));
    }
    WindowToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        if (contexts) {
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
                contexts[i].window.next(value);
            }
        }
    };
    WindowToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index$$1 = -1;
            while (++index$$1 < len) {
                var context = contexts[index$$1];
                context.window.error(err);
                context.subscription.unsubscribe();
            }
        }
        _super.prototype._error.call(this, err);
    };
    WindowToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index$$1 = -1;
            while (++index$$1 < len) {
                var context = contexts[index$$1];
                context.window.complete();
                context.subscription.unsubscribe();
            }
        }
        _super.prototype._complete.call(this);
    };
    WindowToggleSubscriber.prototype._unsubscribe = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index$$1 = -1;
            while (++index$$1 < len) {
                var context = contexts[index$$1];
                context.window.unsubscribe();
                context.subscription.unsubscribe();
            }
        }
    };
    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (outerValue === this.openings) {
            var closingSelector = this.closingSelector;
            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);
            if (closingNotifier === errorObject.errorObject) {
                return this.error(errorObject.errorObject.e);
            }
            else {
                var window_1 = new Subject_1.Subject();
                var subscription = new Subscription_1.Subscription();
                var context = { window: window_1, subscription: subscription };
                this.contexts.push(context);
                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
                if (innerSubscription.closed) {
                    this.closeWindow(this.contexts.length - 1);
                }
                else {
                    innerSubscription.context = context;
                    subscription.add(innerSubscription);
                }
                this.destination.next(window_1);
            }
        }
        else {
            this.closeWindow(this.contexts.indexOf(outerValue));
        }
    };
    WindowToggleSubscriber.prototype.notifyError = function (err) {
        this.error(err);
    };
    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
        if (inner !== this.openSubscription) {
            this.closeWindow(this.contexts.indexOf(inner.context));
        }
    };
    WindowToggleSubscriber.prototype.closeWindow = function (index$$1) {
        if (index$$1 === -1) {
            return;
        }
        var contexts = this.contexts;
        var context = contexts[index$$1];
        var window = context.window, subscription = context.subscription;
        contexts.splice(index$$1, 1);
        window.complete();
        subscription.unsubscribe();
    };
    return WindowToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$96 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber$1 = (function (_super) {
    __extends$96(WindowSubscriber, _super);
    function WindowSubscriber(destination, closingSelector) {
        _super.call(this, destination);
        this.destination = destination;
        this.closingSelector = closingSelector;
        this.openWindow();
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
        if (this.closingNotification) {
            this.closingNotification.unsubscribe();
        }
    };
    WindowSubscriber.prototype.openWindow = function (innerSub) {
        if (innerSub === void 0) {
            innerSub = null;
        }
        if (innerSub) {
            this.remove(innerSub);
            innerSub.unsubscribe();
        }
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var window = this.window = new Subject_1.Subject();
        this.destination.next(window);
        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
        if (closingNotifier === errorObject.errorObject) {
            var err = errorObject.errorObject.e;
            this.destination.error(err);
            this.window.error(err);
        }
        else {
            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));
        }
    };
    return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$97 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WithLatestFromSubscriber = (function (_super) {
    __extends$97(WithLatestFromSubscriber, _super);
    function WithLatestFromSubscriber(destination, observables, project) {
        _super.call(this, destination);
        this.observables = observables;
        this.project = project;
        this.toRespond = [];
        var len = observables.length;
        this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            this.toRespond.push(i);
        }
        for (var i = 0; i < len; i++) {
            var observable = observables[i];
            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
        }
    }
    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        var toRespond = this.toRespond;
        if (toRespond.length > 0) {
            var found = toRespond.indexOf(outerIndex);
            if (found !== -1) {
                toRespond.splice(found, 1);
            }
        }
    };
    WithLatestFromSubscriber.prototype.notifyComplete = function () {
        // noop
    };
    WithLatestFromSubscriber.prototype._next = function (value) {
        if (this.toRespond.length === 0) {
            var args = [value].concat(this.values);
            if (this.project) {
                this._tryProject(args);
            }
            else {
                this.destination.next(args);
            }
        }
    };
    WithLatestFromSubscriber.prototype._tryProject = function (args) {
        var result;
        try {
            result = this.project.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return WithLatestFromSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var __extends$98 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipSubscriber = (function (_super) {
    __extends$98(ZipSubscriber, _super);
    function ZipSubscriber(destination, project, values) {
        if (values === void 0) {
            values = Object.create(null);
        }
        _super.call(this, destination);
        this.iterators = [];
        this.active = 0;
        this.project = (typeof project === 'function') ? project : null;
        this.values = values;
    }
    ZipSubscriber.prototype._next = function (value) {
        var iterators = this.iterators;
        if (isArray.isArray(value)) {
            iterators.push(new StaticArrayIterator(value));
        }
        else if (typeof value[iterator.iterator] === 'function') {
            iterators.push(new StaticIterator(value[iterator.iterator]()));
        }
        else {
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        }
    };
    ZipSubscriber.prototype._complete = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        if (len === 0) {
            this.destination.complete();
            return;
        }
        this.active = len;
        for (var i = 0; i < len; i++) {
            var iterator$$2 = iterators[i];
            if (iterator$$2.stillUnsubscribed) {
                this.add(iterator$$2.subscribe(iterator$$2, i));
            }
            else {
                this.active--; // not an observable
            }
        }
    };
    ZipSubscriber.prototype.notifyInactive = function () {
        this.active--;
        if (this.active === 0) {
            this.destination.complete();
        }
    };
    ZipSubscriber.prototype.checkIterators = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        var destination = this.destination;
        // abort if not all of them have values
        for (var i = 0; i < len; i++) {
            var iterator$$2 = iterators[i];
            if (typeof iterator$$2.hasValue === 'function' && !iterator$$2.hasValue()) {
                return;
            }
        }
        var shouldComplete = false;
        var args = [];
        for (var i = 0; i < len; i++) {
            var iterator$$2 = iterators[i];
            var result = iterator$$2.next();
            // check to see if it's completed now that you've gotten
            // the next value.
            if (iterator$$2.hasCompleted()) {
                shouldComplete = true;
            }
            if (result.done) {
                destination.complete();
                return;
            }
            args.push(result.value);
        }
        if (this.project) {
            this._tryProject(args);
        }
        else {
            destination.next(args);
        }
        if (shouldComplete) {
            destination.complete();
        }
    };
    ZipSubscriber.prototype._tryProject = function (args) {
        var result;
        try {
            result = this.project.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return ZipSubscriber;
}(Subscriber_1.Subscriber));
var StaticIterator = (function () {
    function StaticIterator(iterator$$2) {
        this.iterator = iterator$$2;
        this.nextResult = iterator$$2.next();
    }
    StaticIterator.prototype.hasValue = function () {
        return true;
    };
    StaticIterator.prototype.next = function () {
        var result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    };
    StaticIterator.prototype.hasCompleted = function () {
        var nextResult = this.nextResult;
        return nextResult && nextResult.done;
    };
    return StaticIterator;
}());
var StaticArrayIterator = (function () {
    function StaticArrayIterator(array) {
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    }
    StaticArrayIterator.prototype[iterator.iterator] = function () {
        return this;
    };
    StaticArrayIterator.prototype.next = function (value) {
        var i = this.index++;
        var array = this.array;
        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
    };
    StaticArrayIterator.prototype.hasValue = function () {
        return this.array.length > this.index;
    };
    StaticArrayIterator.prototype.hasCompleted = function () {
        return this.array.length === this.index;
    };
    return StaticArrayIterator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipBufferIterator = (function (_super) {
    __extends$98(ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable) {
        _super.call(this, destination);
        this.parent = parent;
        this.observable = observable;
        this.stillUnsubscribed = true;
        this.buffer = [];
        this.isComplete = false;
    }
    ZipBufferIterator.prototype[iterator.iterator] = function () {
        return this;
    };
    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
    //    this is legit because `next()` will never be called by a subscription in this case.
    ZipBufferIterator.prototype.next = function () {
        var buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
        }
        else {
            return { value: buffer.shift(), done: false };
        }
    };
    ZipBufferIterator.prototype.hasValue = function () {
        return this.buffer.length > 0;
    };
    ZipBufferIterator.prototype.hasCompleted = function () {
        return this.buffer.length === 0 && this.isComplete;
    };
    ZipBufferIterator.prototype.notifyComplete = function () {
        if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
        }
        else {
            this.destination.complete();
        }
    };
    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    };
    ZipBufferIterator.prototype.subscribe = function (value, index$$1) {
        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index$$1);
    };
    return ZipBufferIterator;
}(OuterSubscriber_1.OuterSubscriber));
var catchError = catchError_1.catchError;
var map$1 = map_1.map;
var startWith$1 = startWith_1.startWith;
var switchMap$2 = switchMap_1.switchMap;
var throttle = throttle_1.throttle;
var DataTableSource = /** @class */ (function (_super) {
    __extends(DataTableSource, _super);
    /**
     * @param {?} tableService
     * @param {?} state
     * @param {?} ref
     */
    function DataTableSource(tableService, state$$1, ref) {
        var _this = _super.call(this) || this;
        _this.tableService = tableService;
        _this.state = state$$1;
        _this.ref = ref;
        _this.total = 0;
        _this.current = 0;
        _this.loading = false;
        _this.pristine = true;
        return _this;
    }
    Object.defineProperty(DataTableSource.prototype, "totallyEmpty", {
        /**
         * @return {?}
         */
        get: function () {
            return this.total === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableSource.prototype, "currentlyEmpty", {
        /**
         * @return {?}
         */
        get: function () {
            return this.current === 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DataTableSource.prototype.connect = function () {
        var _this = this;
        var /** @type {?} */ displayDataChanges = [this.state.updates];
        return Observable.Observable.merge.apply(Observable.Observable, displayDataChanges).pipe(startWith$1(null), switchMap$2(function () {
            _this.pristine = false;
            _this.loading = true;
            return _this.tableService.getTableResults(_this.state.sort, _this.state.filter, _this.state.page, _this.state.pageSize, _this.state.globalSearch, _this.state.outsideFilter);
        }), map$1(function (data) {
            _this.loading = false;
            _this.total = data.total;
            _this.current = data.results.length;
            _this.data = data.results;
            setTimeout(function () {
                _this.ref.markForCheck();
            });
            return data.results;
        }), catchError(function (err, caught) {
            console.error(err, caught); // tslint: disable-line
            _this.loading = false;
            return Observable.Observable.of(null);
        }));
    };
    /**
     * @return {?}
     */
    DataTableSource.prototype.disconnect = function () { };
    return DataTableSource;
}(table.DataSource));
var DataTableState = /** @class */ (function () {
    function DataTableState() {
        this.selectionSource = new Subject.Subject();
        this.paginationSource = new Subject.Subject();
        this.sortFilterSource = new Subject.Subject();
        this.resetSource = new Subject.Subject();
        this.sort = undefined;
        this.filter = undefined;
        this.page = 0;
        this.pageSize = undefined;
        this.globalSearch = undefined;
        this.selectedRows = new Map();
        this.updates = new core.EventEmitter();
    }
    Object.defineProperty(DataTableState.prototype, "userFiltered", {
        /**
         * @return {?}
         */
        get: function () {
            return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableState.prototype, "selected", {
        /**
         * @return {?}
         */
        get: function () {
            return Array.from(this.selectedRows.values());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} fireUpdate
     * @param {?=} persistUserFilters
     * @return {?}
     */
    DataTableState.prototype.reset = function (fireUpdate, persistUserFilters) {
        if (fireUpdate === void 0) { fireUpdate = true; }
        if (!persistUserFilters) {
            this.sort = undefined;
            this.globalSearch = undefined;
            this.filter = undefined;
        }
        this.page = 0;
        this.selectedRows.clear();
        this.resetSource.next();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    };
    /**
     * @return {?}
     */
    DataTableState.prototype.onSelectionChange = function () {
        this.selectionSource.next();
    };
    /**
     * @return {?}
     */
    DataTableState.prototype.onPaginationChange = function () {
        this.paginationSource.next();
    };
    /**
     * @return {?}
     */
    DataTableState.prototype.onSortFilterChange = function () {
        this.sortFilterSource.next();
    };
    return DataTableState;
}());
var StaticDataTableService = /** @class */ (function () {
    /**
     * @param {?=} data
     */
    function StaticDataTableService(data) {
        if (data === void 0) { data = []; }
        this.data = data;
    }
    /**
     * @param {?} sort
     * @param {?} filter
     * @param {?=} page
     * @param {?=} pageSize
     * @param {?=} globalSearch
     * @param {?=} outsideFilter
     * @return {?}
     */
    StaticDataTableService.prototype.getTableResults = function (sort, filter$$1, page, pageSize, globalSearch, outsideFilter) {
        if (page === void 0) { page = 0; }
        var /** @type {?} */ ret = this.data.slice();
        if (ret.length !== 0) {
            if (globalSearch) {
                ret = ret.filter(function (item) { return Object.keys(item).some(function (key) { return ("" + item[key]).toLowerCase().includes(globalSearch.toLowerCase()); }); });
            }
            if (filter$$1) {
                var /** @type {?} */ value = Helpers.isString(filter$$1.value) ? filter$$1.value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') : filter$$1.value;
                ret = ret.filter(Helpers.filterByField(filter$$1.id, value));
            }
            if (sort) {
                ret = ret.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
            }
            if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                ret = ret.slice(page * pageSize, (page + 1) * pageSize);
            }
        }
        return Observable.Observable.of({ results: ret, total: this.data.length });
    };
    return StaticDataTableService;
}());
var NovoDataTable = /** @class */ (function () {
    /**
     * @param {?} labels
     * @param {?} ref
     * @param {?} state
     */
    function NovoDataTable(labels, ref, state$$1) {
        this.labels = labels;
        this.ref = ref;
        this.state = state$$1;
        this.globalSearchHiddenClassToggle = false;
        this.name = 'novo-data-table';
        this.rowIdentifier = 'id';
        this.trackByFn = function (index$$1, item) { return item.id; };
        this._hideGlobalSearch = true;
        this.loading = true;
        this.templates = {};
        this.columnToTemplate = {};
        this.columnsLoaded = false;
        this.selection = new Set();
    }
    Object.defineProperty(NovoDataTable.prototype, "dataTableService", {
        /**
         * @param {?} service
         * @return {?}
         */
        set: function (service) {
            this.loading = false;
            if (!service) {
                service = new StaticDataTableService([]);
            }
            this.dataSource = new DataTableSource(service, this.state, this.ref);
            this.ref.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "rows", {
        /**
         * @param {?} rows
         * @return {?}
         */
        set: function (rows) {
            this.loading = false;
            var /** @type {?} */ service = new StaticDataTableService(rows);
            this.dataSource = new DataTableSource(service, this.state, this.ref);
            this.ref.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "outsideFilter", {
        /**
         * @param {?} outsideFilter
         * @return {?}
         */
        set: function (outsideFilter) {
            var _this = this;
            // Unsubscribe
            if (this.outsideFilterSubscription) {
                this.outsideFilterSubscription.unsubscribe();
            }
            // Re-subscribe
            this.outsideFilterSubscription = outsideFilter.subscribe(function (filter$$1) {
                _this.state.outsideFilter = filter$$1;
                _this.state.updates.next({ globalSearch: _this.state.globalSearch, filter: _this.state.filter, sort: _this.state.sort });
                _this.ref.markForCheck();
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "columns", {
        /**
         * @return {?}
         */
        get: function () {
            return this._columns;
        },
        /**
         * @param {?} columns
         * @return {?}
         */
        set: function (columns) {
            this._columns = columns;
            this.configureColumns();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "customFilter", {
        /**
         * @return {?}
         */
        get: function () {
            return this._customFilter;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._customFilter = coercion.coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "forceShowHeader", {
        /**
         * @return {?}
         */
        get: function () {
            return this._forceShowHeader;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._forceShowHeader = coercion.coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "hideGlobalSearch", {
        /**
         * @return {?}
         */
        get: function () {
            return this._hideGlobalSearch;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._hideGlobalSearch = coercion.coerceBooleanProperty(v);
            this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "empty", {
        /**
         * @return {?}
         */
        get: function () {
            return this.dataSource && this.dataSource.totallyEmpty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "loadingClass", {
        /**
         * @return {?}
         */
        get: function () {
            return this.loading || (this.dataSource && this.dataSource.loading);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoDataTable.prototype.ngOnDestroy = function () {
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    NovoDataTable.prototype.ngAfterContentInit = function () {
        var _this = this;
        // Default templates defined here
        this.defaultTemplates.forEach(function (item) {
            _this.templates[item.getType()] = item.template;
        });
        // Custom templates passed in
        this.customTemplates.forEach(function (item) {
            _this.templates[item.getType()] = item.template;
        });
        // Load columns
        this.configureColumns();
        if (this.paginationOptions && !this.paginationOptions.page) {
            this.paginationOptions.page = 0;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSize) {
            this.paginationOptions.pageSize = 50;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
            this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
        }
        this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
        this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
        this.ref.markForCheck();
    };
    /**
     * @param {?} term
     * @return {?}
     */
    NovoDataTable.prototype.onSearchChange = function (term) {
        this.state.globalSearch = term;
        this.state.reset(false, true);
        this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort });
    };
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    NovoDataTable.prototype.trackColumnsBy = function (index$$1, item) {
        return item.id;
    };
    /**
     * @param {?} check
     * @param {?} row
     * @return {?}
     */
    NovoDataTable.prototype.isDisabled = function (check, row) {
        if (check.disabled === true) {
            return true;
        }
        if (check.disabledFunc) {
            return check.disabledFunc(row);
        }
        return false;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    NovoDataTable.prototype.isSelected = function (row) {
        return this.state.selectedRows.has("" + row[this.rowIdentifier]);
    };
    /**
     * @param {?} row
     * @return {?}
     */
    NovoDataTable.prototype.selectRow = function (row) {
        var /** @type {?} */ selected = this.isSelected(row);
        if (selected) {
            this.state.selectedRows.delete("" + row[this.rowIdentifier]);
        }
        else {
            this.state.selectedRows.set("" + row[this.rowIdentifier], row);
        }
        this.state.onSelectionChange();
    };
    /**
     * @param {?} selected
     * @return {?}
     */
    NovoDataTable.prototype.selectRows = function (selected) {
        var _this = this;
        (this.dataSource.data || []).forEach(function (row) {
            if (!selected) {
                _this.state.selectedRows.delete("" + row[_this.rowIdentifier]);
            }
            else {
                _this.state.selectedRows.set("" + row[_this.rowIdentifier], row);
            }
        });
        this.state.onSelectionChange();
    };
    /**
     * @return {?}
     */
    NovoDataTable.prototype.allCurrentRowsSelected = function () {
        for (var /** @type {?} */ i = 0; i < (this.dataSource.data || []).length; i++) {
            if (!this.isSelected((this.dataSource.data || [])[i])) {
                return false;
            }
        }
        return true;
    };
    /**
     * @return {?}
     */
    NovoDataTable.prototype.configureColumns = function () {
        var _this = this;
        if (this.columns && this.columns.length !== 0 && Object.keys(this.templates).length !== 0) {
            // Figure the column templates
            this.columns.forEach(function (column) {
                // Figure the template
                var /** @type {?} */ templateName;
                if (column.template) {
                    // Pass it in as template
                    templateName = column.template;
                }
                else if (!!_this.templates[column.id]) {
                    // Custom template for the column id
                    templateName = column.id;
                }
                else {
                    // Default to the defaulCellTemplate
                    if (column.type === 'action') {
                        if (column.action && column.action.options) {
                            templateName = 'dropdownCellTemplate';
                        }
                        else {
                            templateName = 'buttonCellTemplate';
                        }
                    }
                    else {
                        templateName = column.type + "CellTemplate";
                    }
                }
                _this.columnToTemplate[column.id] = _this.templates[templateName];
            });
            this.columnsLoaded = true;
        }
    };
    return NovoDataTable;
}());
NovoDataTable.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-data-table',
                template: "\n        <header *ngIf=\"(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader\">\n          <ng-container *ngTemplateOutlet=\"templates['customHeader']\"></ng-container>\n            <novo-search\n                alwaysOpen=\"true\"\n                (searchChanged)=\"onSearchChange($event)\"\n                [(ngModel)]=\"state.globalSearch\"\n                *ngIf=\"!hideGlobalSearch\"\n                [placeholder]=\"searchOptions?.placeholder\"\n                [hint]=\"searchOptions?.tooltip\">\n            </novo-search>\n            <novo-data-table-pagination\n                *ngIf=\"paginationOptions\"\n                [theme]=\"paginationOptions.theme\"\n                [totalLength]=\"dataSource?.total\"\n                [currentLength]=\"dataSource?.current\"\n                [userFiltered]=\"state?.userFiltered\"\n                [page]=\"paginationOptions.page\"\n                [pageSize]=\"paginationOptions.pageSize\"\n                [pageSizeOptions]=\"paginationOptions.pageSizeOptions\">\n            </novo-data-table-pagination>\n            <div class=\"novo-data-table-actions\" *ngIf=\"templates['customActions']\">\n              <ng-container *ngTemplateOutlet=\"templates['customActions']\"></ng-container>\n            </div>\n        </header>\n        <div class=\"novo-data-table-loading-mask\" *ngIf=\"dataSource?.loading || loading\" data-automation-id=\"novo-data-table-loading\">\n            <novo-loading></novo-loading>\n        </div>\n        <div class=\"novo-data-table-outside-container\">\n            <div class=\"novo-data-table-custom-filter\" *ngIf=\"customFilter\">\n              <ng-container *ngTemplateOutlet=\"templates['customFiler']\"></ng-container>\n            </div>\n            <div class=\"novo-data-table-container\" [class.empty-user-filtered]=\"dataSource?.currentlyEmpty && state.userFiltered\" [class.empty]=\"dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine\">\n                <cdk-table *ngIf=\"(columns?.length > 0) && columnsLoaded && dataSource\" [dataSource]=\"dataSource\" [trackBy]=\"trackByFn\" novoDataTableSortFilter [class.empty]=\"dataSource?.currentlyEmpty && state.userFiltered\" [hidden]=\"dataSource?.totallyEmpty && !userFiltered\">\n                    <ng-container novoDataTableColumnDef=\"selection\">\n                        <novo-data-table-checkbox-header-cell *novoDataTableHeaderCellDef></novo-data-table-checkbox-header-cell>\n                        <novo-data-table-checkbox-cell *novoDataTableCellDef=\"let row; let i = index\" [row]=\"row\"></novo-data-table-checkbox-cell>\n                    </ng-container>\n                    <ng-container *ngFor=\"let column of columns;trackBy: trackColumnsBy\" [novoDataTableColumnDef]=\"column.id\">\n                      <novo-data-table-header-cell *novoDataTableHeaderCellDef [column]=\"column\" [novo-data-table-cell-config]=\"column\" [defaultSort]=\"defaultSort\" [class.empty]=\"column?.type === 'action' && !column?.label\" [class.button-header-cell]=\"column?.type === 'action' && !column?.action?.options\" [class.dropdown-header-cell]=\"column?.type === 'action' && column?.action?.options\"></novo-data-table-header-cell>\n                      <novo-data-table-cell *novoDataTableCellDef=\"let row\" [column]=\"column\" [row]=\"row\" [template]=\"columnToTemplate[column.id]\" [class.empty]=\"column?.type === 'action' && !column?.label\" [class.button-cell]=\"column?.type === 'action' && !column?.action?.options\" [class.dropdown-cell]=\"column?.type === 'action' && column?.action?.options\"></novo-data-table-cell>\n                    </ng-container>\n                    <novo-data-table-header-row *novoDataTableHeaderRowDef=\"displayedColumns\" data-automation-id=\"novo-data-table-header-row\"></novo-data-table-header-row>\n                    <novo-data-table-row *novoDataTableRowDef=\"let row; columns: displayedColumns;\" [id]=\"name + '-' + row[rowIdentifier]\" [dataAutomationId]=\"'data-automation-id-' + row[rowIdentifier]\"></novo-data-table-row>\n                </cdk-table>\n                <div class=\"novo-data-table-no-results-container\" *ngIf=\"dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine\">\n                  <div class=\"novo-data-table-empty-message\" >\n                    <ng-container *ngTemplateOutlet=\"templates['noResultsMessage'] || templates['defaultNoResultsMessage']\"></ng-container>\n                  </div>\n                </div>\n            </div>\n            <div class=\"novo-data-table-empty-container\" *ngIf=\"dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine\">\n              <div class=\"novo-data-table-empty-message\">\n                <ng-container *ngTemplateOutlet=\"templates['emptyMessage'] || templates['defaultNoResultsMessage']\"></ng-container>\n              </div>\n            </div>\n        </div>\n\n         <!-- DEFAULT CELL TEMPLATE -->\n        <ng-template novoTemplate=\"stringCellTemplate\"\n              let-row\n              let-col=\"col\">\n              <span>{{ row[col.id] | dataTableInterpolate:col }}</span>\n        </ng-template>\n        <ng-template novoTemplate=\"dateCellTemplate\"\n              let-row\n              let-col=\"col\">\n              <span>{{ row[col.id] | dataTableInterpolate:col | dataTableDateRenderer:col }}</span>\n        </ng-template>\n        <ng-template novoTemplate=\"datetimeCellTemplate\"\n              let-row\n              let-col=\"col\">\n              <span>{{ row[col.id] | dataTableInterpolate:col | dataTableDateTimeRenderer:col }}</span>\n        </ng-template>\n        <ng-template novoTemplate=\"timeCellTemplate\"\n              let-row\n              let-col=\"col\">\n              <span>{{ row[col.id] | dataTableInterpolate:col | dataTableTimeRenderer:col }}</span>\n        </ng-template>\n        <ng-template novoTemplate=\"currencyCellTemplate\"\n              let-row\n              let-col=\"col\">\n              <span>{{ row[col.id] | dataTableInterpolate:col | dataTableCurrencyRenderer:col }}</span>\n        </ng-template>\n        <ng-template novoTemplate=\"numberCellTemplate\"\n              let-row\n              let-col=\"col\">\n              <span>{{ row[col.id] | dataTableInterpolate:col | dataTableNumberRenderer:col }}</span>\n        </ng-template>\n        <ng-template novoTemplate=\"linkCellTemplate\"\n              let-row\n              let-col=\"col\">\n              <a (click)=\"col.handlers?.click({originalEvent: $event, row: row})\">{{ row[col.id] | dataTableInterpolate:col }}</a>\n        </ng-template>\n        <ng-template novoTemplate=\"buttonCellTemplate\"\n              let-row\n              let-col=\"col\">\n              <i class=\"bhi-{{ col?.action?.icon }} data-table-icon\" (click)=\"col.handlers?.click({ originalEvent: $event, row: row })\" [class.disabled]=\"isDisabled(col, row)\"></i>\n        </ng-template>\n        <ng-template novoTemplate=\"dropdownCellTemplate\"\n              let-row\n              let-col=\"col\">\n              <novo-dropdown appendToBody=\"true\" parentScrollSelector=\".novo-data-table\" containerClass=\"novo-data-table-dropdown\">\n                <button type=\"button\" theme=\"dialogue\" icon=\"collapse\" inverse>{{ col.label }}</button>\n                <list>\n                    <item *ngFor=\"let option of col?.action?.options\" (action)=\"option.handlers.click({ originalEvent: $event?.originalEvent, row: row })\" [disabled]=\"isDisabled(option, row)\">\n                        <span [attr.data-automation-id]=\"option.label\">{{ option.label }}</span>\n                    </item>\n                </list>\n            </novo-dropdown>\n        </ng-template>\n        <ng-template novoTemplate=\"defaultNoResultsMessage\">\n            <h4><i class=\"bhi-search-question\"></i> {{ labels.noMatchingRecordsMessage }}</h4>\n        </ng-template>\n        <ng-template novoTemplate=\"defaultEmptyMessage\">\n          <h4><i class=\"bhi-search-question\"></i> {{ labels.emptyTableMessage }}</h4>\n        </ng-template>\n        <!-- CUSTOM CELLS PASSED IN -->\n        <ng-content></ng-content>\n    ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [DataTableState],
            },] },
];
/**
 * @nocollapse
 */
NovoDataTable.ctorParameters = function () { return [
    { type: NovoLabelService, },
    { type: core.ChangeDetectorRef, },
    { type: DataTableState, },
]; };
NovoDataTable.propDecorators = {
    'globalSearchHiddenClassToggle': [{ type: core.HostBinding, args: ['class.global-search-hidden',] },],
    'customTemplates': [{ type: core.ContentChildren, args: [NovoTemplate,] },],
    'defaultTemplates': [{ type: core.ViewChildren, args: [NovoTemplate,] },],
    'displayedColumns': [{ type: core.Input },],
    'paginationOptions': [{ type: core.Input },],
    'searchOptions': [{ type: core.Input },],
    'defaultSort': [{ type: core.Input },],
    'name': [{ type: core.Input },],
    'rowIdentifier': [{ type: core.Input },],
    'trackByFn': [{ type: core.Input },],
    'dataTableService': [{ type: core.Input },],
    'rows': [{ type: core.Input },],
    'outsideFilter': [{ type: core.Input },],
    'columns': [{ type: core.Input },],
    'customFilter': [{ type: core.Input },],
    'forceShowHeader': [{ type: core.Input },],
    'hideGlobalSearch': [{ type: core.Input },],
    'empty': [{ type: core.HostBinding, args: ['class.empty',] },],
    'loadingClass': [{ type: core.HostBinding, args: ['class.loading',] },],
};
var NovoDataTableCell = /** @class */ (function (_super) {
    __extends(NovoDataTableCell, _super);
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     */
    function NovoDataTableCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.role = 'gridcell';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-cell');
        return _this;
    }
    /**
     * @return {?}
     */
    NovoDataTableCell.prototype.ngOnInit = function () {
        if (this.column.cellClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.column.cellClass(this.row));
        }
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
        }
    };
    return NovoDataTableCell;
}(table.CdkCell));
NovoDataTableCell.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-data-table-cell',
                template: "\n          <ng-container *ngTemplateOutlet=\"template; context: {$implicit: row, col: column}\"></ng-container>\n    ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableCell.ctorParameters = function () { return [
    { type: table.CdkColumnDef, },
    { type: core.ElementRef, },
    { type: core.Renderer2, },
]; };
NovoDataTableCell.propDecorators = {
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
    'row': [{ type: core.Input },],
    'template': [{ type: core.Input },],
    'column': [{ type: core.Input },],
};
var NovoDataTableCheckboxCell = /** @class */ (function (_super) {
    __extends(NovoDataTableCheckboxCell, _super);
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} dataTable
     * @param {?} ref
     */
    function NovoDataTableCheckboxCell(columnDef, elementRef, renderer, dataTable, ref) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.columnDef = columnDef;
        _this.dataTable = dataTable;
        _this.ref = ref;
        _this.role = 'gridcell';
        _this.checked = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-cell');
        _this.selectionSubscription = _this.dataTable.state.selectionSource.subscribe(function () {
            _this.checked = _this.dataTable.isSelected(_this.row);
            _this.ref.markForCheck();
        });
        _this.resetSubscription = _this.dataTable.state.resetSource.subscribe(function () {
            _this.checked = false;
            _this.ref.markForCheck();
        });
        return _this;
    }
    /**
     * @return {?}
     */
    NovoDataTableCheckboxCell.prototype.ngOnInit = function () {
        this.checked = this.dataTable.isSelected(this.row);
    };
    /**
     * @return {?}
     */
    NovoDataTableCheckboxCell.prototype.onClick = function () {
        this.dataTable.selectRow(this.row);
    };
    /**
     * @return {?}
     */
    NovoDataTableCheckboxCell.prototype.ngOnDestroy = function () {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
    };
    return NovoDataTableCheckboxCell;
}(table.CdkCell));
NovoDataTableCheckboxCell.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-data-table-checkbox-cell',
                template: "\n    <div class=\"data-table-checkbox\" (click)=\"onClick()\">\n      <input type=\"checkbox\" [checked]=\"checked\">\n      <label>\n        <i [class.bhi-checkbox-empty]=\"!checked\"\n          [class.bhi-checkbox-filled]=\"checked\"></i>\n      </label>\n    </div>\n    ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableCheckboxCell.ctorParameters = function () { return [
    { type: table.CdkColumnDef, },
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: NovoDataTable, },
    { type: core.ChangeDetectorRef, },
]; };
NovoDataTableCheckboxCell.propDecorators = {
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
    'row': [{ type: core.Input },],
};
var NovoDataTableHeaderRow = /** @class */ (function (_super) {
    __extends(NovoDataTableHeaderRow, _super);
    function NovoDataTableHeaderRow() {
        var _this = _super.apply(this, arguments) || this;
        _this.rowClass = 'novo-data-table-header-row';
        _this.role = 'row';
        return _this;
    }
    return NovoDataTableHeaderRow;
}(table.CdkHeaderRow));
NovoDataTableHeaderRow.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-data-table-header-row',
                template: table.CDK_ROW_TEMPLATE,
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableHeaderRow.ctorParameters = function () { return []; };
NovoDataTableHeaderRow.propDecorators = {
    'rowClass': [{ type: core.HostBinding, args: ['class',] },],
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
};
var NovoDataTableRow = /** @class */ (function (_super) {
    __extends(NovoDataTableRow, _super);
    function NovoDataTableRow() {
        var _this = _super.apply(this, arguments) || this;
        _this.rowClass = 'novo-data-table-row';
        _this.role = 'row';
        return _this;
    }
    return NovoDataTableRow;
}(table.CdkRow));
NovoDataTableRow.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-data-table-row',
                template: table.CDK_ROW_TEMPLATE,
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableRow.ctorParameters = function () { return []; };
NovoDataTableRow.propDecorators = {
    'rowClass': [{ type: core.HostBinding, args: ['class',] },],
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
    'id': [{ type: core.HostBinding, args: ['attr.id',] }, { type: core.Input },],
    'dataAutomationId': [{ type: core.HostBinding, args: ['attr.data-automation-id',] }, { type: core.Input },],
};
var NovoDataTableSortFilter = /** @class */ (function () {
    /**
     * @param {?} state
     */
    function NovoDataTableSortFilter(state$$1) {
        this.state = state$$1;
    }
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    NovoDataTableSortFilter.prototype.filter = function (id, value, transform) {
        var /** @type {?} */ filter$$1;
        if (!Helpers.isBlank(value)) {
            filter$$1 = { id: id, value: value, transform: transform };
        }
        else {
            filter$$1 = undefined;
        }
        this.state.filter = filter$$1;
        this.state.reset(false, true);
        this.state.updates.next({ filter: filter$$1, sort: this.state.sort });
        this.state.onSortFilterChange();
    };
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    NovoDataTableSortFilter.prototype.sort = function (id, value, transform) {
        var /** @type {?} */ sort = { id: id, value: value, transform: transform };
        this.state.sort = sort;
        this.state.reset(false, true);
        this.state.updates.next({ sort: sort, filter: this.state.filter });
        this.state.onSortFilterChange();
    };
    return NovoDataTableSortFilter;
}());
NovoDataTableSortFilter.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoDataTableSortFilter]',
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableSortFilter.ctorParameters = function () { return [
    { type: DataTableState, },
]; };
var NovoDataTableCellHeader = /** @class */ (function () {
    /**
     * @param {?} changeDetectorRef
     * @param {?} labels
     * @param {?} state
     * @param {?} _sort
     * @param {?} _cdkColumnDef
     */
    function NovoDataTableCellHeader(changeDetectorRef, labels, state$$1, _sort, _cdkColumnDef) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state$$1;
        this._sort = _sort;
        this._cdkColumnDef = _cdkColumnDef;
        this.icon = 'sortable';
        this.filterActive = false;
        this.sortActive = false;
        this.showCustomRange = false;
        this._rerenderSubscription = state$$1.updates.subscribe(function (change) {
            if (change.sort && change.sort.id === _this.id) {
                _this.icon = "sort-" + change.sort.value;
                _this.sortActive = true;
            }
            else {
                _this.icon = 'sortable';
                _this.sortActive = false;
            }
            if (change.filter && change.filter.id === _this.id) {
                _this.filterActive = true;
                _this.filter = change.filter.value;
            }
            else {
                _this.filterActive = false;
                _this.filter = undefined;
            }
            changeDetectorRef.markForCheck();
        });
    }
    Object.defineProperty(NovoDataTableCellHeader.prototype, "column", {
        /**
         * @param {?} column
         * @return {?}
         */
        set: function (column) {
            this.label = column.label;
            this.config = {
                sortable: !!column.sortable,
                filterable: !!column.filterable,
            };
            var /** @type {?} */ transforms = {};
            if (column.filterable && Helpers.isObject(column.filterable)) {
                this.config.filterConfig = /** @type {?} */ (column.filterable);
                this.showCustomRange = !!this.config.filterConfig.allowCustomRange;
                if (!this.config.filterConfig.type) {
                    this.config.filterConfig = { type: 'text' };
                }
                if (((column.filterable)).transform) {
                    transforms.filter = ((column.filterable)).transform;
                }
            }
            else {
                this.config.filterConfig = { type: 'text' };
            }
            if (column.sortable && Helpers.isObject(column.sortable)) {
                if (((column.sortable)).transform) {
                    transforms.sort = ((column.sortable)).transform;
                }
            }
            if (this.config.filterConfig.type === 'date' && !this.config.filterConfig.options) {
                this.config.filterConfig.options = this.getDefaultDateFilterOptions();
            }
            this.config.transforms = transforms;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.ngOnInit = function () {
        if (this._cdkColumnDef) {
            this.id = this._cdkColumnDef.name;
        }
        if (this.defaultSort && this.id === this.defaultSort.id) {
            this.icon = "sort-" + this.defaultSort.value;
            this.sortActive = true;
            this.changeDetectorRef.markForCheck();
        }
    };
    /**
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.ngOnDestroy = function () {
        this._rerenderSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.focusInput = function () {
        var _this = this;
        if (this.filterInput && this.filterInput.nativeElement) {
            setTimeout(function () { return _this.filterInput.nativeElement.focus(); }, 0);
        }
    };
    /**
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.sort = function () {
        var _this = this;
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(function () {
            _this.direction = _this.getNextSortDirection(_this.direction);
            _this._sort.sort(_this.id, _this.direction, _this.config.transforms.sort);
            _this.changeDetectorRef.markForCheck();
        }, 300);
    };
    /**
     * @param {?=} filter
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.filterData = function (filter$$1) {
        var _this = this;
        if (this.config.filterConfig.type === 'date' && filter$$1) {
            this.activeDateFilter = filter$$1.label || this.labels.customDateRange;
            if (filter$$1.startDate && filter$$1.endDate) {
                filter$$1 = {
                    min: dateFns.startOfDay(filter$$1.startDate),
                    max: dateFns.endOfDay(filter$$1.endDate),
                };
            }
            else {
                filter$$1 = {
                    min: dateFns.startOfDay(dateFns.addDays(dateFns.startOfToday(), filter$$1.min)),
                    max: dateFns.endOfDay(dateFns.addDays(dateFns.startOfToday(), filter$$1.max)),
                };
            }
        }
        if (filter$$1) {
            if (filter$$1.hasOwnProperty('value')) {
                this.filter = filter$$1.value;
            }
            else {
                this.filter = filter$$1;
            }
        }
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(function () {
            if (_this.filter === '') {
                _this.filter = undefined;
            }
            _this._sort.filter(_this.id, _this.filter, _this.config.transforms.filter);
            _this.changeDetectorRef.markForCheck();
        }, 300);
    };
    /**
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.clearFilter = function () {
        this.filter = undefined;
        this.activeDateFilter = undefined;
        this.filterData();
    };
    /**
     * @param {?} direction
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.getNextSortDirection = function (direction) {
        if (!direction) {
            return 'asc';
        }
        if (direction === 'asc') {
            return 'desc';
        }
        return 'asc';
    };
    /**
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.getDefaultDateFilterOptions = function () {
        var /** @type {?} */ opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        return opts;
    };
    return NovoDataTableCellHeader;
}());
NovoDataTableCellHeader.decorators = [
    { type: core.Component, args: [{
                selector: '[novo-data-table-cell-config]',
                template: "\n        <label data-automation-id=\"novo-data-table-label\">{{ label }}</label>\n        <div>\n            <button *ngIf=\"config.sortable\" theme=\"icon\" [icon]=\"icon\" (click)=\"sort()\" [class.active]=\"sortActive\" data-automation-id=\"novo-data-table-sort\"></button>\n            <novo-dropdown *ngIf=\"config.filterable\" side=\"right\" appendToBody=\"true\" parentScrollSelector=\".novo-data-table\" containerClass=\"data-table-dropdown\" data-automation-id=\"novo-data-table-filter\">\n                <button type=\"button\" theme=\"icon\" icon=\"filter\" [class.active]=\"filterActive\" (click)=\"focusInput()\"></button>\n                <div class=\"header\">\n                    <span>{{ labels.filters }}</span>\n                    <button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"clearFilter()\" *ngIf=\"filter !== null && filter !== undefined && filter !== ''\" data-automation-id=\"novo-data-table-filter-clear\">{{ labels.clear }}</button>\n                </div>\n                <ng-container [ngSwitch]=\"config.filterConfig.type\">\n                    <list *ngSwitchCase=\"'date'\">\n                        <ng-container *ngIf=\"!showCustomRange\">\n                            <item [class.active]=\"activeDateFilter === option.label\" *ngFor=\"let option of config.filterConfig.options\" (click)=\"filterData(option)\" [attr.data-automation-id]=\"'novo-data-table-filter-' + option.label\">\n                                {{ option.label }} <i class=\"bhi-check\" *ngIf=\"activeDateFilter === option.label\"></i>\n                            </item>\n                        </ng-container>\n                        <item [class.active]=\"labels.customDateRange === activeDateFilter\" (click)=\"showCustomRange = true\" *ngIf=\"config.filterConfig.allowCustomRange && !showCustomRange\" [keepOpen]=\"true\">\n                            {{ labels.customDateRange }} <i class=\"bhi-check\" *ngIf=\"labels.customDateRange === activeDateFilter\"></i>\n                        </item>\n                        <div class=\"calender-container\" *ngIf=\"showCustomRange\">\n                            <div (click)=\"showCustomRange = false\"><i class=\"bhi-previous\"></i>{{ labels.backToPresetFilters }}</div>\n                            <novo-date-picker (onSelect)=\"filterData($event)\" [(ngModel)]=\"filter\" range=\"true\"></novo-date-picker>\n                        </div>\n                    </list>\n                    <list *ngSwitchCase=\"'select'\">\n                        <item [class.active]=\"filter === option\" *ngFor=\"let option of config.filterConfig.options\" (click)=\"filterData(option)\" [attr.data-automation-id]=\"'novo-data-table-filter-' + (option?.label || option)\">\n                            <span>{{ option?.label || option }}</span> <i class=\"bhi-check\" *ngIf=\"option.hasOwnProperty('value') ? filter === option.value : filter === option\"></i>\n                        </item>\n                    </list>\n                    <list *ngSwitchDefault>\n                        <item class=\"filter-search\" keepOpen=\"true\">\n                            <input type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterData()\" #filterInput data-automation-id=\"novo-data-table-filter-input\"/>\n                        </item>\n                    </list>\n                </ng-container>\n            </novo-dropdown>\n        </div>\n    ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableCellHeader.ctorParameters = function () { return [
    { type: core.ChangeDetectorRef, },
    { type: NovoLabelService, },
    { type: DataTableState, },
    { type: NovoDataTableSortFilter, decorators: [{ type: core.Optional },] },
    { type: table.CdkColumnDef, decorators: [{ type: core.Optional },] },
]; };
NovoDataTableCellHeader.propDecorators = {
    'filterInput': [{ type: core.ViewChild, args: ['filterInput',] },],
    'defaultSort': [{ type: core.Input },],
    'column': [{ type: core.Input, args: ['novo-data-table-cell-config',] },],
};
var NovoDataTableCheckboxHeaderCell = /** @class */ (function (_super) {
    __extends(NovoDataTableCheckboxHeaderCell, _super);
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} dataTable
     * @param {?} ref
     */
    function NovoDataTableCheckboxHeaderCell(columnDef, elementRef, renderer, dataTable, ref) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.dataTable = dataTable;
        _this.ref = ref;
        _this.role = 'columnheader';
        _this.checked = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-header-cell');
        _this.selectionSubscription = _this.dataTable.state.selectionSource.subscribe(function () {
            _this.checked = _this.dataTable.allCurrentRowsSelected();
            _this.ref.markForCheck();
        });
        _this.paginationSubscription = _this.dataTable.state.paginationSource.subscribe(function () {
            _this.checked = _this.dataTable.allCurrentRowsSelected();
            _this.ref.markForCheck();
        });
        _this.resetSubscription = _this.dataTable.state.resetSource.subscribe(function () {
            _this.checked = false;
            _this.ref.markForCheck();
        });
        return _this;
    }
    /**
     * @return {?}
     */
    NovoDataTableCheckboxHeaderCell.prototype.ngOnDestroy = function () {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.paginationSubscription) {
            this.paginationSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    NovoDataTableCheckboxHeaderCell.prototype.onClick = function () {
        this.dataTable.selectRows(!this.checked);
    };
    return NovoDataTableCheckboxHeaderCell;
}(table.CdkHeaderCell));
NovoDataTableCheckboxHeaderCell.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-data-table-checkbox-header-cell',
                template: "\n    <div class=\"data-table-checkbox\" (click)=\"onClick()\">\n      <input type=\"checkbox\" [checked]=\"checked\">\n      <label>\n        <i [class.bhi-checkbox-empty]=\"!checked\"\n          [class.bhi-checkbox-filled]=\"checked\"></i>\n      </label>\n    </div>\n  ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableCheckboxHeaderCell.ctorParameters = function () { return [
    { type: table.CdkColumnDef, },
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: NovoDataTable, },
    { type: core.ChangeDetectorRef, },
]; };
NovoDataTableCheckboxHeaderCell.propDecorators = {
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
};
var NovoDataTableHeaderCell = /** @class */ (function (_super) {
    __extends(NovoDataTableHeaderCell, _super);
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     */
    function NovoDataTableHeaderCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-header-cell');
        return _this;
    }
    /**
     * @return {?}
     */
    NovoDataTableHeaderCell.prototype.ngOnInit = function () {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
        }
    };
    return NovoDataTableHeaderCell;
}(table.CdkHeaderCell));
NovoDataTableHeaderCell.decorators = [
    { type: core.Directive, args: [{
                selector: 'novo-data-table-header-cell',
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableHeaderCell.ctorParameters = function () { return [
    { type: table.CdkColumnDef, },
    { type: core.ElementRef, },
    { type: core.Renderer2, },
]; };
NovoDataTableHeaderCell.propDecorators = {
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
    'column': [{ type: core.Input },],
};
var MAX_PAGES_DISPLAYED = 5;
var NovoDataTablePagination = /** @class */ (function () {
    /**
     * @param {?} changeDetectorRef
     * @param {?} labels
     * @param {?} state
     */
    function NovoDataTablePagination(changeDetectorRef, labels, state$$1) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state$$1;
        this.theme = 'standard';
        this._page = 0;
        this._pageSizeOptions = [];
        this.pageChange = new core.EventEmitter();
        this.length = 0;
        this.resetSubscription = this.state.resetSource.subscribe(function () {
            _this.page = 0;
            _this.changeDetectorRef.markForCheck();
        });
    }
    Object.defineProperty(NovoDataTablePagination.prototype, "page", {
        /**
         * @return {?}
         */
        get: function () {
            return this._page;
        },
        /**
         * @param {?} page
         * @return {?}
         */
        set: function (page) {
            this._page = page;
            this.changeDetectorRef.markForCheck();
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
            this.state.page = this._page;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTablePagination.prototype, "pageSize", {
        /**
         * @return {?}
         */
        get: function () {
            return this._pageSize;
        },
        /**
         * @param {?} pageSize
         * @return {?}
         */
        set: function (pageSize) {
            this._pageSize = pageSize;
            this.updateDisplayedPageSizeOptions();
            this.state.pageSize = this._pageSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTablePagination.prototype, "pageSizeOptions", {
        /**
         * @return {?}
         */
        get: function () {
            return this._pageSizeOptions;
        },
        /**
         * @param {?} pageSizeOptions
         * @return {?}
         */
        set: function (pageSizeOptions) {
            this._pageSizeOptions = pageSizeOptions;
            this.updateDisplayedPageSizeOptions();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NovoDataTablePagination.prototype.ngOnChanges = function (changes) {
        if (changes['totalLength'] || changes['currentLength'] || changes['userFiltered']) {
            if (this.userFiltered) {
                this.length = this.currentLength;
            }
            else {
                this.length = this.totalLength;
            }
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
            this.totalPages = this.calculateTotalPages();
            this.pages = this.getPages(this.page, this.totalPages);
            this.changeDetectorRef.markForCheck();
        }
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.ngOnInit = function () {
        this._initialized = true;
        this.updateDisplayedPageSizeOptions();
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.ngOnDestroy = function () {
        this.resetSubscription.unsubscribe();
    };
    /**
     * @param {?} page
     * @return {?}
     */
    NovoDataTablePagination.prototype.selectPage = function (page) {
        this.page = page;
        this.emitPageEvent();
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.nextPage = function () {
        if (!this.hasNextPage()) {
            return;
        }
        this.page++;
        this.pages = this.getPages(this.page, this.totalPages);
        this.emitPageEvent();
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.previousPage = function () {
        if (!this.hasPreviousPage()) {
            return;
        }
        this.page--;
        this.pages = this.getPages(this.page, this.totalPages);
        this.emitPageEvent();
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.hasPreviousPage = function () {
        return this.page >= 1 && this.pageSize !== 0;
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.hasNextPage = function () {
        var /** @type {?} */ numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
        return this.page < numberOfPages && this.pageSize !== 0;
    };
    /**
     * @param {?} pageSize
     * @return {?}
     */
    NovoDataTablePagination.prototype.changePageSize = function (pageSize) {
        this.page = 0;
        this.pageSize = pageSize;
        this.emitPageEvent();
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.updateDisplayedPageSizeOptions = function () {
        var _this = this;
        if (!this._initialized) {
            return;
        }
        if (!this.displayedPageSizeOptions) {
            this.displayedPageSizeOptions = [];
            this.pageSizeOptions.forEach(function (option) {
                if (option.hasOwnProperty('value')) {
                    _this.displayedPageSizeOptions.push(option);
                }
                else {
                    _this.displayedPageSizeOptions.push({
                        value: option,
                        label: option,
                    });
                }
            });
        }
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.changeDetectorRef.detectChanges();
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.emitPageEvent = function () {
        var /** @type {?} */ event = {
            page: this.page,
            pageSize: this.pageSize,
            length: this.length,
            filter: this.state.filter,
            sort: this.state.sort,
        };
        this.pageChange.next(event);
        this.state.page = this.page;
        this.state.pageSize = this.pageSize;
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.state.updates.next(event);
        this.state.onPaginationChange();
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.calculateTotalPages = function () {
        var /** @type {?} */ totalPages = this.pageSize < 1 ? 1 : Math.ceil(this.length / this.pageSize);
        return Math.max(totalPages || 0, 1);
    };
    /**
     * @param {?} number
     * @param {?} text
     * @param {?} isActive
     * @return {?}
     */
    NovoDataTablePagination.prototype.makePage = function (number, text, isActive) {
        return {
            number: number,
            text: text,
            active: isActive,
        };
    };
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    NovoDataTablePagination.prototype.getPages = function (currentPage, totalPages) {
        var /** @type {?} */ pages = [];
        // Default page limits
        var /** @type {?} */ startPage = 1;
        var /** @type {?} */ endPage = totalPages;
        var /** @type {?} */ isMaxSized = MAX_PAGES_DISPLAYED < totalPages;
        // Recompute if maxPagesDisplayed
        if (isMaxSized) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(MAX_PAGES_DISPLAYED / 2), 1);
            endPage = startPage + MAX_PAGES_DISPLAYED - 1;
            // Adjust if limit is exceeded
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = endPage - MAX_PAGES_DISPLAYED + 1;
            }
        }
        // Add page number links
        for (var /** @type {?} */ number = startPage; number <= endPage; number++) {
            var /** @type {?} */ page = this.makePage(number, number.toString(), number === currentPage);
            pages.push(page);
        }
        return pages;
    };
    return NovoDataTablePagination;
}());
NovoDataTablePagination.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-data-table-pagination',
                template: "\n      <ng-container *ngIf=\"theme === 'basic'\">\n        <div class=\"novo-data-table-pagination-size\">\n            <novo-tiles *ngIf=\"displayedPageSizeOptions.length > 1\"\n                        [(ngModel)]=\"pageSize\"\n                        [options]=\"displayedPageSizeOptions\"\n                        (onChange)=\"changePageSize($event)\"\n                        data-automation-id=\"novo-data-table-pagination-tiles\">\n            </novo-tiles>\n            <div *ngIf=\"displayedPageSizeOptions.length <= 1\">{{ pageSize }}</div>\n        </div>\n\n        <div class=\"novo-data-table-range-label-long\" data-automation-id=\"novo-data-table-pagination-range-label-long\">\n            {{ longRangeLabel }}\n        </div>\n        <div class=\"novo-data-table-range-label-short\" data-automation-id=\"novo-data-table-pagination-range-label-short\">\n            {{ shortRangeLabel }}\n        </div>\n\n        <button theme=\"dialogue\" type=\"button\"\n                class=\"novo-data-table-pagination-navigation-previous\"\n                (click)=\"previousPage()\"\n                icon=\"previous\"\n                side=\"left\"\n                [disabled]=\"!hasPreviousPage()\"\n                data-automation-id=\"novo-data-table-pagination-previous\">\n            <span>{{ labels.previous }}</span>\n        </button>\n        <button theme=\"dialogue\" type=\"button\"\n                class=\"novo-data-table-pagination-navigation-next\"\n                (click)=\"nextPage()\"\n                icon=\"next\"\n                side=\"right\"\n                [disabled]=\"!hasNextPage()\"\n                data-automation-id=\"novo-data-table-pagination-next\">\n            <span>{{ labels.next }}</span>\n        </button>\n      </ng-container>\n      <ng-container *ngIf=\"theme === 'standard'\">\n        <h5 class=\"rows\">{{ labels.itemsPerPage }}</h5>\n        <novo-select [options]=\"displayedPageSizeOptions\" [placeholder]=\"labels.select\" [(ngModel)]=\"pageSize\" (onSelect)=\"changePageSize($event.selected)\" data-automation-id=\"pager-select\"></novo-select>\n        <span class=\"spacer\"></span>\n        <ul class=\"pager\" data-automation-id=\"pager\">\n            <li class=\"page\" (click)=\"selectPage(page - 1)\" [ngClass]=\"{ 'disabled': page === 0 }\"><i class=\"bhi-previous\" data-automation-id=\"pager-previous\"></i></li>\n            <li class=\"page\" [ngClass]=\"{active: p.number === page + 1}\" *ngFor=\"let p of pages\" (click)=\"selectPage(p.number - 1)\">{{ p.text }}</li>\n            <li class=\"page\" (click)=\"selectPage(page + 1)\" [ngClass]=\"{ 'disabled': page + 1 === totalPages }\"><i class=\"bhi-next\" data-automation-id=\"pager-next\"></i></li>\n        </ul>\n      </ng-container>\n  ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoDataTablePagination.ctorParameters = function () { return [
    { type: core.ChangeDetectorRef, },
    { type: NovoLabelService, },
    { type: DataTableState, },
]; };
NovoDataTablePagination.propDecorators = {
    'theme': [{ type: core.HostBinding, args: ['class',] }, { type: core.Input },],
    'page': [{ type: core.Input },],
    'pageSize': [{ type: core.Input },],
    'pageSizeOptions': [{ type: core.Input },],
    'totalLength': [{ type: core.Input },],
    'currentLength': [{ type: core.Input },],
    'userFiltered': [{ type: core.Input },],
    'pageChange': [{ type: core.Output },],
};
/**
 * @template T
 * @param {?} value
 * @param {?} col
 * @return {?}
 */
function interpolateCell(value, col) {
    if (col.property) {
        var /** @type {?} */ keys = col.property.split('.');
        var /** @type {?} */ currValue = value[keys.shift()];
        while (keys.length && value !== undefined) {
            var /** @type {?} */ k = keys.shift();
            value = k ? value[k] : value + ".";
        }
        return currValue !== undefined ? currValue : col.property;
    }
    return value;
}
var DataTableInterpolatePipe = /** @class */ (function () {
    function DataTableInterpolatePipe() {
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    DataTableInterpolatePipe.prototype.transform = function (value, column) {
        return interpolateCell(value, column);
    };
    return DataTableInterpolatePipe;
}());
DataTableInterpolatePipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'dataTableInterpolate',
                pure: true,
            },] },
];
/**
 * @nocollapse
 */
DataTableInterpolatePipe.ctorParameters = function () { return []; };
var DateTableDateRendererPipe = /** @class */ (function () {
    /**
     * @param {?} labels
     */
    function DateTableDateRendererPipe(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    DateTableDateRendererPipe.prototype.transform = function (value, column) {
        var /** @type {?} */ val = interpolateCell(value, column);
        return this.labels.formatDate(val);
    };
    return DateTableDateRendererPipe;
}());
DateTableDateRendererPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'dataTableDateRenderer',
                pure: true,
            },] },
];
/**
 * @nocollapse
 */
DateTableDateRendererPipe.ctorParameters = function () { return [
    { type: NovoLabelService, },
]; };
var DateTableDateTimeRendererPipe = /** @class */ (function () {
    /**
     * @param {?} labels
     */
    function DateTableDateTimeRendererPipe(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    DateTableDateTimeRendererPipe.prototype.transform = function (value, column) {
        var /** @type {?} */ val = interpolateCell(value, column);
        return this.labels.formatDateShort(val);
    };
    return DateTableDateTimeRendererPipe;
}());
DateTableDateTimeRendererPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'dataTableDateTimeRenderer',
                pure: true,
            },] },
];
/**
 * @nocollapse
 */
DateTableDateTimeRendererPipe.ctorParameters = function () { return [
    { type: NovoLabelService, },
]; };
var DateTableTimeRendererPipe = /** @class */ (function () {
    /**
     * @param {?} labels
     */
    function DateTableTimeRendererPipe(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    DateTableTimeRendererPipe.prototype.transform = function (value, column) {
        var /** @type {?} */ val = interpolateCell(value, column);
        return this.labels.formatTime(val);
    };
    return DateTableTimeRendererPipe;
}());
DateTableTimeRendererPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'dataTableTimeRenderer',
                pure: true,
            },] },
];
/**
 * @nocollapse
 */
DateTableTimeRendererPipe.ctorParameters = function () { return [
    { type: NovoLabelService, },
]; };
var DateTableNumberRendererPipe = /** @class */ (function () {
    /**
     * @param {?} labels
     */
    function DateTableNumberRendererPipe(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    DateTableNumberRendererPipe.prototype.transform = function (value, column) {
        var /** @type {?} */ val = interpolateCell(value, column);
        return this.labels.formatNumber(val);
    };
    return DateTableNumberRendererPipe;
}());
DateTableNumberRendererPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'dataTableNumberRenderer',
                pure: true,
            },] },
];
/**
 * @nocollapse
 */
DateTableNumberRendererPipe.ctorParameters = function () { return [
    { type: NovoLabelService, },
]; };
var DateTableCurrencyRendererPipe = /** @class */ (function () {
    /**
     * @param {?} labels
     */
    function DateTableCurrencyRendererPipe(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    DateTableCurrencyRendererPipe.prototype.transform = function (value, column) {
        var /** @type {?} */ val = interpolateCell(value, column);
        return this.labels.formatCurrency(Number(val));
    };
    return DateTableCurrencyRendererPipe;
}());
DateTableCurrencyRendererPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'dataTableCurrencyRenderer',
                pure: true,
            },] },
];
/**
 * @nocollapse
 */
DateTableCurrencyRendererPipe.ctorParameters = function () { return [
    { type: NovoLabelService, },
]; };
var NovoDataTableHeaderCellDef = /** @class */ (function (_super) {
    __extends(NovoDataTableHeaderCellDef, _super);
    function NovoDataTableHeaderCellDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NovoDataTableHeaderCellDef;
}(table.CdkHeaderCellDef));
NovoDataTableHeaderCellDef.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoDataTableHeaderCellDef]',
                providers: [{ provide: table.CdkHeaderCellDef, useExisting: NovoDataTableHeaderCellDef }],
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableHeaderCellDef.ctorParameters = function () { return []; };
var NovoDataTableColumnDef = /** @class */ (function (_super) {
    __extends(NovoDataTableColumnDef, _super);
    function NovoDataTableColumnDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NovoDataTableColumnDef;
}(table.CdkColumnDef));
NovoDataTableColumnDef.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoDataTableColumnDef]',
                providers: [{ provide: table.CdkColumnDef, useExisting: NovoDataTableColumnDef }],
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableColumnDef.ctorParameters = function () { return []; };
NovoDataTableColumnDef.propDecorators = {
    'name': [{ type: core.Input, args: ['novoDataTableColumnDef',] },],
};
var NovoDataTableCellDef = /** @class */ (function (_super) {
    __extends(NovoDataTableCellDef, _super);
    function NovoDataTableCellDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NovoDataTableCellDef;
}(table.CdkCellDef));
NovoDataTableCellDef.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoDataTableCellDef]',
                providers: [{ provide: table.CdkCellDef, useExisting: NovoDataTableCellDef }],
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableCellDef.ctorParameters = function () { return []; };
var NovoDataTableHeaderRowDef = /** @class */ (function (_super) {
    __extends(NovoDataTableHeaderRowDef, _super);
    function NovoDataTableHeaderRowDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NovoDataTableHeaderRowDef;
}(table.CdkHeaderRowDef));
NovoDataTableHeaderRowDef.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoDataTableHeaderRowDef]',
                providers: [{ provide: table.CdkHeaderRowDef, useExisting: NovoDataTableHeaderRowDef }],
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableHeaderRowDef.ctorParameters = function () { return []; };
NovoDataTableHeaderRowDef.propDecorators = {
    'columns': [{ type: core.Input, args: ['novoDataTableHeaderRowDef',] },],
};
var NovoDataTableRowDef = /** @class */ (function (_super) {
    __extends(NovoDataTableRowDef, _super);
    function NovoDataTableRowDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NovoDataTableRowDef;
}(table.CdkRowDef));
NovoDataTableRowDef.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoDataTableRowDef]',
                providers: [{ provide: table.CdkRowDef, useExisting: NovoDataTableRowDef }],
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableRowDef.ctorParameters = function () { return []; };
NovoDataTableRowDef.propDecorators = {
    'columns': [{ type: core.Input, args: ['novoDataTableRowDefColumns',] },],
};
var NovoDataTableModule = /** @class */ (function () {
    function NovoDataTableModule() {
    }
    return NovoDataTableModule;
}());
NovoDataTableModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    NovoDatePickerModule,
                    table.CdkTableModule,
                    common.CommonModule,
                    forms.FormsModule,
                    NovoButtonModule,
                    NovoDropdownModule,
                    NovoFormExtrasModule,
                    NovoLoadingModule,
                    NovoTilesModule,
                    NovoSearchBoxModule,
                    NovoCommonModule,
                    NovoSelectModule,
                ],
                declarations: [
                    DataTableInterpolatePipe,
                    DateTableDateRendererPipe,
                    DateTableCurrencyRendererPipe,
                    DateTableDateTimeRendererPipe,
                    DateTableNumberRendererPipe,
                    DateTableTimeRendererPipe,
                    NovoDataTableHeaderCellDef,
                    NovoDataTableColumnDef,
                    NovoDataTableCellDef,
                    NovoDataTableHeaderRowDef,
                    NovoDataTableRowDef,
                    NovoDataTableCellHeader,
                    NovoDataTableSortFilter,
                    NovoDataTableHeaderCell,
                    NovoDataTableCell,
                    NovoDataTableHeaderRow,
                    NovoDataTableRow,
                    NovoDataTablePagination,
                    NovoDataTableCheckboxCell,
                    NovoDataTableCheckboxHeaderCell,
                    NovoDataTable,
                ],
                providers: [DataTableState],
                exports: [
                    NovoDataTable,
                    DataTableInterpolatePipe,
                    DateTableDateRendererPipe,
                    DateTableCurrencyRendererPipe,
                    DateTableDateTimeRendererPipe,
                    DateTableNumberRendererPipe,
                    DateTableTimeRendererPipe,
                ],
            },] },
];
/**
 * @nocollapse
 */
NovoDataTableModule.ctorParameters = function () { return []; };
/**
 * @abstract
 */
var RemoteDataTableService = /** @class */ (function () {
    function RemoteDataTableService() {
    }
    /**
     * @abstract
     * @param {?} sort
     * @param {?} filter
     * @param {?} page
     * @param {?} pageSize
     * @param {?=} globalSearch
     * @param {?=} outsideFilter
     * @return {?}
     */
    RemoteDataTableService.prototype.getTableResults = function (sort, filter$$1, page, pageSize, globalSearch, outsideFilter) { };
    return RemoteDataTableService;
}());
/**
 * @abstract
 */
var RemoteActivityTableService = /** @class */ (function () {
    function RemoteActivityTableService() {
    }
    /**
     * @abstract
     * @param {?} sort
     * @param {?} filter
     * @param {?} page
     * @param {?} pageSize
     * @param {?=} globalSearch
     * @param {?=} outsideFilter
     * @return {?}
     */
    RemoteActivityTableService.prototype.getTableResults = function (sort, filter$$1, page, pageSize, globalSearch, outsideFilter) { };
    return RemoteActivityTableService;
}());
var StaticActivityTableService = /** @class */ (function () {
    /**
     * @param {?=} data
     */
    function StaticActivityTableService(data) {
        if (data === void 0) { data = []; }
        this.data = data;
    }
    /**
     * @param {?} sort
     * @param {?} filter
     * @param {?=} page
     * @param {?=} pageSize
     * @param {?=} globalSearch
     * @param {?=} outsideFilter
     * @return {?}
     */
    StaticActivityTableService.prototype.getTableResults = function (sort, filter$$1, page, pageSize, globalSearch, outsideFilter) {
        if (page === void 0) { page = 0; }
        var /** @type {?} */ ret = Helpers.deepClone(this.data);
        if (ret.length !== 0) {
            if (globalSearch) {
                ret = ret.filter(function (item) { return Object.keys(item).some(function (key) { return ("" + item[key]).toLowerCase().includes(globalSearch.toLowerCase()); }); });
            }
            if (filter$$1) {
                var /** @type {?} */ value = Helpers.isString(filter$$1.value) ? filter$$1.value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') : filter$$1.value;
                ret = ret.filter(Helpers.filterByField(filter$$1.id, value));
            }
            if (sort) {
                ret = ret.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
            }
            if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                ret = ret.slice(page * pageSize, (page + 1) * pageSize);
            }
        }
        return Observable.Observable.of({ results: ret, total: this.data.length });
    };
    return StaticActivityTableService;
}());
var ActivityTableDataSource = /** @class */ (function (_super) {
    __extends(ActivityTableDataSource, _super);
    /**
     * @param {?} tableService
     * @param {?} state
     * @param {?} ref
     */
    function ActivityTableDataSource(tableService, state$$1, ref) {
        var _this = _super.call(this) || this;
        _this.tableService = tableService;
        _this.state = state$$1;
        _this.ref = ref;
        _this.total = 0;
        _this.current = 0;
        _this.loading = false;
        _this.pristine = true;
        return _this;
    }
    Object.defineProperty(ActivityTableDataSource.prototype, "totallyEmpty", {
        /**
         * @return {?}
         */
        get: function () {
            return this.total === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityTableDataSource.prototype, "currentlyEmpty", {
        /**
         * @return {?}
         */
        get: function () {
            return this.current === 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ActivityTableDataSource.prototype.connect = function () {
        var _this = this;
        var /** @type {?} */ displayDataChanges = [
            this.state.updates
        ];
        return Observable.Observable.merge.apply(Observable.Observable, displayDataChanges).startWith(null)
            .switchMap(function () {
            _this.pristine = false;
            _this.loading = true;
            return _this.tableService.getTableResults(_this.state.sort, _this.state.filter, _this.state.page, _this.state.pageSize, _this.state.globalSearch, _this.state.outsideFilter);
        })
            .map(function (data) {
            _this.loading = false;
            _this.total = data.total;
            _this.current = data.results.length;
            setTimeout(function () {
                _this.ref.markForCheck();
            });
            return data.results;
        })
            .catch(function (error) {
            console.error(error); // tslint: disable-line
            _this.loading = false;
            return Observable.Observable.of(null);
        });
    };
    /**
     * @return {?}
     */
    ActivityTableDataSource.prototype.disconnect = function () { };
    return ActivityTableDataSource;
}(table.DataSource));
var NovoActivityTableState = /** @class */ (function () {
    function NovoActivityTableState() {
        this.id = Math.random();
        this.sort = undefined;
        this.filter = undefined;
        this.page = 0;
        this.pageSize = undefined;
        this.globalSearch = undefined;
        this.selectedRows = new Map();
        this.updates = new core.EventEmitter();
        this.onReset = new core.EventEmitter();
    }
    Object.defineProperty(NovoActivityTableState.prototype, "userFiltered", {
        /**
         * @return {?}
         */
        get: function () {
            return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} fireUpdate
     * @param {?=} persistUserFilters
     * @return {?}
     */
    NovoActivityTableState.prototype.reset = function (fireUpdate, persistUserFilters) {
        if (fireUpdate === void 0) { fireUpdate = true; }
        if (!persistUserFilters) {
            this.sort = undefined;
            this.globalSearch = undefined;
            this.filter = undefined;
        }
        this.page = 0;
        this.selectedRows.clear();
        this.onReset.emit(true);
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch
            });
        }
    };
    return NovoActivityTableState;
}());
/**
 * Workaround for https://github.com/angular/angular/issues/17849
 */
var _NovoTable = table.CdkTable;
var NovoTable = /** @class */ (function (_super) {
    __extends(NovoTable, _super);
    function NovoTable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NovoTable;
}(_NovoTable));
NovoTable.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-simple-table',
                template: table.CDK_TABLE_TEMPLATE,
                encapsulation: core.ViewEncapsulation.None,
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoTable.ctorParameters = function () { return []; };
var NovoActivityTableActions = /** @class */ (function () {
    function NovoActivityTableActions() {
    }
    return NovoActivityTableActions;
}());
NovoActivityTableActions.decorators = [
    { type: core.Directive, args: [{
                selector: 'novo-activity-table-actions'
            },] },
];
/**
 * @nocollapse
 */
NovoActivityTableActions.ctorParameters = function () { return []; };
var NovoActivityTableCustomHeader = /** @class */ (function () {
    function NovoActivityTableCustomHeader() {
    }
    return NovoActivityTableCustomHeader;
}());
NovoActivityTableCustomHeader.decorators = [
    { type: core.Directive, args: [{
                selector: 'novo-activity-table-custom-header'
            },] },
];
/**
 * @nocollapse
 */
NovoActivityTableCustomHeader.ctorParameters = function () { return []; };
var NovoActivityTableCustomFilter = /** @class */ (function () {
    function NovoActivityTableCustomFilter() {
    }
    return NovoActivityTableCustomFilter;
}());
NovoActivityTableCustomFilter.decorators = [
    { type: core.Directive, args: [{
                selector: 'novo-activity-table-custom-filter'
            },] },
];
/**
 * @nocollapse
 */
NovoActivityTableCustomFilter.ctorParameters = function () { return []; };
var NovoActivityTableEmptyMessage = /** @class */ (function () {
    function NovoActivityTableEmptyMessage() {
    }
    return NovoActivityTableEmptyMessage;
}());
NovoActivityTableEmptyMessage.decorators = [
    { type: core.Directive, args: [{
                selector: 'novo-activity-table-empty-message'
            },] },
];
/**
 * @nocollapse
 */
NovoActivityTableEmptyMessage.ctorParameters = function () { return []; };
var NovoActivityTableNoResultsMessage = /** @class */ (function () {
    function NovoActivityTableNoResultsMessage() {
    }
    return NovoActivityTableNoResultsMessage;
}());
NovoActivityTableNoResultsMessage.decorators = [
    { type: core.Directive, args: [{
                selector: 'novo-activity-table-no-results-message'
            },] },
];
/**
 * @nocollapse
 */
NovoActivityTableNoResultsMessage.ctorParameters = function () { return []; };
var NovoActivityTable = /** @class */ (function () {
    /**
     * @param {?} labels
     * @param {?} ref
     * @param {?} state
     */
    function NovoActivityTable(labels, ref, state$$1) {
        this.labels = labels;
        this.ref = ref;
        this.state = state$$1;
        this.globalSearchHiddenClassToggle = false;
        this.loading = true;
    }
    Object.defineProperty(NovoActivityTable.prototype, "customFilter", {
        /**
         * @return {?}
         */
        get: function () {
            return this._customFilter;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._customFilter = coercion.coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "forceShowHeader", {
        /**
         * @return {?}
         */
        get: function () {
            return this._forceShowHeader;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._forceShowHeader = coercion.coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "hideGlobalSearch", {
        /**
         * @return {?}
         */
        get: function () {
            return this._hideGlobalSearch;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._hideGlobalSearch = coercion.coerceBooleanProperty(v);
            this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "debug", {
        /**
         * @return {?}
         */
        get: function () {
            return this._debug;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._debug = coercion.coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "empty", {
        /**
         * @return {?}
         */
        get: function () {
            return this.dataSource && this.dataSource.totallyEmpty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "loadingClass", {
        /**
         * @return {?}
         */
        get: function () {
            return this.loading || (this.dataSource && this.dataSource.loading);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NovoActivityTable.prototype.ngOnChanges = function (changes) {
        var _this = this;
        this.loading = changes['activityService'] && !changes['activityService'].currentValue;
        this.ref.detectChanges();
        if (changes['activityService'] && changes['activityService'].currentValue) {
            this.loading = false;
            this.dataSource = new ActivityTableDataSource(this.activityService, this.state, this.ref);
            this.ref.detectChanges();
        }
        if (changes['outsideFilter'] && changes['outsideFilter'].currentValue) {
            if (!this.outsideFilterSubscription) {
                this.outsideFilterSubscription = this.outsideFilter.subscribe(function (filter$$1) {
                    _this.state.outsideFilter = filter$$1;
                    _this.state.updates.next({ globalSearch: _this.state.globalSearch, filter: _this.state.filter, sort: _this.state.sort });
                    _this.ref.markForCheck();
                });
            }
        }
    };
    /**
     * @return {?}
     */
    NovoActivityTable.prototype.ngOnDestroy = function () {
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    NovoActivityTable.prototype.ngAfterContentInit = function () {
        if (this.paginationOptions && !this.paginationOptions.page) {
            this.paginationOptions.page = 0;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSize) {
            this.paginationOptions.pageSize = 50;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
            this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
        }
        this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
        this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
        this.ref.markForCheck();
    };
    /**
     * @param {?} term
     * @return {?}
     */
    NovoActivityTable.prototype.onSearchChange = function (term) {
        this.state.globalSearch = term;
        this.state.reset(false, true);
        this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort });
    };
    return NovoActivityTable;
}());
NovoActivityTable.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-activity-table',
                template: "\n        <div *ngIf=\"debug\">\n            <p>Total: {{ dataSource?.total }}</p>\n            <p>Current: {{ dataSource?.current }}</p>\n            <p>Totally Empty: {{ dataSource?.totallyEmpty }}</p>\n            <p>Currently Empty: {{ dataSource?.currentlyEmpty }}</p>\n            <p>Loading (DataSource): {{ dataSource?.loading }}</p>\n            <p>User Filtered: {{ state.userFiltered }}</p>\n            <p>Loading (Table): {{ loading }}</p>\n        </div>\n        <header *ngIf=\"(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader\">\n            <ng-content select=\"[novo-activity-table-custom-header]\"></ng-content>\n            <novo-search\n                alwaysOpen=\"true\"\n                (searchChanged)=\"onSearchChange($event)\"\n                [(ngModel)]=\"state.globalSearch\"\n                *ngIf=\"!hideGlobalSearch\"\n                [placeholder]=\"searchOptions?.placeholder\"\n                [hint]=\"searchOptions?.tooltip\">\n            </novo-search>\n            <novo-simple-table-pagination\n                *ngIf=\"paginationOptions\"\n                [length]=\"dataSource?.total\"\n                [page]=\"paginationOptions.page\"\n                [pageSize]=\"paginationOptions.pageSize\"\n                [pageSizeOptions]=\"paginationOptions.pageSizeOptions\">\n            </novo-simple-table-pagination>\n            <div class=\"novo-activity-table-actions\">\n                <ng-content select=\"[novo-activity-table-actions]\"></ng-content>\n            </div>\n        </header>\n        <div class=\"novo-activity-table-loading-mask\" *ngIf=\"dataSource?.loading || loading\" data-automation-id=\"novo-activity-table-loading\">\n            <novo-loading></novo-loading>\n        </div>\n        <div class=\"novo-activity-table-filter-container\">\n            <div class=\"novo-activity-table-custom-filter\" *ngIf=\"customFilter\">\n                <ng-content select=\"[novo-activity-table-custom-filter]\"></ng-content>\n            </div>\n            <div class=\"novo-activity-table-container\">\n                <novo-simple-table *ngIf=\"(columns?.length > 0)\" [dataSource]=\"dataSource\" novoSortFilter novoSelection [class.empty]=\"dataSource?.currentlyEmpty && state.userFiltered\" [hidden]=\"dataSource?.totallyEmpty && !userFiltered\">\n                    <ng-content></ng-content>\n                    <ng-container novoSimpleColumnDef=\"selection\">\n                        <novo-simple-checkbox-header-cell *novoSimpleHeaderCellDef></novo-simple-checkbox-header-cell>\n                        <novo-simple-checkbox-cell *novoSimpleCellDef=\"let row; let i = index\" [row]=\"row\" [index]=\"i\"></novo-simple-checkbox-cell>\n                    </ng-container>\n                    <ng-container *ngFor=\"let column of actionColumns\" [novoSimpleColumnDef]=\"column.id\">\n                        <novo-simple-empty-header-cell [class.button-header-cell]=\"!column.options\" [class.dropdown-header-cell]=\"column.options\" *novoSimpleHeaderCellDef></novo-simple-empty-header-cell>\n                        <novo-simple-action-cell *novoSimpleCellDef=\"let row; let i = index\" [row]=\"row\" [column]=\"column\"></novo-simple-action-cell>\n                    </ng-container>\n                    <ng-container *ngFor=\"let column of columns\" [novoSimpleColumnDef]=\"column.id\">\n                        <novo-simple-header-cell *novoSimpleHeaderCellDef [column]=\"column\" [novo-simple-cell-config]=\"column.config\" [defaultSort]=\"defaultSort\">{{ column.label }}</novo-simple-header-cell>\n                        <novo-simple-cell *novoSimpleCellDef=\"let row\" [column]=\"column\" [row]=\"row\"></novo-simple-cell>\n                    </ng-container>\n                    <novo-simple-header-row *novoSimpleHeaderRowDef=\"displayedColumns\"></novo-simple-header-row>\n                    <novo-simple-row *novoSimpleRowDef=\"let row; columns: displayedColumns;\"></novo-simple-row>\n                </novo-simple-table>\n                <div class=\"novo-activity-table-no-results-container\" *ngIf=\"dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine\">\n                    <div #filtered><ng-content select=\"[novo-activity-table-no-results-message]\"></ng-content></div>\n                    <div class=\"novo-activity-table-empty-message\" *ngIf=\"filtered.childNodes.length == 0\">\n                        <h4><i class=\"bhi-search-question\"></i> {{ labels.noMatchingRecordsMessage }}</h4>\n                    </div>\n                </div>\n                <div class=\"novo-activity-table-empty-container\" *ngIf=\"dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine\">\n                    <div #empty><ng-content select=\"[novo-activity-table-empty-message]\"></ng-content></div>\n                    <div class=\"novo-activity-table-empty-message\" *ngIf=\"empty.childNodes.length == 0\">\n                        <h4><i class=\"bhi-search-question\"></i> {{ labels.emptyTableMessage }}</h4>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [NovoActivityTableState]
            },] },
];
/**
 * @nocollapse
 */
NovoActivityTable.ctorParameters = function () { return [
    { type: NovoLabelService, },
    { type: core.ChangeDetectorRef, },
    { type: NovoActivityTableState, },
]; };
NovoActivityTable.propDecorators = {
    'globalSearchHiddenClassToggle': [{ type: core.HostBinding, args: ['class.global-search-hidden',] },],
    'activityService': [{ type: core.Input },],
    'columns': [{ type: core.Input },],
    'displayedColumns': [{ type: core.Input },],
    'actionColumns': [{ type: core.Input },],
    'paginationOptions': [{ type: core.Input },],
    'searchOptions': [{ type: core.Input },],
    'defaultSort': [{ type: core.Input },],
    'outsideFilter': [{ type: core.Input },],
    'customFilter': [{ type: core.Input },],
    'forceShowHeader': [{ type: core.Input },],
    'hideGlobalSearch': [{ type: core.Input },],
    'debug': [{ type: core.Input },],
    'empty': [{ type: core.HostBinding, args: ['class.empty',] },],
    'loadingClass': [{ type: core.HostBinding, args: ['class.loading',] },],
};
var NovoSortFilter = /** @class */ (function () {
    /**
     * @param {?} state
     */
    function NovoSortFilter(state$$1) {
        this.state = state$$1;
    }
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    NovoSortFilter.prototype.filter = function (id, value, transform) {
        var /** @type {?} */ filter$$1;
        if (!Helpers.isBlank(value)) {
            filter$$1 = { id: id, value: value, transform: transform };
        }
        else {
            filter$$1 = undefined;
        }
        this.state.filter = filter$$1;
        this.state.reset(false, true);
        this.state.updates.next({ filter: filter$$1, sort: this.state.sort });
    };
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    NovoSortFilter.prototype.sort = function (id, value, transform) {
        var /** @type {?} */ sort = { id: id, value: value, transform: transform };
        this.state.sort = sort;
        this.state.reset(false, true);
        this.state.updates.next({ sort: sort, filter: this.state.filter });
    };
    return NovoSortFilter;
}());
NovoSortFilter.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoSortFilter]',
            },] },
];
/**
 * @nocollapse
 */
NovoSortFilter.ctorParameters = function () { return [
    { type: NovoActivityTableState, },
]; };
var NovoSelection = /** @class */ (function () {
    /**
     * @param {?} state
     */
    function NovoSelection(state$$1) {
        this.state = state$$1;
        this.novoSelectAllToggle = new core.EventEmitter();
        this.allRows = new Map();
    }
    /**
     * @param {?} id
     * @param {?} row
     * @return {?}
     */
    NovoSelection.prototype.register = function (id, row) {
        this.allRows.set(id, row);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    NovoSelection.prototype.deregister = function (id) {
        var _this = this;
        this.allRows.delete(id);
        this.state.selectedRows.delete(id);
        clearTimeout(this.throttleTimeout);
        this.throttleTimeout = setTimeout(function () {
            if (_this.state.selectedRows.size === 0) {
                _this.novoSelectAllToggle.emit(false);
            }
        });
    };
    /**
     * @return {?}
     */
    NovoSelection.prototype.ngOnDestroy = function () {
        this.allRows.clear();
        this.state.selectedRows.clear();
    };
    /**
     * @param {?} id
     * @param {?} selected
     * @param {?} row
     * @return {?}
     */
    NovoSelection.prototype.toggle = function (id, selected, row) {
        if (selected) {
            this.state.selectedRows.set(id, row);
        }
        else {
            this.state.selectedRows.delete(id);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoSelection.prototype.selectAll = function (value) {
        if (value) {
            this.state.selectedRows = new Map(this.allRows);
        }
        else {
            this.state.selectedRows.clear();
        }
        this.novoSelectAllToggle.emit(value);
    };
    return NovoSelection;
}());
NovoSelection.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoSelection]',
            },] },
];
/**
 * @nocollapse
 */
NovoSelection.ctorParameters = function () { return [
    { type: NovoActivityTableState, },
]; };
NovoSelection.propDecorators = {
    'novoSelectAllToggle': [{ type: core.Output },],
};
/**
 * Workaround for https://github.com/angular/angular/issues/17849
 */
var _NovoCellDef = table.CdkCellDef;
var _NovoHeaderCellDef = table.CdkHeaderCellDef;
var _NovoColumnDef = table.CdkColumnDef;
var _NovoHeaderCell = table.CdkHeaderCell;
var _NovoCell = table.CdkCell;
var NovoSimpleCellDef = /** @class */ (function (_super) {
    __extends(NovoSimpleCellDef, _super);
    function NovoSimpleCellDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NovoSimpleCellDef;
}(_NovoCellDef));
NovoSimpleCellDef.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoSimpleCellDef]',
                providers: [{ provide: table.CdkCellDef, useExisting: NovoSimpleCellDef }],
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleCellDef.ctorParameters = function () { return []; };
var NovoSimpleHeaderCellDef = /** @class */ (function (_super) {
    __extends(NovoSimpleHeaderCellDef, _super);
    function NovoSimpleHeaderCellDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NovoSimpleHeaderCellDef;
}(_NovoHeaderCellDef));
NovoSimpleHeaderCellDef.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoSimpleHeaderCellDef]',
                providers: [{ provide: table.CdkHeaderCellDef, useExisting: NovoSimpleHeaderCellDef }],
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleHeaderCellDef.ctorParameters = function () { return []; };
var NovoSimpleColumnDef = /** @class */ (function (_super) {
    __extends(NovoSimpleColumnDef, _super);
    function NovoSimpleColumnDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NovoSimpleColumnDef;
}(_NovoColumnDef));
NovoSimpleColumnDef.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoSimpleColumnDef]',
                providers: [{ provide: table.CdkColumnDef, useExisting: NovoSimpleColumnDef }],
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleColumnDef.ctorParameters = function () { return []; };
NovoSimpleColumnDef.propDecorators = {
    'name': [{ type: core.Input, args: ['novoSimpleColumnDef',] },],
};
var NovoSimpleHeaderCell = /** @class */ (function (_super) {
    __extends(NovoSimpleHeaderCell, _super);
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     */
    function NovoSimpleHeaderCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-header-cell');
        return _this;
    }
    /**
     * @return {?}
     */
    NovoSimpleHeaderCell.prototype.ngOnInit = function () {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
        }
    };
    return NovoSimpleHeaderCell;
}(_NovoHeaderCell));
NovoSimpleHeaderCell.decorators = [
    { type: core.Directive, args: [{
                selector: 'novo-simple-header-cell',
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleHeaderCell.ctorParameters = function () { return [
    { type: table.CdkColumnDef, },
    { type: core.ElementRef, },
    { type: core.Renderer2, },
]; };
NovoSimpleHeaderCell.propDecorators = {
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
    'column': [{ type: core.Input },],
};
var NovoSimpleEmptyHeaderCell = /** @class */ (function (_super) {
    __extends(NovoSimpleEmptyHeaderCell, _super);
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     */
    function NovoSimpleEmptyHeaderCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-empty-header-cell');
        return _this;
    }
    return NovoSimpleEmptyHeaderCell;
}(_NovoHeaderCell));
NovoSimpleEmptyHeaderCell.decorators = [
    { type: core.Directive, args: [{
                selector: 'novo-simple-empty-header-cell',
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleEmptyHeaderCell.ctorParameters = function () { return [
    { type: table.CdkColumnDef, },
    { type: core.ElementRef, },
    { type: core.Renderer2, },
]; };
NovoSimpleEmptyHeaderCell.propDecorators = {
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
};
var NovoSimpleCheckboxHeaderCell = /** @class */ (function (_super) {
    __extends(NovoSimpleCheckboxHeaderCell, _super);
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} ref
     * @param {?} _selection
     */
    function NovoSimpleCheckboxHeaderCell(columnDef, elementRef, renderer, ref, _selection) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this._selection = _selection;
        _this.role = 'columnheader';
        _this.selectAll = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-header-cell');
        _this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe(function (value) {
            _this.selectAll = value;
            ref.markForCheck();
        });
        return _this;
    }
    /**
     * @return {?}
     */
    NovoSimpleCheckboxHeaderCell.prototype.ngOnDestroy = function () {
        this.selectAllSubscription.unsubscribe();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoSimpleCheckboxHeaderCell.prototype.toggle = function (value) {
        this._selection.selectAll(value);
    };
    return NovoSimpleCheckboxHeaderCell;
}(_NovoHeaderCell));
NovoSimpleCheckboxHeaderCell.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-simple-checkbox-header-cell',
                template: "<novo-checkbox [(ngModel)]=\"selectAll\" (ngModelChange)=\"toggle($event)\"></novo-checkbox>",
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleCheckboxHeaderCell.ctorParameters = function () { return [
    { type: table.CdkColumnDef, },
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: core.ChangeDetectorRef, },
    { type: NovoSelection, decorators: [{ type: core.Optional },] },
]; };
NovoSimpleCheckboxHeaderCell.propDecorators = {
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
};
var NovoSimpleCell = /** @class */ (function (_super) {
    __extends(NovoSimpleCell, _super);
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     */
    function NovoSimpleCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.role = 'gridcell';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-cell');
        return _this;
    }
    /**
     * @return {?}
     */
    NovoSimpleCell.prototype.ngOnInit = function () {
        if (this.column.customClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.column.customClass(this.row));
        }
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
            // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
            // this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.column.width - 20}px`);
            // this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.column.width - 20}px`);
            // this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.column.width - 20}px`);
        }
        // else {
        //     // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        // }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoSimpleCell.prototype.onClick = function (event) {
        Helpers.swallowEvent(event);
        if (this.column.onClick) {
            this.column.onClick(this.row);
        }
        return;
    };
    return NovoSimpleCell;
}(_NovoCell));
NovoSimpleCell.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-simple-cell',
                template: "\n        <span [class.clickable]=\"!!column.onClick\" (click)=\"onClick($event)\" #span>{{ column.renderer(row) }}</span>\n    ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleCell.ctorParameters = function () { return [
    { type: table.CdkColumnDef, },
    { type: core.ElementRef, },
    { type: core.Renderer2, },
]; };
NovoSimpleCell.propDecorators = {
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
    'row': [{ type: core.Input },],
    'column': [{ type: core.Input },],
    'spanElement': [{ type: core.ViewChild, args: ['span',] },],
};
var NovoSimpleCheckboxCell = /** @class */ (function (_super) {
    __extends(NovoSimpleCheckboxCell, _super);
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} _selection
     */
    function NovoSimpleCheckboxCell(columnDef, elementRef, renderer, _selection) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.columnDef = columnDef;
        _this._selection = _selection;
        _this.role = 'gridcell';
        _this.selected = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-cell');
        _this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe(function (value) {
            _this.selected = value;
        });
        return _this;
    }
    /**
     * @return {?}
     */
    NovoSimpleCheckboxCell.prototype.ngOnInit = function () {
        this._selection.register(this.row.id || this.index, this.row);
        this.selected = this._selection.state.selectedRows.has(this.row.id || this.index);
    };
    /**
     * @return {?}
     */
    NovoSimpleCheckboxCell.prototype.ngOnDestroy = function () {
        this._selection.deregister(this.row.id || this.index);
        this.selectAllSubscription.unsubscribe();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoSimpleCheckboxCell.prototype.toggle = function (value) {
        this._selection.toggle(this.row.id || this.index, value, this.row);
    };
    return NovoSimpleCheckboxCell;
}(_NovoCell));
NovoSimpleCheckboxCell.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-simple-checkbox-cell',
                template: "\n        <novo-checkbox [ngModel]=\"selected\" (ngModelChange)=\"toggle($event)\"></novo-checkbox>\n    ",
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleCheckboxCell.ctorParameters = function () { return [
    { type: table.CdkColumnDef, },
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: NovoSelection, decorators: [{ type: core.Optional },] },
]; };
NovoSimpleCheckboxCell.propDecorators = {
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
    'row': [{ type: core.Input },],
    'index': [{ type: core.Input },],
};
var NovoSimpleActionCell = /** @class */ (function (_super) {
    __extends(NovoSimpleActionCell, _super);
    /**
     * @param {?} columnDef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} labels
     */
    function NovoSimpleActionCell(columnDef, elementRef, renderer, labels) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.labels = labels;
        _this.role = 'gridcell';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-action-column-" + columnDef.cssClassFriendlyName);
        return _this;
    }
    /**
     * @return {?}
     */
    NovoSimpleActionCell.prototype.ngOnInit = function () {
        if (this.column.options) {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-dropdown-cell');
        }
        else {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-button-cell');
        }
    };
    /**
     * @param {?} check
     * @param {?} row
     * @return {?}
     */
    NovoSimpleActionCell.prototype.isDisabled = function (check, row) {
        if (check.disabled === true) {
            return true;
        }
        if (check.disabledCheck) {
            return check.disabledCheck(row);
        }
        return false;
    };
    return NovoSimpleActionCell;
}(_NovoCell));
NovoSimpleActionCell.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-simple-action-cell',
                template: "\n        <ng-container *ngIf=\"!column.options\">\n            <button theme=\"icon\" [icon]=\"column.icon\" (click)=\"column.onClick(row)\" [disabled]=\"isDisabled(column, row)\"></button>\n        </ng-container>\n        <ng-container *ngIf=\"column.options\">\n            <novo-dropdown appendToBody=\"true\" parentScrollSelector=\".novo-simple-table\" containerClass=\"novo-table-dropdown-cell\">\n                <button type=\"button\" theme=\"dialogue\" icon=\"collapse\" inverse>{{ column.label || labels.actions }}</button>\n                <list>\n                    <item *ngFor=\"let option of column.options\" (action)=\"option.onClick(row)\" [disabled]=\"isDisabled(option, row)\">\n                        <span [attr.data-automation-id]=\"option.label\">{{ option.label }}</span>\n                    </item>\n                </list>\n            </novo-dropdown>\n        </ng-container>\n    ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleActionCell.ctorParameters = function () { return [
    { type: table.CdkColumnDef, },
    { type: core.ElementRef, },
    { type: core.Renderer2, },
    { type: NovoLabelService, },
]; };
NovoSimpleActionCell.propDecorators = {
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
    'row': [{ type: core.Input },],
    'column': [{ type: core.Input },],
};
/**
 * Workaround for https://github.com/angular/angular/issues/17849
 */
var _NovoHeaderRowDef = table.CdkHeaderRowDef;
var _NovoCdkRowDef = table.CdkRowDef;
var _NovoHeaderRow = table.CdkHeaderRow;
var _NovoRow = table.CdkRow;
var NovoSimpleHeaderRowDef = /** @class */ (function (_super) {
    __extends(NovoSimpleHeaderRowDef, _super);
    function NovoSimpleHeaderRowDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NovoSimpleHeaderRowDef;
}(_NovoHeaderRowDef));
NovoSimpleHeaderRowDef.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoSimpleHeaderRowDef]',
                providers: [{ provide: table.CdkHeaderRowDef, useExisting: NovoSimpleHeaderRowDef }],
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleHeaderRowDef.ctorParameters = function () { return []; };
NovoSimpleHeaderRowDef.propDecorators = {
    'columns': [{ type: core.Input, args: ['novoSimpleHeaderRowDef',] },],
};
var NovoSimpleRowDef = /** @class */ (function (_super) {
    __extends(NovoSimpleRowDef, _super);
    function NovoSimpleRowDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NovoSimpleRowDef;
}(_NovoCdkRowDef));
NovoSimpleRowDef.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoSimpleRowDef]',
                providers: [{ provide: table.CdkRowDef, useExisting: NovoSimpleRowDef }]
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleRowDef.ctorParameters = function () { return []; };
NovoSimpleRowDef.propDecorators = {
    'columns': [{ type: core.Input, args: ['novoSimpleRowDefColumns',] },],
};
var NovoSimpleHeaderRow = /** @class */ (function (_super) {
    __extends(NovoSimpleHeaderRow, _super);
    function NovoSimpleHeaderRow() {
        var _this = _super.apply(this, arguments) || this;
        _this.rowClass = 'novo-simple-header-row';
        _this.role = 'row';
        return _this;
    }
    return NovoSimpleHeaderRow;
}(_NovoHeaderRow));
NovoSimpleHeaderRow.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-simple-header-row',
                template: table.CDK_ROW_TEMPLATE,
                changeDetection: core.ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleHeaderRow.ctorParameters = function () { return []; };
NovoSimpleHeaderRow.propDecorators = {
    'rowClass': [{ type: core.HostBinding, args: ['class',] },],
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
};
var NovoSimpleRow = /** @class */ (function (_super) {
    __extends(NovoSimpleRow, _super);
    function NovoSimpleRow() {
        var _this = _super.apply(this, arguments) || this;
        _this.rowClass = 'novo-simple-row';
        _this.role = 'row';
        return _this;
    }
    return NovoSimpleRow;
}(_NovoRow));
NovoSimpleRow.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-simple-row',
                template: table.CDK_ROW_TEMPLATE,
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleRow.ctorParameters = function () { return []; };
NovoSimpleRow.propDecorators = {
    'rowClass': [{ type: core.HostBinding, args: ['class',] },],
    'role': [{ type: core.HostBinding, args: ['attr.role',] },],
};
var NovoSimpleFilterFocus = /** @class */ (function () {
    /**
     * @param {?} element
     */
    function NovoSimpleFilterFocus(element) {
        this.element = element;
    }
    /**
     * @return {?}
     */
    NovoSimpleFilterFocus.prototype.ngAfterViewInit = function () {
        this.element.nativeElement.focus();
    };
    return NovoSimpleFilterFocus;
}());
NovoSimpleFilterFocus.decorators = [
    { type: core.Directive, args: [{
                selector: '[novoSimpleFilterFocus]'
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleFilterFocus.ctorParameters = function () { return [
    { type: core.ElementRef, },
]; };
var NovoSimpleCellHeader = /** @class */ (function () {
    /**
     * @param {?} changeDetectorRef
     * @param {?} labels
     * @param {?} state
     * @param {?} _sort
     * @param {?} _cdkColumnDef
     */
    function NovoSimpleCellHeader(changeDetectorRef, labels, state$$1, _sort, _cdkColumnDef) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state$$1;
        this._sort = _sort;
        this._cdkColumnDef = _cdkColumnDef;
        this.icon = 'sortable';
        this.filterActive = false;
        this.sortActive = false;
        this.showCustomRange = false;
        this._rerenderSubscription = state$$1.updates.subscribe(function (change) {
            if (change.sort && change.sort.id === _this.id) {
                _this.icon = "sort-" + change.sort.value;
                _this.sortActive = true;
            }
            else {
                _this.icon = 'sortable';
                _this.sortActive = false;
            }
            if (change.filter && change.filter.id === _this.id) {
                _this.filterActive = true;
                _this.filter = change.filter.value;
            }
            else {
                _this.filterActive = false;
                _this.filter = undefined;
            }
            changeDetectorRef.markForCheck();
        });
    }
    Object.defineProperty(NovoSimpleCellHeader.prototype, "config", {
        /**
         * @return {?}
         */
        get: function () { return this._config; },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            if (!v) {
                this._config = {
                    sortable: false,
                    filterable: false,
                    filterConfig: {
                        type: 'text'
                    }
                };
            }
            else {
                this._config = {
                    sortable: coercion.coerceBooleanProperty(v.sortable),
                    filterable: coercion.coerceBooleanProperty(v.filterable),
                    transforms: v.transforms || {},
                    filterConfig: v.filterConfig || {
                        type: 'text'
                    }
                };
                if (this._config.filterConfig.type === 'date' && !this._config.filterConfig.options) {
                    this._config.filterConfig.options = this.getDefaultDateFilterOptions();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.ngOnInit = function () {
        if (this._cdkColumnDef) {
            this.id = this._cdkColumnDef.name;
        }
        if (this.defaultSort && this.id === this.defaultSort.id) {
            this.icon = "sort-" + this.defaultSort.value;
            this.sortActive = true;
            this.changeDetectorRef.markForCheck();
        }
    };
    /**
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.ngOnDestroy = function () {
        this._rerenderSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.sort = function () {
        var _this = this;
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(function () {
            _this.direction = _this.getNextSortDirection(_this.direction);
            _this._sort.sort(_this.id, _this.direction, _this._config.transforms.sort);
            _this.changeDetectorRef.markForCheck();
        }, 300);
    };
    /**
     * @param {?=} filter
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.filterData = function (filter$$1) {
        var _this = this;
        if (this.config.filterConfig.type === 'date' && filter$$1) {
            this.activeDateFilter = filter$$1.label || this.labels.customDateRange;
            if (filter$$1.startDate && filter$$1.endDate) {
                filter$$1 = {
                    min: dateFns.startOfDay(filter$$1.startDate),
                    max: dateFns.endOfDay(filter$$1.endDate),
                };
            }
            else {
                filter$$1 = {
                    min: dateFns.startOfDay(dateFns.addDays(dateFns.startOfToday(), filter$$1.min)),
                    max: dateFns.endOfDay(dateFns.addDays(dateFns.startOfToday(), filter$$1.max)),
                };
            }
        }
        if (filter$$1) {
            if (filter$$1.hasOwnProperty('value')) {
                this.filter = filter$$1.value;
            }
            else {
                this.filter = filter$$1;
            }
        }
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(function () {
            if (_this.filter === '') {
                _this.filter = undefined;
            }
            _this._sort.filter(_this.id, _this.filter, _this._config.transforms.filter);
            _this.changeDetectorRef.markForCheck();
        }, 300);
    };
    /**
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.clearFilter = function () {
        this.filter = undefined;
        this.activeDateFilter = undefined;
        this.filterData();
    };
    /**
     * @param {?} direction
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.getNextSortDirection = function (direction) {
        if (!direction) {
            return 'asc';
        }
        if (direction === 'asc') {
            return 'desc';
        }
        return 'asc';
    };
    /**
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.getDefaultDateFilterOptions = function () {
        var /** @type {?} */ opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 }
        ];
        return opts;
    };
    return NovoSimpleCellHeader;
}());
NovoSimpleCellHeader.decorators = [
    { type: core.Component, args: [{
                selector: '[novo-simple-cell-config]',
                template: "\n        <label (click)=\"sort()\" data-automation-id=\"novo-activity-table-label\" [class.sort-disabled]=\"!config.sortable\"><ng-content></ng-content></label>\n        <div>\n            <button *ngIf=\"config.sortable\" theme=\"icon\" [icon]=\"icon\" (click)=\"sort()\" [class.active]=\"sortActive\" data-automation-id=\"novo-activity-table-sort\"></button>\n            <novo-dropdown *ngIf=\"config.filterable\" side=\"right\" appendToBody=\"true\" parentScrollSelector=\".novo-simple-table\" containerClass=\"simple-table-dropdown\" data-automation-id=\"novo-activity-table-filter\">\n                <button type=\"button\" theme=\"icon\" icon=\"filter\" [class.active]=\"filterActive\"></button>\n                <div class=\"header\">\n                    <span>{{ labels.filters }}</span>\n                    <button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"clearFilter()\" *ngIf=\"filter !== null && filter !== undefined && filter !== ''\" data-automation-id=\"novo-activity-table-filter-clear\">{{ labels.clear }}</button>\n                </div>\n                <ng-container [ngSwitch]=\"config.filterConfig.type\">\n                    <list *ngSwitchCase=\"'date'\">\n                        <ng-container *ngIf=\"!showCustomRange\">\n                            <item [class.active]=\"activeDateFilter === option.label\" *ngFor=\"let option of config.filterConfig.options\" (click)=\"filterData(option)\" [attr.data-automation-id]=\"'novo-activity-table-filter-' + option.label\">\n                                {{ option.label }} <i class=\"bhi-check\" *ngIf=\"activeDateFilter === option.label\"></i>\n                            </item>\n                        </ng-container>\n                        <item [class.active]=\"labels.customDateRange === activeDateFilter\" (click)=\"showCustomRange = true\" *ngIf=\"config.filterConfig.allowCustomRange && !showCustomRange\" [keepOpen]=\"true\">\n                            {{ labels.customDateRange }} <i class=\"bhi-check\" *ngIf=\"labels.customDateRange === activeDateFilter\"></i>\n                        </item>\n                        <div class=\"calender-container\" *ngIf=\"showCustomRange\">\n                            <div (click)=\"showCustomRange = false\"><i class=\"bhi-previous\"></i>{{ labels.backToPresetFilters }}</div>\n                            <novo-date-picker (onSelect)=\"filterData($event)\" [(ngModel)]=\"filter\" range=\"true\"></novo-date-picker>\n                        </div>\n                    </list>\n                    <list *ngSwitchCase=\"'select'\">\n                        <item [class.active]=\"filter === option\" *ngFor=\"let option of config.filterConfig.options\" (click)=\"filterData(option)\" [attr.data-automation-id]=\"'novo-activity-table-filter-' + (option?.label || option)\">\n                            <span>{{ option?.label || option }}</span> <i class=\"bhi-check\" *ngIf=\"option.hasOwnProperty('value') ? filter === option.value : filter === option\"></i>\n                        </item>\n                    </list>\n                    <list *ngSwitchDefault>\n                        <item class=\"filter-search\" keepOpen=\"true\">\n                            <input type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterData()\" novoSimpleFilterFocus data-automation-id=\"novo-activity-table-filter-input\"/>\n                        </item>\n                    </list>\n                </ng-container>\n            </novo-dropdown>\n        </div>\n    ",
                encapsulation: core.ViewEncapsulation.None,
                changeDetection: core.ChangeDetectionStrategy.OnPush
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleCellHeader.ctorParameters = function () { return [
    { type: core.ChangeDetectorRef, },
    { type: NovoLabelService, },
    { type: NovoActivityTableState, },
    { type: NovoSortFilter, decorators: [{ type: core.Optional },] },
    { type: table.CdkColumnDef, decorators: [{ type: core.Optional },] },
]; };
NovoSimpleCellHeader.propDecorators = {
    'defaultSort': [{ type: core.Input },],
    'config': [{ type: core.Input, args: ['novo-simple-cell-config',] },],
};
var DEFAULT_PAGE_SIZE$1 = 50;
var NovoSimpleTablePagination = /** @class */ (function () {
    /**
     * @param {?} changeDetectorRef
     * @param {?} labels
     * @param {?} state
     */
    function NovoSimpleTablePagination(changeDetectorRef, labels, state$$1) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state$$1;
        this._page = 0;
        this._length = 0;
        this._pageSizeOptions = [];
        this.pageChange = new core.EventEmitter();
        if (state$$1 && state$$1.onReset) {
            this.resetSubscription = this.state.onReset.subscribe(function (clear) {
                if (clear) {
                    _this.page = 0;
                    _this.changeDetectorRef.markForCheck();
                }
            });
        }
    }
    Object.defineProperty(NovoSimpleTablePagination.prototype, "page", {
        /**
         * @return {?}
         */
        get: function () { return this._page; },
        /**
         * @param {?} page
         * @return {?}
         */
        set: function (page) {
            this._page = page;
            this.changeDetectorRef.markForCheck();
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
            this.state.page = this._page;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoSimpleTablePagination.prototype, "length", {
        /**
         * @return {?}
         */
        get: function () { return this._length; },
        /**
         * @param {?} length
         * @return {?}
         */
        set: function (length) {
            this._length = length;
            this.changeDetectorRef.markForCheck();
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoSimpleTablePagination.prototype, "pageSize", {
        /**
         * @return {?}
         */
        get: function () { return this._pageSize; },
        /**
         * @param {?} pageSize
         * @return {?}
         */
        set: function (pageSize) {
            this._pageSize = pageSize;
            this.updateDisplayedPageSizeOptions();
            this.state.pageSize = this._pageSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoSimpleTablePagination.prototype, "pageSizeOptions", {
        /**
         * @return {?}
         */
        get: function () { return this._pageSizeOptions; },
        /**
         * @param {?} pageSizeOptions
         * @return {?}
         */
        set: function (pageSizeOptions) {
            this._pageSizeOptions = pageSizeOptions;
            this.updateDisplayedPageSizeOptions();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.ngOnInit = function () {
        this._initialized = true;
        this.updateDisplayedPageSizeOptions();
    };
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.ngOnDestroy = function () {
        this.resetSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.nextPage = function () {
        if (!this.hasNextPage()) {
            return;
        }
        this.page++;
        this.emitPageEvent();
    };
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.previousPage = function () {
        if (!this.hasPreviousPage()) {
            return;
        }
        this.page--;
        this.emitPageEvent();
    };
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.hasPreviousPage = function () {
        return this.page >= 1 && this.pageSize !== 0;
    };
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.hasNextPage = function () {
        var /** @type {?} */ numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
        return this.page < numberOfPages && this.pageSize !== 0;
    };
    /**
     * @param {?} pageSize
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.changePageSize = function (pageSize) {
        this.page = 0;
        this.pageSize = pageSize;
        this.emitPageEvent();
    };
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.updateDisplayedPageSizeOptions = function () {
        if (!this._initialized) {
            return;
        }
        if (!this.pageSize) {
            this._pageSize = this.pageSizeOptions.length !== 0 ?
                this.pageSizeOptions[0] :
                DEFAULT_PAGE_SIZE$1;
        }
        this.displayedPageSizeOptions = this.pageSizeOptions.slice();
        if (this.displayedPageSizeOptions.indexOf(this.pageSize) === -1) {
            this.displayedPageSizeOptions.push(this.pageSize);
        }
        this.displayedPageSizeOptions.sort(function (a, b) { return a - b; });
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
    };
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.emitPageEvent = function () {
        var /** @type {?} */ event = {
            page: this.page,
            pageSize: this.pageSize,
            length: this.length
        };
        this.pageChange.next(event);
        this.state.page = this.page;
        this.state.pageSize = this.pageSize;
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.state.updates.next(event);
    };
    return NovoSimpleTablePagination;
}());
NovoSimpleTablePagination.decorators = [
    { type: core.Component, args: [{
                selector: 'novo-simple-table-pagination',
                template: "\n        <div class=\"novo-simple-table-pagination-size\">\n            <novo-tiles *ngIf=\"displayedPageSizeOptions.length > 1\"\n                        [(ngModel)]=\"pageSize\"\n                        [options]=\"displayedPageSizeOptions\"\n                        (onChange)=\"changePageSize($event)\"\n                        data-automation-id=\"novo-simple-table-pagination-tiles\">\n            </novo-tiles>\n            <div *ngIf=\"displayedPageSizeOptions.length <= 1\">{{ pageSize }}</div>\n        </div>\n\n        <div class=\"novo-simple-table-range-label-long\"data-automation-id=\"novo-simple-table-pagination-range-label-long\">\n            {{ longRangeLabel }}\n        </div>\n        <div class=\"novo-simple-table-range-label-short\"data-automation-id=\"novo-simple-table-pagination-range-label-short\">\n            {{ shortRangeLabel }}\n        </div>\n\n        <button theme=\"dialogue\" type=\"button\"\n                class=\"novo-simple-table-pagination-navigation-previous\"\n                (click)=\"previousPage()\"\n                icon=\"previous\"\n                side=\"left\"\n                [disabled]=\"!hasPreviousPage()\"\n                data-automation-id=\"novo-simple-table-pagination-previous\">\n            <span>{{ labels.previous }}</span>\n        </button>\n        <button theme=\"dialogue\" type=\"button\"\n                class=\"novo-simple-table-pagination-navigation-next\"\n                (click)=\"nextPage()\"\n                icon=\"next\"\n                side=\"right\"\n                [disabled]=\"!hasNextPage()\"\n                data-automation-id=\"novo-simple-table-pagination-next\">\n            <span>{{ labels.next }}</span>\n        </button>\n    ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleTablePagination.ctorParameters = function () { return [
    { type: core.ChangeDetectorRef, },
    { type: NovoLabelService, },
    { type: NovoActivityTableState, },
]; };
NovoSimpleTablePagination.propDecorators = {
    'page': [{ type: core.Input },],
    'length': [{ type: core.Input },],
    'pageSize': [{ type: core.Input },],
    'pageSizeOptions': [{ type: core.Input },],
    'pageChange': [{ type: core.Output },],
};
var ActivityTableRenderers = /** @class */ (function () {
    function ActivityTableRenderers() {
    }
    /**
     * @template T
     * @param {?} prop
     * @return {?}
     */
    ActivityTableRenderers.propertyRenderer = function (prop) {
        return function (data) {
            // TODO - allow for dots and sub props
            return data[prop];
        };
    };
    /**
     * @template T
     * @param {?} prop
     * @return {?}
     */
    ActivityTableRenderers.dateRenderer = function (prop) {
        return function (data) {
            return data[prop] ? new Date(data[prop]).toLocaleDateString() : '';
        };
    };
    return ActivityTableRenderers;
}());
var NovoSimpleTableModule = /** @class */ (function () {
    function NovoSimpleTableModule() {
    }
    return NovoSimpleTableModule;
}());
NovoSimpleTableModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    NovoDatePickerModule, table.CdkTableModule, common.CommonModule, forms.FormsModule, NovoButtonModule,
                    NovoDropdownModule, NovoFormExtrasModule, NovoLoadingModule, NovoTilesModule, NovoSearchBoxModule
                ],
                exports: [
                    NovoTable, NovoSimpleCellDef, NovoSimpleHeaderCellDef, NovoSimpleColumnDef, NovoActivityTableEmptyMessage, NovoActivityTableNoResultsMessage,
                    NovoSimpleHeaderRowDef, NovoSimpleRowDef, NovoSimpleCellHeader, NovoSortFilter, NovoSimpleActionCell, NovoSimpleEmptyHeaderCell,
                    NovoSimpleHeaderCell, NovoSimpleCell, NovoSimpleHeaderRow, NovoSimpleRow, NovoSimpleFilterFocus, NovoSimpleTablePagination, NovoActivityTableCustomHeader,
                    NovoSimpleCheckboxCell, NovoSimpleCheckboxHeaderCell, NovoSelection, NovoActivityTable, NovoActivityTableActions, NovoActivityTableCustomFilter
                ],
                declarations: [
                    NovoTable, NovoSimpleCellDef, NovoSimpleHeaderCellDef, NovoSimpleColumnDef, NovoActivityTableEmptyMessage, NovoActivityTableNoResultsMessage,
                    NovoSimpleHeaderRowDef, NovoSimpleRowDef, NovoSimpleCellHeader, NovoSortFilter, NovoSimpleActionCell, NovoSimpleEmptyHeaderCell,
                    NovoSimpleHeaderCell, NovoSimpleCell, NovoSimpleHeaderRow, NovoSimpleRow, NovoSimpleFilterFocus, NovoSimpleTablePagination, NovoActivityTableCustomHeader,
                    NovoSimpleCheckboxCell, NovoSimpleCheckboxHeaderCell, NovoSelection, NovoActivityTable, NovoActivityTableActions, NovoActivityTableCustomFilter
                ],
                providers: [
                    NovoActivityTableState
                ]
            },] },
];
/**
 * @nocollapse
 */
NovoSimpleTableModule.ctorParameters = function () { return []; };
/**
 * @abstract
 */
var GlobalRef = /** @class */ (function () {
    function GlobalRef() {
    }
    /**
     * @abstract
     * @return {?}
     */
    GlobalRef.prototype.nativeGlobal = function () { };
    return GlobalRef;
}());
var BrowserGlobalRef = /** @class */ (function (_super) {
    __extends(BrowserGlobalRef, _super);
    function BrowserGlobalRef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BrowserGlobalRef.prototype, "nativeGlobal", {
        /**
         * @return {?}
         */
        get: function () {
            return /** @type {?} */ (window);
        },
        enumerable: true,
        configurable: true
    });
    return BrowserGlobalRef;
}(GlobalRef));
var LocalStorageService = /** @class */ (function () {
    function LocalStorageService() {
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    LocalStorageService.prototype.setItem = function (key, value) {
        localStorage.setItem(key, value);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    LocalStorageService.prototype.getItem = function (key) {
        return localStorage.getItem(key);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    LocalStorageService.prototype.removeItem = function (key) {
        localStorage.removeItem(key);
    };
    return LocalStorageService;
}());
LocalStorageService.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
LocalStorageService.ctorParameters = function () { return []; };
var GooglePlacesService = /** @class */ (function () {
    /**
     * @param {?} _http
     * @param {?} platformId
     * @param {?} _global
     * @param {?} _localStorageService
     */
    function GooglePlacesService(_http, platformId, _global, _localStorageService) {
        this._http = _http;
        this.platformId = platformId;
        this._global = _global;
        this._localStorageService = _localStorageService;
    }
    /**
     * @param {?} url
     * @param {?} query
     * @return {?}
     */
    GooglePlacesService.prototype.getPredictions = function (url, query) {
        var _this = this;
        return new Promise(function (resolve) {
            _this._http.get(url + '?query=' + query).map(function (res) { return res.json(); })
                .subscribe(function (data) {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    /**
     * @param {?} url
     * @param {?} lat
     * @param {?} lng
     * @return {?}
     */
    GooglePlacesService.prototype.getLatLngDetail = function (url, lat, lng) {
        var _this = this;
        return new Promise(function (resolve) {
            _this._http.get(url + '?lat=' + lat + '&lng=' + lng).map(function (res) { return res.json(); })
                .subscribe(function (data) {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    /**
     * @param {?} url
     * @param {?} placeId
     * @return {?}
     */
    GooglePlacesService.prototype.getPlaceDetails = function (url, placeId) {
        var _this = this;
        return new Promise(function (resolve) {
            _this._http.get(url + '?query=' + placeId).map(function (res) { return res.json(); })
                .subscribe(function (data) {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    /**
     * @return {?}
     */
    GooglePlacesService.prototype.getGeoCurrentLocation = function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (common.isPlatformBrowser(_this.platformId)) {
                var /** @type {?} */ _window = _this._global.nativeGlobal;
                if (_window.navigator.geolocation) {
                    _window.navigator.geolocation.getCurrentPosition(function (pos) {
                        var /** @type {?} */ latlng = { lat: parseFloat(pos.coords.latitude + ''), lng: parseFloat(pos.coords.longitude + '') };
                        resolve(latlng);
                    });
                }
                else {
                    resolve(false);
                }
            }
            else {
                resolve(false);
            }
        });
    };
    /**
     * @param {?} latlng
     * @return {?}
     */
    GooglePlacesService.prototype.getGeoLatLngDetail = function (latlng) {
        var _this = this;
        return new Promise(function (resolve) {
            if (common.isPlatformBrowser(_this.platformId)) {
                var /** @type {?} */ _window = _this._global.nativeGlobal;
                var /** @type {?} */ geocoder = new _window.google.maps.Geocoder();
                geocoder.geocode({ 'location': latlng }, function (results, status) {
                    if (status === 'OK') {
                        _this.getGeoPlaceDetail(results[0].place_id).then(function (result) {
                            if (result) {
                                resolve(result);
                            }
                            else {
                                resolve(false);
                            }
                        });
                    }
                    else {
                        resolve(false);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    };
    /**
     * @param {?} params
     * @return {?}
     */
    GooglePlacesService.prototype.getGeoPrediction = function (params) {
        var _this = this;
        return new Promise(function (resolve) {
            if (common.isPlatformBrowser(_this.platformId)) {
                var /** @type {?} */ _window = _this._global.nativeGlobal;
                var /** @type {?} */ placesService = new _window.google.maps.places.AutocompleteService();
                var /** @type {?} */ queryInput = {};
                var /** @type {?} */ promiseArr = [];
                if (params.countryRestriction.length) {
                    queryInput = {
                        input: params.query,
                        componentRestrictions: { country: params.countryRestriction },
                    };
                }
                else {
                    queryInput = {
                        input: params.query
                    };
                }
                if (params.geoLocation) {
                    queryInput.location = new _window.google.maps.LatLng(parseFloat(params.geoLocation[0]), parseFloat(params.geoLocation[1]));
                    queryInput.radius = params.radius;
                }
                if (params.geoTypes.length) {
                    for (var /** @type {?} */ i = 0; i < params.geoTypes.length; i++) {
                        var /** @type {?} */ _tempQuery = queryInput;
                        _tempQuery['types'] = new Array(params.geoTypes[i]);
                        promiseArr.push(_this.geoPredictionCall(placesService, _tempQuery));
                    }
                }
                else {
                    promiseArr.push(_this.geoPredictionCall(placesService, queryInput));
                }
                Promise.all(promiseArr).then(function (values) {
                    var /** @type {?} */ val = values;
                    if (val.length > 1) {
                        var /** @type {?} */ _tempArr = [];
                        for (var /** @type {?} */ j = 0; j < val.length; j++) {
                            if (val[j] && val[j].length) {
                                _tempArr = _tempArr.concat(val[j]);
                            }
                        }
                        _tempArr = _this.getUniqueResults(_tempArr);
                        resolve(_tempArr);
                    }
                    else {
                        resolve(values[0]);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    };
    /**
     * @param {?} placeId
     * @return {?}
     */
    GooglePlacesService.prototype.getGeoPlaceDetail = function (placeId) {
        var _this = this;
        return new Promise(function (resolve) {
            if (common.isPlatformBrowser(_this.platformId)) {
                var /** @type {?} */ _window = _this._global.nativeGlobal;
                var /** @type {?} */ placesService = new _window.google.maps.places.PlacesService(document.createElement('div'));
                placesService.getDetails({ 'placeId': placeId }, function (result, status) {
                    if (result === null || result.length === 0) {
                        _this.getGeoPaceDetailByReferance(result.referance).then(function (referanceData) {
                            if (!referanceData) {
                                resolve(false);
                            }
                            else {
                                resolve(referanceData);
                            }
                        });
                    }
                    else {
                        resolve(result);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    };
    /**
     * @param {?} referance
     * @return {?}
     */
    GooglePlacesService.prototype.getGeoPaceDetailByReferance = function (referance) {
        var _this = this;
        return new Promise(function (resolve) {
            if (common.isPlatformBrowser(_this.platformId)) {
                var /** @type {?} */ _window_1 = _this._global.nativeGlobal;
                var /** @type {?} */ placesService = new _window_1.google.maps.places.PlacesService();
                placesService.getDetails({ 'reference': referance }, function (result, status) {
                    if (status === _window_1.google.maps.places.PlacesServiceStatus.OK) {
                        resolve(result);
                    }
                    else {
                        resolve(false);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    };
    /**
     * @param {?} localStorageName
     * @param {?} result
     * @param {?} itemSavedLength
     * @return {?}
     */
    GooglePlacesService.prototype.addRecentList = function (localStorageName, result, itemSavedLength) {
        var _this = this;
        this.getRecentList(localStorageName).then(function (data) {
            if (data) {
                for (var /** @type {?} */ i = 0; i < data.length; i++) {
                    if (data[i].description === result.description) {
                        data.splice(i, 1);
                        break;
                    }
                }
                data.unshift(result);
                if (data.length > itemSavedLength) {
                    data.pop();
                }
                _this._localStorageService.setItem(localStorageName, JSON.stringify(data));
            }
        });
    };
    
    /**
     * @param {?} localStorageName
     * @return {?}
     */
    GooglePlacesService.prototype.getRecentList = function (localStorageName) {
        var _this = this;
        return new Promise(function (resolve) {
            var /** @type {?} */ value = _this._localStorageService.getItem(localStorageName);
            if (value) {
                value = JSON.parse(value);
            }
            else {
                value = [];
            }
            resolve(value);
        });
    };
    /**
     * @param {?} arr
     * @return {?}
     */
    GooglePlacesService.prototype.getUniqueResults = function (arr) {
        return Array.from(arr.reduce(function (m, t) { return m.set(t.place_id, t); }, new Map()).values());
    };
    /**
     * @param {?} placesService
     * @param {?} queryInput
     * @return {?}
     */
    GooglePlacesService.prototype.geoPredictionCall = function (placesService, queryInput) {
        var /** @type {?} */ _window = this._global.nativeGlobal;
        return new Promise(function (resolve) {
            placesService.getPlacePredictions(queryInput, function (result, status) {
                if (status === _window.google.maps.places.PlacesServiceStatus.OK) {
                    resolve(result);
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    return GooglePlacesService;
}());
GooglePlacesService.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
GooglePlacesService.ctorParameters = function () { return [
    { type: http.Http, },
    { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },
    { type: GlobalRef, },
    { type: LocalStorageService, },
]; };
// NG2
var AppBridgeHandler = {};
AppBridgeHandler.HTTP = 0;
AppBridgeHandler.OPEN = 1;
AppBridgeHandler.OPEN_LIST = 2;
AppBridgeHandler.CLOSE = 3;
AppBridgeHandler.REFRESH = 4;
AppBridgeHandler.PIN = 5;
AppBridgeHandler.REGISTER = 6;
AppBridgeHandler.UPDATE = 7;
AppBridgeHandler.REQUEST_DATA = 8;
AppBridgeHandler.CALLBACK = 9;
AppBridgeHandler[AppBridgeHandler.HTTP] = "HTTP";
AppBridgeHandler[AppBridgeHandler.OPEN] = "OPEN";
AppBridgeHandler[AppBridgeHandler.OPEN_LIST] = "OPEN_LIST";
AppBridgeHandler[AppBridgeHandler.CLOSE] = "CLOSE";
AppBridgeHandler[AppBridgeHandler.REFRESH] = "REFRESH";
AppBridgeHandler[AppBridgeHandler.PIN] = "PIN";
AppBridgeHandler[AppBridgeHandler.REGISTER] = "REGISTER";
AppBridgeHandler[AppBridgeHandler.UPDATE] = "UPDATE";
AppBridgeHandler[AppBridgeHandler.REQUEST_DATA] = "REQUEST_DATA";
AppBridgeHandler[AppBridgeHandler.CALLBACK] = "CALLBACK";
var HTTP_VERBS = {
    GET: 'get',
    POST: 'post',
    PUT: 'put',
    DELETE: 'delete'
};
var MESSAGE_TYPES = {
    REGISTER: 'register',
    OPEN: 'open',
    OPEN_LIST: 'openList',
    CLOSE: 'close',
    REFRESH: 'refresh',
    PIN: 'pin',
    UPDATE: 'update',
    HTTP_GET: 'httpGET',
    HTTP_POST: 'httpPOST',
    HTTP_PUT: 'httpPUT',
    HTTP_DELETE: 'httpDELETE',
    CUSTOM_EVENT: 'customEvent',
    REQUEST_DATA: 'requestData',
    CALLBACK: 'callback'
};
var AppBridgeService = /** @class */ (function () {
    function AppBridgeService() {
    }
    /**
     * @param {?} name
     * @return {?}
     */
    AppBridgeService.prototype.create = function (name) {
        return new AppBridge(name);
    };
    return AppBridgeService;
}());
var DevAppBridgeService = /** @class */ (function () {
    /**
     * @param {?} http
     */
    function DevAppBridgeService(http$$1) {
        this.http = http$$1;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    DevAppBridgeService.prototype.create = function (name) {
        return new DevAppBridge(name, this.http);
    };
    return DevAppBridgeService;
}());
var AppBridge = /** @class */ (function () {
    /**
     * @param {?=} traceName
     */
    function AppBridge(traceName) {
        if (traceName === void 0) { traceName = 'AppBridge'; }
        this.id = "" + Date.now();
        this._registeredFrames = [];
        this._handlers = {};
        this._tracing = false;
        this._eventListeners = {};
        this.traceName = traceName;
        if (postRobot) {
            postRobot.CONFIG.LOG_LEVEL = 'error';
            try {
                this._setupHandlers();
            }
            catch (error) {
                // No op
            }
        }
    }
    Object.defineProperty(AppBridge.prototype, "tracing", {
        /**
         * @param {?} tracing
         * @return {?}
         */
        set: function (tracing) {
            this._tracing = tracing;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} type
     * @param {?} handler
     * @return {?}
     */
    AppBridge.prototype.handle = function (type, handler) {
        this._handlers[type] = handler;
    };
    /**
     * @param {?} eventType
     * @param {?} event
     * @return {?}
     */
    AppBridge.prototype._trace = function (eventType, event) {
        if (this._tracing) {
            console.log("[" + (this.traceName || this.id) + "] \"" + eventType + "\"", event); // tslint:disable-line
        }
    };
    /**
     * @return {?}
     */
    AppBridge.prototype._setupHandlers = function () {
        var _this = this;
        // Register
        postRobot.on(MESSAGE_TYPES.REGISTER, function (event) {
            _this._trace(MESSAGE_TYPES.REGISTER, event);
            _this._registeredFrames.push(event);
            return _this.register(event.data).then(function (windowName) {
                return { windowName: windowName };
            });
        });
        // Update
        postRobot.on(MESSAGE_TYPES.UPDATE, function (event) {
            _this._trace(MESSAGE_TYPES.UPDATE, event);
            return _this.update(event.data).then(function (success) {
                return { success: success };
            });
        });
        // Open
        postRobot.on(MESSAGE_TYPES.OPEN, function (event) {
            _this._trace(MESSAGE_TYPES.OPEN, event);
            return _this.open(event.data).then(function (success) {
                return { success: success };
            });
        });
        postRobot.on(MESSAGE_TYPES.OPEN_LIST, function (event) {
            _this._trace(MESSAGE_TYPES.OPEN_LIST, event);
            return _this.openList(event.data).then(function (success) {
                return { success: success };
            });
        });
        // Close
        postRobot.on(MESSAGE_TYPES.CLOSE, function (event) {
            _this._trace(MESSAGE_TYPES.CLOSE, event);
            var /** @type {?} */ index$$1 = _this._registeredFrames.findIndex(function (frame) { return frame.data.id === event.data.id; });
            if (index$$1 !== -1) {
                _this._registeredFrames.splice(index$$1, 1);
            }
            return _this.close(event.data).then(function (success) {
                return { success: success };
            });
        });
        // Refresh
        postRobot.on(MESSAGE_TYPES.REFRESH, function (event) {
            _this._trace(MESSAGE_TYPES.REFRESH, event);
            return _this.refresh(event.data).then(function (success) {
                return { success: success };
            });
        });
        // PIN
        postRobot.on(MESSAGE_TYPES.PIN, function (event) {
            _this._trace(MESSAGE_TYPES.PIN, event);
            return _this.pin(event.data).then(function (success) {
                return { success: success };
            });
        });
        // REQUEST_DATA
        postRobot.on(MESSAGE_TYPES.REQUEST_DATA, function (event) {
            _this._trace(MESSAGE_TYPES.REQUEST_DATA, event);
            return _this.requestData(event.data).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // CALLBACKS
        postRobot.on(MESSAGE_TYPES.CALLBACK, function (event) {
            _this._trace(MESSAGE_TYPES.CALLBACK, event);
            return _this.callback(event.data).then(function (success) {
                return { success: success };
            });
        });
        // HTTP-GET
        postRobot.on(MESSAGE_TYPES.HTTP_GET, function (event) {
            _this._trace(MESSAGE_TYPES.HTTP_GET, event);
            return _this.httpGET(event.data.relativeURL).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-POST
        postRobot.on(MESSAGE_TYPES.HTTP_POST, function (event) {
            _this._trace(MESSAGE_TYPES.HTTP_POST, event);
            return _this.httpPOST(event.data.relativeURL, event.data.data).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-PUT
        postRobot.on(MESSAGE_TYPES.HTTP_PUT, function (event) {
            _this._trace(MESSAGE_TYPES.HTTP_PUT, event);
            return _this.httpPUT(event.data.relativeURL, event.data.data).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-DELETE
        postRobot.on(MESSAGE_TYPES.HTTP_DELETE, function (event) {
            _this._trace(MESSAGE_TYPES.HTTP_DELETE, event);
            return _this.httpDELETE(event.data.relativeURL).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // Custom Events
        postRobot.on(MESSAGE_TYPES.CUSTOM_EVENT, function (event) {
            _this._trace(MESSAGE_TYPES.CUSTOM_EVENT, event);
            if (_this._eventListeners[event.data.event]) {
                _this._eventListeners[event.data.event].forEach(function (listener) {
                    listener(event.data.data);
                });
            }
            if (_this._registeredFrames.length > 0) {
                _this._registeredFrames.forEach(function (frame) {
                    postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, event.data);
                });
            }
        });
    };
    /**
     * Fires or responds to an open event
     * @param {?} packet any - packet of data to send with the open event
     * @return {?}
     */
    AppBridge.prototype.open = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.OPEN]) {
                _this._handlers[AppBridgeHandler.OPEN](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                postRobot.sendToParent(MESSAGE_TYPES.OPEN, packet).then(function (event) {
                    _this._trace(MESSAGE_TYPES.OPEN + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }).catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an openList event
     * @param {?} packet any - packet of data to send with the open event
     * @return {?}
     */
    AppBridge.prototype.openList = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.OPEN_LIST]) {
                _this._handlers[AppBridgeHandler.OPEN_LIST](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                var /** @type {?} */ openListPacket = {};
                Object.assign(openListPacket, { type: 'List', entityType: packet.type, keywords: packet.keywords, criteria: packet.criteria });
                postRobot.sendToParent(MESSAGE_TYPES.OPEN_LIST, packet).then(function (event) {
                    _this._trace(MESSAGE_TYPES.OPEN_LIST + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }).catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an close event
     * @param {?} packet any - packet of data to send with the close event
     * @return {?}
     */
    AppBridge.prototype.update = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.UPDATE]) {
                _this._handlers[AppBridgeHandler.UPDATE](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                postRobot.sendToParent(MESSAGE_TYPES.UPDATE, packet).then(function (event) {
                    _this._trace(MESSAGE_TYPES.UPDATE + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }).catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an close event
     * @param {?=} packet
     * @return {?}
     */
    AppBridge.prototype.close = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.CLOSE]) {
                _this._handlers[AppBridgeHandler.CLOSE](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - close(packet) is deprecated! Please just use close()!'); // tslint:disable-line
                }
                var /** @type {?} */ realPacket = { id: _this.id, windowName: _this.windowName };
                postRobot.sendToParent(MESSAGE_TYPES.CLOSE, realPacket).then(function (event) {
                    _this._trace(MESSAGE_TYPES.CLOSE + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }).catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an close event
     * @param {?=} packet
     * @return {?}
     */
    AppBridge.prototype.refresh = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.REFRESH]) {
                _this._handlers[AppBridgeHandler.REFRESH](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - refresh(packet) is deprecated! Please just use refresh()!'); // tslint:disable-line
                }
                var /** @type {?} */ realPacket = { id: _this.id, windowName: _this.windowName };
                postRobot.sendToParent(MESSAGE_TYPES.REFRESH, realPacket).then(function (event) {
                    _this._trace(MESSAGE_TYPES.REFRESH + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }).catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to a pin event
     * @param {?=} packet
     * @return {?}
     */
    AppBridge.prototype.pin = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.PIN]) {
                _this._handlers[AppBridgeHandler.PIN](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - pin(packet) is deprecated! Please just use pin()!'); // tslint:disable-line
                }
                var /** @type {?} */ realPacket = { id: _this.id, windowName: _this.windowName };
                postRobot.sendToParent(MESSAGE_TYPES.PIN, realPacket).then(function (event) {
                    _this._trace(MESSAGE_TYPES.PIN + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }).catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to a requestData event
     * @param {?} packet any - packet of data to send with the requestData event
     * @return {?}
     */
    AppBridge.prototype.requestData = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.REQUEST_DATA]) {
                _this._handlers[AppBridgeHandler.REQUEST_DATA](packet, function (data) {
                    if (data) {
                        resolve({ data: data });
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                postRobot.sendToParent(MESSAGE_TYPES.REQUEST_DATA, packet).then(function (event) {
                    _this._trace(MESSAGE_TYPES.REQUEST_DATA + " (callback)", event);
                    if (event.data) {
                        resolve({ data: event.data.data });
                    }
                    else {
                        reject(false);
                    }
                }).catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires a generic callback command
     * @param {?} packet string - key: string, generic: boolean
     * @return {?}
     */
    AppBridge.prototype.callback = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.CALLBACK]) {
                _this._handlers[AppBridgeHandler.CALLBACK](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                postRobot.sendToParent(MESSAGE_TYPES.CALLBACK, packet).then(function (event) {
                    _this._trace(MESSAGE_TYPES.CALLBACK + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                }).catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an register event
     * @param {?=} packet any - packet of data to send with the event
     * @return {?}
     */
    AppBridge.prototype.register = function (packet) {
        var _this = this;
        if (packet === void 0) { packet = {}; }
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.REGISTER]) {
                _this._handlers[AppBridgeHandler.REGISTER](packet, function (windowName) {
                    if (windowName) {
                        resolve(windowName);
                    }
                    else {
                        resolve(null);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id });
                postRobot.sendToParent(MESSAGE_TYPES.REGISTER, packet).then(function (event) {
                    _this._trace(MESSAGE_TYPES.REGISTER + " (callback)", event);
                    if (event.data) {
                        _this.windowName = event.data.windowName;
                        resolve(event.data.windowName);
                    }
                    else {
                        resolve(null);
                    }
                }).catch(function (err) {
                    _this._trace(MESSAGE_TYPES.REGISTER + " - FAILED - (no parent)", err);
                    resolve(null);
                });
            }
        });
    };
    /**
     * Fires or responds to an HTTP_GET event
     * @param {?} relativeURL
     * @return {?}
     */
    AppBridge.prototype.httpGET = function (relativeURL) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.HTTP]) {
                _this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.GET, relativeURL: relativeURL }, function (data, error) {
                    resolve({ data: data, error: error });
                });
            }
            else {
                postRobot.sendToParent(MESSAGE_TYPES.HTTP_GET, { relativeURL: relativeURL }).then(function (event) {
                    resolve({ data: event.data.data, error: event.data.error });
                }).catch(function (err) {
                    reject(null);
                });
            }
        });
    };
    /**
     * Fires or responds to an HTTP_POST event
     * @param {?} relativeURL
     * @param {?} postData
     * @return {?}
     */
    AppBridge.prototype.httpPOST = function (relativeURL, postData) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.HTTP]) {
                _this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.POST, relativeURL: relativeURL, data: postData }, function (data, error) {
                    resolve({ data: data, error: error });
                });
            }
            else {
                postRobot.sendToParent(MESSAGE_TYPES.HTTP_POST, { relativeURL: relativeURL, data: postData }).then(function (event) {
                    resolve({ data: event.data.data, error: event.data.error });
                }).catch(function (err) {
                    reject(null);
                });
            }
        });
    };
    /**
     * Fires or responds to an HTTP_PUT event
     * @param {?} relativeURL
     * @param {?} putData
     * @return {?}
     */
    AppBridge.prototype.httpPUT = function (relativeURL, putData) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.HTTP]) {
                _this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.PUT, relativeURL: relativeURL, data: putData }, function (data, error) {
                    resolve({ data: data, error: error });
                });
            }
            else {
                postRobot.sendToParent(MESSAGE_TYPES.HTTP_PUT, { relativeURL: relativeURL, data: putData }).then(function (event) {
                    resolve({ data: event.data.data, error: event.data.error });
                }).catch(function (err) {
                    reject(null);
                });
            }
        });
    };
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param {?} relativeURL
     * @return {?}
     */
    AppBridge.prototype.httpDELETE = function (relativeURL) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.HTTP]) {
                _this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.DELETE, relativeURL: relativeURL }, function (data, error) {
                    resolve({ data: data, error: error });
                });
            }
            else {
                postRobot.sendToParent(MESSAGE_TYPES.HTTP_DELETE, { relativeURL: relativeURL }).then(function (event) {
                    resolve({ data: event.data.data, error: event.data.error });
                }).catch(function (err) {
                    reject(null);
                });
            }
        });
    };
    /**
     * Fires a custom event to anywhere in the application
     * @param {?} event string - event name to fire
     * @param {?} data any - data to be sent along with the event
     * @return {?}
     */
    AppBridge.prototype.fireEvent = function (event, data) {
        return new Promise(function (resolve, reject) {
            postRobot.sendToParent(MESSAGE_TYPES.CUSTOM_EVENT, { event: event, data: data }).then(function (e) {
                resolve(e);
            }).catch(function (err) {
                reject(null);
            });
        });
    };
    /**
     * Fires a custom event to all registered frames
     * @param {?} event string - event name to fire
     * @param {?} data any - data to be sent along with the event
     * @return {?}
     */
    AppBridge.prototype.fireEventToChildren = function (event, data) {
        if (this._registeredFrames.length > 0) {
            this._registeredFrames.forEach(function (frame) {
                postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, {
                    eventType: event,
                    data: data
                });
            });
        }
    };
    /**
     * Adds an event listener to a custom event
     * @param {?} event string - event name to listen to
     * @param {?} callback function - callback to be fired when an event is caught
     * @return {?}
     */
    AppBridge.prototype.addEventListener = function (event, callback) {
        if (!this._eventListeners[event]) {
            this._eventListeners[event] = [];
        }
        this._eventListeners[event].push(callback);
    };
    return AppBridge;
}());
var DevAppBridge = /** @class */ (function (_super) {
    __extends(DevAppBridge, _super);
    /**
     * @param {?=} traceName
     * @param {?=} http
     */
    function DevAppBridge(traceName, http$$1) {
        if (traceName === void 0) { traceName = 'DevAppBridge'; }
        var _this = _super.call(this, traceName) || this;
        _this.http = http$$1;
        var cookie = _this.getCookie('UlEncodedIdentity');
        if (cookie && cookie.length) {
            var identity_3 = JSON.parse(decodeURIComponent(cookie));
            var endpoints = identity_3.sessions.reduce(function (obj, session) {
                obj[session.name] = session.value.endpoint;
                return obj;
            }, {});
            _this.baseURL = endpoints.rest;
        }
        return _this;
    }
    /**
     * @return {?}
     */
    DevAppBridge.prototype._setupHandlers = function () { };
    /**
     * Fires or responds to an HTTP_GET event
     * @param {?} relativeURL
     * @return {?}
     */
    DevAppBridge.prototype.httpGET = function (relativeURL) {
        return this.http.get(this.baseURL + "/" + relativeURL, { withCredentials: true }).map(function (res) { return ({ data: res.json() }); }).toPromise();
    };
    /**
     * Fires or responds to an HTTP_POST event
     * @param {?} relativeURL
     * @param {?} postData
     * @return {?}
     */
    DevAppBridge.prototype.httpPOST = function (relativeURL, postData) {
        return this.http.post(this.baseURL + "/" + relativeURL, postData, { withCredentials: true }).map(function (res) { return ({ data: res.json() }); }).toPromise();
    };
    /**
     * Fires or responds to an HTTP_PUT event
     * @param {?} relativeURL
     * @param {?} putData
     * @return {?}
     */
    DevAppBridge.prototype.httpPUT = function (relativeURL, putData) {
        return this.http.put(this.baseURL + "/" + relativeURL, putData, { withCredentials: true }).map(function (res) { return ({ data: res.json() }); }).toPromise();
    };
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param {?} relativeURL
     * @return {?}
     */
    DevAppBridge.prototype.httpDELETE = function (relativeURL) {
        return this.http.delete(this.baseURL + "/" + relativeURL, { withCredentials: true }).map(function (res) { return ({ data: res.json() }); }).toPromise();
    };
    /**
     * @param {?} cname
     * @return {?}
     */
    DevAppBridge.prototype.getCookie = function (cname) {
        if (document) {
            var /** @type {?} */ name = cname + "=";
            var /** @type {?} */ ca = document.cookie.split(';');
            for (var /** @type {?} */ i = 0; i < ca.length; i++) {
                var /** @type {?} */ c = ca[i];
                while (c.charAt(0) === ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) === 0) {
                    return c.substring(name.length, c.length);
                }
            }
        }
        return false;
    };
    return DevAppBridge;
}(AppBridge));
// NG2
// APP
var NOVO_ELEMENTS_PROVIDERS = [
    { provide: NovoDragulaService, useClass: NovoDragulaService },
    { provide: NovoModalRef, useClass: NovoModalRef },
    { provide: NovoModalService, useClass: NovoModalService },
    { provide: GooglePlacesService, useClass: GooglePlacesService },
    { provide: NovoToastService, useClass: NovoToastService },
    { provide: ComponentUtils, useClass: ComponentUtils },
    { provide: GlobalRef, useClass: BrowserGlobalRef },
    { provide: LocalStorageService, useClass: LocalStorageService },
    { provide: OptionsService, useClass: OptionsService },
    FieldInteractionApi,
    DateFormatService,
    Security,
];
var NovoElementProviders = /** @class */ (function () {
    function NovoElementProviders() {
    }
    /**
     * @return {?}
     */
    NovoElementProviders.forRoot = function () {
        return {
            ngModule: NovoElementProviders,
            providers: NOVO_ELEMENTS_PROVIDERS.slice()
        };
    };
    /**
     * @return {?}
     */
    NovoElementProviders.forChild = function () {
        return {
            ngModule: NovoElementProviders
        };
    };
    return NovoElementProviders;
}());
NovoElementProviders.decorators = [
    { type: core.NgModule, args: [{
                imports: []
            },] },
];
/**
 * @nocollapse
 */
NovoElementProviders.ctorParameters = function () { return []; };
var PopOverContent = /** @class */ (function () {
    /**
     * @param {?} element
     * @param {?} cdr
     */
    function PopOverContent(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this.placement = 'top';
        this.animation = true;
        this.onCloseFromOutside = new core.EventEmitter();
        this.top = -10000;
        this.left = -10000;
        this.displayType = 'none';
        this.isHidden = false;
    }
    /**
     * @return {?}
     */
    PopOverContent.prototype.ngAfterViewInit = function () {
        this.show();
        this.cdr.detectChanges();
    };
    /**
     * @return {?}
     */
    PopOverContent.prototype.toggle = function () {
        if (this.isHidden) {
            this.show();
        }
        else {
            this.hide();
        }
    };
    /**
     * @return {?}
     */
    PopOverContent.prototype.show = function () {
        if (!this.popover || !this.popover.getElement()) {
            return;
        }
        var /** @type {?} */ p = this.positionElements(this.popover.getElement(), this.popoverDiv.nativeElement, this.placement);
        this.displayType = 'block';
        this.top = p.top;
        this.left = p.left;
        this.isHidden = false;
    };
    /**
     * @return {?}
     */
    PopOverContent.prototype.hide = function () {
        this.top = -10000;
        this.left = -10000;
        this.isHidden = true;
        this.popover.hide();
    };
    /**
     * @return {?}
     */
    PopOverContent.prototype.hideFromPopover = function () {
        this.top = -10000;
        this.left = -10000;
    };
    /**
     * @param {?} hostEl
     * @param {?} targetEl
     * @param {?} positionStr
     * @param {?=} appendToBody
     * @return {?}
     */
    PopOverContent.prototype.positionElements = function (hostEl, targetEl, positionStr, appendToBody) {
        if (appendToBody === void 0) { appendToBody = false; }
        var /** @type {?} */ positionStrParts = positionStr.split('-');
        var /** @type {?} */ mainSide = this.effectivePlacement = this.getEffectivePlacement(positionStrParts[0] || 'right', hostEl, targetEl);
        var /** @type {?} */ orientation = this.effectiveAlignment = positionStrParts[1] || 'center';
        var /** @type {?} */ hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);
        var /** @type {?} */ targetElWidth = targetEl.offsetWidth;
        var /** @type {?} */ targetElHeight = targetEl.offsetHeight;
        var /** @type {?} */ shiftWidth = {
            center: function () {
                return hostElPos.left + (hostElPos.width - targetElWidth) / 2;
            },
            right: function () {
                return hostElPos.left;
            },
            left: function () {
                return hostElPos.left + (hostElPos.width - targetElWidth);
            }
        };
        var /** @type {?} */ shiftHeight = {
            center: function () {
                return hostElPos.top + (hostElPos.height - targetElHeight) / 2;
            },
            bottom: function () {
                return hostElPos.top;
            },
            top: function () {
                return hostElPos.top + (hostElPos.height - targetElHeight);
            }
        };
        var /** @type {?} */ targetElPos;
        switch (mainSide) {
            case 'right':
                targetElPos = {
                    top: shiftHeight[orientation](),
                    left: hostElPos.left + hostElPos.width
                };
                break;
            case 'left':
                targetElPos = {
                    top: shiftHeight[orientation](),
                    left: hostElPos.left - targetElWidth
                };
                break;
            case 'bottom':
                targetElPos = {
                    top: hostElPos.top + hostElPos.height,
                    left: shiftWidth[orientation]()
                };
                break;
            default:
                targetElPos = {
                    top: hostElPos.top - targetElHeight,
                    left: shiftWidth[orientation]()
                };
                break;
        }
        return targetElPos;
    };
    /**
     * @param {?} nativeEl
     * @return {?}
     */
    PopOverContent.prototype.position = function (nativeEl) {
        var /** @type {?} */ offsetParentBCR = { top: 0, left: 0 };
        var /** @type {?} */ elBCR = this.offset(nativeEl);
        var /** @type {?} */ offsetParentEl = this.parentOffsetEl(nativeEl);
        if (offsetParentEl !== window.document) {
            offsetParentBCR = this.offset(offsetParentEl);
            offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
            offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
        }
        var /** @type {?} */ boundingClientRect = nativeEl.getBoundingClientRect();
        return {
            width: boundingClientRect.width || nativeEl.offsetWidth,
            height: boundingClientRect.height || nativeEl.offsetHeight,
            top: elBCR.top - offsetParentBCR.top,
            left: elBCR.left - offsetParentBCR.left
        };
    };
    /**
     * @param {?} nativeEl
     * @return {?}
     */
    PopOverContent.prototype.offset = function (nativeEl) {
        var /** @type {?} */ boundingClientRect = nativeEl.getBoundingClientRect();
        return {
            width: boundingClientRect.width || nativeEl.offsetWidth,
            height: boundingClientRect.height || nativeEl.offsetHeight,
            top: boundingClientRect.top + (window.pageYOffset || window.document.documentElement.scrollTop),
            left: boundingClientRect.left + (window.pageXOffset || window.document.documentElement.scrollLeft)
        };
    };
    /**
     * @param {?} nativeEl
     * @param {?} cssProp
     * @return {?}
     */
    PopOverContent.prototype.getStyle = function (nativeEl, cssProp) {
        if (((nativeEl)).currentStyle) {
            return ((nativeEl)).currentStyle[cssProp];
        }
        if (window.getComputedStyle) {
            return ((window.getComputedStyle))(nativeEl)[cssProp];
        }
        return ((nativeEl.style))[cssProp];
    };
    /**
     * @param {?} nativeEl
     * @return {?}
     */
    PopOverContent.prototype.isStaticPositioned = function (nativeEl) {
        return (this.getStyle(nativeEl, 'position') || 'static') === 'static';
    };
    /**
     * @param {?} nativeEl
     * @return {?}
     */
    PopOverContent.prototype.parentOffsetEl = function (nativeEl) {
        var /** @type {?} */ offsetParent = nativeEl.offsetParent || window.document;
        while (offsetParent && offsetParent !== window.document && this.isStaticPositioned(offsetParent)) {
            offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || window.document;
    };
    /**
     * @param {?} desiredPlacement
     * @param {?} hostElement
     * @param {?} targetElement
     * @return {?}
     */
    PopOverContent.prototype.getEffectivePlacement = function (desiredPlacement, hostElement, targetElement) {
        var /** @type {?} */ hostElBoundingRect = hostElement.getBoundingClientRect();
        if (desiredPlacement === 'top' && hostElBoundingRect.top - targetElement.offsetHeight < 0) {
            return 'bottom';
        }
        if (desiredPlacement === 'bottom' && hostElBoundingRect.bottom + targetElement.offsetHeight > window.innerHeight) {
            return 'top';
        }
        if (desiredPlacement === 'left' && hostElBoundingRect.left - targetElement.offsetWidth < 0) {
            return 'right';
        }
        if (desiredPlacement === 'right' && hostElBoundingRect.right + targetElement.offsetWidth > window.innerWidth) {
            return 'left';
        }
        return desiredPlacement;
    };
    return PopOverContent;
}());
PopOverContent.decorators = [
    { type: core.Component, args: [{
                selector: 'popover-content',
                template: "\n        <div #popoverDiv\n            class=\"popover {{ effectivePlacement }}\"\n            [style.top]=\"top + 'px'\"\n            [style.left]=\"left + 'px'\"\n            [class.fade]=\"animation\"\n            style=\"display: block\"\n            role=\"popover\">\n            <div class=\"arrow {{effectiveAlignment}}\"></div>\n            <h4 class=\"popover-title\" [hidden]=\"!title\">{{ title }}</h4>\n            <div class=\"popover-content\">\n                <ng-content></ng-content>\n                <div class=\"popover-content-text\">{{ content }}</div>\n            </div>\n        </div>\n    "
            },] },
];
/**
 * @nocollapse
 */
PopOverContent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.ChangeDetectorRef, },
]; };
PopOverContent.propDecorators = {
    'content': [{ type: core.Input },],
    'placement': [{ type: core.Input },],
    'title': [{ type: core.Input },],
    'animation': [{ type: core.Input },],
    'popoverDiv': [{ type: core.ViewChild, args: ['popoverDiv',] },],
};
// NG2
var PopOverDirective = /** @class */ (function () {
    /**
     * @param {?} viewContainerRef
     * @param {?} resolver
     */
    function PopOverDirective(viewContainerRef, resolver) {
        this.viewContainerRef = viewContainerRef;
        this.resolver = resolver;
        this.PopoverComponent = PopOverContent;
        this.popoverOnHover = false;
        this.popoverDismissTimeout = 0;
        this.onShown = new core.EventEmitter();
        this.onHidden = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    PopOverDirective.prototype.showOrHideOnClick = function () {
        if (this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.toggle();
    };
    /**
     * @return {?}
     */
    PopOverDirective.prototype.showOnHover = function () {
        if (!this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.show();
    };
    /**
     * @return {?}
     */
    PopOverDirective.prototype.hideOnHover = function () {
        if (!this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.hide();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PopOverDirective.prototype.ngOnChanges = function (changes) {
        if (changes['popoverDisabled']) {
            if (changes['popoverDisabled'].currentValue) {
                this.hide();
            }
        }
        if (changes['popoverAlways']) {
            if (changes['popoverAlways'].currentValue) {
                this.show();
            }
        }
    };
    /**
     * @return {?}
     */
    PopOverDirective.prototype.toggle = function () {
        if (!this.visible) {
            this.show();
        }
        else {
            this.hide();
        }
    };
    /**
     * @return {?}
     */
    PopOverDirective.prototype.show = function () {
        var _this = this;
        if (this.visible) {
            return;
        }
        this.visible = true;
        if (typeof this.content === 'string') {
            var /** @type {?} */ factory = this.resolver.resolveComponentFactory(this.PopoverComponent);
            if (!this.visible) {
                return;
            }
            this.popover = this.viewContainerRef.createComponent(factory);
            var /** @type {?} */ popover = (this.popover.instance);
            popover.popover = this;
            popover.content = /** @type {?} */ (this.content);
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            popover.onCloseFromOutside.subscribe(function () { return _this.hide(); });
            if (this.popoverDismissTimeout > 0) {
                setTimeout(function () { return _this.hide(); }, this.popoverDismissTimeout);
            }
        }
        else {
            var /** @type {?} */ popover = (this.content);
            popover.popover = this;
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            popover.onCloseFromOutside.subscribe(function () { return _this.hide(); });
            if (this.popoverDismissTimeout > 0) {
                setTimeout(function () { return _this.hide(); }, this.popoverDismissTimeout);
            }
            popover.show();
        }
        this.onShown.emit(this);
    };
    /**
     * @return {?}
     */
    PopOverDirective.prototype.hide = function () {
        if (!this.visible) {
            return;
        }
        this.visible = false;
        if (this.popover) {
            this.popover.destroy();
        }
        if (this.content instanceof PopOverContent) {
            ((this.content)).hideFromPopover();
        }
        this.onHidden.emit(this);
    };
    /**
     * @return {?}
     */
    PopOverDirective.prototype.getElement = function () {
        return this.viewContainerRef.element.nativeElement;
    };
    return PopOverDirective;
}());
PopOverDirective.decorators = [
    { type: core.Directive, args: [{
                selector: '[popover]'
            },] },
];
/**
 * @nocollapse
 */
PopOverDirective.ctorParameters = function () { return [
    { type: core.ViewContainerRef, },
    { type: core.ComponentFactoryResolver, },
]; };
PopOverDirective.propDecorators = {
    'content': [{ type: core.Input, args: ['popover',] },],
    'popoverDisabled': [{ type: core.Input },],
    'popoverAlways': [{ type: core.Input },],
    'popoverAnimation': [{ type: core.Input },],
    'popoverPlacement': [{ type: core.Input },],
    'popoverTitle': [{ type: core.Input },],
    'popoverOnHover': [{ type: core.Input },],
    'popoverDismissTimeout': [{ type: core.Input },],
    'onShown': [{ type: core.Output },],
    'onHidden': [{ type: core.Output },],
    'showOrHideOnClick': [{ type: core.HostListener, args: ['click',] },],
    'showOnHover': [{ type: core.HostListener, args: ['focusin',] }, { type: core.HostListener, args: ['mouseenter',] },],
    'hideOnHover': [{ type: core.HostListener, args: ['focusout',] }, { type: core.HostListener, args: ['mouseleave',] },],
};
// NG2
// APP
var NovoPopOverModule = /** @class */ (function () {
    function NovoPopOverModule() {
    }
    return NovoPopOverModule;
}());
NovoPopOverModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [PopOverContent, PopOverDirective],
                exports: [PopOverContent, PopOverDirective],
                entryComponents: [PopOverContent]
            },] },
];
/**
 * @nocollapse
 */
NovoPopOverModule.ctorParameters = function () { return []; };
// NG2
var PlacesListComponent = /** @class */ (function () {
    /**
     * @param {?} platformId
     * @param {?} _elmRef
     * @param {?} _global
     * @param {?} _googlePlacesService
     */
    function PlacesListComponent(platformId, _elmRef, _global, _googlePlacesService) {
        this.platformId = platformId;
        this._elmRef = _elmRef;
        this._global = _global;
        this._googlePlacesService = _googlePlacesService;
        this.term = '';
        this.termChange = new core.EventEmitter();
        this.select = new core.EventEmitter();
        this.locationInput = '';
        this.gettingCurrentLocationFlag = false;
        this.dropdownOpen = false;
        this.recentDropdownOpen = false;
        this.queryItems = [];
        this.isSettingsError = false;
        this.settingsErrorMsg = '';
        this.settings = {};
        this.moduleinit = false;
        this.selectedDataIndex = -1;
        this.recentSearchData = [];
        this.userSelectedOption = '';
        this.defaultSettings = {
            geoPredictionServerUrl: '',
            geoLatLangServiceUrl: '',
            geoLocDetailServerUrl: '',
            geoCountryRestriction: [],
            geoTypes: [],
            geoLocation: [],
            geoRadius: 0,
            serverResponseListHierarchy: [],
            serverResponseatLangHierarchy: [],
            serverResponseDetailHierarchy: [],
            resOnSearchButtonClickOnly: false,
            useGoogleGeoApi: true,
            inputPlaceholderText: 'Enter Area Name',
            inputString: '',
            showSearchButton: true,
            showRecentSearch: true,
            showCurrentLocation: true,
            recentStorageName: 'recentSearches',
            noOfRecentSearchSave: 5,
            currentLocIconUrl: '',
            searchIconUrl: '',
            locationIconUrl: ''
        };
    }
    /**
     * @return {?}
     */
    PlacesListComponent.prototype.ngOnInit = function () {
        if (!this.moduleinit) {
            this.moduleInit();
        }
    };
    /**
     * @return {?}
     */
    PlacesListComponent.prototype.ngOnChanges = function () {
        this.moduleinit = true;
        this.moduleInit();
        this.searchinputCallback(null);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PlacesListComponent.prototype.searchinputClickCallback = function (event) {
        event.target.select();
        this.searchinputCallback(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PlacesListComponent.prototype.searchinputCallback = function (event) {
        var /** @type {?} */ inputVal = this.locationInput;
        if (inputVal) {
            this.getListQuery(inputVal);
        }
        else {
            this.queryItems = [];
            if (this.userSelectedOption) {
                this.userQuerySubmit('false');
            }
            this.userSelectedOption = '';
            if (this.settings.showRecentSearch) {
                this.showRecentSearch();
            }
            else {
                this.dropdownOpen = false;
            }
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    PlacesListComponent.prototype.activeListNode = function (index$$1) {
        for (var /** @type {?} */ i = 0; i < this.queryItems.length; i++) {
            if (index$$1 === i) {
                this.queryItems[i].active = true;
                this.selectedDataIndex = index$$1;
            }
            else {
                this.queryItems[i].active = false;
            }
        }
    };
    /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    PlacesListComponent.prototype.selectedListNode = function (event, index$$1) {
        this.dropdownOpen = false;
        if (this.recentDropdownOpen) {
            this.setRecentLocation(this.queryItems[index$$1]);
        }
        else {
            this.getPlaceLocationInfo(this.queryItems[index$$1]);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PlacesListComponent.prototype.closeAutocomplete = function (event) {
        if (!this._elmRef.nativeElement.contains(event.target)) {
            this.selectedDataIndex = -1;
            this.dropdownOpen = false;
        }
    };
    /**
     * @param {?=} selectedOption
     * @return {?}
     */
    PlacesListComponent.prototype.userQuerySubmit = function (selectedOption) {
        var /** @type {?} */ _userOption = selectedOption === 'false' ? '' : this.userSelectedOption;
        if (_userOption) {
            this.select.emit(this.userSelectedOption);
        }
        else {
            //this.select.emit(false);
        }
    };
    /**
     * @return {?}
     */
    PlacesListComponent.prototype.currentLocationSelected = function () {
        var _this = this;
        if (common.isPlatformBrowser(this.platformId)) {
            this.gettingCurrentLocationFlag = true;
            this.dropdownOpen = false;
            this._googlePlacesService.getGeoCurrentLocation().then(function (result) {
                if (!result) {
                    _this.gettingCurrentLocationFlag = false;
                }
                else {
                    _this.getCurrentLocationInfo(result);
                }
            });
        }
    };
    /**
     * @return {?}
     */
    PlacesListComponent.prototype.moduleInit = function () {
        this.settings = this.setUserSettings();
        //condition to check if Radius is set without location detail.
        if (this.settings.geoRadius) {
            if (this.settings.geoLocation.length !== 2) {
                this.isSettingsError = true;
                this.settingsErrorMsg = this.settingsErrorMsg +
                    'Radius should be used with GeoLocation. Please use "geoLocation" key to set lat and lng. ';
            }
        }
        //condition to check if lat and lng is set and radious is not set then it will set to 20,000KM by default
        if ((this.settings.geoLocation.length === 2) && !this.settings.geoRadius) {
            this.settings.geoRadius = 20000000;
        }
        if (this.settings.showRecentSearch) {
            this.getRecentLocations();
        }
        if (!this.settings.useGoogleGeoApi) {
            if (!this.settings.geoPredictionServerUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg = this.settingsErrorMsg +
                    'Prediction custom server url is not defined. Please use "geoPredictionServerUrl" key to set. ';
            }
            if (!this.settings.geoLatLangServiceUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg = this.settingsErrorMsg +
                    'Latitude and longitude custom server url is not defined. Please use "geoLatLangServiceUrl" key to set. ';
            }
            if (!this.settings.geoLocDetailServerUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg = this.settingsErrorMsg +
                    'Location detail custom server url is not defined. Please use "geoLocDetailServerUrl" key to set. ';
            }
        }
        this.locationInput = this.term;
    };
    /**
     * @return {?}
     */
    PlacesListComponent.prototype.processSearchQuery = function () {
        if (this.queryItems.length) {
            if (this.selectedDataIndex > -1) {
                this.selectedListNode(null, this.selectedDataIndex);
            }
            else {
                this.selectedListNode(null, 0);
            }
        }
    };
    /**
     * @return {?}
     */
    PlacesListComponent.prototype.setUserSettings = function () {
        var /** @type {?} */ _tempObj = {};
        if (this.userSettings && typeof (this.userSettings) === 'object') {
            var /** @type {?} */ keys = Object.keys(this.defaultSettings);
            for (var _d = 0, keys_1 = keys; _d < keys_1.length; _d++) {
                var value = keys_1[_d];
                _tempObj[value] = (this.userSettings[value] !== undefined) ? this.userSettings[value] : this.defaultSettings[value];
            }
            return _tempObj;
        }
        else {
            return this.defaultSettings;
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PlacesListComponent.prototype.getListQuery = function (value) {
        var _this = this;
        this.recentDropdownOpen = false;
        if (this.settings.useGoogleGeoApi) {
            var /** @type {?} */ _tempParams = {
                'query': value,
                'countryRestriction': this.settings.geoCountryRestriction,
                'geoTypes': this.settings.geoTypes
            };
            if (this.settings.geoLocation.length === 2) {
                _tempParams.geoLocation = this.settings.geoLocation;
                _tempParams.radius = this.settings.geoRadius;
            }
            this._googlePlacesService.getGeoPrediction(_tempParams).then(function (result) {
                _this.updateListItem(result);
            });
        }
        else {
            this._googlePlacesService.getPredictions(this.settings.geoPredictionServerUrl, value).then(function (result) {
                result = _this.extractServerList(_this.settings.serverResponseListHierarchy, result);
                _this.updateListItem(result);
            });
        }
    };
    /**
     * @param {?} arrayList
     * @param {?} data
     * @return {?}
     */
    PlacesListComponent.prototype.extractServerList = function (arrayList, data) {
        if (arrayList.length) {
            var /** @type {?} */ _tempData = data;
            for (var _d = 0, arrayList_1 = arrayList; _d < arrayList_1.length; _d++) {
                var key = arrayList_1[_d];
                _tempData = _tempData[key];
            }
            return _tempData;
        }
        else {
            return data;
        }
    };
    /**
     * @param {?} listData
     * @return {?}
     */
    PlacesListComponent.prototype.updateListItem = function (listData) {
        this.queryItems = listData ? listData : [];
        this.dropdownOpen = true;
    };
    /**
     * @return {?}
     */
    PlacesListComponent.prototype.showRecentSearch = function () {
        var _this = this;
        this.recentDropdownOpen = true;
        this.dropdownOpen = true;
        this._googlePlacesService.getRecentList(this.settings.recentStorageName).then(function (result) {
            if (result) {
                _this.queryItems = result;
            }
            else {
                _this.queryItems = [];
            }
        });
    };
    /**
     * @param {?} latlng
     * @return {?}
     */
    PlacesListComponent.prototype.getCurrentLocationInfo = function (latlng) {
        var _this = this;
        if (this.settings.useGoogleGeoApi) {
            this._googlePlacesService.getGeoLatLngDetail(latlng).then(function (result) {
                if (result) {
                    _this.setRecentLocation(result);
                }
                _this.gettingCurrentLocationFlag = false;
            });
        }
        else {
            this._googlePlacesService.getLatLngDetail(this.settings.geoLatLangServiceUrl, latlng.lat, latlng.lng).then(function (result) {
                if (result) {
                    result = _this.extractServerList(_this.settings.serverResponseatLangHierarchy, result);
                    _this.setRecentLocation(result);
                }
                _this.gettingCurrentLocationFlag = false;
            });
        }
    };
    /**
     * @param {?} selectedData
     * @return {?}
     */
    PlacesListComponent.prototype.getPlaceLocationInfo = function (selectedData) {
        var _this = this;
        if (this.settings.useGoogleGeoApi) {
            this._googlePlacesService.getGeoPlaceDetail(selectedData.place_id).then(function (data) {
                if (data) {
                    _this.setRecentLocation(data);
                }
            });
        }
        else {
            this._googlePlacesService.getPlaceDetails(this.settings.geoLocDetailServerUrl, selectedData.place_id).then(function (result) {
                if (result) {
                    result = _this.extractServerList(_this.settings.serverResponseDetailHierarchy, result);
                    _this.setRecentLocation(result);
                }
            });
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PlacesListComponent.prototype.setRecentLocation = function (data) {
        data = JSON.parse(JSON.stringify(data));
        data.description = data.description ? data.description : data.formatted_address;
        data.active = false;
        this.selectedDataIndex = -1;
        this.locationInput = data.description;
        if (this.settings.showRecentSearch) {
            this._googlePlacesService.addRecentList(this.settings.recentStorageName, data, this.settings.noOfRecentSearchSave);
            this.getRecentLocations();
        }
        this.userSelectedOption = data;
        //below code will execute only when user press enter or select any option selection and it emit a callback to the parent component.
        if (!this.settings.resOnSearchButtonClickOnly) {
            this.select.emit(data);
            this.termChange.emit(data);
        }
    };
    /**
     * @return {?}
     */
    PlacesListComponent.prototype.getRecentLocations = function () {
        var _this = this;
        this._googlePlacesService.getRecentList(this.settings.recentStorageName).then(function (data) {
            _this.recentSearchData = (data && data.length) ? data : [];
        });
    };
    return PlacesListComponent;
}());
PlacesListComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'google-places-list',
                template: "\n        <novo-list direction=\"vertical\">\n            <novo-list-item *ngFor=\"let data of queryItems;let $index = index\" (click)=\"selectedListNode($event, $index)\">\n                <item-header>\n                    <item-avatar icon=\"location\"></item-avatar>\n                    <item-title>{{data.structured_formatting?.main_text ? data.structured_formatting.main_text : data.description}}</item-title>\n                </item-header>\n                <item-content>{{data.structured_formatting?.secondary_text}}</item-content>\n            </novo-list-item>\n        </novo-list>\n    "
            },] },
];
/**
 * @nocollapse
 */
PlacesListComponent.ctorParameters = function () { return [
    { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },
    { type: core.ElementRef, },
    { type: GlobalRef, },
    { type: GooglePlacesService, },
]; };
PlacesListComponent.propDecorators = {
    'userSettings': [{ type: core.Input },],
    'term': [{ type: core.Input },],
    'termChange': [{ type: core.Output },],
    'select': [{ type: core.Output },],
};
var GooglePlacesModule = /** @class */ (function () {
    function GooglePlacesModule() {
    }
    return GooglePlacesModule;
}());
GooglePlacesModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [
                    PlacesListComponent
                ],
                imports: [
                    common.CommonModule,
                    http.HttpModule,
                    forms.FormsModule,
                    NovoListModule
                ],
                exports: [
                    PlacesListComponent
                ],
                providers: [
                    { provide: GooglePlacesService, useClass: GooglePlacesService },
                ]
            },] },
];
/**
 * @nocollapse
 */
GooglePlacesModule.ctorParameters = function () { return []; };
// NG2
// APP
var NovoElementsModule = /** @class */ (function () {
    function NovoElementsModule() {
    }
    return NovoElementsModule;
}());
NovoElementsModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [forms.ReactiveFormsModule],
                exports: [
                    NovoPipesModule,
                    NovoButtonModule,
                    NovoLoadingModule,
                    NovoCardModule,
                    NovoCalendarModule,
                    NovoToastModule,
                    NovoTooltipModule,
                    NovoHeaderModule,
                    NovoTabModule,
                    NovoTilesModule,
                    NovoModalModule,
                    NovoQuickNoteModule,
                    NovoRadioModule,
                    NovoDropdownModule,
                    NovoSelectModule,
                    NovoListModule,
                    NovoSwitchModule,
                    NovoDragulaModule,
                    NovoSliderModule,
                    NovoPickerModule,
                    NovoChipsModule,
                    NovoDatePickerModule,
                    NovoTimePickerModule,
                    NovoDateTimePickerModule,
                    NovoNovoCKEditorModule,
                    NovoTipWellModule,
                    NovoTableModule,
                    NovoTableExtrasModule,
                    NovoFormModule,
                    NovoFormExtrasModule,
                    NovoCategoryDropdownModule,
                    NovoMultiPickerModule,
                    NovoPopOverModule,
                    NovoDataTableModule,
                    NovoSimpleTableModule,
                    NovoSearchBoxModule,
                    NovoOverlayModule,
                    GooglePlacesModule,
                    NovoValueModule,
                    NovoAceEditorModule,
                    NovoIconModule,
                    UnlessModule,
                    NovoCommonModule,
                ],
                providers: [
                    { provide: ComponentUtils, useClass: ComponentUtils },
                    { provide: DateFormatService, useClass: DateFormatService },
                    { provide: NovoLabelService, useClass: NovoLabelService },
                    { provide: NovoDragulaService, useClass: NovoDragulaService },
                    { provide: GooglePlacesService, useClass: GooglePlacesService },
                    { provide: GlobalRef, useClass: BrowserGlobalRef },
                    { provide: LocalStorageService, useClass: LocalStorageService },
                    { provide: OptionsService, useClass: OptionsService },
                    { provide: FormUtils, useClass: FormUtils },
                ],
            },] },
];
/**
 * @nocollapse
 */
NovoElementsModule.ctorParameters = function () { return []; };

exports.NovoAceEditorModule = NovoAceEditorModule;
exports.NovoPipesModule = NovoPipesModule;
exports.NovoButtonModule = NovoButtonModule;
exports.NovoLoadingModule = NovoLoadingModule;
exports.NovoCardModule = NovoCardModule;
exports.NovoCalendarModule = NovoCalendarModule;
exports.NovoToastModule = NovoToastModule;
exports.NovoTooltipModule = NovoTooltipModule;
exports.NovoHeaderModule = NovoHeaderModule;
exports.NovoTabModule = NovoTabModule;
exports.NovoTilesModule = NovoTilesModule;
exports.NovoModalModule = NovoModalModule;
exports.NovoQuickNoteModule = NovoQuickNoteModule;
exports.NovoRadioModule = NovoRadioModule;
exports.NovoDropdownModule = NovoDropdownModule;
exports.NovoSelectModule = NovoSelectModule;
exports.NovoListModule = NovoListModule;
exports.NovoSwitchModule = NovoSwitchModule;
exports.NovoSearchBoxModule = NovoSearchBoxModule;
exports.NovoDragulaModule = NovoDragulaModule;
exports.NovoSliderModule = NovoSliderModule;
exports.NovoPickerModule = NovoPickerModule;
exports.NovoChipsModule = NovoChipsModule;
exports.NovoDatePickerModule = NovoDatePickerModule;
exports.NovoTimePickerModule = NovoTimePickerModule;
exports.NovoDateTimePickerModule = NovoDateTimePickerModule;
exports.NovoNovoCKEditorModule = NovoNovoCKEditorModule;
exports.NovoTipWellModule = NovoTipWellModule;
exports.NovoTableModule = NovoTableModule;
exports.NovoValueModule = NovoValueModule;
exports.NovoTableMode = NovoTableMode;
exports.NovoIconModule = NovoIconModule;
exports.NovoTableExtrasModule = NovoTableExtrasModule;
exports.NovoFormModule = NovoFormModule;
exports.NovoFormExtrasModule = NovoFormExtrasModule;
exports.NovoCategoryDropdownModule = NovoCategoryDropdownModule;
exports.NovoMultiPickerModule = NovoMultiPickerModule;
exports.UnlessModule = UnlessModule;
exports.NovoDataTableModule = NovoDataTableModule;
exports.RemoteDataTableService = RemoteDataTableService;
exports.StaticDataTableService = StaticDataTableService;
exports.NovoTable = NovoTable;
exports.NovoActivityTable = NovoActivityTable;
exports.NovoActivityTableActions = NovoActivityTableActions;
exports.NovoActivityTableCustomFilter = NovoActivityTableCustomFilter;
exports.NovoActivityTableEmptyMessage = NovoActivityTableEmptyMessage;
exports.NovoActivityTableNoResultsMessage = NovoActivityTableNoResultsMessage;
exports.NovoActivityTableCustomHeader = NovoActivityTableCustomHeader;
exports.NovoSimpleCell = NovoSimpleCell;
exports.NovoSimpleCheckboxCell = NovoSimpleCheckboxCell;
exports.NovoSimpleCheckboxHeaderCell = NovoSimpleCheckboxHeaderCell;
exports.NovoSimpleHeaderCell = NovoSimpleHeaderCell;
exports.NovoSimpleCellDef = NovoSimpleCellDef;
exports.NovoSimpleHeaderCellDef = NovoSimpleHeaderCellDef;
exports.NovoSimpleColumnDef = NovoSimpleColumnDef;
exports.NovoSimpleActionCell = NovoSimpleActionCell;
exports.NovoSimpleEmptyHeaderCell = NovoSimpleEmptyHeaderCell;
exports.NovoSimpleHeaderRow = NovoSimpleHeaderRow;
exports.NovoSimpleRow = NovoSimpleRow;
exports.NovoSimpleHeaderRowDef = NovoSimpleHeaderRowDef;
exports.NovoSimpleRowDef = NovoSimpleRowDef;
exports.NovoSimpleCellHeader = NovoSimpleCellHeader;
exports.NovoSimpleFilterFocus = NovoSimpleFilterFocus;
exports.NovoSortFilter = NovoSortFilter;
exports.NovoSelection = NovoSelection;
exports.NovoSimpleTablePagination = NovoSimpleTablePagination;
exports.ActivityTableDataSource = ActivityTableDataSource;
exports.RemoteActivityTableService = RemoteActivityTableService;
exports.StaticActivityTableService = StaticActivityTableService;
exports.ActivityTableRenderers = ActivityTableRenderers;
exports.NovoActivityTableState = NovoActivityTableState;
exports.NovoSimpleTableModule = NovoSimpleTableModule;
exports.NovoCommonModule = NovoCommonModule;
exports.NovoTableElement = NovoTableElement;
exports.NovoCalendarDateChangeElement = NovoCalendarDateChangeElement;
exports.NovoTemplate = NovoTemplate;
exports.NovoToastService = NovoToastService;
exports.NovoModalService = NovoModalService;
exports.NovoLabelService = NovoLabelService;
exports.NovoDragulaService = NovoDragulaService;
exports.GooglePlacesService = GooglePlacesService;
exports.CollectionEvent = CollectionEvent;
exports.ArrayCollection = ArrayCollection;
exports.PagedArrayCollection = PagedArrayCollection;
exports.NovoModalParams = NovoModalParams;
exports.NovoModalRef = NovoModalRef;
exports.QuickNoteResults = QuickNoteResults;
exports.PickerResults = PickerResults;
exports.BasePickerResults = BasePickerResults;
exports.EntityPickerResult = EntityPickerResult;
exports.EntityPickerResults = EntityPickerResults;
exports.DistributionListPickerResults = DistributionListPickerResults;
exports.SkillsSpecialtyPickerResults = SkillsSpecialtyPickerResults;
exports.ChecklistPickerResults = ChecklistPickerResults;
exports.GroupedMultiPickerResults = GroupedMultiPickerResults;
exports.BaseRenderer = BaseRenderer;
exports.DateCell = DateCell;
exports.PercentageCell = PercentageCell;
exports.NovoDropdownCell = NovoDropdownCell;
exports.FormValidators = FormValidators;
exports.FormUtils = FormUtils;
exports.Security = Security;
exports.OptionsService = OptionsService;
exports.NovoFile = NovoFile;
exports.BaseControl = BaseControl;
exports.ControlFactory = ControlFactory;
exports.AddressControl = AddressControl;
exports.CheckListControl = CheckListControl;
exports.CheckboxControl = CheckboxControl;
exports.DateControl = DateControl;
exports.DateTimeControl = DateTimeControl;
exports.EditorControl = EditorControl;
exports.AceEditorControl = AceEditorControl;
exports.FileControl = FileControl;
exports.NativeSelectControl = NativeSelectControl;
exports.PickerControl = PickerControl;
exports.AppendToBodyPickerControl = AppendToBodyPickerControl;
exports.TablePickerControl = TablePickerControl;
exports.QuickNoteControl = QuickNoteControl;
exports.RadioControl = RadioControl;
exports.ReadOnlyControl = ReadOnlyControl;
exports.SelectControl = SelectControl;
exports.TextAreaControl = TextAreaControl;
exports.TextBoxControl = TextBoxControl;
exports.TilesControl = TilesControl;
exports.TimeControl = TimeControl;
exports.GroupedControl = GroupedControl;
exports.NovoFormControl = NovoFormControl;
exports.NovoFormGroup = NovoFormGroup;
exports.NovoControlGroup = NovoControlGroup;
exports.FieldInteractionApi = FieldInteractionApi;
exports.NovoCheckListElement = NovoCheckListElement;
exports.OutsideClick = OutsideClick;
exports.KeyCodes = KeyCodes;
exports.Deferred = Deferred;
exports.COUNTRIES = COUNTRIES;
exports.getCountries = getCountries;
exports.getStateObjects = getStateObjects;
exports.getStates = getStates;
exports.findByCountryCode = findByCountryCode;
exports.findByCountryId = findByCountryId;
exports.findByCountryName = findByCountryName;
exports.Helpers = Helpers;
exports.ComponentUtils = ComponentUtils;
exports.AppBridge = AppBridge;
exports.AppBridgeHandler = AppBridgeHandler;
exports.AppBridgeService = AppBridgeService;
exports.DevAppBridge = DevAppBridge;
exports.DevAppBridgeService = DevAppBridgeService;
exports.NovoElementProviders = NovoElementProviders;
exports.PluralPipe = PluralPipe;
exports.DecodeURIPipe = DecodeURIPipe;
exports.GroupByPipe = GroupByPipe;
exports.RenderPipe = RenderPipe;
exports.NovoElementsModule = NovoElementsModule;
exports.NovoListElement = NovoListElement;
exports.NOVO_VALUE_TYPE = NOVO_VALUE_TYPE;
exports.NOVO_VALUE_THEME = NOVO_VALUE_THEME;
exports.CalendarEventResponse = CalendarEventResponse;
exports.getWeekViewEventOffset = getWeekViewEventOffset;
exports.getWeekViewHeader = getWeekViewHeader;
exports.getWeekView = getWeekView;
exports.getMonthView = getMonthView;
exports.getDayView = getDayView;
exports.getDayViewHourGrid = getDayViewHourGrid;
exports.ɵl = NovoAceEditor;
exports.ɵm = NovoButtonElement;
exports.ɵs = NovoEventTypeLegendElement;
exports.ɵbc = NovoCalendarAllDayEventElement;
exports.ɵba = NovoCalendarDayEventElement;
exports.ɵz = NovoCalendarDayViewElement;
exports.ɵbb = NovoCalendarHourSegmentElement;
exports.ɵv = NovoCalendarMonthDayElement;
exports.ɵu = NovoCalendarMonthHeaderElement;
exports.ɵt = NovoCalendarMonthViewElement;
exports.ɵbe = DayOfMonthPipe;
exports.ɵbj = EndOfWeekDisplayPipe;
exports.ɵbi = HoursPipe;
exports.ɵbf = MonthPipe;
exports.ɵbg = MonthDayPipe;
exports.ɵbd = WeekdayPipe;
exports.ɵbh = YearPipe;
exports.ɵy = NovoCalendarWeekEventElement;
exports.ɵx = NovoCalendarWeekHeaderElement;
exports.ɵw = NovoCalendarWeekViewElement;
exports.ɵq = CardActionsElement;
exports.ɵr = CardElement;
exports.ɵeb = NovoCategoryDropdownElement;
exports.ɵcr = NovoChipElement;
exports.ɵcs = NovoChipsElement;
exports.ɵda = NovoCKEditorElement;
exports.ɵez = NovoDataTableCheckboxHeaderCell;
exports.ɵep = NovoDataTableCellHeader;
exports.ɵes = NovoDataTableHeaderCell;
exports.ɵek = NovoDataTableHeaderCellDef;
exports.ɵet = NovoDataTableCell;
exports.ɵex = NovoDataTableCheckboxCell;
exports.ɵem = NovoDataTableCellDef;
exports.ɵel = NovoDataTableColumnDef;
exports.ɵey = NovoDataTable;
exports.ɵee = DataTableInterpolatePipe;
exports.ɵej = DateTableCurrencyRendererPipe;
exports.ɵef = DateTableDateRendererPipe;
exports.ɵeg = DateTableDateTimeRendererPipe;
exports.ɵei = DateTableNumberRendererPipe;
exports.ɵeh = DateTableTimeRendererPipe;
exports.ɵew = NovoDataTablePagination;
exports.ɵeu = NovoDataTableHeaderRow;
exports.ɵev = NovoDataTableRow;
exports.ɵen = NovoDataTableHeaderRowDef;
exports.ɵeo = NovoDataTableRowDef;
exports.ɵer = NovoDataTableSortFilter;
exports.ɵeq = DataTableState;
exports.ɵct = NovoDatePickerElement;
exports.ɵcu = NovoDatePickerInputElement;
exports.ɵcy = NovoDateTimePickerElement;
exports.ɵcz = NovoDateTimePickerInputElement;
exports.ɵcp = NovoDragulaElement;
exports.ɵca = NovoDropdownContainer;
exports.ɵcb = NovoDropdownElement;
exports.ɵcc = NovoItemElement;
exports.ɵce = NovoItemHeaderElement$1;
exports.ɵcd = NovoListElement$1;
exports.ɵdf = NovoAutoSize;
exports.ɵdh = NovoControlElement;
exports.ɵdg = NovoCustomControlContainerElement;
exports.ɵdj = NovoControlCustom;
exports.ɵdl = NovoDynamicFormElement;
exports.ɵdk = NovoFieldsetElement;
exports.ɵdi = NovoFieldsetHeaderElement;
exports.ɵdn = ControlConfirmModal;
exports.ɵdo = ControlPromptModal;
exports.ɵdm = NovoFormElement;
exports.ɵdc = NovoAddressElement;
exports.ɵdd = NovoCheckboxElement;
exports.ɵde = NovoFileInputElement;
exports.ɵbo = NovoHeaderComponent;
exports.ɵbl = NovoHeaderSpacer;
exports.ɵbn = NovoUtilActionComponent;
exports.ɵbm = NovoUtilsComponent;
exports.ɵea = NovoIconComponent;
exports.ɵe = NovoItemAvatarElement;
exports.ɵi = NovoItemContentElement;
exports.ɵh = NovoItemDateElement;
exports.ɵj = NovoItemEndElement;
exports.ɵg = NovoItemHeaderElement;
exports.ɵf = NovoItemTitleElement;
exports.ɵd = NovoListItemElement;
exports.ɵn = NovoLoadingElement;
exports.ɵo = NovoSpinnerElement;
exports.ɵa = NovoModalContainerElement;
exports.ɵb = NovoModalElement;
exports.ɵc = NovoModalNotificationElement;
exports.ɵec = NovoMultiPickerElement;
exports.ɵcg = DEFAULT_OVERLAY_SCROLL_STRATEGY;
exports.ɵci = DEFAULT_OVERLAY_SCROLL_STRATEGY_PROVIDER;
exports.ɵch = DEFAULT_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY;
exports.ɵcj = NovoOverlayTemplate;
exports.ɵcf = NovoOverlayModule;
exports.ɵcm = NovoPickerElement;
exports.ɵcn = NovoPickerContainer;
exports.ɵfh = PlacesListComponent;
exports.ɵfg = GooglePlacesModule;
exports.ɵff = PopOverDirective;
exports.ɵfd = NovoPopOverModule;
exports.ɵfe = PopOverContent;
exports.ɵbx = QuickNoteElement;
exports.ɵbz = NovoRadioElement;
exports.ɵby = NovoRadioGroup;
exports.ɵco = NovoSearchBoxElement;
exports.ɵck = NovoSelectElement;
exports.ɵcq = NovoSliderElement;
exports.ɵcl = NovoSwitchElement;
exports.ɵds = NovoTableKeepFilterFocus;
exports.ɵdt = Pagination;
exports.ɵdu = RowDetails;
exports.ɵdr = NovoTableActionsElement;
exports.ɵdv = TableCell;
exports.ɵdw = TableFilter;
exports.ɵdq = NovoTableFooterElement;
exports.ɵdp = NovoTableHeaderElement;
exports.ɵdx = ThOrderable;
exports.ɵdy = ThSortable;
exports.ɵbu = NovoNavContentElement;
exports.ɵbp = NovoNavElement;
exports.ɵbv = NovoNavHeaderElement;
exports.ɵbt = NovoNavOutletElement;
exports.ɵbr = NovoTabButtonElement;
exports.ɵbq = NovoTabElement;
exports.ɵbs = NovoTabLinkElement;
exports.ɵbw = NovoTilesElement;
exports.ɵcv = NovoTimePickerElement;
exports.ɵcw = NovoTimePickerInputElement;
exports.ɵdb = NovoTipWellElement;
exports.ɵbk = NovoToastElement;
exports.ɵp = TooltipDirective;
exports.ɵed = Unless;
exports.ɵdz = EntityList;
exports.ɵk = NovoValueElement;
exports.ɵcx = DateFormatService;
exports.ɵfb = BrowserGlobalRef;
exports.ɵfa = GlobalRef;
exports.ɵfc = LocalStorageService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=novo-elements.umd.js.map
